<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java 和 Python 异构模块数据传输</title>
    <url>/2023/04/18/WebBackend/Java%20%E5%92%8C%20Python%20%E5%BC%82%E6%9E%84%E6%A8%A1%E5%9D%97%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/</url>
    <content><![CDATA[<h1 id="Java运行Python脚本，把数据放在参数里传递"><a href="#Java运行Python脚本，把数据放在参数里传递" class="headerlink" title="Java运行Python脚本，把数据放在参数里传递"></a>Java运行Python脚本，把数据放在参数里传递</h1><h1 id="通过第三方文件做中转站"><a href="#通过第三方文件做中转站" class="headerlink" title="通过第三方文件做中转站"></a>通过第三方文件做中转站</h1><h1 id="消息队列方式"><a href="#消息队列方式" class="headerlink" title="消息队列方式"></a>消息队列方式</h1><p>流量消峰 应用解耦 异步处理</p>
<h1 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h1><ol>
<li><a href="https://blog.csdn.net/pig2guang/article/details/84382375">异构模块之间如何数据传输？举例java和python两种不同语言编写的模块之间数据交互的几种方式（入门消息队列RabbitMQ）_不同开发语言怎么传输文件_原来浙小商啊的博客-CSDN博客</a></li>
<li><a href="https://www.jianshu.com/p/5c2d8af2c78e"># RabbitMQ——第一篇：RabbitMQ介绍</a></li>
</ol>
]]></content>
      <categories>
        <category>WebBackend</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>DNS记录类型</title>
    <url>/2023/05/10/server/DNS%E8%AE%B0%E5%BD%95%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<ol>
<li><p><code>A</code> 记录（Address Record）：将一个域名映射到一个IPv4地址。</p>
</li>
<li><p><code>AAAA</code> 记录（Quad A Record）：将一个域名映射到一个IPv6地址。与A记录类似，只是它们适用于IPv6地址而不是IPv4地址。</p>
</li>
<li><p><code>CNAME</code> 记录（Canonical Name Record）：将一个域名映射到另一个域名。它允许你创建别名，指向其他的DNS记录。</p>
</li>
<li><p><code>MX</code> 记录（Mail Exchange Record）：定义用于处理电子邮件的服务器。当你发送一封邮件到一个域名时，MX记录告诉邮件服务器应该向哪个服务器发送邮件。</p>
</li>
<li><p><code>TXT</code> 记录（Text Record）：提供关于域名的任何文本信息。这种类型的记录经常被用于各种目的，包括SPF记录（用于防止垃圾邮件）和域名验证（例如，Google的网站所有权验证）。</p>
</li>
<li><p><code>SPF</code> 记录（Sender Policy Framework Record）：用来防止垃圾邮件。它指定了哪些邮件服务器被允许发送你的域名的邮件。</p>
</li>
<li><p><code>SRV</code> 记录（Service Record）：定义提供特定服务的服务器。例如，SRV记录可以用来指定用于音频和视频通话的服务器。</p>
</li>
<li><p><code>CAA</code> 记录（Certification Authority Authorization Record）：指定哪些证书颁发机构（CA）被允许为一个域名颁发SSL&#x2F;TLS证书。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>server</category>
      </categories>
      <tags>
        <tag>DNS</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker</title>
    <url>/2023/07/09/server/Docker/</url>
    <content><![CDATA[<h2 id="克隆与运行"><a href="#克隆与运行" class="headerlink" title="克隆与运行"></a>克隆与运行</h2><p><strong>克隆Ubuntu为例：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">docker commit c7b1021e0e3c ubuntu-tem<br><br>docker run --name my_container -d -p 8002:22 ubuntu-tem /usr/sbin/sshd -D<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>server</category>
      </categories>
  </entry>
  <entry>
    <title>Linux备忘录</title>
    <url>/2022/10/17/server/Linux%E5%A4%87%E5%BF%98%E5%BD%95/</url>
    <content><![CDATA[<h3 id="安装命令"><a href="#安装命令" class="headerlink" title="安装命令"></a>安装命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">-bash: ar: command not found<br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Debian</span><br>apt-get install binutils-aarch64-linux-gnu<br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Ubuntu</span><br>apt-get install binutils-aarch64-linux-gnu<br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Arch Linux</span><br>pacman -S binutils-aarch64-linux-gnu<br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Kali Linux</span><br>apt-get install binutils-aarch64-linux-gnu<br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">CentOS</span><br>yum install binutils-aarch64-linux-gnu<br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Fedora</span><br>dnf install binutils-aarch64-linux-gnu<br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Raspbian</span><br>apt-get install binutils-aarch64-linux-gnu<br></code></pre></td></tr></table></figure>


<h2 id="VI编辑器"><a href="#VI编辑器" class="headerlink" title="VI编辑器"></a>VI编辑器</h2><p>vi保存命令。</p>
<blockquote>
<p>按ESC键 跳到命令模式，然后：</p>
<p>:w 保存文件但不退出vi</p>
<p>:w file 将修改另外保存到file中，不退出vi</p>
<p>:w! 强制保存，不推出vi</p>
<p>:wq 保存文件并退出vi</p>
<p>:wq! 强制保存文件，并退出vi</p>
<p>q: 不保存文件，退出vi</p>
<p>:q! 不保存文件，强制退出vi</p>
<p>:e! 放弃所有修改，从上次保存文件开始再编辑。</p>
</blockquote>
<h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><p>安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">curl -fsSL https://get.docker.com -o get-docker.sh  <br>sudo sh get-docker.sh<br></code></pre></td></tr></table></figure>

<p>国内镜像:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">curl -sSL http:<span class="hljs-comment">//acs-public-mirror.oss-cn-hangzhou.aliyuncs.com/docker-engine/internet | sh -</span><br></code></pre></td></tr></table></figure>

<p><strong>查看发行版和版本</strong>：</p>
<ul>
<li><code>cat /etc/os-release</code></li>
<li><code>cat /etc/*-release</code></li>
</ul>
<ol start="2">
<li><strong>查看内核版本和系统架构</strong>：<ul>
<li><code>uname -a</code> (全部信息)</li>
<li><code>uname -r</code> (内核版本)</li>
<li><code>uname -m</code> (系统架构)</li>
</ul>
</li>
<li><strong>查看系统详细信息</strong>：<ul>
<li><code>lsb_release -a</code> (可能需安装)</li>
</ul>
</li>
<li><strong>查看硬件信息</strong>：<ul>
<li><code>sudo lshw -short</code> (可能需安装)</li>
</ul>
</li>
</ol>
<h2 id="查看正在运行的容器"><a href="#查看正在运行的容器" class="headerlink" title="查看正在运行的容器"></a>查看正在运行的容器</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker ps<br></code></pre></td></tr></table></figure>

<p>包括停止的：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker ps -a<br></code></pre></td></tr></table></figure>

<h2 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker exec -it 容器ID /bin/bash<br></code></pre></td></tr></table></figure>

<p><strong>alpine:</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker exec -it 容器ID /bin/sh<br></code></pre></td></tr></table></figure>
<blockquote>
<p>注：docker attach指令已经过时</p>
</blockquote>
<h2 id="Mysql-of-Dokcer"><a href="#Mysql-of-Dokcer" class="headerlink" title="Mysql of Dokcer"></a>Mysql of Dokcer</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker run -p 3306:3306 --name mysql \<br>-v /mydata/mysql/log:/vat/log/mysql \<br>-v /mydata/mysql/data:/var/lib/mysql \<br>-v /mydata/mysql/conf:/etc/mysql/conf.d \<br>-e MYSQL_ROOT_PASSWORD=root \<br>-d mysql:5.7<br></code></pre></td></tr></table></figure>
<h3 id="Mysql-配置文件"><a href="#Mysql-配置文件" class="headerlink" title="Mysql 配置文件"></a>Mysql 配置文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[clinet]<br>default-character-set=utf8<br>  <br>[mysql]<br>default-character-set=utf8<br><br>[mysqld]<br>init_connect=&#x27;SET collation_connection = utf8_unicode_ci&#x27;<br>init_connect=&#x27;SET NAMES utf8&#x27;<br>character-set-server=utf8<br>collation-server=utf8_unicode_ci<br>skip-character-set-client-handshake<br>skip-name-resolvnet<br></code></pre></td></tr></table></figure>


<h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><h3 id="Redis-of-Docker"><a href="#Redis-of-Docker" class="headerlink" title="Redis of Docker"></a>Redis of Docker</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">mkdir -p /mydata/redis/conf &amp;&amp; touch /mydata/redis/confredis.conf<br></code></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker run -p 6379:6379 --name redis -v /mydata/redis/data:/data \<br>-v /mydata/redis/conf/redis.conf:/etc/redis/redis.conf \<br>-d redis redis-server /etc/redis/redis.conf<br></code></pre></td></tr></table></figure>


<h2 id="清屏"><a href="#清屏" class="headerlink" title="清屏"></a>清屏</h2><p><strong>解决乱码问题：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">reset<br></code></pre></td></tr></table></figure>


<h2 id="下载仓库"><a href="#下载仓库" class="headerlink" title="下载仓库"></a>下载仓库</h2><p>官方的死蛇（deadsnake）仓库，这是一个流行的第三方Python仓库：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">sudo add-apt-repository ppa:deadsnakes/ppa<br></code></pre></td></tr></table></figure>

<p>更新系统包列表：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">sudo apt-get update<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>rustdesk中继服务器的docker镜像</title>
    <url>/2023/04/18/server/rustdesk%E4%B8%AD%E7%BB%A7%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84docker%E9%95%9C%E5%83%8F/</url>
    <content><![CDATA[<p>1、docker 拉取镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">docker image pull rustdesk/rustdesk-server<br></code></pre></td></tr></table></figure>
<p>1<br>2、运行hbbs</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">docker run --name hbbs -p 21115:21115 -p 21116:21116 -p 21116:21116/udp -p 21118:21118 -v `<span class="hljs-built_in">pwd</span>`:/root -it --net=host --<span class="hljs-built_in">rm</span> rustdesk/rustdesk-server hbbs -r 自己的服务器IP<br></code></pre></td></tr></table></figure>

<p>3、运行hbbr</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">docker run --name hbbr -p 21117:21117 -p 21119:21119 -v `<span class="hljs-built_in">pwd</span>`:/root -it --net=host --<span class="hljs-built_in">rm</span> rustdesk/rustdesk-server hbbr<br></code></pre></td></tr></table></figure>

<p>4、配置防火墙与安全组<br>TCP(21115, 21116, 21117, 21118, 21119)<br>UDP(21116)<br>网页客户端（21118，21119），对应端口可以不开。</p>
]]></content>
      <categories>
        <category>玩转服务器</category>
      </categories>
  </entry>
  <entry>
    <title>快速翻墙命令</title>
    <url>/2023/04/07/server/%E5%BF%AB%E9%80%9F%E7%BF%BB%E5%A2%99%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h3 id="Google-BBR-一键加速VPS"><a href="#Google-BBR-一键加速VPS" class="headerlink" title="Google BBR 一键加速VPS"></a>Google BBR 一键加速VPS</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">wget https://raw.githubusercontent.com/bannedbook/fanqiang/master/v2ss/server-cfg/sysctl.conf -O -&gt; /etc/sysctl.conf<br></code></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">sysctl -p<br></code></pre></td></tr></table></figure>

<h3 id="V2ray官方一键安装脚本"><a href="#V2ray官方一键安装脚本" class="headerlink" title="V2ray官方一键安装脚本"></a>V2ray官方一键安装脚本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">apt-get install -y curl<br>bash &lt;(curl -L https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-release.sh)<br></code></pre></td></tr></table></figure>

<p><strong>下载参考配置文件：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">wget https://raw.githubusercontent.com/bannedbook/fanqiang/master/v2ss/server-cfg/v2/config.json  -O -&gt; /usr/local/etc/v2ray/config.json<br></code></pre></td></tr></table></figure>

<p>安装完成后，运行 <code>service v2ray restart</code> 启动</p>
<h3 id="vultr-debian-10-默认只开了-ssh-端口"><a href="#vultr-debian-10-默认只开了-ssh-端口" class="headerlink" title="vultr debian 10 默认只开了 ssh 端口"></a>vultr debian 10 默认只开了 ssh 端口</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">ufw allow 80/tcp  <br>ufw allow 80/udp<br><br>ufw allow 24380/tcp<br>ufw allow 24380/udp<br></code></pre></td></tr></table></figure>



<h3 id="安装-acme-sh"><a href="#安装-acme-sh" class="headerlink" title="安装 acme.sh"></a>安装 acme.sh</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">apt-get -y install netcat<br>apt-get install socat<br></code></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">curl  https://get.acme.sh | sh<br></code></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.bashrc<br></code></pre></td></tr></table></figure>

<p>注册登录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">sudo ~/.acme.sh/acme.sh --register-account -m your-email@example.com<br></code></pre></td></tr></table></figure>


<h3 id="域名证书生成"><a href="#域名证书生成" class="headerlink" title="域名证书生成"></a>域名证书生成</h3><p><strong>主域名：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">sudo ~/.acme.sh/acme.sh --issue -d wrxinyue.xyz --standalone -k ec-256<br></code></pre></td></tr></table></figure>

<p>手动更新ECC证书：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">sudo ~/.acme.sh/acme.sh --renew -d wrxinyue.xyz --force --ecc<br></code></pre></td></tr></table></figure>

<p>手动更新REA证书：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">sudo ~/.acme.sh/acme.sh --renew -d wrxinyue.xyz --force --ecc<br></code></pre></td></tr></table></figure>

<p><strong>多个子域名：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">sudo ~/.acme.sh/acme.sh --issue --standalone -k ec-256 -d wrxinyue.xyz -d www.wrxinyue.xyz -d v01.wrxinyue.xyz -d v02.wrxinyue.xyz -d v03.wrxinyue.xyz -d v04.wrxinyue.xyz -d v05.wrxinyue.xyz -d v06.wrxinyue.xyz -d v07.wrxinyue.xyz -d v08.wrxinyue.xyz -d v09.wrxinyue.xyz<br></code></pre></td></tr></table></figure>

<p>手动更新子域名ECC证书：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">sudo ~/.acme.sh/acme.sh --renew -d wrxinyue.xyz -d www.wrxinyue.xyz -d v01.wrxinyue.xyz -d v02.wrxinyue.xyz -d v03.wrxinyue.xyz -d v04.wrxinyue.xyz -d v05.wrxinyue.xyz -d v06.wrxinyue.xyz -d v07.wrxinyue.xyz -d v08.wrxinyue.xyz -d v09.wrxinyue.xyz --force --ecc<br></code></pre></td></tr></table></figure>

<p>手动更新子域名ESA证书：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">sudo ~/.acme.sh/acme.sh --renew -d wrxinyue.xyz -d www.wrxinyue.xyz -d v01.wrxinyue.xyz -d v02.wrxinyue.xyz -d v03.wrxinyue.xyz -d v04.wrxinyue.xyz -d v05.wrxinyue.xyz -d v06.wrxinyue.xyz -d v07.wrxinyue.xyz -d v08.wrxinyue.xyz -d v09.wrxinyue.xyz --force<br></code></pre></td></tr></table></figure>

<h3 id="安装证书和密钥"><a href="#安装证书和密钥" class="headerlink" title="安装证书和密钥"></a>安装证书和密钥</h3><p>首先创建目录文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">mkdir</span> -p /etc/v2ray/<br></code></pre></td></tr></table></figure>

<p><strong>ECC 证书</strong><br>将证书和密钥安装到 &#x2F;etc&#x2F;v2ray 中：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">sudo ~/.acme.sh/acme.sh --installcert -d wrxinyue.xyz --fullchainpath /etc/v2ray/v2ray.crt --keypath /etc/v2ray/v2ray.key --ecc<br></code></pre></td></tr></table></figure>
<p>或者同时将子域名证书和密钥安装到 &#x2F;etc&#x2F;v2ray 中：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">sudo ~/.acme.sh/acme.sh --installcert -d wrxinyue.xyz -d www.wrxinyue.xyz -d v01.wrxinyue.xyz -d v02.wrxinyue.xyz -d v03.wrxinyue.xyz -d v04.wrxinyue.xyz -d v05.wrxinyue.xyz -d v06.wrxinyue.xyz -d v07.wrxinyue.xyz -d v08.wrxinyue.xyz -d v09.wrxinyue.xyz --fullchainpath /etc/v2ray/v2ray.crt --keypath /etc/v2ray/v2ray.key --ecc<br></code></pre></td></tr></table></figure>

<p><strong>RSA 证书</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">sudo ~/.acme.sh/acme.sh --installcert -d wrxinyue.xyz --fullchainpath /etc/v2ray/v2ray.crt --keypath /etc/v2ray/v2ray.key<br></code></pre></td></tr></table></figure>
<p>或者同时将子域名证书和密钥安装到 &#x2F;etc&#x2F;v2ray 中：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">sudo ~/.acme.sh/acme.sh --installcert -d wrxinyue.xyz -d www.wrxinyue.xyz -d v01.wrxinyue.xyz -d v02.wrxinyue.xyz -d v03.wrxinyue.xyz -d v04.wrxinyue.xyz -d v05.wrxinyue.xyz -d v06.wrxinyue.xyz -d v07.wrxinyue.xyz -d v08.wrxinyue.xyz -d v09.wrxinyue.xyz --fullchainpath /etc/v2ray/v2ray.crt --keypath /etc/v2ray/v2ray.key<br></code></pre></td></tr></table></figure>

<p><strong>注意：无论什么情况，密钥(即上面的v2ray.key)都不能泄漏，如果你不幸泄漏了密钥，可以使用 acme.sh 将原证书吊销，再生成新的证书，吊销方法请自行参考 acme.sh 的手册</strong></p>
<p><strong>由于本例中将证书生成到 <code>/etc/v2ray/</code> 文件夹，更新证书之后还得把新证书生成到 &#x2F;etc&#x2F;v2ray。</strong></p>
<p>开启文件权限：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">chmod</span> 644 /etc/v2ray/v2ray.key<br></code></pre></td></tr></table></figure>


<h2 id="配置-V2Ray"><a href="#配置-V2Ray" class="headerlink" title="配置 V2Ray"></a>配置 V2Ray</h2><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">vi /usr/local/etc/v2ray/config.json<br></code></pre></td></tr></table></figure>

<p><strong>服务器：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;log&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;loglevel&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;warning&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;access&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/dev/null&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;error&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/dev/null&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;inbounds&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;listen&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;0.0.0.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;port&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">10000</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;protocol&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vmess&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;settings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;clients&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;de20d937-ca8f-af14-ea07-20b45447d371&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;level&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;alterId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;streamSettings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;network&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ws&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;wsSettings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/bannedbook&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;outbounds&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;protocol&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;freedom&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;settings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;allowed&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;protocol&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;blackhole&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;settings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;blocked&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;routing&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;rules&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;field&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;ip&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>          <span class="hljs-string">&quot;geoip:private&quot;</span><br>        <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;outboundTag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;blocked&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>

<p>检查配置文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">/usr/local/bin/v2ray <span class="hljs-built_in">test</span> -config /usr/local/etc/v2ray/config.json<br></code></pre></td></tr></table></figure>

<p>配置完重启：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">systemctl restart v2ray<br></code></pre></td></tr></table></figure>

<p>查看状态：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">systemctl status v2ray<br></code></pre></td></tr></table></figure>

<p>随后用<a href="http://www.ssllabs.com测试即可/">www.ssllabs.com测试即可</a></p>
<h2 id="域名添加到Cloudflare"><a href="#域名添加到Cloudflare" class="headerlink" title="域名添加到Cloudflare"></a>域名添加到Cloudflare</h2><p>确保在Cloudflare DNS 设置处启用CDN，就是Proxy Status 那一列，那个金黄金黄的云彩图标要点亮，A记录指向你的VPS IP地址。</p>
<p>另外，在 Cloudflare 的 SSL&#x2F;TLS 设置中启用 Flexible 模式，并关掉 TLS 1.3 。</p>
<p>大概这样就可以了。等待一会儿，ping 域名试试看，如果ping 出的ip变成了 Cloudflare ip，那么我们已经成功给我们的域名套上了Cloudflare CDN。</p>
<h2 id="证书生成"><a href="#证书生成" class="headerlink" title="证书生成"></a>证书生成</h2><p>我们采用最简略的配置，VPS端无需自己生成证书，直接使用Cloudflare CDN 自动生成的证书。所以这一步你需要做的就是 do nothing. 这样配置不但超简易，而且配合Cloudflare SSL&#x2F;TLS 的 Flexible 模式，比Full模式速度更快。</p>
<h2 id="VPS-安装配置Nginx"><a href="#VPS-安装配置Nginx" class="headerlink" title="VPS 安装配置Nginx"></a>VPS 安装配置Nginx</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">apt-get update<br>apt-get -y install nginx<br></code></pre></td></tr></table></figure>

<p>然后替换&#x2F;etc&#x2F;nginx.conf为如下配置，此配置文件是通用配置，不管什么域名都可以使用，直接下载覆盖即可:</p>
<p><code>wget https://raw.githubusercontent.com/bannedbook/fanqiang/master/v2ss/server-cfg/nginx.conf -O -&gt; /etc/nginx/nginx.conf</code></p>
<p>下面是nginx.conf的内容，为方便大家，制作了这个nginx通用配置文件并上传到github，大家可以直接使用上面的命令下载覆盖即可。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">user www-data;<br>worker_processes auto;<br>pid /run/nginx.<span class="hljs-property">pid</span>;<br>include /etc/nginx/modules-enabled<span class="hljs-comment">/*.conf;</span><br><span class="hljs-comment">worker_rlimit_nofile  655350;</span><br><span class="hljs-comment">events &#123;</span><br><span class="hljs-comment">	use epoll;</span><br><span class="hljs-comment">	worker_connections 65536;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">http &#123;</span><br><span class="hljs-comment">	sendfile on;</span><br><span class="hljs-comment">	tcp_nopush on;</span><br><span class="hljs-comment">	tcp_nodelay on;</span><br><span class="hljs-comment">	keepalive_timeout 65;</span><br><span class="hljs-comment">	types_hash_max_size 2048;</span><br><span class="hljs-comment">	include /etc/nginx/mime.types;</span><br><span class="hljs-comment">	default_type application/octet-stream;</span><br><span class="hljs-comment">	ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE</span><br><span class="hljs-comment">	ssl_prefer_server_ciphers on;</span><br><span class="hljs-comment">	access_log /var/log/nginx-access.log;</span><br><span class="hljs-comment">	error_log /var/log/nginx-error.log;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">	gzip on;</span><br><span class="hljs-comment">	server &#123;</span><br><span class="hljs-comment">		listen 80 default_server;</span><br><span class="hljs-comment">		listen [::]:80 default_server;</span><br><span class="hljs-comment">		root /var/www/html;</span><br><span class="hljs-comment">	</span><br><span class="hljs-comment">		index index.html index.htm index.nginx-debian.html;</span><br><span class="hljs-comment">	</span><br><span class="hljs-comment">		server_name _;</span><br><span class="hljs-comment">	</span><br><span class="hljs-comment">		location / &#123;</span><br><span class="hljs-comment">			try_files $uri $uri/ =404;</span><br><span class="hljs-comment">		&#125;</span><br><span class="hljs-comment">		</span><br><span class="hljs-comment">    location /bannedbook &#123; # 与 V2Ray 配置中的 path 保持一致</span><br><span class="hljs-comment">	    proxy_redirect off;</span><br><span class="hljs-comment">	    proxy_pass http://127.0.0.1:10000; #假设WebSocket监听在环回地址的10000端口上</span><br><span class="hljs-comment">	    proxy_http_version 1.1;</span><br><span class="hljs-comment">	    proxy_set_header Upgrade $http_upgrade;</span><br><span class="hljs-comment">	    proxy_set_header Connection &quot;upgrade&quot;;</span><br><span class="hljs-comment">	    proxy_set_header Host $http_host;</span><br><span class="hljs-comment">	</span><br><span class="hljs-comment">	    # Show realip in v2ray access.log</span><br><span class="hljs-comment">	    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="hljs-comment">	    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;	</span><br><span class="hljs-comment">    &#125;	</span><br><span class="hljs-comment">	&#125;</span><br><span class="hljs-comment">&#125;</span><br></code></pre></td></tr></table></figure>

<p>然后，测试nginx配置： nginx -t</p>
<p>重新载入配置： nginx -s reload</p>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p>控制 V2Ray 的运行的常用命令：<br><code>service v2ray restart | force-reload |start|stop|status|reload</code></p>
<p>测试V2Ray配置文件：<br><code>/usr/local/bin/v2ray test -config /usr/local/etc/v2ray/config.json</code></p>
]]></content>
      <categories>
        <category>server</category>
      </categories>
      <tags>
        <tag>玩机</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 常用命令</title>
    <url>/2023/04/18/%E5%85%B6%E5%AE%83/Git%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="Git-是一个版本控制系统。"><a href="#Git-是一个版本控制系统。" class="headerlink" title="Git 是一个版本控制系统。"></a>Git 是一个版本控制系统。</h1><p>版本控制是一种用于记录一个或多个文件内容变化，方便我们查阅特定版本修订情况的系统。</p>
<p>以前在没有使用版本控制的时候，我们通常在我们的项目根目录下这样命名项目：<br>project_v1、project_v1.1、project_v2等等，通过这种方式记录我们项目的不同版本的修改，<br>有的时候我们还会在不同版本的文件中写一个说明，记录此版本项目新增、修改，删除等操作。</p>
<p>这样的操作是很繁杂的，有的时候还可能因为一些非人为因素导致文件丢失这样的事故。</p>
<p>有了版本控制系统，我们就不用再手动进行一些繁杂的操作，并且对于文件丢失这种事故我们也不<br>用再担心，你可以随便回到历史记录的某个时刻。</p>
<h2 id="版本控制系统"><a href="#版本控制系统" class="headerlink" title="版本控制系统"></a>版本控制系统</h2><p>早期出现的版本控制系统有：SVN、CVS等，它们是集中式版本控制系统，都有一个单一的集中管理的服务器，保存所有文件的修订版本，而协同合作的开发人员都通过客户端连接到这台服务器，取出最新的文件或者提交更新。</p>
<p>而我们的主角 Git 是分布式版本控制系统。Git 已经成为越来越多开发者的青睐，因为分布式的优势是很显著的。</p>
<h2 id="集中式和分布式版本控制系统的区别"><a href="#集中式和分布式版本控制系统的区别" class="headerlink" title="集中式和分布式版本控制系统的区别"></a>集中式和分布式版本控制系统的区别</h2><p>集中式版本控制系统，版本库是集中存放在中央服务器的，工作的时候，用的是自己的电脑，所以，我们首先需要从中央服务器上拉取最新的版本，然后开始工作，等工作完了，再把自己的工作提交到中央服务器。在这里借用廖雪峰老师的一个比喻，中央服务器好比是一个图书馆，你要改其中的一本书，必须先要从图书馆里把书借出来，然后更改，改完之后，再放回图书馆。</p>
<p>集中式版本控制系统的一个最大毛病就是必须联网才能工作，所以对于网络环境比较差的情况使用集中式版本控制系统是一件比较让人头疼的事情。</p>
<p>分布式版本控制系统没有中央服务器的概念，我们使用相关的客户端提取的不只是最新的文件，而是把代码仓库完整地镜像下来，相当于每个人的电脑都是一个完整的版本库，这样的话，任何一处协同工作的服务器出现故障，都可以<br>用任何一个镜像出来的本地仓库恢复。并且，即便在网络环境比较差的情况下也不用担心，因为版本库就在本地电脑上。</p>
<h1 id="常用的git指令"><a href="#常用的git指令" class="headerlink" title="常用的git指令"></a>常用的git指令</h1><h2 id="初始化git"><a href="#初始化git" class="headerlink" title="初始化git"></a>初始化git</h2><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">git init <span class="hljs-comment">#文件中会多出一个.git 文件夹（可能会隐藏）</span><br>git add README.md<br>git commit -m <span class="hljs-string">&quot;first commit&quot;</span> <span class="hljs-comment">#版本的说明</span><br>git remote add [命名] [仓库地址] <span class="hljs-comment">#添加远程仓库</span><br>git push -u [命名] master <span class="hljs-comment">#本地的master分支推送到(命名)主机</span><br></code></pre></td></tr></table></figure>

<h2 id="版本备份"><a href="#版本备份" class="headerlink" title="版本备份"></a>版本备份</h2><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">git add . <span class="hljs-comment">#上传本地所有文件</span><br>git commit -m <span class="hljs-string">&quot;first commit&quot;</span> <span class="hljs-comment">#版本的说明</span><br></code></pre></td></tr></table></figure>

<h2 id="部署到GitHub仓库-x2F-推送分支"><a href="#部署到GitHub仓库-x2F-推送分支" class="headerlink" title="部署到GitHub仓库&#x2F;推送分支"></a>部署到GitHub仓库&#x2F;推送分支</h2><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">git push <span class="hljs-comment">#上传到github仓库</span><br></code></pre></td></tr></table></figure>


<h2 id="查看-amp-备份版本"><a href="#查看-amp-备份版本" class="headerlink" title="查看&amp;备份版本"></a>查看&amp;备份版本</h2><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">log</span> <span class="hljs-comment">#查看备份版本</span><br>git status <span class="hljs-comment">#查看修改文件</span><br>git reset --hard 版本序列号 <span class="hljs-comment">#恢复某个版本的文件</span><br></code></pre></td></tr></table></figure>

<h2 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h2><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">git push origin :master <span class="hljs-comment">#删除master分支</span><br>git push origin --delete master <span class="hljs-comment">#删除master分支(前后两者意义相同)</span><br></code></pre></td></tr></table></figure>

<h2 id="下载GitHub仓库源码-x2F-拉取分支"><a href="#下载GitHub仓库源码-x2F-拉取分支" class="headerlink" title="下载GitHub仓库源码&#x2F;拉取分支"></a>下载GitHub仓库源码&#x2F;拉取分支</h2><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">git pull [命名] [仓库地址]:[本地分支] <span class="hljs-comment">#获取GitHub源码并和本地源码合并</span><br></code></pre></td></tr></table></figure>


<h2 id="如何缓存删除文件"><a href="#如何缓存删除文件" class="headerlink" title="如何缓存删除文件"></a>如何缓存删除文件</h2><p>如果你有很多文件需要从Git缓存中删除，可以尝试使用以下命令来批量处理：</p>
<ol>
<li><p>确认文件状态：使用以下命令查看当前缓存区中的文件状态：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">git status --ignored<br></code></pre></td></tr></table></figure>
<p>这将显示被忽略的文件列表，其中包括已经添加到Git缓存区的文件。</p>
</li>
<li><p>批量删除文件：使用以下命令将所有被忽略的文件从缓存区中删除：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">git rm -r --cached .<br></code></pre></td></tr></table></figure>
<p>这将删除所有被忽略的文件和文件夹。请注意，该命令需要在你的Git仓库根目录下运行。</p>
</li>
<li><p>更新.gitignore：确保你的<code>.gitignore</code>文件包含了正确的规则来忽略这些文件。</p>
</li>
<li><p>提交更改：使用以下命令提交更改到版本控制：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">git commit -m &quot;Remove ignored files from cache&quot;<br></code></pre></td></tr></table></figure></li>
</ol>
<p>这些步骤将自动删除所有被忽略的文件，而无需手动一个一个删除。请确保在运行这些命令之前，确认<code>.gitignore</code>文件包含了正确的规则，以避免删除不应该被忽略的文件。</p>
<h1 id="初始化仓库步骤"><a href="#初始化仓库步骤" class="headerlink" title="初始化仓库步骤"></a>初始化仓库步骤</h1><ol>
<li><p>在远程仓库（如github）创建空仓库</p>
</li>
<li><p>打开命令行</p>
</li>
<li><p>切换到本地项目目录</p>
</li>
<li><p>初始化本地仓库</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">git init<br>git lfs install<br></code></pre></td></tr></table></figure>
</li>
<li><p>添加全部文件到本地仓库</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">git add .<br></code></pre></td></tr></table></figure>
</li>
<li><p>提交文件到本地仓库</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">git commit -m &quot;init&quot;<br></code></pre></td></tr></table></figure>
</li>
<li><p>复制远程仓库地址，HTTPS、SSH都可</p>
</li>
<li><p>添加远程仓库地址到本地仓库</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">git remote add origin &#123;远程仓库地址&#125;<br></code></pre></td></tr></table></figure>
<p> 可以用以下命令验证</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">git remote -v<br></code></pre></td></tr></table></figure>
</li>
<li><p>push本地仓库文件到远程仓库</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">git push -u origin master<br></code></pre></td></tr></table></figure>
</li>
<li><p>Done</p>
</li>
</ol>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>常用软件安装</title>
    <url>/2023/04/18/server/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h2 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h2><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">apt-get update -y &amp;&amp; apt-get install _curl_ -y<br></code></pre></td></tr></table></figure>

<h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><p>在Ubuntu上安装Docker有以下几个步骤：</p>
<ol>
<li>卸载旧版的Docker（如果适用），可以通过以下命令完成：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">sudo apt-get remove docker docker-engine docker.io containerd runc<br></code></pre></td></tr></table></figure>

<ol start="2">
<li>安装Docker前必须更新apt包索引，可以使用下面的命令更新：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">sudo apt-get update<br></code></pre></td></tr></table></figure>

<ol start="3">
<li>安装所需的软件包以使apt可以通过HTTPS使用存储库：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">sudo apt-get install apt-transport-https ca-certificates curl gnupg lsb-release<br></code></pre></td></tr></table></figure>

<ol start="4">
<li>添加Docker的官方GPG密钥：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg<br></code></pre></td></tr></table></figure>

<ol start="5">
<li>将Docker存储库添加到APT源中：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">echo &quot;deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&quot; | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null<br></code></pre></td></tr></table></figure>

<ol start="6">
<li>更新APT包索引并安装最新版本的Docker Engine和containerd：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">sudo apt-get update<br>sudo apt-get install docker-ce docker-ce-cli containerd.io<br></code></pre></td></tr></table></figure>

<ol start="7">
<li>验证安装是否成功，可以通过以下命令查看Docker版本号：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">docker version<br></code></pre></td></tr></table></figure>

<p>安装成功后，就可以使用Docker构建和管理容器了。注意，需要以root用户或具有sudo权限的用户身份执行上述命令。</p>
<h2 id="配置镜像加速器"><a href="#配置镜像加速器" class="headerlink" title="配置镜像加速器"></a>配置镜像加速器</h2><p>针对Docker客户端版本大于 1.10.0 的用户</p>
<p>您可以通过修改daemon配置文件&#x2F;etc&#x2F;docker&#x2F;daemon.json来使用加速器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">mkdir</span> -p /etc/docker<br></code></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">&#123;<br>    <span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<br>	    <span class="hljs-string">&quot;https://9flzghyw.mirror.aliyuncs.com&quot;</span>,<br>        <span class="hljs-string">&quot;http://hub-mirror.c.163.com&quot;</span>,<br>        <span class="hljs-string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span>,<br>        <span class="hljs-string">&quot;https://registry.docker-cn.com&quot;</span><br>    ]<br>&#125;<br></code></pre></td></tr></table></figure>


<p><strong>重启：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">service docker restart<br></code></pre></td></tr></table></figure>

<p><strong>查看是否正确:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">sudo docker info<br></code></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">sudo systemctl daemon-reload<br>sudo systemctl restart docker<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>玩转服务器</category>
      </categories>
  </entry>
  <entry>
    <title>面板</title>
    <url>/2023/04/18/server/%E9%9D%A2%E6%9D%BF/</url>
    <content><![CDATA[<h3 id="portainer面板"><a href="#portainer面板" class="headerlink" title="portainer面板"></a>portainer面板</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">docker stop portainer<br>docker pull portainer/portainer-ce:latest<br>docker run -d -p 8000:9000 --name portainer --restart always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce:latest<br></code></pre></td></tr></table></figure>

<p><strong>远程连接：</strong></p>
<p>修改配置文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">ExecStart=/usr/bin/dockerd -H fd:// -H tcp://0.0.0.0:2375 --containerd=/run/containerd/containerd.sock<br></code></pre></td></tr></table></figure>

<p>添加防火墙规则：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">sudo iptables -A INPUT -p tcp --dport 2375 -s 39.105.2.205 -j ACCEPT<br>sudo iptables -A INPUT -p tcp --dport 2375 -j DROP<br><br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>玩转服务器</category>
      </categories>
  </entry>
  <entry>
    <title>防火墙</title>
    <url>/2023/05/10/server/%E9%98%B2%E7%81%AB%E5%A2%99/</url>
    <content><![CDATA[<p>版本查看：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">iptables --version<br></code></pre></td></tr></table></figure>

<p>安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">sudo apt-get update<br>sudo apt-get install iptables<br></code></pre></td></tr></table></figure>

<p>当前的规则:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">sudo iptables -L -n -v<br></code></pre></td></tr></table></figure>

<p><code>-L</code> 选项表示 “list”（列出），<code>-n</code> 选项表示 “numeric”（不要解析和显示主机名、网络名和端口名），而 <code>-v</code> 选项表示 “verbose”（显示详细信息）</p>
]]></content>
      <categories>
        <category>server</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>RESTful API</title>
    <url>/2023/05/22/%E5%85%B6%E5%AE%83/RESTful%20API/</url>
    <content><![CDATA[<p><strong>1. RESTful API</strong></p>
<p>RESTful API，全称为 Representational State Transfer API，是一种建构 API 的软件架构风格。主要特性如下：</p>
<ul>
<li>客户端-服务器架构：客户端负责用户交互，服务器负责数据存储，二者通过 API 进行交互。</li>
<li>无状态：每次请求都应含有处理该请求所需的所有信息。服务器不保存客户端的任何状态，简化了服务器设计并提升可扩展性。</li>
<li>可缓存：服务器可以定义响应是否可以被缓存，以降低客户端-服务器之间的交互次数。</li>
<li>统一接口：RESTful API 应遵循统一接口原则，包括使用标准的 HTTP 方法（GET、POST、PUT、DELETE 等）和状态代码。</li>
<li>分层系统：客户端无法识别是否直接连接的服务器或通过中间层。分层架构允许在系统中添加代理、缓存等中间层，以提高系统的可扩展性和性能。</li>
</ul>
<p><strong>2. Django 和 RESTful API</strong></p>
<p>Django 是一个开源的 Python Web 框架，用于快速构建高质量的 Web 应用。基于 Django 的 RESTful API 项目模板可以快速创建满足企业级需求、高性能的服务端应用。</p>
<p><strong>3. Spring 和 RESTful API</strong></p>
<p>Spring Framework 是一个基于 Java 的开源应用程序框架。虽然 Spring Framework 本身并不基于 RESTful，但它的 Spring MVC 模块提供了创建 RESTful 风格 API 的强大支持。</p>
<p><strong>4. RESTful API URL 设计</strong></p>
<ul>
<li><p>使用名词而非动词表示资源，通过 HTTP 方法表示操作。例如：</p>
<ul>
<li>GET &#x2F;users&#x2F;1：获取 ID 为 1 的用户信息。</li>
<li>POST &#x2F;users：创建一个新用户。</li>
<li>PUT &#x2F;users&#x2F;1：更新 ID 为 1 的用户信息。</li>
<li>DELETE &#x2F;users&#x2F;1：删除 ID 为 1 的用户。</li>
</ul>
</li>
<li><p>支持复杂的 URL 结构和查询参数。例如：</p>
<ul>
<li>GET &#x2F;api&#x2F;products&#x2F;123&#x2F;reviews：获取 ID 为 123 的产品的所有评论。</li>
<li>GET &#x2F;api&#x2F;products&#x2F;123&#x2F;reviews?page&#x3D;2&amp;size&#x3D;10&amp;sort&#x3D;time：获取 ID 为 123 的产品的第二页评论，每页 10 条，按时间排序。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>VIM常用命令</title>
    <url>/2023/06/05/%E5%85%B6%E5%AE%83/VIM%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<ul>
<li>viw 这将选中整个单词，包括其中的所有字符</li>
<li>y 复制</li>
<li><code>n</code>来跳转到下一个匹配位置，按下<code>N</code>来跳转到上一个匹配位置</li>
</ul>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
  </entry>
  <entry>
    <title>WSL</title>
    <url>/2023/04/19/%E5%85%B6%E5%AE%83/WSL/</url>
    <content><![CDATA[<h1 id="常用WSL命令"><a href="#常用WSL命令" class="headerlink" title="常用WSL命令"></a>常用WSL命令</h1><h2 id="ssh连接WSL2"><a href="#ssh连接WSL2" class="headerlink" title="ssh连接WSL2"></a>ssh连接WSL2</h2><p><strong>重装SSH：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">sudo apt-get remove openssh-server<br>sudo apt-get install openssh-server<br></code></pre></td></tr></table></figure>

<p><strong>编辑 shd_config</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">sudo vi /etc/ssh/sshd_config<br></code></pre></td></tr></table></figure>

<p>添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">Port 22<br>PermitRootLogin yes<br>PasswordAuthentication yes<br></code></pre></td></tr></table></figure>

<p><strong>编辑sudo vim &#x2F;etc&#x2F;hosts.allow</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">sudo vim /etc/hosts.allow<br></code></pre></td></tr></table></figure>

<p>添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">sshd: ALL<br></code></pre></td></tr></table></figure>

<p><strong>重启ssh服务：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">sudo service ssh --full-restart<br></code></pre></td></tr></table></figure>

<p><strong>查看wsl IP地址</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">ifconfig<br></code></pre></td></tr></table></figure>

<p><strong>powershell输入命令将端口转发到WSL2：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">netsh interface portproxy add v4tov4 listenaddress=0.0.0.0 listenport=22 connectaddress=xxx.xxx.xxx.xxx connectport=22<br></code></pre></td></tr></table></figure>
<p>此处xxx.xxx.xxx.xxx替换成wsl的IP地址，如172.18.195.3</p>
<p>然后就可以通过127.0.0.1或者localhost连接到wsl2</p>
<h2 id="WSL2设置代理"><a href="#WSL2设置代理" class="headerlink" title="WSL2设置代理"></a>WSL2设置代理</h2><h3 id="单次配置"><a href="#单次配置" class="headerlink" title="单次配置"></a>单次配置</h3><p><strong>HTTP协议：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> hostip=$(<span class="hljs-built_in">cat</span> /etc/resolv.conf |grep -oP <span class="hljs-string">&#x27;(?&lt;=nameserver\ ).*&#x27;</span>)<br><span class="hljs-built_in">export</span> https_proxy=<span class="hljs-string">&quot;http://<span class="hljs-variable">$&#123;hostip&#125;</span>:10811&quot;</span>;<br><span class="hljs-built_in">export</span> http_proxy=<span class="hljs-string">&quot;http://<span class="hljs-variable">$&#123;hostip&#125;</span>:10811&quot;</span>;<br></code></pre></td></tr></table></figure>

<p><strong>socket5协议：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> http_proxy=<span class="hljs-string">&quot;socks5://<span class="hljs-variable">$&#123;hostip&#125;</span>:10810&quot;</span><br><span class="hljs-built_in">export</span> https_proxy=<span class="hljs-string">&quot;socks5://<span class="hljs-variable">$&#123;hostip&#125;</span>:10810&quot;</span><br></code></pre></td></tr></table></figure>

<p><strong>其他和验证：</strong></p>
<p>端口相同可以合并一段话</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> all_proxy=<span class="hljs-string">&quot;socks5://<span class="hljs-variable">$&#123;hostip&#125;</span>:7890&quot;</span><br></code></pre></td></tr></table></figure>

<p>使用<code>curl</code>即可验证代理是否成功，如果有返回值则说明代理成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">curl www.google.com<br></code></pre></td></tr></table></figure>

<h2 id="设置开机自启"><a href="#设置开机自启" class="headerlink" title="设置开机自启"></a>设置开机自启</h2><p>打开命令提示符（不用使用管理员权限），然后运行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">wsl --list --verbose<br></code></pre></td></tr></table></figure>

<p>找到正确的发行版名称后，使用以下命令替换<code>YourDistroName</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">C:\Windows\System32\wsl.exe -d YourDistroName -- sudo service ssh start<br></code></pre></td></tr></table></figure>

<p>将此命令添加到开机自启动，请按照以下步骤操作：</p>
<ol>
<li>按住 <code>Win</code> 键，然后按 <code>R</code> 键，输入 <code>shell:startup</code> 回车。这将打开”启动” 文件夹。</li>
<li>在”启动”文件夹中，右键单击空白处，选择 “新建” &gt; “快捷方式”。</li>
<li>在 “创建快捷方式” 对话框中，将正确的命令粘贴到 “位置” 栏，然后单击 “下一步” 。</li>
<li>输入一个名称以识别该快捷方式，例如 <code>C:\Windows\System32\wsl.exe -d Ubuntu -- sudo service ssh start</code>，然后单击 “完成”。</li>
</ol>
<p>现在，将自动运行此快捷方式，启动 WSL 中的 SSH 服务器。</p>
<h1 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h1><ol>
<li><a href="https://zhuanlan.zhihu.com/p/153124468">为 WSL2 一键设置代理</a></li>
<li><a href="https://www.cnblogs.com/tuilk/p/16287472.html">WSL2配置代理 - Leaos - 博客园</a></li>
<li><a href="https://learn.microsoft.com/zh-cn/windows/wsl/install#step-1---enable-the-windows-subsystem-for-linux">使用 WSL 在 Windows 上安装 Linux</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/357038111">如何用笔记本ssh连接局域网内其他电脑上的wsl2 ubuntu</a></li>
<li><a href="https://learn.microsoft.com/zh-cn/windows/wsl/tutorials/gui-apps">在 适用于 Linux 的 Windows 子系统 上运行 Linux GUI 应用</a></li>
<li><a href="https://hackmd.io/@JYU/B1zmv1MCU">Window10 建置Ubuntu(WSL2)與GUI桌面配置筆記</a></li>
</ol>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
  </entry>
  <entry>
    <title>代理设置</title>
    <url>/2023/04/18/%E5%85%B6%E5%AE%83/%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="git"><a href="#git" class="headerlink" title="git"></a>git</h1><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">git config --global https.proxy  http://127.0.0.1:10809<br>git config --global http.proxy  http://127.0.0.1:10809<br></code></pre></td></tr></table></figure>


<h2 id="socks5-代理"><a href="#socks5-代理" class="headerlink" title="socks5 代理"></a>socks5 代理</h2><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">git config --global http.proxy <span class="hljs-string">&#x27;socks5://127.0.0.1:10808&#x27;</span><br>git config --global https.proxy <span class="hljs-string">&#x27;socks5://127.0.0.1:10808&#x27;</span><br></code></pre></td></tr></table></figure>

<h2 id="查看代理"><a href="#查看代理" class="headerlink" title="查看代理"></a>查看代理</h2><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">git config --global  --get http.proxy<br>git config --global  --get https.proxy<br></code></pre></td></tr></table></figure>

<p>如果没有设置代理，上述命令将什么也不会打印。</p>
<h2 id="清除代理"><a href="#清除代理" class="headerlink" title="清除代理"></a>清除代理</h2><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">git config --global --<span class="hljs-built_in">unset</span> http.proxy<br>git config --global --<span class="hljs-built_in">unset</span> https.proxy<br></code></pre></td></tr></table></figure>

<h1 id="Yarn"><a href="#Yarn" class="headerlink" title="Yarn"></a>Yarn</h1><h2 id="设置命令"><a href="#设置命令" class="headerlink" title="设置命令"></a>设置命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">yarn config <span class="hljs-built_in">set</span> https-proxy http://127.0.0.1:1087<br>yarn config <span class="hljs-built_in">set</span> proxy http://127.0.0.1:1087<br></code></pre></td></tr></table></figure>

<h2 id="查看命令"><a href="#查看命令" class="headerlink" title="查看命令"></a>查看命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">yarn config list<br></code></pre></td></tr></table></figure>

<h2 id="取消命令"><a href="#取消命令" class="headerlink" title="取消命令"></a>取消命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">yarn config delete proxy<br>yarn config delete https-proxy<br></code></pre></td></tr></table></figure>

<h1 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h1><h2 id="设置命令："><a href="#设置命令：" class="headerlink" title="设置命令："></a>设置命令：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">npm config <span class="hljs-built_in">set</span> proxy  http://127.0.0.1:1087<br>npm config <span class="hljs-built_in">set</span> https-proxy http://127.0.0.1:1087<br></code></pre></td></tr></table></figure>

<h2 id="查看命令-1"><a href="#查看命令-1" class="headerlink" title="查看命令"></a>查看命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">npm config list<br></code></pre></td></tr></table></figure>

<h2 id="取消命令："><a href="#取消命令：" class="headerlink" title="取消命令："></a>取消命令：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">npm config delete proxy<br>npm config delete https-proxy<br></code></pre></td></tr></table></figure>

<h1 id="PowerShell"><a href="#PowerShell" class="headerlink" title="PowerShell"></a>PowerShell</h1><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$env</span>:HTTP_PROXY=<span class="hljs-string">&quot;http://127.0.0.1:10809&quot;</span><br></code></pre></td></tr></table></figure>

<p><strong>测试:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">curl www.google.com<br></code></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">curl -x http://127.0.0.1:10809 www.google.com<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>其它</category>
      </categories>
  </entry>
  <entry>
    <title>快捷键大全</title>
    <url>/2023/04/19/%E5%85%B6%E5%AE%83/%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<div class="table-box"><table class="jbborder" style="border-spacing:0px;border:;text-align:center;margin-top:.54em;clear:both;color:rgb(34,34,34);font-family:tahoma, arial, 'Microsoft YaHei';font-size:14px;background-color:rgb(255,255,255);"><tbody><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);"><strong><span style="color:#ff0000;">Ctrl+N</span></strong></td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">打开新窗口。</td></tr><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);"><strong><span style="color:#ff0000;">Ctrl+T</span></strong></td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">打开新标签页。</td></tr><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);"><strong><span style="color:#ff0000;">Ctrl+Shift+N</span></strong></td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">在隐身模式下打开新窗口。</td></tr><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">按&nbsp;<strong>Ctrl+O</strong>，然后选择文件。</td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">在谷歌浏览器中打开计算机中的文件。</td></tr><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);"><span style="color:#ff0000;">按住&nbsp;<strong>Ctrl</strong>&nbsp;键的同时点击链接。或用鼠标中键（或鼠标滚轮）点击链接。</span></td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">从后台在新标签页中打开链接。</td></tr><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">按住&nbsp;<strong>Ctrl+Shift</strong>&nbsp;的同时点击链接。或按住<strong>Shift</strong>&nbsp;键的同时用鼠标中键（或鼠标滚轮）点击链接。</td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">在新标签页中打开链接并切换到刚打开的标签页。</td></tr><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">按住&nbsp;<strong>Shift</strong>&nbsp;键的同时点击链接。</td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">在新窗口中打开链接。</td></tr><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);"><strong><span style="color:#ff0000;">Ctrl+Shift+T</span></strong></td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">重新打开上次关闭的标签页。谷歌浏览器可记住最近关闭的 10 个标签页。</td></tr><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">将链接拖到标签页中。</td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">在标签页中打开链接。</td></tr><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">将链接拖到标签栏的空白区域。</td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">在新标签页中打开链接。</td></tr><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">将标签页拖出标签栏。</td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">在新窗口中打开标签页。</td></tr><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">将标签页从标签栏拖到现有窗口中。</td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">在现有窗口中打开标签页。</td></tr><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">拖动标签页时按&nbsp;<strong>Esc</strong>&nbsp;键。</td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">将标签页恢复到原先的位置。</td></tr><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);"><span style="color:#ff0000;"><strong>Ctrl+1</strong>&nbsp;到&nbsp;<strong>Ctrl+8</strong></span></td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">切换到标签栏中指定位置编号所对应的标签页。</td></tr><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);"><strong><span style="color:#ff0000;">Ctrl+9</span></strong></td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">切换到最后一个标签页。</td></tr><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);"><strong>Ctrl+Tab</strong>&nbsp;或&nbsp;<strong>Ctrl+PgDown</strong></td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">切换到下一个标签页。</td></tr><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);"><strong>Ctrl+Shift+Tab</strong>&nbsp;或&nbsp;<strong>Ctrl+PgUp</strong></td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">切换到上一个标签页。</td></tr><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);"><strong>Alt+F4</strong></td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">关闭当前窗口。</td></tr><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);"><span style="color:#ff0000;"><strong>Ctrl+W</strong>&nbsp;或&nbsp;<strong>Ctrl+F4</strong></span></td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">关闭当前标签页或弹出窗口。</td></tr><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);"><span style="color:#ff0000;"><strong>用鼠标中键（或鼠标滚轮）点击标签页。</strong></span></td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">关闭所点击的标签页。</td></tr><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);"><span style="color:#ff0000;">右键点击或者点击并按住浏览器工具栏中的“后退”或“前进”箭头。</span></td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">在新标签页中显示浏览历史记录。</td></tr><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">按&nbsp;<strong>Backspace</strong>&nbsp;键，或同时按&nbsp;<span style="color:#ff0000;"><strong>Alt</strong>&nbsp;和向左箭头键。</span></td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">转到当前标签页的上一页浏览历史记录。</td></tr><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">按&nbsp;<strong>Shift+Backspace</strong>，或同时按&nbsp;<span style="color:#ff0000;"><strong>Alt</strong>&nbsp;和向右箭头键。</span></td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">转到当前标签页的下一页浏览历史记录。</td></tr><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">按住&nbsp;<strong>Ctrl</strong>&nbsp;键的同时点击工具栏中的后退箭头、前进箭头或转到按钮。或用鼠标中键（或鼠标滚轮）点击任一按钮。</td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">从后台在新标签页中打开按钮所对应的目标网页。</td></tr><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);"><span style="color:#ff0000;"><strong>双击标签栏的空白区域。</strong></span></td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">最大化或最小化窗口。</td></tr><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);"><strong>Alt+Home</strong></td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">在当前窗口打开主页。</td></tr></tbody></table></div> 
<p style="margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;line-height:30px;font-family:tahoma, arial, 'Microsoft YaHei';text-align:left;background-color:rgb(255,255,255);"><strong><span style="color:#ff0000;">alt Shift+Alt </span><span style="color:rgb(34,34,34);">&nbsp;输入用户名和密码来回切换</span></strong></p> 
<p style="margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;line-height:30px;color:rgb(34,34,34);font-family:tahoma, arial, 'Microsoft YaHei';text-align:left;background-color:rgb(255,255,255);"></p> 
<h3 style="margin:0px 10px;padding:0px 0px 0px 10px;font-size:14px;color:rgb(34,34,34);font-family:tahoma, arial, 'Microsoft YaHei';text-align:left;background-color:rgb(255,255,255);border-bottom:1px solid rgb(170,170,170);"><a name="t0"></a><a style="color:rgb(51,51,51);"></a>谷歌浏览器功能快捷键</h3> 
<p style="margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;line-height:30px;color:rgb(34,34,34);font-family:tahoma, arial, 'Microsoft YaHei';text-align:left;background-color:rgb(255,255,255);"></p> 
<div class="table-box"><table class="jbborder" style="border-spacing:0px;border:;text-align:center;margin-top:.54em;clear:both;color:rgb(34,34,34);font-family:tahoma, arial, 'Microsoft YaHei';font-size:14px;background-color:rgb(255,255,255);"><tbody><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);"><strong>Alt+F</strong></td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">打开“工具”菜单，用该菜单可自定义和控制谷歌浏览器中的设置。</td></tr><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);"><strong>Ctrl+Shift+B</strong></td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">打开和关闭书签栏。</td></tr><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);"><strong><span style="color:#ff0000;">Ctrl+H</span></strong></td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">打开“历史记录”页面。</td></tr><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);"><strong><span style="color:#ff0000;">Ctrl+J</span></strong></td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">打开“下载内容”页面。</td></tr><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);"><strong>Shift+Esc</strong></td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">打开任务管理器。</td></tr><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">&nbsp;</td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">&nbsp;</td></tr><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);"><strong>Ctrl+Shift+J</strong></td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">打开开发人员工具。</td></tr><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);"><strong>Ctrl+Shift+Delete</strong></td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">打开“清除浏览数据”对话框。</td></tr><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">&nbsp;</td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">&nbsp;</td></tr></tbody></table></div> 
<p style="margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;line-height:30px;color:rgb(34,34,34);font-family:tahoma, arial, 'Microsoft YaHei';text-align:left;background-color:rgb(255,255,255);"></p> 
<h3 style="margin:0px 10px;padding:0px 0px 0px 10px;font-size:14px;color:rgb(34,34,34);font-family:tahoma, arial, 'Microsoft YaHei';text-align:left;background-color:rgb(255,255,255);border-bottom:1px solid rgb(170,170,170);"><a name="t1"></a><a style="color:rgb(51,51,51);"></a>地址栏快捷键</h3> 
<p style="margin:10px auto;padding-top:5px;padding-bottom:5px;font-size:12.72px;line-height:30px;color:rgb(34,34,34);font-family:tahoma, arial, 'Microsoft YaHei';text-align:left;background-color:rgb(255,255,255);">在地址栏中可使用以下快捷键：</p> 
<div class="table-box"><table class="jbborder" style="border-spacing:0px;border:;text-align:center;margin-top:.54em;clear:both;color:rgb(34,34,34);font-family:tahoma, arial, 'Microsoft YaHei';font-size:14px;background-color:rgb(255,255,255);"><tbody><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">首先键入搜索引擎网址，然后在系统提示时按<strong>Tab</strong>&nbsp;键，键入搜索字词，再按&nbsp;<strong>Enter</strong>&nbsp;键。</td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">使用与网址相关联的搜索引擎进行搜索。</td></tr><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);"><strong><span style="color:#ff0000;">Ctrl+Enter</span></strong></td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">在地址栏的输入内容前后分别加上&nbsp;<span class="code" style="line-height:25.2px;font-size:14px;font-family:'Courier New', Courier;">www.</span>&nbsp;和<span class="code" style="line-height:25.2px;font-size:14px;font-family:'Courier New', Courier;">.com</span>，并打开得到的网址。</td></tr><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">键入网址，然后按<span style="color:#ff0000;">&nbsp;<strong>Alt+Enter</strong>。</span></td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">在新标签页中打开网址。</td></tr><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);"><strong>F6</strong>&nbsp;或&nbsp;<strong>Ctrl+L</strong>&nbsp;或&nbsp;<strong>Alt+D</strong></td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">突出显示网址。</td></tr><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);"><strong>Ctrl+K</strong>&nbsp;或&nbsp;<strong>Ctrl+E</strong></td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">将“?”中输入“?”。在问号后键入搜索字词可用默认搜索引擎执行搜索。</td></tr><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);"><span style="color:#ff9966;">同时按&nbsp;<strong>Ctrl</strong>&nbsp;和向左箭头键。</span></td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">在地址栏中将光标移到上一个关键字词</td></tr><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);"><span style="color:#ff9966;">同时按&nbsp;<strong>Ctrl</strong>&nbsp;和向右箭头键。</span></td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">在地址栏中将光标移到下一个关键字词</td></tr><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);"><strong>Ctrl+Backspace</strong></td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">在地址栏中删除光标前的字词</td></tr><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">用键盘上的方向键从地址栏下拉菜单中选择一个条目，然后按&nbsp;<strong>Shift+Delete</strong>。</td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">从浏览历史记录中删除所选条目（如果可以）。</td></tr><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">用鼠标中键（或鼠标滚轮）点击地址栏下拉菜单中的一个条目。</td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">从后台在新标签页中打开该条目。</td></tr><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">显示地址栏下拉菜单时按&nbsp;<strong>Page Up</strong>&nbsp;或&nbsp;<strong>Page Down</strong>。</td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">选中下拉菜单中的第一个或最后一个条目。</td></tr></tbody></table></div> 
<p style="margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;line-height:30px;color:rgb(34,34,34);font-family:tahoma, arial, 'Microsoft YaHei';text-align:left;background-color:rgb(255,255,255);"></p> 
<h3 style="margin:0px 10px;padding:0px 0px 0px 10px;font-size:14px;color:rgb(34,34,34);font-family:tahoma, arial, 'Microsoft YaHei';text-align:left;background-color:rgb(255,255,255);border-bottom:1px solid rgb(170,170,170);"><a name="t2"></a><a style="color:rgb(51,51,51);"></a>网页快捷键</h3> 
<p style="margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;line-height:30px;color:rgb(34,34,34);font-family:tahoma, arial, 'Microsoft YaHei';text-align:left;background-color:rgb(255,255,255);"></p> 
<div class="table-box"><table class="jbborder" style="border-spacing:0px;border:;text-align:center;margin-top:.54em;clear:both;color:rgb(34,34,34);font-family:tahoma, arial, 'Microsoft YaHei';font-size:14px;background-color:rgb(255,255,255);"><tbody><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);"><strong><span style="color:#ff0000;">Ctrl+P</span></strong></td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">打印当前网页。</td></tr><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);"><strong>Ctrl+S</strong></td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">保存当前网页。</td></tr><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);"><span style="color:#ff0000;"><strong>F5</strong>&nbsp;或&nbsp;<strong>Ctrl+R</strong></span></td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">重新载入当前网页。</td></tr><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);"><strong><span style="color:#ff0000;">Esc</span></strong></td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">停止载入当前网页。</td></tr><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);"><strong><span style="color:#ff0000;">Ctrl+F</span></strong></td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">打开查找栏。</td></tr><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);"><strong><span style="color:#ff0000;">Ctrl+G</span></strong>&nbsp;或&nbsp;<strong>F3</strong></td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">在查找栏中查找下一条与输入内容相匹配的内容。</td></tr><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);"><strong><span style="color:#ff0000;">Ctrl+Shift+G</span></strong>、<strong>Shift+F3</strong>&nbsp;或&nbsp;<strong>Shift+Enter</strong></td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">在查找栏中查找上一条与输入内容相匹配的内容。</td></tr><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">点击鼠标中键（或鼠标滚轮）。</td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">激活自动滚动模式。当您移动鼠标时，网页会根据鼠标的移动方向自动滚动。</td></tr><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);"><strong>Ctrl+F5</strong>&nbsp;或&nbsp;<strong>Shift+F5</strong></td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">重新载入当前网页，忽略缓存的内容。</td></tr><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);"><span style="color:#ff0000;">按住&nbsp;<strong>Alt</strong>&nbsp;键，然后点击链接。</span></td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">下载链接目标。</td></tr><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);"><strong><span style="color:#ff0000;">Ctrl+U</span></strong></td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">打开当前网页的源代码。</td></tr><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">将链接拖到书签栏中</td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">将链接保存为书签。</td></tr><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);"><strong><span style="color:#ff0000;">Ctrl+D</span></strong></td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">将当前网页保存为书签。</td></tr><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);"><strong>Ctrl+Shift+D</strong></td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">将所有打开的网页以书签的形式保存在新文件夹中。</td></tr><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);"><strong>F11</strong></td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">在全屏模式下打开网页。再按一次&nbsp;<strong>F11</strong>&nbsp;可退出全屏模式。</td></tr><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);"><span style="color:#ff0000;"><strong>Ctrl</strong>+<strong>+</strong></span>，或者按住&nbsp;<strong>Ctrl</strong>&nbsp;键并且向上滚动鼠标滚轮。</td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">放大网页上的所有内容。</td></tr><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);"><span style="color:#ff0000;"><strong>Ctrl</strong>+<strong>-</strong></span>，或者按住&nbsp;<strong>Ctrl</strong>&nbsp;键并且向下滚动鼠标滚轮。</td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">缩小网页上的所有内容。</td></tr><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);"><strong>Ctrl+0</strong></td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">将网页上的所有内容都恢复到正常大小。</td></tr><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);"><strong>空格键</strong></td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">向下滚动网页。</td></tr><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);"><strong>Home</strong></td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">转至网页顶部。</td></tr><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);"><strong>End</strong></td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">转至网页底部。</td></tr><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);"><span style="color:#ff0000;">按住&nbsp;<strong>Shift</strong>&nbsp;键的同时滚动鼠标滚轮。</span></td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">在网页上横向滚动。</td></tr></tbody></table></div> 
<h3 style="margin:0px 10px;padding:0px 0px 0px 10px;font-size:14px;color:rgb(34,34,34);font-family:tahoma, arial, 'Microsoft YaHei';text-align:left;background-color:rgb(255,255,255);border-bottom:1px solid rgb(170,170,170);"><a name="t3"></a><a style="color:rgb(51,51,51);"></a><br>文本快捷键</h3> 
<p style="margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;line-height:30px;color:rgb(34,34,34);font-family:tahoma, arial, 'Microsoft YaHei';text-align:left;background-color:rgb(255,255,255);"></p> 
<div class="table-box"><table class="jbborder" style="border-spacing:0px;border:;text-align:center;margin-top:.54em;clear:both;color:rgb(34,34,34);font-family:tahoma, arial, 'Microsoft YaHei';font-size:14px;background-color:rgb(255,255,255);"><tbody><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);"><strong>Ctrl+C</strong></td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">将突出显示的内容复制到剪贴板中。</td></tr><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);"><strong>Ctrl+V</strong>&nbsp;或&nbsp;<strong>Shift+Insert</strong></td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">从剪贴板中粘贴内容。</td></tr><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);"><strong><span style="color:#ff0000;">Ctrl+Shift+V</span></strong></td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">从剪贴板中粘贴内容（不带格式）。</td></tr><tr><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);"><strong>Ctrl+X</strong>&nbsp;或&nbsp;<strong>Shift+Delete</strong></td><td style="margin:0px;padding:.2em .46em;border-color:rgb(204,204,204);">删除突出显示的内容并将其复制到剪贴板中。</td></tr></tbody></table></div>
                </div><div><div></div></div>
        </div>
    ]]></content>
      <categories>
        <category>其它</category>
      </categories>
  </entry>
  <entry>
    <title>时间管理</title>
    <url>/2023/04/18/%E5%85%B6%E5%AE%83/%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<p>1.时间管理原则:</p>
<ul>
<li>赶时间，而非等时间: 时间利用最大化</li>
<li>遵守对时间的承诺: 尊重自己，尊重他人</li>
<li>时间碎片: 零存整取</li>
<li>时间保护: 任务管理与日程安排，以时间块高效处理分类事务</li>
<li>时间黑洞: 全身心投入，专注</li>
</ul>
<p>2.纪录时间，完成记事:</p>
<ul>
<li>实时纪录而非事后补录，提升时间的感知能力</li>
<li>发觉失去的时间，用以分析与调整</li>
</ul>
<p>3.GTD (Getting Things Done)时间管理法:</p>
<ul>
<li>收集: 工具用于纪录，大脑用思考</li>
<li>处理: 分类，避免信息碎片化的累积，可用“重要─紧急”四象限法处理</li>
<li>管理: 睡前设定三件事，起床后执行</li>
<li>执行: 坚决专注，一心移用，番茄钟工作法</li>
<li>回顾: 哪里做不好，调整计划使其更有效率地被执行</li>
<li>可一月回顾一次</li>
</ul>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://www.youtube.com/watch?v=HeoqZY7Ub1w">比爾蓋茨 7個 時間管理 方法，找回失去的時間！以秒计算時間！- YouTube</a></p>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
  </entry>
  <entry>
    <title>研究cgi-bin</title>
    <url>/2023/01/11/%E5%85%B6%E5%AE%83/%E7%A0%94%E7%A9%B6cgi-bin/</url>
    <content><![CDATA[<h2 id="What-is-CGI"><a href="#What-is-CGI" class="headerlink" title="What is CGI"></a>What is CGI</h2><blockquote>
<p>CGI虽然已经被业界主流淘汰，但是通过学习它可以加深WebServer通信、Http协议的深成认识，了解CGI之后就可以学习Servlet，我打算深入学习并打固基础。</p>
</blockquote>
<p><strong>通用网关接口</strong> (Common Gateway Interface，CGI), 是在1990年代早期创建的一个用来在Web服务器和应用程序之间传递信息的标准。</p>
<h3 id="Common"><a href="#Common" class="headerlink" title="Common"></a>Common</h3><p>CGI是一种用于在Web服务器和其它应用程序之间传递信息的标准，具有较高的通用性。</p>
<p>CGI程序可以是任意的可执行程序，例如Java、Perl、Python、Ruby和C&#x2F;C++等。理论上来说，所有支持标准输入和输出、支持获取环境变量的编程语言都能用来编写CGI程序。</p>
<p>Servlet、WSGI（Web Server Gateway Interface，Web 服务器网关接口）等都可以实现类似CGI的功能。</p>
<p>CGI的通用性是一个显著特性，它可以用于各种编程语言，并且可以用来实现各种功能。</p>
<h3 id="Gateway"><a href="#Gateway" class="headerlink" title="Gateway"></a>Gateway</h3><p>CGI可以看作是一个软件网关或者协议翻译机，它负责在Web服务器和应用程序之间通信。通常情况下，Web服务器和应用程序使用的协议是不同的，因此CGI程序负责将Web服务器使用的HTTP协议翻译成应用程序能理解的协议，或者将应用程序使用的协议翻译成HTTP协议。</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20230109222510813.png" alt="image-20230109222510813"></p>
<p>（如上是来自于<a href="https://www.zhihu.com/people/guodongxiaren">果冻虾仁</a>大佬的图，图画的不错&#x2F;&#x2F;&#x2F;）</p>
<p>CGI程序是一种在Web服务器上执行的可执行程序，它可以通过Web服务器处理用户的请求并返回动态生成的内容。Web服务器通常部署在后台服务器上，用于提供Web内容和服务，而后台服务器则是运行在后台的服务器，通常负责处理后台业务逻辑和数据处理。</p>
<p>有一点要注意，就是CGI程序可以获得输入并返回输出，但是它们是通过特定的接口进行交互的，而不是直接从Web服务器中获得输入。关于CGI程序如何从Web服务器中获得输入的细节，可以在下一节中进一步了解。</p>
<h3 id="Interface"><a href="#Interface" class="headerlink" title="Interface"></a>Interface</h3><p>CGI是一种接口协议，它定义了Web服务器和CGI程序之间的通信方式。CGI程序通常部署到Web服务器上，Web服务器会调用CGI程序来处理用户的请求并返回动态生成的内容。CGI协议描述了CGI程序是如何获取用户的输入，如何将输出返回给Web服务器，以及如何处理错误和异常情况。CGI协议并不直接描述报文内容的详细语义，而是描述了CGI程序与Web服务器之间的交互方式。</p>
<h2 id="网页请求与响应"><a href="#网页请求与响应" class="headerlink" title="网页请求与响应"></a>网页请求与响应</h2><p>在进行网页浏览时，通常会通过URL（Uniform Resource Locator，统一资源定位器）是一种用于描述网络位置的字符串，包括了资源协议、主机名、端口号以及路径等信息。浏览器会根据URL中描述的信息向服务器发出HTTP请求，要求服务器返回网页文件。</p>
<p>服务器收到请求后，会根据请求的URL和响应的规则，返回对应的网页文件。这个网页文件可能是一个静态的HTML文件，也可能是一个动态生成的文件，例如通过CGI程序生成的文件。</p>
<p>在服务器返回网页文件后，浏览器会接收到服务器返回的网页文件，并根据文件内容来渲染显示网页。如果这个网页文件包含了图片、视频、音频等多媒体资源，浏览器还会根据文件内容，向服务器发出多个请求来获取这些资源。</p>
<p>当浏览器接受到所有资源之后，将会网页渲染完成，并显示在屏幕上，用户就可以在浏览器中浏览这些网页。</p>
<p>简单来说，在浏览网页时，浏览器通过URL请求网页文件，服务器返回网页文件，浏览器根据文件内容渲染显示页面，这就是浏览网页的一般流程。</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol>
<li><a href="https://www.rfc-editor.org/rfc/rfc3875">RFC 3875: The Common Gateway Interface (CGI) Version 1.1</a></li>
<li><a href="https://www.youtube.com/watch?v=NwRVJX0Ieno">The Magic of cgi-bin</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/25013398">万法归宗——CGI</a></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Github+hexo网站搭建</title>
    <url>/2021/11/10/%E5%8D%9A%E5%AE%A2/Github&amp;hexo%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>&emsp;&ensp;  这个是我在网络上学习博客搭建而编写的教程，在这里我非常的感谢b站的 <a href="https://space.bilibili.com/350090479?spm_id_from=333.788.b_765f7570696e666f.1">CoolPlayer-函博</a>，<a href="https://space.bilibili.com/441519471?spm_id_from=333.788.b_765f7570696e666f.2">视频搬运崽啊</a> 和CSDN社区的大佬们。</p>
<span id="more"></span>
<h2>前言</h2>
<p>使用github pages服务搭建博客的好处有：</p>
<blockquote>
<ul>
<li>全是静态文件，访问速度快；</li>
<li>免费方便，免费搭建个人博客，不需要服务器不需要后台；</li>
<li>可以随意绑定自己的域名；</li>
<li>数据绝对安全，基于github的版本管理，可以恢复历史版本；</li>
<li>博客内容可以轻松打包、转移、发布或分享到其它平台；</li>
<li>.......</li>
</ul>
</blockquote>
<h3>准备工作</h3>
<p>注册 <a href="https://github.com/">github账号</a>
安装node.js、npm、git</p>
<pre><code class="language-bash">node -v
npm -v
git --version</code></pre>
<p>输入以上指令检查软件是否安装，如果有错误请自行<a href="https://www.baidu.com">百度</a>查找原因</p>
<p>本文所使用的环境：</p>
<blockquote>
<p>Windiws 10
node 16.13.0
npm 8.1.0
git 2.34.0</p>
</blockquote>
<h2>搭建github博客</h2>
<h3>创建仓库</h3>
<p>新建一个名为 <font color=red>你的用户名.github.io</font> 的仓库(必须是你的用户名，其他名称无效)，建立之后你的网站访问地址就是http://你的用户名.github.io。
每一个github账户最多只能创建一个这样可以直接使用域名访问的仓库。</p>
<h3>绑定域名</h3>
<p>如果想要你的域名更个性一点，拥有自己的域名那就看看这一步吧:</p>
<p>首先注册一个域名，域名选择一定要选个大公司，在这里我推荐去<a href="https://sg.godaddy.com/zh/offers/domain?isc=gennbacn01&amp;countryview=1&amp;currencyType=CNY&amp;utm_source=baidu&amp;utm_medium=cpc&amp;utm_term=Title&amp;utm_campaign=zh%2Dcn%5Fcorp%2Dcore%5Fsem%5Fbh%5Fb%5Fz%5F001&amp;utm_content=Brandzone%20PC">godaddy</a> ,或者国内的<a href="https://wanwang.aliyun.com/">阿里云</a> 。</p>
<p>域名分为两种：带WWW的和不带WWW的。</p>
<p>域名配置最常见的方式：
1.记录类型分别填CNAME和A。
2.CNAME填写域名。
3.A记录值填写你的<font color=red>你的用户名.github.io</font>的网址IP。</p>
<blockquote>
<p>由于不带www方式只能采用A记录，所以必须先ping一下 <font color=red>你的用户名.github.io</font> 的IP，将ping出来的ip填入A记录值，这样才能保证无论是否添加www都可以访问。</p>
</blockquote>
<p>4.在你的github项目根目录新建一个名为CNAME的文件（无后缀），里面填写你的域名，加不加www看你自己喜好。</p>
<blockquote>
<ul>
<li>如果你填写的是没有www的，比如 mygit.me，那么无论是访问 <a href="http://www.mygit.me">http://www.mygit.me</a> 还是 <a href="http://mygit.me">http://mygit.me</a> ，都会自动跳转到 <a href="http://mygit.me">http://mygit.me</a></li>
<li>如果你填写的是带www的，比如 www.mygit.me ，那么无论是访问 <a href="http://www.mygit.me">http://www.mygit.me</a> 还是 <a href="http://mygit.me">http://mygit.me</a> ，都会自动跳转到 <a href="http://www.mygit.me">http://www.mygit.me</a></li>
<li>如果你填写的是其它子域名，比如 abc.mygit.me，那么访问 <a href="http://abc.mygit.me">http://abc.mygit.me</a> 没问题，但是访问 <a href="http://mygit.me">http://mygit.me</a> ，不会自动跳转到 <a href="http://abc.mygit.me">http://abc.mygit.me</a></li>
</ul>
</blockquote>
<p>5.绑定新域名之后，原来的<font color=red>你的用户名.github.io</font>并没有失效，而是会自动跳转到你的新域名。</p>
<h2>配置SSH key</h2>
<p>提交代码需要你的github权限，直接使用用户名和密码不安全，在这里我们我们使用ssh key来解决本地和服务器的连接问题。</p>
<p>用git bash执行如下命令:</p>
<pre><code class="language-bash">$ git config --global #user.name &quot;git用户名&quot;或邮箱地址 
$ cd ~/.ssh #检查本机已存在的ssh密钥
$ ls
$ ssh-keygen -t rsa -C #&quot;邮箱地址&quot; 连续回车三次</code></pre>
<pre><code class="language-bash">$ vim id_rsa.pub
：wq
$ ssh -T git@github.com    #查看安装成功</code></pre>
<p>查看公钥：cat id_rsa.pub 或者vim id_rsa.pub</p>
<p>复制 id_rsa.pub文件内容到githubkey里add就可以了</p>
<blockquote>
<p>打开github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key
将刚复制的内容粘贴到key那里，title随便填，保存。</p>
</blockquote>
<h3>测试是否成功</h3>
<pre><code class="language-bash">$ ssh -T git@github.com # 注意邮箱地址不用改</code></pre>
<p>如果提示 Are you sure you want to continue connecting (yes/no)?，输入yes，然后会看到：</p>
<blockquote>
<p>Hi liuxianan! You’ve successfully authenticated, but GitHub does not provide shell access.</p>
</blockquote>
<p>看到这个信息说明SSH已配置成功。</p>
<p>此时你还需要配置：</p>
<pre><code class="language-bash">$ git config --global user.name &quot;liuxianan&quot;// 你的github用户名，非昵称
$ git config --global user.email  &quot;xxx@qq.com&quot;// 填写你的github注册邮箱</code></pre>
<p>作用是执行hexo d操作后上传源代码</p>
<h2>使用hexo写博客</h2>
<h3>hexo介绍</h3>
<p><a href="http://hexo.io">Hexo</a>是一个简单、快速、强大的基于 <a href="https://github.com/hexojs/hexo">Github</a> Pages 的博客发布工具，支持Markdown格式，有众多优秀插件和主题。</p>
<h3>原理</h3>
<p>github pages存放的是静态文件，blog存放不只是文章内容，还有文章列表、分类、标签、翻页等动态内容，所以hexo所做的就是将这些md文件都放在本地，每次写完文章后调用写好的命令来批量完成相关页面的生成，然后再将有改动的页面提交到github。</p>
<h3>安装</h3>
<pre><code class="language-bash">$ npm install -g hexo</code></pre>
<h3>初始化</h3>
<p>在电脑建立名为name的文件夹，比如我的是 <font color=red>D:\Workspaces\blog</font> 。</p>
<pre><code class="language-bash">$ cd /D/Workspaces/blog/
$ hexo init</code></pre>
<p>hexo会自动下载一些文件到这个目录，包括node_modules</p>
<pre><code class="language-bash">$ hexo g # 生成
$ hexo s # 启动服务</code></pre>
<p>执行以上命令之后，hexo就会在public文件夹生成相关html文件，这些文件将来都是要提交到github去的。</p>
<pre><code class="language-bash">hexo s #开启本地预览服务</code></pre>
<p>浏览器打开http://localhost:4000 即可看到篇名为 Hello World 的文章，如果浏览器一直加载不出来可能是因为端口占用的缘故。</p>
<blockquote>
<p>解决端口冲突问题请参考这篇文章：
<a href="http://blog.liuxianan.com/windows-port-bind.html">http://blog.liuxianan.com/windows-port-bind.html</a></p>
</blockquote>
<h3>修改主题</h3>
<p>默认主题很丑，我们首先替换一个好看点的主题。这是<a href="https://hexo.io/themes/">官方主题</a> 。</p>
<p>我们以<a href="https://github.com/litten/hexo-theme-yilia">hexo-theme-yilia</a>主题为例:</p>
<p>首先下载这个主题：</p>
<pre><code class="language-bash">$ cd /f/Workspaces/hexo/
$ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia</code></pre>
<p>下载主题在 <font color=red>D:\Workspaces\blog\themes</font> 文件夹里。</p>
<p>修改<font color=red>_config.yml</font>中的<font color=red>theme: landscape</font>改为<font color=red>theme: yilia</font>。</p>
<pre><code class="language-bash">$ hexo clean #清理public文件夹
$ hexo g #重新生成</code></pre>
<h3>备份</h3>
<p>虽然github有版本管理，但备份一下总是好的（以防万一）</p>
<h3>上传到github</h3>
<p>配置 <font color=red>_config.yml</font> 中有关deploy的部分:</p>
<p>正确写法：</p>
<pre><code class="language-bash">deploy:
  type: git
  repository: git@github.com:liuxianan/liuxianan.github.io.git
  branch: master</code></pre>
<p>错误写法：
deploy:
type: github
repository: <a href="https://github.com/liuxianan/liuxianan.github.io.git">https://github.com/liuxianan/liuxianan.github.io.git</a>
branch: master</p>
<p>安装插件：</p>
<pre><code class="language-bash">npm install hexo-deployer-git --save</code></pre>
<p>没有安装此插件会报以下错误：</p>
<pre><code class="language-bash">Deployer not found: github 或 Deployer not found: git</code></pre>
<pre><code class="language-bash">git bash #部署</code></pre>
<p>部署这个命令一定要用git bash，否则会提示 <font color=red>Permission denied (publickey). </font></p>
<pre><code class="language-bash">$ hexo d #上传</code></pre>
<p>将本次有改动的代码全部提交，没有改动的不会</p>
<h3>保留CNAME、README.md等文件</h3>
<p>提交之后网页上一看，发现以前其它代码都没了，此时不要慌，一些非md文件可以把他们放到source文件夹下，这里的所有文件都会原样复制（除了md文件）到public目录。</p>
<p>hexo默认会把所有md文件都转换成html，包括README.md，所有需要每次生成之后、上传之前，手动将README.md复制到public目录，并删除README.html。</p>
<h2>常用hexo命令</h2>
<p>常见命令：</p>
<pre><code class="language-bash">hexo new &quot;postName&quot; #新建文章
hexo new page &quot;pageName&quot; #新建页面
hexo generate #生成静态页面至public目录
hexo server #开启预览访问端口（默认端口4000，&#039;ctrl + c&#039;关闭server）
hexo deploy #部署到GitHub
hexo help  # 查看帮助
hexo version  #查看Hexo的版本</code></pre>
<p>缩写：</p>
<pre><code class="language-bash">hexo n == hexo new
hexo g == hexo generate
hexo s == hexo server
hexo d == hexo deploy</code></pre>
<p>组合命令；</p>
<pre><code class="language-bash">hexo s -g #生成并本地预览
hexo d -g #生成并上传</code></pre>
<h3>_config.yml</h3>
<p>可以在 _config.yml 中修改</p>
<pre><code class="language-bash"># Hexo Configuration
## Docs: http://hexo.io/docs/configuration.html
## Source: https://github.com/hexojs/hexo/
# Site 站点配置
title: Hexo-demo #网站标题
subtitle: hexo is simple and easy to study #网站副标题
description: this is hexo-demo #网栈描述
author: pomy #你的名字
language: zh-CN #网站使用的语言
timezone: Asia/Shanghai #网站时区
# URL #可以不用配置
## If your site is put in a subdirectory, set url as &#039;http://yoursite.com/child&#039; and root as &#039;/child/&#039;
url: http://yoursite.com #网址，搜索时会在搜索引擎中显示
root: / #网站根目录
permalink: :year/:month/:day/:title/ #永久链接格式
permalink_defaults: #永久链接中各部分的默认值
# Directory 目录配置
source_dir: source #资源文件夹，这个文件夹用来存放内容
public_dir: public #公共文件夹，这个文件夹用于存放生成的站点文件
tag_dir: tags #标签文件夹
archive_dir: archives #归档文件夹
category_dir: categories #分类文件夹
code_dir: downloads/code #Include code 文件夹
i18n_dir: :lang #国际化文件夹
skip_render: #跳过指定文件的渲染，您可使用 glob 来配置路径
# Writing 写作配置
new_post_name: :title.md # 新文章的文件名称
default_layout: post #默认布局
titlecase: false # Transform title into titlecase
external_link: true # Open external links in new tab
filename_case: 0 #把文件名称转换为 (1) 小写或 (2) 大写
render_drafts: false #显示草稿
post_asset_folder: false #是否启动资源文件夹
relative_link: false #把链接改为与根目录的相对位址
future: true
highlight: #代码块的设置
enable: true
line_number: true
auto_detect: true
tab_replace:
# Category &amp; Tag 分类 &amp; 标签
default_category: uncategorized #默认分类
category_map: #分类别名
tag_map: #标签别名
# Date / Time format 时间和日期
## Hexo uses Moment.js to parse and display date
## You can customize the date format as defined in
## http://momentjs.com/docs/#/displaying/format/
date_format: YYYY-MM-DD
time_format: HH:mm:ss
# Pagination 分页
## Set per_page to 0 to disable pagination
per_page: 10 #每页显示的文章量 (0 = 关闭分页功能)
pagination_dir: page #分页目录
# Extensions 扩展
## Plugins: http://hexo.io/plugins/ 插件
## Themes: http://hexo.io/themes/ 主题
theme: landscape #当前主题名称
# Deployment #部署到github
## Docs: http://hexo.io/docs/deployment.html
deploy:
type:</code></pre>
<p>一般主题下有一个 languages 文件夹，用于对应 language 配置项。比如在 ejs 中有：</p>
<p>&lt;%= __('tags') %&gt;</p>
<p>language 的配置项是 zh-CN ，则会在 languages 文件夹下找到 zh-CN.yml 文件中对应的项来解释。</p>
<p>修改全局配置时，注意缩进，同时注意冒号后面要有一个空格。</p>
<h3>新建博客文章</h3>
<pre><code class="language-bash">hexo new &#039;my-first-blog&#039;</code></pre>
<p>hexo会帮我们在<font color=red>_posts</font>下生成相关md文件</p>
<p>我们只需要打开这个文件就可以开始写博客了，默认生成如下内容：</p>
<pre><code class="language-bash">---
title: my-first-blog
date: 2021-11-19 10:40:00
tags:
---</code></pre>
<p>也可以直接自己新建md文件，用这个命令的好处是帮我们自动生成了时间。</p>
<p>一般完整格式如下：</p>
<pre><code class="language-bash">---
title: postName #文章页面上的显示名称，一般是中文
date: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改
categories: 默认分类 #分类
tags: [tag1,tag2,tag3] #文章标签，可空，多标签请用格式，注意:后面有个空格
description: 附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面
---

<p>以下是正文</code></pre></p>
<pre><code class="language-bash">hexo new page &quot;my-second-blog&quot;</code></pre>
<p><font color=red>hexo new page 'postName'</font>命令和<font color=red>hexo new 'postName'</font>区别:</p>
<p>最终部署时生成：blog\public\my-second-blog\index.html，但是它不会作为文章出现在博文目录。</p>
<h3>如何让博文列表不显示全部内容</h3>
<p>默认情况下，生成的博文目录会显示全部的文章内容，如何设置文章摘要的长度呢？</p>
<p>答案：是在合适的位置加上<!--more-->即可，例如：</p>
<pre><code class="language-bash">这个是我在网络上学习的Github+hexo搭建的网站，在这里我非常的感谢b站的 [CoolPlayer-函博](https://space.bilibili.com/350090479?spm_id_from=333.788.b_765f7570696e666f.1)，[视频搬运崽啊](https://space.bilibili.com/441519471?spm_id_from=333.788.b_765f7570696e666f.2) 和CSDN社区的大佬们。

<p>&lt;!–more–&gt;</p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>使用github pages服务搭建博客的好处有：</p>
<blockquote>
<ul>
<li>全是静态文件，访问速度快；</li>
<li>免费方便，免费搭建个人博客，不需要服务器不需要后台；</li>
<li>可以随意绑定自己的域名；</li>
<li>数据绝对安全，基于github的版本管理，可以恢复历史版本；</li>
<li>博客内容可以轻松打包、转移、发布或分享到其它平台；</li>
<li>…….</code></pre></li>
</ul>
</blockquote>
<h3>Custom 404页面</h3>
<p>在blog/source目录下创建404.html</p>
<p>404.html的内容可以设置为下面的内容 _config.yml中的permalink_defaults属性不需要修改）.</p>
<pre><code class="language-bash">---
layout: default
---
&lt;html&gt;
    &lt;head&gt;
         &lt;meta charset=&quot;UTF-8&quot; /&gt;
         &lt;title&gt;404&lt;/title&gt;                                                                                                                                        
    &lt;/head&gt;
    &lt;body&gt;
         &lt;script type=&quot;text/javascript&quot; src=&quot;http://www.qq.com/404/search_children.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;</code></pre>
<p>简化:</p>
<pre><code class="language-bash">&lt;script type=&quot;text/javascript&quot; src=&quot;http://www.qq.com/404/search_children.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</code></pre>
<h2>其他</h2>
<h3>中文乱码</h3>
<p>在md 文件中写中文内容，发布出来后为乱码，原因是md的编码不对，将md文件另存为“UTF-8”编码的文件即可解决问题。</p>]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>github</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Alist美化</title>
    <url>/2022/07/31/%E5%8D%9A%E5%AE%A2/Alist%E7%BE%8E%E5%8C%96/</url>
    <content><![CDATA[<p><a href="https://github.com/alist-org/alist">Alist官网</a></p>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果:"></a>效果:</h2><p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220731233318449.png" alt="image-20220731233318449"></p>
<p>参考以下API：<br><a href="https://github.com/metowolf/MetingJS">aplayer、meting</a><br><a href="https://github.com/stevenjoezhang/live2d-widget">live2d-widget</a></p>
<h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><p>head：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.chakra-ui-light</span>&#123;</span><br><span class="language-css">      <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;https://www.dmoe.cc/random.php&quot;</span>) <span class="hljs-meta">!important</span>;</span><br><span class="language-css">      <span class="hljs-attribute">background-repeat</span>:no-repeat;<span class="hljs-attribute">background-size</span>:cover;<span class="hljs-attribute">background-attachment</span>:fixed;<span class="hljs-attribute">background-position</span>-x:center;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.main-box</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">15px</span> <span class="hljs-meta">!important</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.chakra-ui-light</span> <span class="hljs-selector-class">.main-box</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ffffff70</span> <span class="hljs-meta">!important</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.chakra-ui-light</span> <span class="hljs-selector-class">.readme-box</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">background-color</span>: white <span class="hljs-meta">!important</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.readme-box</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">15px</span> <span class="hljs-meta">!important</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"> </span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br> <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://eqcn.ajz.miesnfu.com/wp-content/plugins/wp-3d-pony/live2dw/lib/L2Dwidget.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br> <br><span class="hljs-comment">&lt;!-- 看板娘 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/font-awesome/css/font-awesome.min.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/gh/stevenjoezhang/live2d-widget@latest/autoload.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br> <br><span class="hljs-comment">&lt;!--鼠标点击效果--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/js/maodian.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br> <br><span class="hljs-comment">&lt;!-- aplayer、meting --&gt;</span><br><span class="hljs-comment">&lt;!-- require APlayer --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-comment">&lt;!-- require MetingJS --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br> <br><span class="hljs-comment">&lt;!-- nplayer --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/nplayer@latest/dist/index.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>body：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meting-js</span> </span><br><span class="hljs-tag"><span class="hljs-attr">auto</span> = <span class="hljs-string">&quot;https://y.qq.com/n/ryqq/playlist/2970622459.html&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">fixed</span> = <span class="hljs-string">true</span></span><br><span class="hljs-tag">&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">meting-js</span>&gt;</span><br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>博客</category>
      </categories>
  </entry>
  <entry>
    <title>HelloWord</title>
    <url>/2022/07/12/%E5%8D%9A%E5%AE%A2/HelloWord/</url>
    <content><![CDATA[<!-- wp:paragraph -->
<p>helloword</p>
<!-- /wp:paragraph -->
<p>注在此之前的文章都是当初从github的hexo博客搬过来的，当时在学校也就写了那么几个= =</p>

<p>来自QQ空间：<br>Ok,我的博客又活了。首先感谢各位前辈们，新网址已加入二级域名，原网址计划建成主页导航，博客网址：bolg.wrxinyue.cn。<br>关于<br>本博客使用wordpress+sakura主题制作并进行修改，框架：php7.1，apache2.4.53(已放弃nginx)，MySQL 5.6.50。<br>sakura主题使用感受:<br>该主题不兼容PHP7.4以上版本，以后可能需要考虑手动改框架。对sakura主题进行美化，修复了hermit x播放器的问题，更新了图片API，添加了live2d并进行适配。再次感谢这些前辈们的无私奉献的开源精神<br><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/passr1.png" alt="passr1"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220808080125468.png" alt="image-20220808080125468"></p>
<p><strong>原HEXO博客样式：</strong><br><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221027004152466.png" alt="image-20221027004152466"><br>地址：<a href="https://wrxinyue.github.io/blog/">https://wrxinyue.github.io/blog/</a></p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
  </entry>
  <entry>
    <title>Hexo + OBSIDIAN 插件配置</title>
    <url>/2023/04/18/%E5%8D%9A%E5%AE%A2/Hexo%20and%20OBSIDIAN%20%E6%8F%92%E4%BB%B6%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>写了很久博客了，原来halo搭建的博客又转移到hexo了，转移原因如下：</p>
<ol>
<li>写文章不方便。每次在本地Typora写完一次笔记，都要登录网站粘贴进去， 很麻烦。</li>
<li>需要定期维护网站。网站稳定点还好，但是我那个腾讯服务器经常死机，哎真麻烦</li>
</ol>
<h3 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h3><p><strong>本次用到的插件：</strong></p>
<ul>
<li>Image auto upload Plugin (PicGo图床上传)</li>
<li>Obsidian Git (快速Git上传)</li>
<li>Templater (文件元数据模板)</li>
<li>Update time on edit (自动更新时间)</li>
</ul>
<h4 id="PicGo图床上传"><a href="#PicGo图床上传" class="headerlink" title="PicGo图床上传"></a>PicGo图床上传</h4><p>前置条件：安装并配置<a href="https://github.com/Molunerfinn/PicGo">PicGo</a><br>安装插件：Image auto upload Plugin</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/20230417184305.png" alt="image.png"></p>
<h4 id="快速Git上传"><a href="#快速Git上传" class="headerlink" title="快速Git上传"></a>快速Git上传</h4><p>安装插件：Obsidian Git</p>
<p>根据喜好可以设置自动git推送 (推荐手动)</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/20230417184729.png" alt="image.png"></p>
<p>Ctrl + P 快捷键输入命令，如 输入git可以看到所有命令</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/20230417191104.png" alt="image.png"></p>
<h4 id="文件元数据模板"><a href="#文件元数据模板" class="headerlink" title="文件元数据模板"></a>文件元数据模板</h4><p>安装插件：Templater</p>
<p>这个是自动配置模板的，要开始使用 Templator，必须创建一个目录来存储模板的 markdown 文件，如 Templator 文件夹位置中所述。<br><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/63a78a3dd59149e65b5b0dbe.jpg" alt="63a78a3dd59149e65b5b0dbe.jpg"></p>
<p>在我的环境中，还存放了核心插件的模板，所以目录结构如下。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">Templates/<br>├── Template MOC.md <span class="hljs-comment"># 手册</span><br>├── Template/ <span class="hljs-comment"># 核心插件的模板</span><br>└── Templater Plugin/ <span class="hljs-comment"># 社区插件的模板</span><br></code></pre></td></tr></table></figure>

<p><code>Template MOC.md</code>描述了模板文件以及如何使用它。 <code>Templater Plugin</code>将模板文件移动到目录后，在Template Plugin设置画面的Template Folder Location项目中输入路径。<br><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/50537c20f0744f1ba8edffd4.jpg" alt="50537c20f0744f1ba8edffd4.jpg"></p>
<p>我的 Templater Plugin 配置如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">---<br>title: &lt;% tp.file.title %&gt;<br>categories:<br> - &lt;% tp.file.folder(relative=true) %&gt;<br>tags:<br> - &#x27;&#x27;<br>data: &lt;% tp.date.now(format=&quot;YYYY-MM-DD HH:mm:ss&quot;) %&gt;<br>updated: &#x27;&#x27;<br>---<br></code></pre></td></tr></table></figure>

<p>Alt+ E 快捷键使用模板</p>
<p>详细配置可以看<a href="https://silentvoid13.github.io/Templater/introduction.html">官方文档</a></p>
<h4 id="自动更新时间"><a href="#自动更新时间" class="headerlink" title="自动更新时间"></a>自动更新时间</h4><p>安装插件：Update time on edit</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/20230417190820.png" alt="image.png"></p>
<h3 id="设置钩子函数自动生成静态资源"><a href="#设置钩子函数自动生成静态资源" class="headerlink" title="设置钩子函数自动生成静态资源"></a>设置钩子函数自动生成静态资源</h3><p><code>.git\hooks</code> 创建一个名为pre-commit的文件，内容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br><span class="hljs-comment"># pre-commit</span><br><br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[1;35mRunning pre-commit checks\033[0m&quot;</span><br><br><span class="hljs-comment"># Run your compile command here</span><br>hexo clean &amp;&amp; hexo g<br><br><span class="hljs-comment"># Add the compiled files</span><br>git add .<br><br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[1;35mStatic resource to generate success\033[0m&quot;</span><br><br><span class="hljs-comment"># If all checks have passed, run git commit with the original commit message</span><br><span class="hljs-built_in">exec</span> git commit -m <span class="hljs-string">&quot;Auto commit at <span class="hljs-subst">$(date)</span>&quot;</span> --no-verify<br></code></pre></td></tr></table></figure>


<h3 id="下一步打算"><a href="#下一步打算" class="headerlink" title="下一步打算"></a>下一步打算</h3><p>当然是写一个自己的博客系统了，最重要的实现和hexo博客实时同步功能，这样就可以实现一个博客编写多个博客同步了</p>
<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><ol>
<li><a href="https://publish.obsidian.md/chinesehelp/">Obsidian中文教程</a></li>
<li><a href="https://zenn.dev/estra/books/obsidian-dot-zenn/viewer/a-oz-add-plugins">プラグインを導入しよう｜Obsidian.Zenn</a></li>
</ol>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>obsidian</tag>
      </tags>
  </entry>
  <entry>
    <title>hugo+github+vercel导航搭建</title>
    <url>/2023/01/09/%E5%8D%9A%E5%AE%A2/hugo&amp;github&amp;vercel%E5%AF%BC%E8%88%AA%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h2 id="安装hugo"><a href="#安装hugo" class="headerlink" title="安装hugo"></a>安装hugo</h2><p>注：再此之前需要安装choco包管理器</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs powershell">choco install hugo <span class="hljs-literal">-confirm</span><br></code></pre></td></tr></table></figure>



<h2 id="使用Hugo创建博客"><a href="#使用Hugo创建博客" class="headerlink" title="使用Hugo创建博客"></a>使用Hugo创建博客</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 创建名为navigation的博客</span><br>hugo new site navigation<br></code></pre></td></tr></table></figure>



<h2 id="下载博客主题"><a href="#下载博客主题" class="headerlink" title="下载博客主题"></a>下载博客主题</h2><ol>
<li><p>进入<strong>themes</strong>文件夹，并打开cmd</p>
</li>
<li><p>输入<code>git clone https://github.com/shenweiyan/WebStack-Hugo.git</code></p>
</li>
<li><p>themes&#x2F;WebStack-Hugo&#x2F;exampleSite 目录下的所有文件复制到 hugo 站点根目录</p>
<p><code>copy WebStack-Hugo/exampleSite/* .. -force &amp;&amp; cd..</code></p>
</li>
</ol>
<p>此时我们回到根目录发现，我们的文件已经复制成功。（ps：个人还是比较习惯用命令端）</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20230106105546449.png" alt="image-20230106105546449"></p>
<h2 id="删除-git文件夹-如果有"><a href="#删除-git文件夹-如果有" class="headerlink" title="删除.git文件夹(如果有)"></a>删除.git文件夹(如果有)</h2><blockquote>
<p>注：如果git的主题有.git和.github文件夹，我们就需要手动删除，否则在推送的时候主题就会出现问题</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">删除 .git 和 .github 文件,注意！这里我用的是powershell，cmd命令：</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">rd /s /q .git &amp;&amp; rd /s /q .github</span><br>Remove-Item -Recurse -Force .git &amp;&amp; Remove-Item -Recurse -Force .github<br></code></pre></td></tr></table></figure>


<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20230106151544960.png" alt="image-20230106151544960"></p>
<h2 id="启动Hugo预览服务器"><a href="#启动Hugo预览服务器" class="headerlink" title="启动Hugo预览服务器"></a>启动Hugo预览服务器</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs powershell">hugo.exe server<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20230106105906332.png" alt="image-20230106105906332"></p>
<p>点击并进入 <a href="http://localhost:1313/">http://localhost:1313/</a> ，进入之后就可以看到我们的站点创建成功了！</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20230106110117114.png" alt="image-20230106110117114"></p>
<h2 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 创建名为navigation的博客</span><br>hugo new site navigation<br><span class="hljs-built_in">cd</span> navigation\themes<br><span class="hljs-comment"># 下载博客主题</span><br>git clone https://github.com/shenweiyan/WebStack<span class="hljs-literal">-Hugo</span>.git<br><span class="hljs-built_in">cd</span> WebStack<span class="hljs-literal">-Hugo</span>/<br><span class="hljs-comment"># 复制文件到根目录</span><br><span class="hljs-built_in">copy</span> exampleSite/* ..\.. <span class="hljs-literal">-force</span><br><span class="hljs-comment"># 删除 .git 和 .github 文件</span><br><span class="hljs-comment"># rd /s /q .git &amp;&amp; rd /s /q .github</span><br><span class="hljs-built_in">Remove-Item</span> <span class="hljs-literal">-Recurse</span> <span class="hljs-literal">-Force</span> .git &amp;&amp; <span class="hljs-built_in">Remove-Item</span> <span class="hljs-literal">-Recurse</span> <span class="hljs-literal">-Force</span> .github<br><span class="hljs-built_in">cd</span> ..\..<br><span class="hljs-comment"># 启动Hugo预览服务器</span><br>hugo.exe server<br></code></pre></td></tr></table></figure>

<h1 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h1><p>官方文档：<a href="https://www.yuque.com/shenweiyan/cookbook/webstack-hugo">WebStack-Hugo | 一个静态响应式网址导航主题 (yuque.com)</a></p>
<p>详细说明我就不写了，官方文档都有，我们来简单配置一下，在根目录data创建一个<strong>webstack.yml</strong>的文件配置如下:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><code class="hljs yml"><span class="hljs-bullet">-</span> <span class="hljs-attr">taxonomy:</span> <span class="hljs-string">科研办公</span><br>  <span class="hljs-attr">icon:</span> <span class="hljs-string">fas</span> <span class="hljs-string">fa-flask</span> <span class="hljs-string">fa-lg</span><br>  <span class="hljs-attr">list:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">term:</span> <span class="hljs-string">生物信息</span><br>      <span class="hljs-attr">links:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">title:</span> <span class="hljs-string">NCBI</span><br>          <span class="hljs-attr">logo:</span> <span class="hljs-string">ncbi.jpg</span><br>          <span class="hljs-attr">url:</span> <span class="hljs-string">https://www.ncbi.nlm.nih.gov/</span><br>          <span class="hljs-attr">description:</span> <span class="hljs-string">National</span> <span class="hljs-string">Center</span> <span class="hljs-string">for</span> <span class="hljs-string">Biotechnology</span> <span class="hljs-string">Information.</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">title:</span> <span class="hljs-string">Bioconda</span><br>          <span class="hljs-attr">logo:</span> <span class="hljs-string">bioconda.jpg</span><br>          <span class="hljs-attr">url:</span> <span class="hljs-string">https://anaconda.org/bioconda/</span><br>          <span class="hljs-attr">description:</span> <span class="hljs-string">&quot;Bioconda :: Anaconda.org.&quot;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">term:</span> <span class="hljs-string">云服务器</span><br>      <span class="hljs-attr">links:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">title:</span> <span class="hljs-string">阿里云</span><br>          <span class="hljs-attr">logo:</span> <span class="hljs-string">阿里云.jpg</span><br>          <span class="hljs-attr">url:</span> <span class="hljs-string">https://www.aliyun.com/</span><br>          <span class="hljs-attr">description:</span> <span class="hljs-string">上云就上阿里云。</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">title:</span> <span class="hljs-string">腾讯云</span><br>          <span class="hljs-attr">logo:</span> <span class="hljs-string">腾讯云.jpg</span><br>          <span class="hljs-attr">url:</span> <span class="hljs-string">https://cloud.tencent.com/</span><br>          <span class="hljs-attr">description:</span> <span class="hljs-string">产业智变，云启未来。</span><br></code></pre></td></tr></table></figure>

<h1 id="github-vercel网页托管"><a href="#github-vercel网页托管" class="headerlink" title="github+vercel网页托管"></a>github+vercel网页托管</h1><h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><p>正常创建仓库即可，这里我可见选择的是<strong>Private</strong></p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20230106111615936.png" alt="image-20230106111615936"></p>
<h2 id="提交仓库"><a href="#提交仓库" class="headerlink" title="提交仓库"></a>提交仓库</h2><p>创建成功之后，我们把仓库地址复制一些，然后回到我们的shell窗口把项目提交到仓库</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20230106112130392.png" alt="image-20230106112130392"></p>
<p><strong>具体命令如下：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">git init<br>git add .<br>git commit -m &quot;first commit&quot;<br>git checkout -b main<br>git remote add origin https://github.com/WRXinYue/navigation.git<br>git push -u origin main<br></code></pre></td></tr></table></figure>



<h2 id="vercel"><a href="#vercel" class="headerlink" title="vercel"></a>vercel</h2><p>关于注册我就不详细说了网上教程一大堆，我们直接快速进入；</p>
<ol>
<li><p>点击<strong>Add New…</strong>,进入页面之后登录GitHub账号进行导入</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20230106113546800.png" alt="image-20230106113546800"></p>
</li>
<li><p>找到我们仓库的项目，然后点击<strong>Import</strong>导入</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20230106113635403.png" alt="image-20230106113635403"></p>
</li>
<li><p>Framework Preset选择<strong>Hugo</strong>，然后点击<strong>Deploy</strong>进行部署</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20230106113759267.png" alt="image-20230106113759267"></p>
</li>
<li><p>部署成功!是不是很easy呢，之后可以根据自己的喜爱进行修改域名以及样式</p>
</li>
</ol>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>github</tag>
        <tag>hugo</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown语法</title>
    <url>/2021/11/20/%E5%8D%9A%E5%AE%A2/Markdown%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<p>前言：在建造博客网站时我是第一次接触到关于Markdown的文本语言，Markdown经常会被用来写博客使用，Markdown学起来很简单，下面是我整理的关于Markdown语法手册，希望能帮到像我这样刚刚学会建立博客网站的萌新。</p>
<h2>Markdown 标题</h2>
<p>= 和 - 标记语法格式如下：</p>
<pre><code class="language-bash">我展示的是一级标题
=================

<p>我展示的是二级标题<br>—————–</code></pre></p>
<p>使用 # 号可表示 1-6 级标题，一级标题对应一个 # 号，二级标题对应两个 # 号，以此类推：</p>
<pre><code class="language-bash"># 一级标题
## 二级标题
### 三级标题
#### 四级标题
##### 五级标题
###### 六级标题</code></pre>
<h2>Markdown 段落</h2>
<p>Markdown 段落没有特殊的格式，直接编写文字就好，段落的换行是使用两个以上空格加上回车。</p>
<h3>字体</h3>
<p>Markdown 可以使用以下几种字体：</p>
<pre><code class="language-bash">*斜体文本*
_斜体文本_
**粗体文本**
__粗体文本__
***粗斜体文本***
___粗斜体文本___</code></pre>
<p>显示效果：</p>
<p><em>斜体文本</em>
<em>斜体文本</em>
<strong>粗体文本</strong>
<strong>粗体文本</strong>
<strong><em>粗斜体文本</em></strong>
<strong><em>粗斜体文本</em></strong></p>
<h3>分割线</h3>
<pre><code class="language-bash">***
* * *
*****
- - -
----------</code></pre>
<p>显示效果：</p>
<hr />
<hr />
<hr />
<hr />
<hr />
<h3>删除线</h3>
<pre><code class="language-bash">~~删除线~~</code></pre>
<p><del>删除线</del></p>
<h3>下划线</h3>
<pre><code class="language-bash">&lt;u&gt;下划线文本&lt;/u&gt;</code></pre>
<p><u>下划线文本</u></p>
<h3>脚注</h3>
<p>脚注是对文本的补充说明。</p>
<p>Markdown 脚注的格式如下:</p>
<pre><code class="language-bash">注释[^要注明的文本]

<p>显示效果：</p>
<p>注释<a href="这是一个注释">^要注明的文本</a></p>
<h2>Markdown 列表</h2>
<p>Markdown 支持有序列表和无序列表。</p>
<p>无序列表使用星号(*)、加号(+)或是减号(-)作为列表标记，这些标记后面要添加一个空格，然后再填写内容：</p>
<pre><code class="language-bash">* 第一项
* 第二项
* 第三项

<ul>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ul>
<ul>
<li>第一项</li>
<li>第二项</li>
<li>第三项</code></pre><p>显示效果：</p>
<ul>
<li>
<p>第一项</p>
</li>
<li>
<p>第二项</p>
</li>
<li>
<p>第三项</p>
</li>
<li>
<p>第一项</p>
</li>
<li>
<p>第二项</p>
</li>
<li>
<p>第三项</p>
</li>
<li>
<p>第一项</p>
</li>
<li>
<p>第二项</p>
</li>
<li>
<p>第三项</p>
</li>
</ul>
<p>有序列表使用数字并加上 . 号来表示，如：</p>
<pre><code class="language-bash">1. 第一项</li>
</ul>
<ol start="2">
<li>第二项</li>
<li>第三项</code></pre><p>显示效果：</p>
<ol>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ol>
<h3>列表嵌套</h3>
<pre><code class="language-bash">1. 第一项：
 - 第一项嵌套的第一个元素
 - 第一项嵌套的第二个元素</li>
<li>第二项：<ul>
<li>第二项嵌套的第一个元素</li>
<li>第二项嵌套的第二个元素</code></pre><p>显示效果：</p>
<ol>
<li>第一项：
<ul>
<li>第一项嵌套的第一个元素</li>
<li>第一项嵌套的第二个元素</li>
</ul></li>
<li>第二项：
<ul>
<li>第二项嵌套的第一个元素</li>
<li>第二项嵌套的第二个元素</li>
</ul></li>
</ol>
<h2>Markdown 区块</h2>
<p>Markdown 区块引用是在段落开头使用 &gt; 符号 ，然后后面紧跟一个空格符号：</p>
<pre><code class="language-bash">> 区块引用</code></pre>
<p>显示效果：</p>
<blockquote>
<p>区块引用</p>
</blockquote>
<p>区块是可以嵌套的：</p>
<pre><code class="language-bash">> 最外层
> &gt; 第一层嵌套
> &gt; &gt; 第二层嵌套</code></pre>
<p>显示效果：</p>
<blockquote>
<p>最外层</p>
<blockquote>
<p>第一层嵌套</p>
<blockquote>
<p>第二层嵌套</p>
</blockquote>
</blockquote>
</blockquote>
<h3>区块中使用列表</h3>
<p>区块中使用列表实例如下：</p>
<pre><code class="language-bash">> 区块中使用列表
> 1. 第一项
> 2. 第二项
> + 第一项
> + 第二项
> + 第三项</code></pre>
<p>显示效果：</p>
<blockquote>
<p>区块中使用列表</p>
<ol>
<li>第一项</li>
<li>第二项</li>
</ol>
<ul>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ul>
</blockquote>
<h3>列表中使用区块</h3>
<p>如果要在列表项目内放进区块，那么就需要在 &gt; 前添加四个空格的缩进。</p>
<p>列表中使用区块实例如下：</p>
<pre><code class="language-bash">* 第一项
 &gt; 嵌套的第一个元素
 &gt; 嵌套的第二个元素</li>
</ul>
</li>
</ol>
<ul>
<li>第二项</code></pre><ul>
<li>
<p>第一项</p>
<blockquote>
<p>嵌套的第一个元素
嵌套的第二个元素</p>
</blockquote>
</li>
<li>
<p>第二项</p>
</li>
</ul>
<h2>Markdown 代码</h2>
<p>如果是段落上的一个函数或片段的代码可以用反引号把它包起来（`），例如：</p>
<pre><code class="language-bash">`printf()` 函数</code></pre>
<h3>代码区块</h3>
<p>代码区块使用 4 个空格或者一个制表符（Tab 键）:</p>
<pre><code class="language-bash">    &lt;?php #在开头前面加
  echo &#039;blog&#039;;
  function test() &#123;
      echo &#039;test&#039;;
  &#125;</code></pre>
<p>显示效果：</p>
<pre><code><?php
echo 'bolg';
function test() &#123;
  echo 'test';
&#125;</code></pre>
<p>还可以用```或~~~包裹一段代码，可以指定语言：</p>
<pre><code>``` javascrpt
$(document).ready(function () &#123;
  alert(&#039;blog&#039;);
&#125;);</li>
</ul>
<pre><code class="&lt;/code&gt;&lt;/pre&gt;">&lt;p&gt;显示效果：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascrpt&quot;&gt;$(document).ready(function () &#123;
    alert(&amp;#039;blog&amp;#039;);
&#125;);&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Markdown 链接&lt;/h2&gt;
&lt;p&gt;使用方法如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;[链接名称](链接地址)

或者

&amp;lt;链接地址&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;p&gt;这是一个链接 &lt;a href=&quot;https://www.baidu.com&quot;&gt;百度&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;直接使用链接地址：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;https://www.baidu.com&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;显示效果：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.baidu.com&quot;&gt;https://www.baidu.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;高级链接&lt;/p&gt;
&lt;p&gt;通过变量来设置一个链接，变量赋值在文档末尾进行：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;这个链接用 1 作为网址变量 [Google][1]
这个链接用 2 作为网址变量 [baidu][2]
然后在文档的结尾为变量赋值（网址）

[1]: http://www.google.com/
  [baidu]: http://www.baidu.com/&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;显示效果：&lt;/p&gt;
&lt;p&gt;这个链接用 1 作为网址变量 &lt;a href=&quot;http://www.google.com/&quot;&gt;Google&lt;/a&gt;
这个链接用 2 作为网址变量 &lt;a href=&quot;http://www.baidu.com/&quot;&gt;baidu&lt;/a&gt;
然后在文档的结尾为变量赋值（网址）&lt;/p&gt;
&lt;h2&gt;Markdown 图片&lt;/h2&gt;
&lt;p&gt;Markdown 图片语法格式如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;![alt 属性文本](图片地址)

![alt 属性文本](图片地址 &amp;quot;可选标题&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;开头一个感叹号 !&lt;/li&gt;
&lt;li&gt;接着一个方括号，里面放上图片的替代文字&lt;/li&gt;
&lt;li&gt;接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 &#39;title&#39; 属性的文字。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;显示效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://wrxinyue.github.io/blog/img/welcome/welcome.jpg&quot; alt=&quot;welcome 图片&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://wrxinyue.github.io/blog/img/welcome/home2.jpg&quot; alt=&quot;home 图片&quot; title=&quot;home2&quot; /&gt;&lt;/p&gt;
&lt;p&gt;显示效果：&lt;/p&gt;
&lt;img src=&quot;https://wrxinyue.github.io/blog/img/welcome/welcome2.jpg&quot; width=&quot;50%&quot;&gt;
&lt;h2&gt;Markdown 表格&lt;/h2&gt;
&lt;p&gt;Markdown 制作表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行。&lt;/p&gt;
&lt;p&gt;语法格式如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;|  表头   | 表头  |
|  ----  | ----  |
| 单元格  | 单元格 |
| 单元格  | 单元格 |&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;显示效果：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;表头&lt;/th&gt;
&lt;th&gt;表头&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;单元格&lt;/td&gt;
&lt;td&gt;单元格&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;单元格&lt;/td&gt;
&lt;td&gt;单元格&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;我们可以设置表格的对齐方式：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;-: 设置内容和标题栏居右对齐。&lt;/li&gt;
&lt;li&gt;:- 设置内容和标题栏居左对齐。&lt;/li&gt;
&lt;li&gt;:-: 设置内容和标题栏居中对齐。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;实例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;| 左对齐 | 右对齐 | 居中对齐 |
| :-----| ----: | :----: |
| 单元格 | 单元格 | 单元格 |
| 单元格 | 单元格 | 单元格 |&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;显示效果:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align: left;&quot;&gt;左对齐&lt;/th&gt;
&lt;th style=&quot;text-align: right;&quot;&gt;右对齐&lt;/th&gt;
&lt;th style=&quot;text-align: center;&quot;&gt;居中对齐&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;单元格&lt;/td&gt;
&lt;td style=&quot;text-align: right;&quot;&gt;单元格&lt;/td&gt;
&lt;td style=&quot;text-align: center;&quot;&gt;单元格&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;单元格&lt;/td&gt;
&lt;td style=&quot;text-align: right;&quot;&gt;单元格&lt;/td&gt;
&lt;td style=&quot;text-align: center;&quot;&gt;单元格&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;Markdown 高级技巧&lt;/h2&gt;
&lt;h3&gt;支持的 HTML 元素&lt;/h3&gt;
&lt;p&gt;不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。
目前支持的 HTML 元素有：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;kbd&amp;gt; &amp;lt;b&amp;gt; &amp;lt;i&amp;gt; &amp;lt;em&amp;gt; &amp;lt;sup&amp;gt; &amp;lt;sub&amp;gt; &amp;lt;br&amp;gt;...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;使用 &amp;lt;kbd&amp;gt;Ctrl&amp;lt;/kbd&amp;gt;+&amp;lt;kbd&amp;gt;Alt&amp;lt;/kbd&amp;gt;+&amp;lt;kbd&amp;gt;Del&amp;lt;/kbd&amp;gt; 重启电脑&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;转义&lt;/h3&gt;
&lt;p&gt;Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;**文本加粗** 
\*\* 正常显示星号 \*\*&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;显示效果：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;文本加粗&lt;/strong&gt;
** 正常显示星号 **&lt;/p&gt;
&lt;p&gt;Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;\   反斜线
`   反引号
*   星号
_   下划线
&#123;&#125;  花括号
[]  方括号
()  小括号
#   井字号
+   加号
-   减号
.   英文句点
!   感叹号&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;公式&lt;/h3&gt;
&lt;p&gt;在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$$
\mathbf&#123;V&#125;_1 \times \mathbf&#123;V&#125;_2 =  \begin&#123;vmatrix&#125; 
\mathbf&#123;i&#125; &amp;amp; \mathbf&#123;j&#125; &amp;amp; \mathbf&#123;k&#125; \\
\frac&#123;\partial X&#125;&#123;\partial u&#125; &amp;amp;  \frac&#123;\partial Y&#125;&#123;\partial u&#125; &amp;amp; 0 \\
\frac&#123;\partial X&#125;&#123;\partial v&#125; &amp;amp;  \frac&#123;\partial Y&#125;&#123;\partial v&#125; &amp;amp; 0 \\
\end&#123;vmatrix&#125;
$&#123;$tep1&#125;&#123;\style&#123;visibility:hidden&#125;&#123;(x+1)(x+1)&#125;&#125;
$$&lt;/code&gt;&lt;/pre&gt;
</code></pre>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
  </entry>
  <entry>
    <title>.mo、po、.pot文件和wordpress汉化</title>
    <url>/2022/08/07/%E5%8D%9A%E5%AE%A2/mo%E3%80%81po%E3%80%81pot%E6%96%87%E4%BB%B6%E5%92%8Cwordpress%E6%B1%89%E5%8C%96/</url>
    <content><![CDATA[<h2 id="mo、po、和-pot文件介绍"><a href="#mo、po、和-pot文件介绍" class="headerlink" title=".mo、po、和.pot文件介绍"></a>.mo、po、和.pot文件介绍</h2><blockquote>
<p>MO文件：MO，即机器对象，是一个二进制数据文件，包含了程序所引用的对象数据。它通常被用来翻译程序代码，并可以被加载或导入GNU gettext程序中。</p>
<p>PO文件：PO文件是包含实际翻译的文件。每种语言都会有自己的PO文件，例如，中文会有zh_CN文件，法语会有fr.po文件，德语会有de.po，美式英语可能有en_US.po。</p>
<p>POT文件：POT文件是PO文件的模板文件。它们会把所有的翻译字符串留空。一个POT文件本质上是一个没有翻译的空PO文件，只有原始字符串。</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220807172654931.png" alt="image-20220807172654931"></p>
<h2 id="wordpress的汉化机制"><a href="#wordpress的汉化机制" class="headerlink" title="wordpress的汉化机制"></a>wordpress的汉化机制</h2><ol>
<li><p>在php文件中，需要汉化的地方使用__()或_e()函数进行标识；</p>
<p>​	_()函数<strong>返回</strong>翻译后的字符串，而<code>__e()</code>函数<strong>打印</strong>出翻译后的字符串。其实<code>__e()</code>就相当于echo __()。</p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220807182117393.png" alt="image-20220807182117393"></p>
</li>
<li><p>创建.po文件，进行翻译；</p>
</li>
<li><p>将.po文件编译成.mo文件；</p>
</li>
<li><p>向主题中加载.mo文件。</p>
</li>
</ol>
<h2 id="poedit的使用方法："><a href="#poedit的使用方法：" class="headerlink" title="poedit的使用方法："></a>poedit的使用方法：</h2><p>打开我们的<code>zh_CN.po</code>文件，然后点击翻译-从源代码更新，就可以获取到我们要翻译的单词</p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220807181803921.png" alt="image-20220807181803921"></p>
<p>保存之后替换即可</p>
<p>翻译之前：</p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220807181337697.png" alt="image-20220807181337697"></p>
<p>翻译之后：</p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220807181456376.png" alt="image-20220807181456376"></p>
<h1 id="后语："><a href="#后语：" class="headerlink" title="后语："></a>后语：</h1><h2 id="什么是GNU-gettext？"><a href="#什么是GNU-gettext？" class="headerlink" title="什么是GNU gettext？"></a>什么是GNU gettext？</h2><p><a href="https://www.gnu.org/software/gettext/">GNU gettext</a> 是使用最广泛的自由软件国际化工具之一</p>
<p>GNU gettext 工具（msgfmt、xgettext 等）的 Windows 构建，由 Poedit 开发人员维护。</p>
<p>该函数通常具有 _() 别名，以使代码更简单易读。</p>
<p>此外，它提供了 pgettext() 调用，可用于为翻译者提供更多的上下文；还提供了 ngettext()，可以处理目标语言定义的复数类型。</p>
<p>作为广泛传播的工具，它具有很多封装，使其使用相当简单，你也许会想尝试其中之一，例如 <a href="https://freedesktop.org/wiki/Software/intltool/">intltool</a>，而非下面描述的对 gettext 的手动调用。</p>
<h2 id="关于Poedit"><a href="#关于Poedit" class="headerlink" title="关于Poedit"></a>关于<a href="https://poedit.net/">Poedit</a></h2><blockquote>
<p>Poedit是一个免费增值软件及跨平台的gettext类国际化翻译编辑器，也是同类型软件中最广泛使用的一个。现时它不论在Unix+GTK 或 Windows平台 配合wxWidgets 均有相关版本。</p>
</blockquote>
<h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p><a href="https://wordpress.stackexchange.com/questions/227822/what-is-the-difference-between-the-po-mo-and-pot-localization-files">https://wordpress.stackexchange.com/questions/227822/what-is-the-difference-between-the-po-mo-and-pot-localization-files</a></p>
<p><a href="https://www.daimajiaoliu.com/daima/6cc27ed6f166400">https://www.daimajiaoliu.com/daima/6cc27ed6f166400</a></p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title>使用PicGo+Github+jsDelivr搭建图床（扩展Typora）</title>
    <url>/2022/07/17/%E5%8D%9A%E5%AE%A2/%E4%BD%BF%E7%94%A8PicGo&amp;Github&amp;jsDelivr%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A%EF%BC%88%E6%89%A9%E5%B1%95Typora%EF%BC%89/</url>
    <content><![CDATA[<h1>前言</h1>
<p>本文内容包括：</p>
<blockquote>
<ul>
<li>创建一个 github 仓库</li>
<li>使用 jsDelivr 免费 CDN 加速图片访问速度</li>
<li>创建 Token</li>
<li>使用 PicGo 配置 github 图床</li>
</ul>
</blockquote>
<p>众所周知网站图片是会影响云服务器性能，在我们这些小博客网站流量是非常有限的，为了避免网站性能降低我们除了压缩媒体文件还可以通过远程调用的方法，也就是用一个单独的云服务器存放媒体，如用一个专门的图床网站或者阿里云OSS对象存储之类的作为网站图床。</p>
<p>什么是图床：</p>
<blockquote>
<p>图床一般是指储存图片的服务器，有国内和国外之分。国外的图床由于有空间距离等因素决定访问速度很慢影响图片显示速度。国内也分为单线空间、多线空间和cdn加速三种。</p>
<p>图床就是专门用来存放图片，同时允许你把图片对外连接的网上空间，不少图床都是免费的。</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/021357282173530.jpg" alt="img" /></p>
<h2>使用PicGo+GitHub+jsDelivr搭建图床</h2>
<h3>配置Github</h3>
<ol>
<li>登陆github账号创建新的仓库</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220717192813938.png" alt="image-20220717192813938" /></p>
<ol start="2">
<li>填写仓库属性</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220717193516646.png" alt="image-20220717193516646" /></p>
<ol start="3">
<li>
<p>点击头像-Settings-Developer settings-Personal access tokens-Generate new token
<img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220717193812726.png" alt="image-20220717193812726" /><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220717194039681.png" alt="image-20220717194039681" style="zoom: 50%;" /><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220717194216180.png" alt="image-20220717194216180" /><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220717194452344.png" alt="image-20220717194452344" /></p>
</li>
<li>
<p>填写内容
<img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220717194816210.png" alt="image-20220717194816210" /></p>
</li>
<li>
<p>复制token
<img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220717195046107.png" alt="image-20220717195046107" /></p>
</li>
</ol>
<h3>配置PicGo</h3>
<p><a href="https://github.com/Molunerfinn/PicGo/releases">PicGo官方下载链接</a>
<img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220717195901602.png" alt="image-20220717195901602" /></p>
<ul>
<li>仓库名即为你的github账号/图片仓库名</li>
<li>分支名我在这里使用master</li>
<li>Token 就填写刚才我们生成的 Token</li>
<li>存储路径如果需要指定子目录可以填写例如 img/  如果没有填，就会上传到图片仓库的根目录。</li>
<li>自定义域名就填写 jsDelivr 的域名，即图片访问地址，不包括图片路径的前半部分，</li>
<li><a href="https://cdn.jsdelivr.net/gh/用户名/仓库名">https://cdn.jsdelivr.net/gh/用户名/仓库名</a></li>
<li>最后设为默认图床，下次在 typora 上传图片就会自动上传到 github 图床了。</li>
</ul>
<h2>扩展</h2>
<p>图片粘贴到Typora后，自动把图片上传到配置好的图床上</p>
<h3>配置Typora</h3>
<p>文件-偏好设置-图像</p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220717201003688.png" alt="image-20220717201003688" /></p>]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>博客</tag>
        <tag>jsdelivr</tag>
      </tags>
  </entry>
  <entry>
    <title>像素教程 84P</title>
    <url>/2022/07/31/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/%E5%83%8F%E7%B4%A0%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/d287a56ee092d63cfaa6ce52bc77ef5f33279a3897928-1DLe0C_fw658.gif" alt="d287a56ee092d63cfaa6ce52bc77ef5f33279a3897928-1DLe0C_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/d43100eb5e6f9c95ab973976230cf1cbacef03d261b34-c0JaMB_fw658.gif" alt="d43100eb5e6f9c95ab973976230cf1cbacef03d261b34-c0JaMB_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/db438fb156552b9a32de34b009b8f69b3a801f0f5e18e-g9YEtZ_fw658.gif" alt="db438fb156552b9a32de34b009b8f69b3a801f0f5e18e-g9YEtZ_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/e8b707085d68329abad5b0642b464e34a66a300055431-MaHikE_fw658.gif" alt="e8b707085d68329abad5b0642b464e34a66a300055431-MaHikE_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/e69f461cadd6a88b53194f107c8b3cb424aef1adaf684-ja7y97_fw658.gif" alt="e69f461cadd6a88b53194f107c8b3cb424aef1adaf684-ja7y97_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/e77bf64e650454edb3779a2f43ae7957a6d8526e4fb87-KnDOgP_fw658.gif" alt="e77bf64e650454edb3779a2f43ae7957a6d8526e4fb87-KnDOgP_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/e139d6946d1f875d976afe44d88a34d1a2d9c5d530251-Sz8UqP_fw658.gif" alt="e139d6946d1f875d976afe44d88a34d1a2d9c5d530251-Sz8UqP_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/e66767c033147a7ade3d3f96e4342e2410b8a329a8598-obFNCb_fw658.gif" alt="e66767c033147a7ade3d3f96e4342e2410b8a329a8598-obFNCb_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/e83796bcd534ea8abb4b3a7e9664cd6ee41d0d0e110dac-oVcA1D_fw658.gif" alt="e83796bcd534ea8abb4b3a7e9664cd6ee41d0d0e110dac-oVcA1D_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/f5a880928e2bb9037ca2f25ccb1e4a85d52b01b8163aa6-dtJ3HE_fw658.gif" alt="f5a880928e2bb9037ca2f25ccb1e4a85d52b01b8163aa6-dtJ3HE_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/f8bc3541addb4c5b303e4a62e7df5e7d9a08e00052ee2-rnw5bO_fw658.gif" alt="f8bc3541addb4c5b303e4a62e7df5e7d9a08e00052ee2-rnw5bO_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/f8c3ffa7da21af2f393d3816b8a595212c1c42112b847-SPuUka_fw658.gif" alt="f8c3ffa7da21af2f393d3816b8a595212c1c42112b847-SPuUka_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/f44aebc7294db7e9a02e4c5f50c9f9005db091713826f9-w9pctu_fw658.gif" alt="f44aebc7294db7e9a02e4c5f50c9f9005db091713826f9-w9pctu_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/fb5d87bf85d11b78b0883b9a97b77439b983b40d15cb5b-NbfkDA_fw658.gif" alt="fb5d87bf85d11b78b0883b9a97b77439b983b40d15cb5b-NbfkDA_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/fe9b9010733d82b9f00abf045eea5a27e9c63caf68f34-13i145_fw658.gif" alt="fe9b9010733d82b9f00abf045eea5a27e9c63caf68f34-13i145_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/0aa547a47cee30645554cb1dee6c9e13dff2050554054-yNHn4I_fw658.gif" alt="0aa547a47cee30645554cb1dee6c9e13dff2050554054-yNHn4I_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/0c51e9bb4f89bb2424e0d5c12c4aa8a0e36761d1501ed-shhEnz_fw658.gif" alt="0c51e9bb4f89bb2424e0d5c12c4aa8a0e36761d1501ed-shhEnz_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/0e1f51bd093946f5042dbf894456d2fd8cbf6e8d9b004-lLxZdi_fw658.gif" alt="0e1f51bd093946f5042dbf894456d2fd8cbf6e8d9b004-lLxZdi_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/0efb41ea24d3b1a3ab40c83b74c19d5ea545d98698239-qWy1Fz_fw658.gif" alt="0efb41ea24d3b1a3ab40c83b74c19d5ea545d98698239-qWy1Fz_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/1d0605f446e7d08472340a035d511891541169aab3ff1-KnvLnb_fw658.gif" alt="1d0605f446e7d08472340a035d511891541169aab3ff1-KnvLnb_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/1e3a3f618c53638b0ee842d2c4f3e69eee1c8543bacb8-oxptvS_fw658.gif" alt="1e3a3f618c53638b0ee842d2c4f3e69eee1c8543bacb8-oxptvS_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/2fe8bd280163bbb4156430083ce9e1435226e151116da5-yrlTME_fw658.gif" alt="2fe8bd280163bbb4156430083ce9e1435226e151116da5-yrlTME_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/3a028bc838684e72a7311b5342ee8f060bb742ac122889-gmVFh6_fw658.gif" alt="3a028bc838684e72a7311b5342ee8f060bb742ac122889-gmVFh6_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/3b5af7cdf758d6203abfe831e9b406617e33c596ea1a2-dxm7hJ_fw658.gif" alt="3b5af7cdf758d6203abfe831e9b406617e33c596ea1a2-dxm7hJ_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/3d23ebe3a8aa48a2f6dce00e183377cd616ef5bc3f2d6-YVnM3q_fw658.gif" alt="3d23ebe3a8aa48a2f6dce00e183377cd616ef5bc3f2d6-YVnM3q_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/3d516a9722a3fd956d97bc9fbf6712347a1dc5afe3bec-o7nuQU_fw658.gif" alt="3d516a9722a3fd956d97bc9fbf6712347a1dc5afe3bec-o7nuQU_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/6dbbeab864d03d30cc523cf3a1399e0ea3998ac99fb24-ZaFrDw_fw658.gif" alt="img"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/7af900cfd7a83d16c6a6d41bb85075255db512f7221ff-Z5AAYa_fw658.gif" alt="7af900cfd7a83d16c6a6d41bb85075255db512f7221ff-Z5AAYa_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/7b91c789477345f3ccf3ad352ab17e4a19f5e4a554f36-Lkm4ad_fw658.gif" alt="7b91c789477345f3ccf3ad352ab17e4a19f5e4a554f36-Lkm4ad_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/7e541a13cd0a0c1805749948024d7bbbde75d6f29411d-xtFiIe_fw658.gif" alt="7e541a13cd0a0c1805749948024d7bbbde75d6f29411d-xtFiIe_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/09bcb4550a39aa3b10301dbd3718160459ee2e54e143f-aXOFra.gif" alt="09bcb4550a39aa3b10301dbd3718160459ee2e54e143f-aXOFra"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/09bcb4550a39aa3b10301dbd3718160459ee2e54e143f-aXOFra_fw658.gif" alt="09bcb4550a39aa3b10301dbd3718160459ee2e54e143f-aXOFra_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/9a1e5cb42fd92b828ff28cf44e5dfd7b0b911ef1cac2a-hLI9OZ_fw658.gif" alt="9a1e5cb42fd92b828ff28cf44e5dfd7b0b911ef1cac2a-hLI9OZ_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/9a7b2e4ae6316d86b2bdaaceb24a75835292ade41c8d8b-lVKWco_fw658.gif" alt="9a7b2e4ae6316d86b2bdaaceb24a75835292ade41c8d8b-lVKWco_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/9aaad56f02f9ea86d708216eb6ffb4c553e4c52d9fe23-2Lxdn6_fw658.gif" alt="9aaad56f02f9ea86d708216eb6ffb4c553e4c52d9fe23-2Lxdn6_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/9b856fa89182236e56e9197eaefacec3c41ffba418a05c-JAYZ8z.gif" alt="9b856fa89182236e56e9197eaefacec3c41ffba418a05c-JAYZ8z"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/14f2d622ff7a5c8fdc91f8f4eb113c8b81c38932d61ab-FN5fT0_fw658.gif" alt="14f2d622ff7a5c8fdc91f8f4eb113c8b81c38932d61ab-FN5fT0_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/8a7f6b422553ebdfb917f778c0190ab99bdbd6902097b1-50mLGv_fw658.gif" alt="img"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/34a353fe5f483d791a4ad725f8660b2177192878208f5-de8EhE_fw658.jpg" alt="34a353fe5f483d791a4ad725f8660b2177192878208f5-de8EhE_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/37bc01ad69b23afc89fee545637431e5af594b1135174-BkiuB3_fw658.gif" alt="37bc01ad69b23afc89fee545637431e5af594b1135174-BkiuB3_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/52bc99522373213a1a3dff79cbaa8c40923f09f31cc8a9-euew8r_fw658.gif" alt="52bc99522373213a1a3dff79cbaa8c40923f09f31cc8a9-euew8r_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/55a5d4d7bd3a5fd0bf0795cfa05bda9fbce90eefd3704-d1qKld_fw658.gif" alt="55a5d4d7bd3a5fd0bf0795cfa05bda9fbce90eefd3704-d1qKld_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/59a23875d4d4b60d9aa4deb94704bb21f29255ad18f60-IFyzQg_fw658.gif" alt="59a23875d4d4b60d9aa4deb94704bb21f29255ad18f60-IFyzQg_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/66c24b1dbeb7d3975280ce881f71affec58d6f8810c19e-96TjWE_fw658.gif" alt="66c24b1dbeb7d3975280ce881f71affec58d6f8810c19e-96TjWE_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/66de3ae43cb7d626e859c90995fb0d65250e0fe680f19-HUlKWR_fw658.gif" alt="66de3ae43cb7d626e859c90995fb0d65250e0fe680f19-HUlKWR_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/69a73d1368663609f44ceddc26b5f5ce9ee9324f10c232-79gAAD_fw658.gif" alt="69a73d1368663609f44ceddc26b5f5ce9ee9324f10c232-79gAAD_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/79b6a363c5ccc01ec175b00f8ae94f630b0da746c7ed6-icNc6i_fw658.gif" alt="79b6a363c5ccc01ec175b00f8ae94f630b0da746c7ed6-icNc6i_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/83ccb8139827d8952338b2a89760e6eabdc746e0dbbcc-qYhJYR_fw658.gif" alt="83ccb8139827d8952338b2a89760e6eabdc746e0dbbcc-qYhJYR_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/85db5e3ba870eaae7a41cf056c6a85a4f96cc3a1122cea-oXPvE9_fw658.gif" alt="85db5e3ba870eaae7a41cf056c6a85a4f96cc3a1122cea-oXPvE9_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/200ae44062af2a654cf9f4269448986c8cb83ef764453-bbBHBs_fw658.gif" alt="200ae44062af2a654cf9f4269448986c8cb83ef764453-bbBHBs_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/213e500eced7db599ad0442112b539421c7e134243c8c-JrYT8h_fw658.gif" alt="213e500eced7db599ad0442112b539421c7e134243c8c-JrYT8h_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/585cf1b39882fff80fa0689a177e4b221a323346d527a-T1Lvba_fw658.gif" alt="585cf1b39882fff80fa0689a177e4b221a323346d527a-T1Lvba_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/765c322cc09bd6a862c4fe5ab4b6ae8e82c9b6067a10e-0PEKNl_fw658.gif" alt="765c322cc09bd6a862c4fe5ab4b6ae8e82c9b6067a10e-0PEKNl_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/01168e588a6dc31d6fa99e1ea019d4011f992650854d6-oEo6zD_fw658.gif" alt="01168e588a6dc31d6fa99e1ea019d4011f992650854d6-oEo6zD_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/4237a1cbe3bc2a8bbeb4d9b57793bb0fb73b8be9fcc99-n2VIh4_fw658.gif" alt="4237a1cbe3bc2a8bbeb4d9b57793bb0fb73b8be9fcc99-n2VIh4_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/5375c31484198b06473bab8c4afb62bac135d39035044-rzAeti_fw658.gif" alt="5375c31484198b06473bab8c4afb62bac135d39035044-rzAeti_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/6254b02306bd55d30141ae65c4289f5f13dfbdc1472ba-ZRMaYr_fw658.gif" alt="6254b02306bd55d30141ae65c4289f5f13dfbdc1472ba-ZRMaYr_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/8017c06a4a3256712346fdadbe68b46cba7e3a7d78d3e-SGcaaR_fw658.gif" alt="8017c06a4a3256712346fdadbe68b46cba7e3a7d78d3e-SGcaaR_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/13586e58655e06405149718a8ec3f64ea4a1e433ab726-z4p4wt_fw658.gif" alt="13586e58655e06405149718a8ec3f64ea4a1e433ab726-z4p4wt_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/19780abe0c46ce699b0951945d300ded3475b11f4c96d-KgGl6g_fw658.gif" alt="19780abe0c46ce699b0951945d300ded3475b11f4c96d-KgGl6g_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/712976d3fbfeb88122ff605700daeb221a45c3d614140a-a49Wgl_fw658.gif" alt="712976d3fbfeb88122ff605700daeb221a45c3d614140a-a49Wgl_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/785647f5645f30a6035db929d54c49dc172b66a3767ee-FSpj8w_fw658.gif" alt="785647f5645f30a6035db929d54c49dc172b66a3767ee-FSpj8w_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/6035703c1caf7ef86ee1cbf0ee2758e40a7a00c66cdf4-OMRXwQ_fw658.gif" alt="6035703c1caf7ef86ee1cbf0ee2758e40a7a00c66cdf4-OMRXwQ_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/61580306e19fb45d99e2a3c18b305dc60f656f4e37b66-F5G7OG_fw658.gif" alt="61580306e19fb45d99e2a3c18b305dc60f656f4e37b66-F5G7OG_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/83522866cce1ccd3c4dc1c06cef0b54ee70f2933d442e-zLIfsl_fw658.gif" alt="83522866cce1ccd3c4dc1c06cef0b54ee70f2933d442e-zLIfsl_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/7234822996f06e791feb5bfdd64aef27fd063b63170093-VcMSKX_fw658.gif" alt="7234822996f06e791feb5bfdd64aef27fd063b63170093-VcMSKX_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/a5b0c216fd077b01f8e4ac84f5620db7d61414ae127209-to2sOE_fw658.gif" alt="a5b0c216fd077b01f8e4ac84f5620db7d61414ae127209-to2sOE_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/a5c1c84de863082209fc3e132344652e5737a48d46798-GG21rU_fw658.gif" alt="a5c1c84de863082209fc3e132344652e5737a48d46798-GG21rU_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/a69fe6c769c0229ad97590091a0b68341e1a9d1e1a1e72-kbZlya_fw658.gif" alt="a69fe6c769c0229ad97590091a0b68341e1a9d1e1a1e72-kbZlya_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/ac285fab02d8d5ce3578ba6f94a60b0a2d94a97e12cf05-v1bu6d_fw658.gif" alt="ac285fab02d8d5ce3578ba6f94a60b0a2d94a97e12cf05-v1bu6d_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/acd9eae88eba8f5750e22cfec21a9ac999263db0e9656-JLXkoX_fw658.gif" alt="acd9eae88eba8f5750e22cfec21a9ac999263db0e9656-JLXkoX_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/b7b9eaab853fbcba5022ee9f8a812e0d0e9538d856c49-ZKG6Nz_fw658.gif" alt="b7b9eaab853fbcba5022ee9f8a812e0d0e9538d856c49-ZKG6Nz_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/bbf5c4d5ee0525de9072ae3edde046694921f08766e38-iMZ6Nj_fw658.gif" alt="bbf5c4d5ee0525de9072ae3edde046694921f08766e38-iMZ6Nj_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/bc9b56a60466d5ba27f97df54f7980b1c19dfdcc2291f-JIZEDT_fw658.png" alt="bc9b56a60466d5ba27f97df54f7980b1c19dfdcc2291f-JIZEDT_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/c4faa8751d55e00586d4e59714a13dbbc4fbc14d10091e-2JmDbE_fw658.gif" alt="c4faa8751d55e00586d4e59714a13dbbc4fbc14d10091e-2JmDbE_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/c9fee1f7ebd74681b15b45b736c33947ff4acf6bb62bc-Yfb5iU_fw658.gif" alt="c9fee1f7ebd74681b15b45b736c33947ff4acf6bb62bc-Yfb5iU_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/c74c675a178bd9b828472909f20890f2de25d2e226989c-PUZAXF_fw658.gif" alt="c74c675a178bd9b828472909f20890f2de25d2e226989c-PUZAXF_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/c859a3f81a4fb18debef385fe16aa5a01c78c568174562-XJAbJ8_fw658.gif" alt="c859a3f81a4fb18debef385fe16aa5a01c78c568174562-XJAbJ8_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/c2637dda89f7afa77250fca93ebfbb04c21c5565db105-9aPPRB_fw658.gif" alt="c2637dda89f7afa77250fca93ebfbb04c21c5565db105-9aPPRB_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/cd7fbd2d67fdcf36c576b5dd7d102e1f73b823ad34b97-aasVfs_fw658.gif" alt="cd7fbd2d67fdcf36c576b5dd7d102e1f73b823ad34b97-aasVfs_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/ce49673f0e82ac74c07dd01edf4dc889366e1eb14e150-IZxyDr_fw658.gif" alt="ce49673f0e82ac74c07dd01edf4dc889366e1eb14e150-IZxyDr_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/cf540c16451c3858ae2cf8433fc2051b637218681051ee-ReE8B4_fw658.gif" alt="cf540c16451c3858ae2cf8433fc2051b637218681051ee-ReE8B4_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/d52e6cd62338278ae2881c3a72f7071d473ff4e386735-dH0p50_fw658.gif" alt="d52e6cd62338278ae2881c3a72f7071d473ff4e386735-dH0p50_fw658"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/d085b277a91964bfd8f0f7958d8bf9d5fdc48fe34a741-nltUgj_fw658.gif" alt="d085b277a91964bfd8f0f7958d8bf9d5fdc48fe34a741-nltUgj_fw658"></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title></title>
    <url>/2023/04/18/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/%E5%A4%87%E5%BF%98%E5%BD%95/</url>
    <content><![CDATA[<h1 id="我好像一直在等你，又好像一直在忘记你"><a href="#我好像一直在等你，又好像一直在忘记你" class="headerlink" title="我好像一直在等你，又好像一直在忘记你"></a>我好像一直在等你，又好像一直在忘记你</h1><p>参考：<a href="https://blog.csdn.net/qq_39887964/article/details/79627838">(43条消息) time、deltaTime、fixedTime、fixedDeltatime的区别_qq_39887964的博客-CSDN博客_deltatime和fixeddeltatime</a></p>
<p>deltaTlme代表两帧之间的间隔时间</p>
<p>应该是fixedDeltaTime</p>
<h2 id="资源网站"><a href="#资源网站" class="headerlink" title="资源网站"></a>资源网站</h2><p><a href="https://zhuanlan.zhihu.com/p/360452175">推荐一些不错的Unity游戏开发素材资源 - 知乎 (zhihu.com)</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/444084617">收藏必看！Unity游戏开发素材资源合集 - 知乎 (zhihu.com)</a></p>
<p>Unity里一般用Shader来做，常用的有ShaderGraph和AES</p>
<p>Time.timeScale &#x3D; 0f;	&#x2F;&#x2F;游戏暂停函数</p>
<p>快捷键V 网格吸附</p>
<p>选中main camera按下 ctrl+shfit+f 变成当前场景的角度坐标</p>
<h2 id="编程方法"><a href="#编程方法" class="headerlink" title="编程方法"></a>编程方法</h2><figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><span class="hljs-keyword">using</span> UnityEngine.Events;<br><br>[<span class="hljs-meta">System.Serializable</span>]<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">EventVector3</span> : <span class="hljs-title">UnityEvent</span>&lt;<span class="hljs-title">Vector3</span>&gt;&#123; &#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">MouseManager</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">public</span> EventVector3 OnMouseClicked;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>得到了用<a href="https://so.csdn.net/so/search?q=%E5%BA%8F%E5%88%97%E5%8C%96&spm=1001.2101.3001.7020">序列化</a>存储的解决办法，在类前写上 [System.Serializable]就解决了问题，下面介绍一下 序列化的作用。</p>
<p>序列化是指将对象实例的状态存储到存储媒体的过程。在此过程中，先将对象的公共字段和私有字段以及类的名称（包括类所在的程序集）转换为<a href="https://so.csdn.net/so/search?q=%E5%AD%97%E8%8A%82%E6%B5%81&spm=1001.2101.3001.7020">字节流</a>，然后再把字节流写入数据流。在随后对对象进行反序列化时，将创建出与原对象完全相同的副本。</p>
<h3 id="跳跃代码3D"><a href="#跳跃代码3D" class="headerlink" title="跳跃代码3D"></a>跳跃代码3D</h3><figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">if</span> (Input.GetKeyDown(KeyCode.Space))<br>        &#123;<br>            GetComponent&lt;Rigidbody&gt;().AddForce(Vector3.up * <span class="hljs-number">5</span>, ForceMode.VelocityChange);<br>        &#125;<br></code></pre></td></tr></table></figure>

<p>Update中检查按键和输入 然后在FixedUpdate中施加力量</p>
<h3 id="是否启用组件"><a href="#是否启用组件" class="headerlink" title="是否启用组件"></a>是否启用组件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">disColl.enabled = false;<br></code></pre></td></tr></table></figure>

<h3 id="获得layer"><a href="#获得layer" class="headerlink" title="获得layer"></a>获得layer</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">coll.IsTouchingLayers(ground))<br></code></pre></td></tr></table></figure>





<h2 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h2><h3 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h3><p>Z-Fighting（深度缓冲）模型太近冲突</p>
<p>AsyncOperation异步操作</p>
<p>*** Prefabs 预制件 **</p>
<p>预制游戏的对象 </p>
<h3 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h3><p>*<em>编辑器有很多类：<a href="http://www.ceeger.com/Script/Editor.Classes.html">编辑器类</a>。例如：EditorGUI（编辑器界面）,*<em>EditorGUILayout（编辑器界面布局）,**EditorGUIUtility（编辑器界面工具）等等这些，都是编辑器对界面进行编辑。**</em>*</em>*</p>
<p>Inspector面板</p>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>MoveToTarget 移动到目标</p>
<p>MonoBehaviour 单体行为</p>
<h3 id="Project-项目"><a href="#Project-项目" class="headerlink" title="Project 项目"></a>Project 项目</h3><p>Assets Pack包文件夹（用来存放游戏资源）</p>
<p>Materials（材料）</p>
<p>Prefabs(预制体)</p>
<p>Scripts (存放脚本文件)</p>
<ul>
<li>cursor 光标</li>
</ul>
<p>Physic Material(物理材料)</p>
<p>Environment场景文件夹-Hierarchy</p>
<p>— Character — 不成为他的子集</p>
<p>Plugins&amp;Addons 存放package插件类型</p>
<p>Materials 存放材质文件夹</p>
<h4 id="Manager-代理"><a href="#Manager-代理" class="headerlink" title="Manager 代理"></a>Manager 代理</h4><p>mouse manager 鼠标管理器</p>
<h4 id="Characters-控制器"><a href="#Characters-控制器" class="headerlink" title="Characters 控制器"></a>Characters 控制器</h4><ul>
<li><p>palyer controller人物的控制器</p>
</li>
<li><p>enemy  controller 敌人的控制器</p>
</li>
</ul>
<h3 id="名称"><a href="#名称" class="headerlink" title="名称"></a>名称</h3><p>FloorTile(地板)</p>
<h1 id="Unity项目目录架构和命名规则"><a href="#Unity项目目录架构和命名规则" class="headerlink" title="Unity项目目录架构和命名规则"></a>Unity项目目录架构和命名规则</h1><h2 id="文件夹命名规则"><a href="#文件夹命名规则" class="headerlink" title="文件夹命名规则"></a>文件夹命名规则</h2><p>参考<a href="https://link.jianshu.com/?t=https://docs.unity3d.com/Manual/SpecialFolders.html">Special folder names</a>和<a href="https://link.jianshu.com/?t=http://docs.unity3d.com/Manual/ScriptCompileOrderFolders.html">Special Folders and Script Compilation Order</a></p>
<h3 id="Assets"><a href="#Assets" class="headerlink" title="Assets"></a>Assets</h3><p>主文件夹，包含所有工程需要用到的资源。</p>
<h4 id="Editor"><a href="#Editor" class="headerlink" title="Editor"></a>Editor</h4><p>所有在Editor和它的子文件夹的脚本，都不会作为运行期脚本被编译，而是作为动态添加Unity编译器功能的脚本来编译。在该文件夹和其子文件夹的脚本不能被添加到GameObject上。<br>Editor文件夹可以被放置在<code>Standard Assets</code> <code>Pro Standard Assets</code> <code>Plugins</code>的任意一个子文件夹下。</p>
<h4 id="Editor-default-resources"><a href="#Editor-default-resources" class="headerlink" title="Editor default resources"></a>Editor default resources</h4><p>必须作为Assets的子文件夹，作为Editor脚本的资源使用，使用方式是通过函数<code>EditorGUIUtility.Load</code>来使用。</p>
<h4 id="Gizmos"><a href="#Gizmos" class="headerlink" title="Gizmos"></a>Gizmos</h4><p>场景面板中的图标图片资源，使用<code>Gizmos.DrawIcon</code>函数在场景面板新建图标，图标的图片资源必须位于这个文件夹内。(比如Unity的各种插件)</p>
<h4 id="Plugins"><a href="#Plugins" class="headerlink" title="Plugins"></a>Plugins</h4><p>所有的插件资源，包括用C&#x2F;C++编写的Dll库。</p>
<h4 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h4><p><strong>一般用来存放需要通过代码初始化&#x2F;使用的资源</strong>，可以放在工程中的任意文件夹中，在Resources文件夹中的文件可以通过<code>Resources.Load</code>来读取，像下面这样。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c">rend.material.mainTexture = Resources.Load(<span class="hljs-string">&quot;glass&quot;</span>) as Texture;<br>GameObject instance = Instantiate(Resources.Load(<span class="hljs-string">&quot;enemy&quot;</span>, typeof(GameObject))) as GameObject;<br></code></pre></td></tr></table></figure>

<h4 id="Standard-Assets"><a href="#Standard-Assets" class="headerlink" title="Standard Assets"></a>Standard Assets</h4><p>导入标准材质包时新建的，拥有自己的编译顺序。</p>
<h4 id="StreamingAssets"><a href="#StreamingAssets" class="headerlink" title="StreamingAssets"></a>StreamingAssets</h4><p>通过<code>Application.streamingAssetsPath</code>获取目录路径，该目录中的文件将会原封不动的被拷贝到不同的平台上，每个平台对应的目录不一致，但是都可以通过上述方法获得。<strong>一般用来存放视频等资源文件</strong>。</p>
<h4 id="WebPlayerTemplates"><a href="#WebPlayerTemplates" class="headerlink" title="WebPlayerTemplates"></a>WebPlayerTemplates</h4><p>存放网页相关文件。</p>
<h4 id="隐藏文件"><a href="#隐藏文件" class="headerlink" title="隐藏文件"></a>隐藏文件</h4><p>一般用来存放README以及一些操作系统生成的临时文件，这些文件&#x2F;文件夹一般以<code>.</code> <code>~</code> 或者名为<code>cvs</code>或者扩展名是<code>tmp</code>。</p>
<h2 id="文件夹编译顺序"><a href="#文件夹编译顺序" class="headerlink" title="文件夹编译顺序"></a>文件夹编译顺序</h2><p>在Assents中的脚本会按照以下顺序编译。</p>
<ol>
<li><code>Standard Assets</code> <code>Pro Standard Assets</code> <code>Plugins</code>中的运行期脚本(包括MonoBehaviour和ScriptableObject等)。</li>
<li>工程目录中的各种<code>Editor</code>文件夹中的Editor脚本。</li>
<li><code>Editor</code>文件夹之外的其他脚本(非运行期脚本)。</li>
<li><code>Editor</code>文件夹之内的其他脚本(非Editor脚本)。</li>
</ol>
<blockquote>
<p>编译顺序在后面的脚本不可以被编译顺序在前面的脚本引用。</p>
</blockquote>
<h2 id="工程文件目录架构"><a href="#工程文件目录架构" class="headerlink" title="工程文件目录架构"></a>工程文件目录架构</h2><p>可以如下图设置文件目录</p>
<p>其中<code>GameAssets</code>为美术人员维护，美术人员使用Unity新建简单的空白工程，里面只有GameAssets的资源文件夹，这样每次制作完都可以<code>Export UnityPockage</code>，将其打包成<code>UnityPackage</code>给开发人员导入，好处是可以单独工程编辑，每次需要导入新的资源只要<code>Import</code>美术给的UnityPackage。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/1863913-4e8acf1ff9db29a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/format/webp" alt="img"></p>
]]></content>
  </entry>
  <entry>
    <title>时间空间复杂度分析</title>
    <url>/2022/11/23/%E7%AE%97%E6%B3%95&amp;%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%97%B6%E9%97%B4%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h1><p>「时间复杂度」(Time complexity)定性描述该算法的运行时间</p>
<ul>
<li>大O符号表示法(BigO))：</li>
</ul>
<h3 id="T-n-x3D-O-f-n"><a href="#T-n-x3D-O-f-n" class="headerlink" title="T(n) &#x3D; O(f(n))"></a>T(n) &#x3D; O(f(n))</h3><p>表示一个算法的<strong>渐进时间复杂度</strong>，f(n)表示代码次数之和，O表示正比例关系</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= i;i++) &#123;<br>    x++;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>因为循环次数为n，时间为n单位，所以算法的「时间复杂度」可以表示为：T (n) &#x3D; O(n)。</p>
<h3 id="O-n²"><a href="#O-n²" class="headerlink" title="O(n²)"></a>O(n²)</h3><p>i总共需要n层循环，在每一次内层循环中，j 也会循环n次</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= n; j++) &#123;<br>        x++;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<h3 id="O-n-n²"><a href="#O-n-n²" class="headerlink" title="O(n + n²)"></a>O(n + n²)</h3><p>上面两个算法并和：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>    x++;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= n; j++) &#123;<br>        x++;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>整个算法复杂度就变为 O(n + n²)，在n无限大的情况下，可以简化为 O(n²)。</p>
<h2 id="常见的时间复杂度量级"><a href="#常见的时间复杂度量级" class="headerlink" title="常见的时间复杂度量级"></a>常见的时间复杂度量级</h2><p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221123172620267.png" alt="image-20221123172620267"></p>
<h3 id="常数阶O-1"><a href="#常数阶O-1" class="headerlink" title="常数阶O(1)"></a>常数阶O(1)</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> x;<br>x = y;<br>y = temp;<br></code></pre></td></tr></table></figure>

<h3 id="对数阶O-logN"><a href="#对数阶O-logN" class="headerlink" title="对数阶O(logN)"></a>对数阶O(logN)</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>(i &lt; n) &#123;<br>    i = i * <span class="hljs-number">2</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="线性阶O-n"><a href="#线性阶O-n" class="headerlink" title="线性阶O(n)"></a>线性阶O(n)</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>    x++;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="对数阶O-logN-1"><a href="#对数阶O-logN-1" class="headerlink" title="对数阶O(logN)"></a>对数阶O(logN)</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>(i &lt; n) &#123;<br>    i = i * <span class="hljs-number">2</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="线性对数阶O-nlogN"><a href="#线性对数阶O-nlogN" class="headerlink" title="线性对数阶O(nlogN)"></a>线性对数阶O(nlogN)</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;= n: i++) &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(x &lt; n) &#123;<br>        x = x * <span class="hljs-number">2</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="平方阶O-n²"><a href="#平方阶O-n²" class="headerlink" title="平方阶O(n²)"></a>平方阶O(n²)</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= n; j++) &#123;<br>        x++;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="立方阶O-n³"><a href="#立方阶O-n³" class="headerlink" title="立方阶O(n³)"></a>立方阶O(n³)</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= n; j++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; k &lt;= n; k++)&#123;<br>            s++;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="K次方阶O-n-k"><a href="#K次方阶O-n-k" class="headerlink" title="K次方阶O(n^k)"></a>K次方阶O(n^k)</h3><blockquote>
<p>k次方阶就相当于在有k层for循环</p>
</blockquote>
<h3 id="指数阶O-2-n"><a href="#指数阶O-2-n" class="headerlink" title="指数阶O(2^n)"></a>指数阶O(2^n)</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">aFunc</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;    <br>   <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">1</span>) &#123;        <br>       <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>   &#125; <span class="hljs-keyword">else</span> &#123;        <br>       <span class="hljs-keyword">return</span> aFunc(n - <span class="hljs-number">1</span>) + aFunc(n - <span class="hljs-number">2</span>);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="阶乘O-n"><a href="#阶乘O-n" class="headerlink" title="阶乘O(n!)"></a>阶乘O(n!)</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">nFacRuntimeFunc</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++) &#123;<br>    nFacRuntimeFunc(n-<span class="hljs-number">1</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<p>其他还有「平均时间复杂度」、「均摊时间复杂度」、「最坏时间复杂度」、「最好时间复杂度]……</p>
<h1 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h1><p>「空间复杂度」(Computational problem)表示一个算法完全执行所需要的存储空间大小</p>
<h2 id="常用的空间复杂度"><a href="#常用的空间复杂度" class="headerlink" title="常用的空间复杂度"></a>常用的空间复杂度</h2><h3 id="O-1-空间复杂度"><a href="#O-1-空间复杂度" class="headerlink" title="O(1)空间复杂度"></a>O(1)空间复杂度</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>x++;<br>y++;<br></code></pre></td></tr></table></figure>

<p>代码中的 i、j、m 所分配的空间都不随着处理数据量变化，因此它的空间复杂度 S(n) &#x3D; O(1)</p>
<h3 id="空间复杂度-O-n"><a href="#空间复杂度-O-n" class="headerlink" title="空间复杂度 O(n)"></a>空间复杂度 O(n)</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] m = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n]<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>; i&lt;=n; ++i)<br>&#123;<br>   j = i;<br>   j++;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>这段代码的空间复杂度主要看第一行即可，即 S(n) &#x3D; O(n)</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>编程范式的归类</title>
    <url>/2023/05/17/%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F/%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F%E7%9A%84%E5%BD%92%E7%B1%BB/</url>
    <content><![CDATA[<h2 id="过程式编程（Procedural-Programming）"><a href="#过程式编程（Procedural-Programming）" class="headerlink" title="过程式编程（Procedural Programming）"></a><strong>过程式编程（Procedural Programming）</strong></h2><p>这是最早的编程范式之一，以程序流程为核心，用一组过程来操作数据，如C语言。</p>
<h2 id="面向对象编程（Object-Oriented-Programming-OOP）"><a href="#面向对象编程（Object-Oriented-Programming-OOP）" class="headerlink" title="面向对象编程（Object-Oriented Programming, OOP）"></a><strong>面向对象编程（Object-Oriented Programming, OOP）</strong></h2><p>这是最常用的编程范式之一，以类和对象为中心，通过封装、继承和多态等机制对数据和操作进行组织，如Java，C++，Python等。</p>
<h2 id="函数式编程（Functional-Programming）"><a href="#函数式编程（Functional-Programming）" class="headerlink" title="函数式编程（Functional Programming）"></a><strong>函数式编程（Functional Programming）</strong></h2><p>函数式编程把计算过程尽量写成一系列嵌套的函数调用，主要语言有Lisp，Haskell，Clojure，Scala，Erlang，以及JavaScript的部分范式等。</p>
<p>函数式编程（Functional Programming）的核心思想是把运算过程尽量写成一系列嵌套的函数调用。函数式编程强调”不改变状态和避免使用可变数据”，这就意味着函数式编程主张使用不可变的数据结构和纯函数（函数的输出只依赖于输入，并且执行过程没有副作用）。</p>
<p>Java的Lambda表达式就是函数式编程的一个实例，它允许你把函数当作方法参数（一种形式的回调），或者把代码当作数据（函数可以被赋值给变量）。</p>
<p>例如，假设你有一个整数列表，你可以使用Lambda表达式来简洁地实现对列表的每个元素加一：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">List&lt;Integer&gt; numbers = Arrays.asList(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>);<br>List&lt;Integer&gt; incremented = numbers.stream().map(n -&gt; n + <span class="hljs-number">1</span>).collect(Collectors.toList());<br></code></pre></td></tr></table></figure>

<p>在这个例子中，<code>n -&gt; n + 1</code>就是一个Lambda表达式，它接受一个参数n，返回n+1。这里的<code>map</code>方法接受一个函数作为参数，这是高阶函数的一个典型例子，而高阶函数是函数式编程的一个重要特性。</p>
<p>需要注意的是，尽管Java 8引入了Lambda表达式和流（Stream）API，这使得函数式编程在Java中变得更为容易，但Java仍然主要是一种面向对象的编程语言，不像Haskell或者Erlang那样是纯粹的函数式编程语言。</p>
<h2 id="逻辑编程（Logic-Programming）"><a href="#逻辑编程（Logic-Programming）" class="headerlink" title="逻辑编程（Logic Programming）"></a><strong>逻辑编程（Logic Programming）</strong></h2><p>在逻辑编程中，程序被视为逻辑系统中的一组等式或规则。程序的执行是通过查找满足等式或规则的值，最常见的逻辑编程语言是Prolog。</p>
<h2 id="声明式编程（Declarative-Programming）"><a href="#声明式编程（Declarative-Programming）" class="headerlink" title="声明式编程（Declarative Programming）"></a><strong>声明式编程（Declarative Programming）</strong></h2><p>声明式编程是一种高层次的编程范式，它关注的是“做什么”而不是“怎么做”。函数式编程和逻辑编程都是声明式编程的一部分。</p>
<h2 id="并发编程（Concurrent-Programming）"><a href="#并发编程（Concurrent-Programming）" class="headerlink" title="并发编程（Concurrent Programming）"></a><strong>并发编程（Concurrent Programming）</strong></h2><p>并发编程不是一种独立的编程范式，而是一种编程的方式。它允许程序中的多个部分同时执行，以提高程序的性能。并发编程可以在任何上述的编程范式中实现。</p>
]]></content>
      <categories>
        <category>编程范式</category>
      </categories>
  </entry>
  <entry>
    <title>HRACK攻击原理解析</title>
    <url>/2022/08/30/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/HRACK%E6%94%BB%E5%87%BB%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<h2 id="HRACK攻击-WPA1-x2F-WP2"><a href="#HRACK攻击-WPA1-x2F-WP2" class="headerlink" title="HRACK攻击(WPA1&#x2F;WP2)"></a>HRACK攻击(WPA1&#x2F;WP2)</h2><p>KRACKs（Key Reinstallation AttaCKs）是一系列WPA2 (Wi-Fi  Protected Access 2 )协定漏洞的总称</p>
<h2 id="四向交握-4-WAY-HANDSHAKE"><a href="#四向交握-4-WAY-HANDSHAKE" class="headerlink" title="四向交握(4-WAY HANDSHAKE)"></a>四向交握(4-WAY HANDSHAKE)</h2><ul>
<li>第一步(Msg1)，AP会发送一组初始化向量（ANonce）到客户端装置（STA）。</li>
<li>第二步(Msg2)，STA接到ANonce，会产生一组PTK（Pairwise Transient  Key）和另一个初始化向量（SNonce）发送给AP，并且使用了名为MIC（Message Integrity Code）的验证码。</li>
<li>第三步(Msg3)，AP收到SNonce后，也会导出一组PTK，并发送密钥GRK给STA。</li>
<li>第四步(Msg4)，STA在安装本身PTK和GRK之后回复讯息（Ack）给AP。</li>
</ul>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220829165024722.png" alt="image-20220829165024722"></p>
<ul>
<li>利用Wi-Fi握手协议漏洞，在四向交握中客户端没有收到AP的 讯息时，会要求讯息重传。</li>
<li>当客户端收到AP发来的讯息(Msg3)后将会安装PTK和GTK，用 于加密正常的封包。但因为Msg3可能丢失或者被丢弃，AP没有 收到回应(Msg4)的话，AP将会重新传输Msg3。</li>
<li>客户端每次收到Msg3都会重新安装加密key，从而重置nonce和 replay counters 。而攻击者可以收集和重新发送四向交握中的 Msg3强制重置nonce，从而成功攻击加密协议，解密客户端发 送的封包，截获敏感信息。</li>
</ul>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220829165218159.png" alt="image-20220829165218159"></p>
<p>防御方法</p>
<p>总而言之，提供一个临时解决方案，更改路由器的默认用户名、密码和SSID，打开防火墙，关闭SSID广播，为自己的用户设置单独的SSID，彻底关闭DHCP。</p>
<p><strong>项目地址：</strong></p>
<p><strong><a href="https://github.com/vanhoefm/krackattacks-scripts">https://github.com/vanhoefm/krackattacks-scripts</a></strong></p>
]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>hacker</tag>
        <tag>hrack</tag>
      </tags>
  </entry>
  <entry>
    <title>wifi安全渗透</title>
    <url>/2022/08/28/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/wifi%E5%AE%89%E5%85%A8%E6%B8%97%E9%80%8F/</url>
    <content><![CDATA[<h2 id="序章"><a href="#序章" class="headerlink" title="序章"></a>序章</h2><p>最近流量没了，穷的吃土，研究了一下WIFI无线安全写出相关文章希望大家能对认识网络安全提供帮助</p>
<p><strong>（文章仅用于学习交流，请勿违法！)</strong></p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20230110132649651.png" alt="image-20230110132649651"></p>
<h2 id="破解方式"><a href="#破解方式" class="headerlink" title="破解方式"></a>破解方式</h2><p>wifi的破解方式很多，在上面的文章说了如果无线路由器开启了WPS就可以使用pin码进行破解，除了pin码破解还有社会工程学抓包跑字典等方式</p>
<h3 id="pin码破解"><a href="#pin码破解" class="headerlink" title="pin码破解"></a>pin码破解</h3><p>难度：⭐⭐</p>
<p>时长：0~2小时，平均一小时</p>
<p>条件：路由器WPS功能是否开启，路由器信号强度，路由器是否防PIN</p>
<p>原理：WPS的pin码并没有加密。Reaver会暴力破解pin码，找到pin码也就找到了密码。</p>
<p>环境要求：</p>
<ol>
<li>网卡支持数据包注入</li>
<li>要求无线信号强</li>
</ol>
<p>注意事项：</p>
<ol>
<li>如果发送pin码过快，有可能造成路由器崩溃；就类似对服务器的DDOS攻击。</li>
<li>此过程不能联网，虚拟器需要断开网络连接</li>
<li>Reaver有很多其他选项，查看帮助：reaver ?</li>
</ol>
<p><strong>查看网卡</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">airmon-ng<br></code></pre></td></tr></table></figure>

<p><img src="https://ywnz.com/uploads/allimg/17/1-1G016111554502.JPG" alt="Kali Linux使用Aircrack破解wifi密码(wpa/wpa2)"></p>
<p>上面命令列出了支持监控模式的无线网卡。一般是带wlan开头的，自带的网卡如eth0是不支持的，市面上90%笔记本网卡是不支持渗透测试的。</p>
<p><strong>开启监听模式</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">airmon-ng start wlan0<br></code></pre></td></tr></table></figure>

<p><img src="https://ywnz.com/uploads/allimg/17/1-1G0161116064B.JPG" alt="Kali Linux使用Aircrack破解wifi密码(wpa/wpa2)"></p>
<p>执行成功之后网卡接口变为wlan0mon；可以使用ifconfig命令查看。</p>
<p><strong>查询开启WPS功能的无线路由器</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">wash -i wlan0mon -C<br></code></pre></td></tr></table></figure>

<p>如果什么也没有表示周围没有开启WPS的无线路由器。记住要破解wifi的BSSID。</p>
<p><strong>开始破解密码</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">reaver -i wlan0mon -b C8:3A:35:30:3E:C8 -vv -a<br></code></pre></td></tr></table></figure>

<p>最后，不要忘了结束无线网卡的监控模式：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">airmon-ng stop wlan0mon<br></code></pre></td></tr></table></figure>

<h3 id="CD-Linux配合minidwep-gtk工具跑PIN破解WiFi"><a href="#CD-Linux配合minidwep-gtk工具跑PIN破解WiFi" class="headerlink" title="CD Linux配合minidwep-gtk工具跑PIN破解WiFi"></a>CD Linux配合minidwep-gtk工具跑PIN破解WiFi</h3><p>和上一个pin码原理一样，只是这个CD Linux集成的工具跑起来更简单方便</p>
<p>难度：⭐</p>
<p><strong>1.挂载网卡</strong><br>首先打开CD Linux并且将网卡挂载到CD Linux<br>具体的操作步骤是：<br>VM ware虚拟机-可移动设备-Realtek RTL8187 Wireless-连接（与主机断开连接）<br>会弹出提示,探后点确定</p>
<p><strong>2.使用水滴</strong><br><strong>2.1打开水滴</strong><br>CD Linux给我们提供了许多好用的软件，本次只使用水滴用作演示，感兴趣的可以自行了解。<br>双击打开水滴（minidwep-gtk）</p>
<p>请仔细阅读弹出对话框中的内容，然后点OK</p>
<p><strong>2.2扫描</strong><br>点完OK就进入到主界面，然后点击扫描</p>
<p>程序会自动扫描附近的wifi，等个几十秒，所有扫描结果就展示出来了。</p>
<p><strong>2.3扫描结果</strong></p>
<p>这里面的wifi信号强度绝对值小的信号强，比如-50比-60信号强<br>往下找，发现有带WPS的wifi</p>
<p><strong>2.4跑PIN</strong><br>选中一个带有WPS的wifi，点击Reaver，如果你不知道各个参数代表啥，直接在弹出的对话框中点击OK。</p>
<p>这里有一篇关于Reaver参数设置的文章</p>
<p>reaver使用相关</p>
<p>在此期间程序会一个一个地尝试每一个PIN码，这个过程叫做“跑PIN”</p>
<p>理想速率是5 seconds&#x2F;pin</p>
<p><strong>2.5结果</strong><br>功夫不负有心人，在尝试到15389664时，成功了！<br>获取到了wifi的PIN码以及密码</p>
<h3 id="使用Aircrack破解wifi密码-wpa-x2F-wpa2"><a href="#使用Aircrack破解wifi密码-wpa-x2F-wpa2" class="headerlink" title="使用Aircrack破解wifi密码(wpa&#x2F;wpa2)"></a>使用Aircrack破解wifi密码(wpa&#x2F;wpa2)</h3><p>难度：⭐⭐⭐</p>
<p>这个方法同样不能联网，这种方式的原理是通过抓包，然后跑字典达到破解密码的目的，步骤相对繁琐，我有更方便的方式用airgeddon工具进行破解，有兴趣的小伙伴可以看一看，好了让我们继续</p>
<p><strong>查看网卡</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">airmon-ng<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/1-1G016111554502.JPG" alt="Kali Linux使用Aircrack破解wifi密码(wpa/wpa2)"></p>
<p>上面命令列出了支持监控模式的无线网卡。一般是带wlan开头的，自带的网卡如eth0是不支持的，市面上90%笔记本网卡是不支持渗透测试的。</p>
<p><strong>开启监听模式</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">airmon-ng start wlan0<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/1-1G0161116064B.JPG" alt="Kali Linux使用Aircrack破解wifi密码(wpa/wpa2)"></p>
<p>执行成功之后网卡接口变为wlan0mon；可以使用ifconfig命令查看。</p>
<p><strong>查看wifi网络</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">airodump-ng wlan0mon<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/1-1G01611161S27.JPG" alt="Kali Linux使用Aircrack破解wifi密码(wpa/wpa2)"></p>
<p>上面列出了周围的wifi和它们的详细信息，包括信号强度、加密类型、频道等。要记住要破解wifi的频道号和BSSID。</p>
<p>按Ctrl-C结束。</p>
<p><strong>抓取握手包</strong></p>
<p>使用网卡的监听模式抓取周围的无线网络数据包。其中，对我们最重要的数据包是：包含密码的包－也叫握手包。当有新用户或断开用户自动连接wifi时，会发送握手包。</p>
<p>开始抓包：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">airodump-ng -c 6 --bssid C8:3A:35:30:3E:C8 -w ~/ wlan0mon<br></code></pre></td></tr></table></figure>

<p>参数解释：</p>
<p>-c指定频道号</p>
<p>-bssid指定路由器bssid</p>
<p>-w指定抓取的数据包保存位置</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/1-1G016111630U9.JPG" alt="Kali Linux使用Aircrack破解wifi密码(wpa/wpa2)"></p>
<p><strong>强制连接到wifi的设备重新连接路由器</strong></p>
<p>现在我们只要等用户连接&#x2F;重连接wifi了，运气不好也许要很长时间。</p>
<p>但是我们是不会等的，这不是耐心黑客该干的事。有一个叫aireplay-ng的工具，它可以强制用户断开wifi连接；原理是，给连接到wifi的一个设备发送一个deauth（反认证）包，让那个设备断开wifi，随后它自然会再次连接wifi。</p>
<p>aireplay-ng的生效前提是，wifi网络中至少有一个连接的设备。从上图可以看到哪些设备连接到了wifi，STATION就是连接设备的MAC地址，记住一个。</p>
<p><a href="https://www.aircrack-ng.org/">aircrack-ng官网</a></p>
<p>打开新终端执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">aireplay-ng -0 2 -a C8:3A:35:30:3E:C8 -c B8:E8:56:09:CC:9C wlan0mon<br></code></pre></td></tr></table></figure>

<p>参数解释：</p>
<p>-0表示发起deauthentication攻击</p>
<p>-a指定无线路由器BSSID</p>
<p>-c指定强制断开的设备</p>
<p><img src="https://ywnz.com/uploads/allimg/17/1-1G0161116423V.JPG" alt="Kali Linux使用Aircrack破解wifi密码(wpa/wpa2)"></p>
<p>如果成功：</p>
<p><img src="https://ywnz.com/uploads/allimg/17/1-1G016111A4343.JPG" alt="Kali Linux使用Aircrack破解wifi密码(wpa/wpa2)"></p>
<p>按Ctrl-C结束抓包。</p>
<p>我们已经得到了想要的握手包了，可以结束无线网卡的监控模式了：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">airmon-ng stop wlan0mon<br></code></pre></td></tr></table></figure>

<p><img src="https://ywnz.com/uploads/allimg/17/1-1G016111F5355.JPG" alt="Kali Linux使用Aircrack破解wifi密码(wpa/wpa2)"></p>
<p><strong>开始破解密码</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">aircrack-ng -a2 -b C8:3A:35:30:3E:C8 -w /usr/share/wordlists/rockyou.txt ~/*.cap<br></code></pre></td></tr></table></figure>

<p>参数解释：</p>
<p>-a2代表WPA的握手包</p>
<p>-b指定要破解的wifi BSSID。</p>
<p>-w指定字典文件</p>
<p>最后是抓取的包</p>
<p><img src="https://ywnz.com/uploads/allimg/17/1-1G016111Ga23.JPG" alt="Kali Linux使用Aircrack破解wifi密码(wpa/wpa2)"></p>
<p>可选）使用显卡的运算能力</p>
<p>如果你有一个强大的GPU，为什么不使用GPU跑字典呢？</p>
<p>Hashcat可以借助GPU的运算力破解各种不同算法的hash值。</p>
<p>下载时要注意选择正确的显卡类型（AMD、NVidia）。Kali Linux自带这个工具。</p>
<p>在破解cap文件之前，要把它转换为hccap文件：</p>
<p># aircrack-ng file.cap -J out.hccap</p>
<p>使用GPU破解hash：</p>
<p># hashcat -m 2500 out.hccap 字典文件</p>
<h3 id="破解隐藏网络-隐藏SSID"><a href="#破解隐藏网络-隐藏SSID" class="headerlink" title="破解隐藏网络(隐藏SSID)"></a>破解隐藏网络(隐藏SSID)</h3><p>难度：⭐</p>
<p><img src="https://ywnz.com/uploads/allimg/17/1-1G016112542O7.JPG" alt="使用Reaver破解开启了WPS功能的wifi密码(wpa/wpa2)"></p>
<p><strong>查看方法：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">airodump-ng -c 6 --bssid C8:3A:35:30:3E:C8 wlan0mon<br>aireplay-ng -0 30 -a C8:3A:35:30:3E:C8 -c B8:E8:56:09:CC:9C wlan0mon<br></code></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://xie1997.blog.csdn.net/article/details/83316451">无线网络的加密方式：WEP、WPA和WPA2</a></p>
<p><a href="https://ywnz.com/linuxaq/113.html">使用Reaver破解开启了WPS功能的wifi密码(wpa&#x2F;wpa2)</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1152164">无线安全专题_破解篇02–kali破解pin</a></p>
<p><a href="https://blog.csdn.net/lee244868149/article/details/52691266">无线局域网安全（一）———WEP加密</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/41463410">从黑客角度来谈如何保护路由器-WPS破解方式（一）</a></p>
<p><a href="https://blog.csdn.net/a1397852386/article/details/125572633">网络安全–跑PIN破解WiFi(详细教程)</a></p>
<p><a href="https://blog.csdn.net/weixin_43408952/article/details/83044719">WPA3—SAE原理介绍</a></p>
<p><a href="https://info.support.huawei.com/info-finder/encyclopedia/zh/WPA3.html">什么是WPA3</a></p>
]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
  </entry>
  <entry>
    <title>路由器的加密算法</title>
    <url>/2022/08/29/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E8%B7%AF%E7%94%B1%E5%99%A8%E7%9A%84%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="路由器的加密算法"><a href="#路由器的加密算法" class="headerlink" title="路由器的加密算法"></a><strong>路由器的加密算法</strong></h1><p>目前路由器的加破解途径主要有三种，WEP破解、WPA&#x2F;WPA2、WPS</p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220828211646977.png" alt="image-20220828211646977"></p>
<h3 id="有线等效加密WEP（pre-RSNA）"><a href="#有线等效加密WEP（pre-RSNA）" class="headerlink" title="有线等效加密WEP（pre-RSNA）"></a>有线等效加密WEP（pre-RSNA）</h3><p>WEP（Wired Equivalent Privacy）加密是最早在无线加密中使用的技术。</p>
<p>因为WEP出现了非常严重的漏洞，所以Wi-Fi协会于2004年宣布WEP正式退役。</p>
<h3 id="Wi-Fi保护设置WPA-TKIP"><a href="#Wi-Fi保护设置WPA-TKIP" class="headerlink" title="Wi-Fi保护设置WPA(TKIP)"></a>Wi-Fi保护设置WPA(TKIP)</h3><p>WPA采用TKIP协议（temporal key integrity protocol）作为加密协议。</p>
<p>TKIP 是 WPA 的核心组件，设计初衷是全为对现有 WEP 设备进行固件升级。因此， WPA 必须重复利用 WEP 系统中的某些元素，最终也被黑客利用。</p>
<h3 id="Wi-Fi保护设置ⅡWPA2-CCMP-AES"><a href="#Wi-Fi保护设置ⅡWPA2-CCMP-AES" class="headerlink" title="Wi-Fi保护设置ⅡWPA2(CCMP-AES)"></a>Wi-Fi保护设置ⅡWPA2(CCMP-AES)</h3><p>Wi-Fi Protected Access II (WPA2)。WPA 标准于2006年正式被 WPA2 取代。 WPA 和 WPA2 之间最显着的变化之一是强制使用 AES 算法和引入 CCMP （计数器模式密码块链消息完整码协议）替代 TKIP 。</p>
<ul>
<li>KRACK攻击（Key Reinstallation Attacks，密钥重装攻击）：WPA2在2017年被发现存在安全漏洞，采用WPA2进行加密的Wi-Fi网络可能会遭受KRACK攻击，攻击者利用这个漏洞诱导用户重新安装已使用过的密钥，并通过一系列手段破解用户密钥，从而实现用户网络的完全访问。</li>
<li>离线字典或<a href="https://info.support.huawei.com/info-finder/encyclopedia/zh/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3.html">暴力破解</a>攻击：WPA2采用的密钥复杂度和被破解的难度呈正相关，尤其是个人或者家庭Wi-Fi网络经常采用一个比较简单的密钥，这样的Wi-Fi网络很容遭受离线字典（根据用户自定义词典中可能的密码逐一尝试）或者暴力破解攻击（又称穷举法，逐一尝试所有可能组合的密码）轻松破解。</li>
<li><strong>Wi-Fi 保护设置（ WPS ）</strong>的攻击向量。攻击带有WPS的WPA&#x2F;WPA2网络，现代计算机需要花费1至2小时持续攻击。防御方法：禁用 WPS。</li>
</ul>
<h3 id="Wi-Fi保护设置ⅢWPA3"><a href="#Wi-Fi保护设置ⅢWPA3" class="headerlink" title="Wi-Fi保护设置ⅢWPA3"></a>Wi-Fi保护设置ⅢWPA3</h3><p>WPA3（<a href="https://info.support.huawei.com/info-finder/encyclopedia/zh/WiFi.html">Wi-Fi</a> Protected Access 3，第三代Wi-Fi访问保护）是Wi-Fi联盟组织于2018年发布的新一代Wi-Fi（<a href="https://info.support.huawei.com/info-finder/encyclopedia/zh/WiFi.html">WiFi</a>）加密协议，它对WPA2进行了改进，增加了许多新的功能，为用户和Wi-Fi网络之间的数据传输提供更加强大的加密保护</p>
<p>2017年10月份，有安全研究者公布了WPA2协议的一个弱点，会遭受到KRACK（ Key Reinstallation AttaCK）攻击；攻击者可以获取STA和AP之间传输的数据，许多厂家已经发布相关补丁修复此漏洞；但是WPA2的形象和名声还是受到损害，因而WIFI联盟迅速推出了WPA3</p>
<h3 id="无线局域网鉴别和保密基础结构（WAPI）"><a href="#无线局域网鉴别和保密基础结构（WAPI）" class="headerlink" title="无线局域网鉴别和保密基础结构（WAPI）"></a>无线局域网鉴别和保密基础结构（WAPI）</h3><p>WAPI （WLAN Authentication and Privacy Infrastructure）。是国内自主研发的无线网络WLAN安全标准.</p>
<h3 id="WPA-PSK-x2F-WPA2-PSK"><a href="#WPA-PSK-x2F-WPA2-PSK" class="headerlink" title="WPA-PSK&#x2F;WPA2-PSK"></a>WPA-PSK&#x2F;WPA2-PSK</h3><p> WPA和WPA2衍生出来的两种加密方式WPA-PSK和WPA2-PSK，他们之间的区别在于使用的加密算法。WPA-PSK和WPA2-PSK既可以使用TKIP加密算法也可以使用AES加密算法。</p>
<p>WPA3对于个人和企业网络提供不同模式</p>
<ul>
<li>WPA3-SAE 个人网络</li>
<li>WPA3-Enterprise 企业网络</li>
</ul>
<p>WPA3优势：</p>
<ul>
<li>加密一致性：通过强制执行同时使用“先进加密标准（Advanced Encryption Standard，简称AES）”和传统协议（例如“临时密钥完整性协议（Temporal Key Integrity Protocol，简称TKIP）”）的政策，降低了网络遭受攻击的可能性；</li>
<li>网络弹性：通过启用受保护的管理帧（Protected Management Frames，简称PMF）机制，防止窃听和假冒管理帧的行为，提供了可靠的保护。一致地使用这类保护措施可提高关键任务型网络的弹性。</li>
</ul>
<h2 id="Wi-Fi保护设置（WPS）"><a href="#Wi-Fi保护设置（WPS）" class="headerlink" title="Wi-Fi保护设置（WPS）"></a>Wi-Fi保护设置（WPS）</h2><p>WPS（Wi-Fi Protected Setup）。旨在让家庭用户使用无线网络时简化加密步骤。此标准由Wi-Fi联盟（Wi-Fi Alliance）于2006年制定。</p>
<p>作用：WPS的目的是简化用户输入密码的步骤；在某个设备连接wifi，需要输入密码时，只要按一下无线路由器上的wps按钮就可以了。</p>
<p>漏洞：在2011年12月28日安全专家Stefan Viehbock报出此标准的一个重大安全漏洞，此漏洞允许远程攻击者使用暴力攻击在几小时内就能获取WPS的PIN码和WPA&#x2F;WPA2的PSK码。一些新出产的无线路默认启动WPS功能，所以现在建议用户关闭无线路由器上的WPS一键加密功能，有些无线器上无法关闭此功能。</p>
<p>破解原理：当路由器开了WPS功能，支持PIN码进行连接的时候，它的PIN码在机器里面是用的一组序列号保存的，写在router里面，一般从一般可以从router的标签上可以看到，它是”external registrar”的验证模式，仅需路由器的PIN，此模式的设计存在问题允许对PIN进行暴力猜测攻击。</p>
<h2 id="无线网标准"><a href="#无线网标准" class="headerlink" title="无线网标准"></a>无线网标准</h2><p><strong>IEEE802.11标准</strong></p>
<ul>
<li>IEEE802.11a，速率最高可达54Mbps</li>
<li>IEEE802.11b，速率最高可达11Mbps</li>
<li>IEEE802.11g，速率最高可达54Mbps</li>
<li>IEEE802.11n，速率最高可达108Mbps</li>
<li>IEEE802.11ac，速率最高可达600Mbps</li>
</ul>
]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
  </entry>
  <entry>
    <title>极客精神本质</title>
    <url>/2023/06/13/%E9%9A%8F%E5%86%99/%E6%9E%81%E5%AE%A2%E7%B2%BE%E7%A5%9E%E6%9C%AC%E8%B4%A8/</url>
    <content><![CDATA[<h1 id="Geek"><a href="#Geek" class="headerlink" title="Geek"></a>Geek</h1><p>避免为了赚钱什么姿势都能给的网站</p>
<ul>
<li>实现财务自由</li>
</ul>
<p>极客大概不信邪，他们信自己，天生喜欢在各种规矩的边缘疯狂地试探。实际上，为了科学地“作死”，极客们总得研究最新的知识，于是在这个科技闪耀的时代，很多极客顺理成章地成为了科技爱好者。</p>
]]></content>
      <categories>
        <category>随写</category>
      </categories>
  </entry>
  <entry>
    <title>BOM</title>
    <url>/2022/08/15/WebFrontend/JavaScript/BOM/</url>
    <content><![CDATA[<ul>
<li>BOM（Browser object Model）：浏览器对象模型</li>
<li>其实就是操作浏览器的一些能力</li>
<li>我们可以操作哪些内容<ul>
<li>获取一些浏览器的相关信息（窗口的大小）</li>
<li>操作浏览器进行页面跳转</li>
<li>获取当前浏览器地址栏的信息</li>
<li>浏览器的信息（浏览器的版本）</li>
<li>让浏览器出现一个弹出框（alert&#x2F;confirm&#x2F;prompt）</li>
<li>…</li>
</ul>
</li>
<li>BOM的核心就是window对象</li>
<li>window是浏览器内置的一个对象，里面包含着操作浏览器的方法</li>
</ul>
<h3 id="重要事件"><a href="#重要事件" class="headerlink" title="重要事件"></a>重要事件</h3><ul>
<li><p>onresize</p>
<p>宽口大小发生改变的时候触发。</p>
</li>
<li><p>onscroll</p>
<p>页面滚动的时候触发，也可以用于某个元素节点上。</p>
</li>
<li><p>onfocus onblur</p>
<p>进入页面和离开页面时触发，也可以用于其他能获得焦点的元素节点上。</p>
</li>
<li><p>打开与关闭窗口</p>
<p>open() close()</p>
</li>
</ul>
<h3 id="重要对象"><a href="#重要对象" class="headerlink" title="重要对象"></a>重要对象</h3><ul>
<li><p>location</p>
<p>获取&#x2F;设置 URL相关的属性。</p>
</li>
<li><p>history</p>
<p>操作当前标签页的历史，类似于点击浏览器地址栏左侧的前进和后退按钮。</p>
<p><code>history.go(number)</code> – 前进或后退指定的页面数。</p>
<p><code>history.back()</code> – 后退一页。</p>
<p><code>history.forward()</code> – 前进一页。</p>
</li>
<li><p>navigator</p>
<p>获取浏览器相关的信息。</p>
</li>
<li><p>Screen</p>
<p>获取用户显示屏幕的各种信息。</p>
<p><code>.width .height</code> 获取显示器分辨率。</p>
<p><code>.availWidth .availHeight</code> 获取除去任务栏的大小。</p>
</li>
</ul>
<h2 id="各种尺寸获取"><a href="#各种尺寸获取" class="headerlink" title="各种尺寸获取"></a>各种尺寸获取</h2><h3 id="可视区宽高"><a href="#可视区宽高" class="headerlink" title="可视区宽高"></a>可视区宽高</h3><ul>
<li><p>窗口宽高</p>
<p><code>window.innerWidth window.innerHeight</code></p>
<p>包含了滚动条的宽度和浏览器本身的边框宽度（低版本IE不支持）。</p>
</li>
<li><p>内容区宽高</p>
<p><code>document.documentElement.clientWidth</code></p>
<p><code>document.documentElement.clientHeight</code></p>
<p>不包含滚动条等。</p>
</li>
</ul>
<h3 id="元素的各种宽高"><a href="#元素的各种宽高" class="headerlink" title="元素的各种宽高"></a>元素的各种宽高</h3><ul>
<li><p>client</p>
<p><code>clientWidth clientHeight</code></p>
<p>宽(高)+padding。</p>
</li>
<li><p>offset</p>
<p><code>offsetWidth offssetHeight</code></p>
<p>宽(高)+padding+border。</p>
</li>
<li><p>scroll</p>
<p><code>scrollWidth / scrollHeigh</code></p>
<p>内容的实际高度，当内容没超出相当于client，当内容超出之后，会得到包括超出内容的实际高度，即使加了超出隐藏，也还是会得到内容所占的实际高度。</p>
</li>
</ul>
<h3 id="元素的各种距离"><a href="#元素的各种距离" class="headerlink" title="元素的各种距离"></a>元素的各种距离</h3><ul>
<li><p>offset</p>
<p><code>offsetLeft offsetTop</code></p>
<p>获取左边（上边），到定位父级的左边（上边）的距离。</p>
</li>
<li><p><code>getBoundingClientRect</code></p>
<p>返回一个对象，包含了元素各边到窗口的距离，返回的结构类似于：{top:100,left:20,bottom:500,right:890}。</p>
</li>
</ul>
<h3 id="滚动距离"><a href="#滚动距离" class="headerlink" title="滚动距离"></a>滚动距离</h3><ul>
<li><p>页面滚动宽高</p>
<p><code>doucment.documentElement.scrollTop</code></p>
<p><code>document.documentElement.scrollLeft</code></p>
<p>页面的滚动宽（高）。此属性可以赋值，能让页面滚动到指定的位置。</p>
<p>设置滚动距离也可以使用<code>window.scrollTo()</code>。</p>
</li>
<li><p>元素滚动宽高</p>
<p><code>元素节点.scrollTop 元素节点.scrollLeft</code></p>
</li>
</ul>
]]></content>
      <categories>
        <category>WebFrontend</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>bom</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 正则表达式</title>
    <url>/2022/10/17/WebFrontend/JavaScript/JS%20%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>正则表达式（regular expression）是一个描述字符模式的对象。JavaScript的RegExp类表示正则表达式。</p>
<h3 id="创建正则表达式的对象"><a href="#创建正则表达式的对象" class="headerlink" title="创建正则表达式的对象"></a>创建正则表达式的对象</h3><p><strong>构造函数创建：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> 变量 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&quot;正则表达式&quot;</span>,<span class="hljs-string">&quot;匹配模式&quot;</span>);<br></code></pre></td></tr></table></figure>



<p><strong>字面量方式创建：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> 变量 = <span class="hljs-regexp">/正则表达式/</span>匹配模式;<br></code></pre></td></tr></table></figure>



<blockquote>
<p>匹配模式参数:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">参数：<br>i 忽略大小写<br>g 全局匹配模式<br>m 执行多行匹配<br></code></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> reg = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&quot;a&quot;</span>); <span class="hljs-comment">//匹配任何含有“a”的字符串</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&quot;a$&quot;</span>); <span class="hljs-comment">//匹配任何以“a”结束的字符串</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;i&quot;</span>); <span class="hljs-comment">//匹配任何含有“a”的字符串并不区分大小写</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/a/i</span>; <span class="hljs-comment">//匹配任何含有“a”的字符串并不区分大小写（字面量方式创建）</span><br></code></pre></td></tr></table></figure>



<h3 id="直接量字符"><a href="#直接量字符" class="headerlink" title="直接量字符"></a>直接量字符</h3><p>JavaScript正则表达式语法也支持非字母的字符匹配，这些字符需要通过反斜线（\）作为前缀进行转义。</p>
<table>
<thead>
<tr>
<th>字符、字母和数字字符</th>
<th>匹配自身</th>
</tr>
</thead>
<tbody><tr>
<td>\o</td>
<td>NUL字符（\u0000）</td>
</tr>
<tr>
<td>\t</td>
<td>制表符 (\u0009)</td>
</tr>
<tr>
<td>\n</td>
<td>换行符（\u000A）</td>
</tr>
<tr>
<td>\v</td>
<td>垂直制表符（\u000B）</td>
</tr>
<tr>
<td>\f</td>
<td>换页符（\u000C）</td>
</tr>
<tr>
<td>\r</td>
<td>回车符（\u000D）</td>
</tr>
<tr>
<td>\xnn</td>
<td>由十六进制数nn指定的拉丁字符，例如: \x0A 等价于 \n</td>
</tr>
<tr>
<td>\uxxxx</td>
<td>由十六进制数xxxx指定的Unicode字符，例如：\u0009 等价于 \t</td>
</tr>
<tr>
<td>\cX</td>
<td>控制字符^X，例如：\cJ等价于换行符\n</td>
</tr>
</tbody></table>
<blockquote>
<p>注：在正则表示中，许多标点符号具有特殊含义，它们是：</p>
<p>^ $ . * + ? &#x3D; ! : | \ &#x2F; ( ) [ ] { }</p>
</blockquote>
<h3 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h3><p><strong>正则表达式的字符类：</strong></p>
<table>
<thead>
<tr>
<th>元字符</th>
<th>匹配</th>
</tr>
</thead>
<tbody><tr>
<td>[…]</td>
<td>方括号内的任意字符</td>
</tr>
<tr>
<td>[^…]</td>
<td>不在方括号内的任意字符</td>
</tr>
<tr>
<td>.</td>
<td>除换行符和其他Unicode行终止符之外的任意字符</td>
</tr>
<tr>
<td>\w</td>
<td>任何ASCII字符组成的单词，等价于[a-zA-Z0-9]</td>
</tr>
<tr>
<td>\W</td>
<td>任何不是ASCII字符组成的单词，等价于[a-zA-Z0-9]</td>
</tr>
<tr>
<td>\s</td>
<td>任何Unicode空白符</td>
</tr>
<tr>
<td>\S</td>
<td>任何非Unicode空白符的字符</td>
</tr>
<tr>
<td>\d</td>
<td>任何ASCII数字，等价于[0-9]</td>
</tr>
<tr>
<td>\D</td>
<td>除了ASCII数字之外的任何字符，等价于<code>[^0-9]</code></td>
</tr>
<tr>
<td>[\b]</td>
<td>退格直接量（特例）</td>
</tr>
</tbody></table>
<p><strong>例子：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/[abc]/</span>; <span class="hljs-comment">//匹配任意含有字母“a”、“b”、“c”的字符串</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/[^abc]/</span>; <span class="hljs-comment">//匹配任意不含有字母“a”、“b”、“c”的字符串</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/[a-z]/</span>; <span class="hljs-comment">//匹配拉丁字母表中的小写字母</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/[a-zA-Z0-9]/</span>; <span class="hljs-comment">//匹配拉丁字母表中任何字母和数字</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/[\s\d]/</span>;	<span class="hljs-comment">//匹配任意空白符或者数字</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/[\b]/</span>; <span class="hljs-comment">//匹配退格符</span><br></code></pre></td></tr></table></figure>



<h3 id="量词-x2F-重复"><a href="#量词-x2F-重复" class="headerlink" title="量词&#x2F;重复"></a>量词&#x2F;重复</h3><p>量词也称重复。掌握<code>&#123;m,n&#125;</code>的准确含义后，只需要记住一些简写形式。</p>
<p>由于某些重复种类非常常用，因此就有一些专门用于表示这种情况的特殊字符。</p>
<table>
<thead>
<tr>
<th>字符</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>{n,m}</td>
<td>匹配n-m次，优先匹配m次</td>
</tr>
<tr>
<td>{n,}</td>
<td>匹配n-∞次，优先匹配∞次</td>
</tr>
<tr>
<td>{n}</td>
<td>匹配n次</td>
</tr>
<tr>
<td>?</td>
<td>匹配0次或1次，优先匹配1次，等价于{0,1}</td>
</tr>
<tr>
<td>+</td>
<td>匹配1-n次，优先匹配n次，等价于{1,}</td>
</tr>
<tr>
<td>*</td>
<td>匹配0-n次，优先匹配n次，等价于{0,}</td>
</tr>
</tbody></table>
<p><strong>例子：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/\d&#123;2,4&#125;/</span>;  <span class="hljs-comment">//匹配2~4个数字</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/\w&#123;3&#125;\d?/</span>;  <span class="hljs-comment">//精确匹配三个单词和一个可选的数字</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/\s+java\s+/</span>; <span class="hljs-comment">//匹配前后带有一个或多个空格的字符串“java”</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/[^(]*/</span>	<span class="hljs-comment">//匹配一个或多个非左括号的字符</span><br></code></pre></td></tr></table></figure>

<blockquote>
<p> 注：在使用 “*” 和 “?” 时要注意，由于这些字符可能匹配0个字符，因为它们允许什么都不匹配。例如，正则表达式<code>/a*/</code>实际上与字符串”bbbb”匹配，因为这个字符串含有0个a</p>
</blockquote>
<h3 id="贪婪模式-x2F-惰性模式"><a href="#贪婪模式-x2F-惰性模式" class="headerlink" title="贪婪模式&#x2F;惰性模式"></a>贪婪模式&#x2F;惰性模式</h3><p>贪婪模式——在匹配成功的前提下，尽可能多的去匹配</p>
<p>惰性模式——在匹配成功的前提下，尽可能少的去匹配</p>
<table>
<thead>
<tr>
<th>{n,m}?</th>
<th>尽量匹配n次，但不能超过m次</th>
</tr>
</thead>
<tbody><tr>
<td>{n}?</td>
<td>尽量匹配n次</td>
</tr>
<tr>
<td>{n,}?</td>
<td>尽量匹配n次或者更多次</td>
</tr>
<tr>
<td>??</td>
<td>尽量匹配，满足限定条件也可能最多匹配1次，相当于 {0,1}?</td>
</tr>
<tr>
<td>+?</td>
<td>尽量匹配1次，但是为了满足限定条件也可能匹配任意次，相当于 {1,}?</td>
</tr>
<tr>
<td>*?</td>
<td>尽量不匹配，但是为了满足限定条件也可能匹配任意次，相当于 {0,}?</td>
</tr>
</tbody></table>
<h2 id="使用字符串方法"><a href="#使用字符串方法" class="headerlink" title="使用字符串方法"></a>使用字符串方法</h2><p>在 JavaScript 中，正则表达式常用于两个<em>字符串方法</em>：<code>search()</code> 和 <code>replace()</code>。</p>
<p><code>search()</code> 方法使用表达式来搜索匹配，然后返回匹配的位置。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> regex = <span class="hljs-regexp">/\d&#123;2&#125;a/</span>;<br><span class="hljs-keyword">const</span> str = <span class="hljs-string">&quot;Hello54 How 64aare you&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">split</span>(regex)) <span class="hljs-comment">// [&quot;Hello54 How &quot;, &quot;are you&quot;]</span><br></code></pre></td></tr></table></figure>



<p><code>replace()</code> 方法返回模式被替换处修改后的字符串。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> str = <span class="hljs-string">&#x27;JavaScript&#x27;</span>;<br><span class="hljs-keyword">const</span> newStr = str.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;ava&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newStr);<span class="hljs-comment">// J-Script</span><br></code></pre></td></tr></table></figure>



<p><code>text()</code>使用这个方法可以用来检查一个字符串是否符合正则表达式的规则，符合返回true，否则返回false</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> result = reg.<span class="hljs-title function_">test</span>(str);<br></code></pre></td></tr></table></figure>



<p><code>test()</code>字符串匹配到正则表达式时，改方法会提取匹配项</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> result = reg.<span class="hljs-title function_">match</span>(str);<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>WebFrontend</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>DOM</title>
    <url>/2022/08/21/WebFrontend/JavaScript/DOM/</url>
    <content><![CDATA[<h1 id="初识DOM"><a href="#初识DOM" class="headerlink" title="初识DOM"></a>初识DOM</h1><blockquote>
<p>DOM（Document Object Model）文档对象模型，是W3C组织推荐的处理可扩展置标语言的标准编程接口。</p>
</blockquote>
<h2 id="获取节点"><a href="#获取节点" class="headerlink" title="获取节点"></a>获取节点</h2><p>DOM为我们提供了一个全局内置对象<code>document</code>，要操作HTML标签，我们可以调用<code>document</code>对象中的各种方法来获取页面中的标签（在js中我们可以称之为 <strong>元素</strong> 或者 <strong>节点</strong>）：</p>
<ul>
<li><p>通过ID获取</p>
<p>eg：<code>document.getElementById(&quot;ID&quot;)</code></p>
</li>
<li><p>通过name获取</p>
<p>eg:  <code>document.getElementsByName(&quot;Name&quot;)</code></p>
</li>
<li><p>通过选择器获取</p>
<p>eg：<code>document.querySelector(&quot;#main .nav&quot;)</code></p>
<p>eg：<code>document.querySelectorAll(#banner li)</code></p>
</li>
<li><p>通过class名获取</p>
<p>eg：<code>document.getElementsByClassName(&quot;className&quot;)</code></p>
</li>
<li><p>通过标签名获取</p>
<p>eg：<code>document.getElementsByTagName(&quot;tagName&quot;)</code></p>
</li>
<li><p>特殊标签的获取</p>
<p>获取html标签 <code>document.documentElement</code></p>
<p>获取head标签 <code>document.hea</code></p>
<p>获取body标签 <code>document.body</code></p>
<p>获取title标签 <code>document.title</code></p>
</li>
</ul>
<p>一般情况下，推荐使用 <strong>ID获取</strong> 或者 <strong>选择器获取</strong> ，比较方便。</p>
<h2 id="操作HTML内容"><a href="#操作HTML内容" class="headerlink" title="操作HTML内容"></a>操作HTML内容</h2><p><code>节点.innerHTML</code> 获取&#x2F;修改 元素的HTML内容，</p>
<p><code>节点.innerText</code> 获取&#x2F;修改 元素的文本内容（老版本FF不支持这个属性，使用 <code>.textContent</code> 代替）。</p>
<h2 id="监听事件"><a href="#监听事件" class="headerlink" title="监听事件"></a>监听事件</h2><ul>
<li><p>事件种类</p>
<p>鼠标事件： <code>onclick 左键单击</code> <code>ondblclick 左键双击</code> <code>onmouseover onmouseenter 鼠标移入</code> <code>onmouseout onmouseleave鼠标移出</code> <code>onmousedown 鼠标按下</code> <code>onmousmove 鼠标移动</code> <code>onmouseup 鼠标抬起</code> <code>oncontextmenu 右键单击</code></p>
<p>键盘事件：<code>onkeydown onkeypress 键按下</code> <code>onkeyup 键抬起</code></p>
<p>系统事件： <code>onload 加载完成后</code> <code>onerror 加载出错后</code> <code>onresize 窗口调整大小时</code> <code>onscroll 滚动时</code></p>
<p>表单事件： <code>onfocus 获取焦点后</code> <code>onblur 失去焦点后</code> <code>onchange 改变内容后</code> <code>onreset 重置后</code> <code>onselect 选择后</code> <code>onsubmit 提交后</code></p>
</li>
<li><p>监听事件写法</p>
<p><code>节点.事件 = 函数</code>。</p>
<p>eg：<code>document.getElementById(&quot;main&quot;).onclick = function()&#123;alert(1)&#125;;</code></p>
<p>这里的函数称之为 <strong>事件函数</strong>，事件函数不会自执行，而是当事件触发时执行。</p>
</li>
<li><p>事件函数this指向</p>
<p>在事件函数中，关键词 <code>this</code> 就表示触发事件的这个节点对象。</p>
</li>
</ul>
<h2 id="操作节点的标签属性"><a href="#操作节点的标签属性" class="headerlink" title="操作节点的标签属性"></a>操作节点的标签属性</h2><ul>
<li><p>合法标签属性</p>
<p>直接使用 <code>节点.属性</code> 的方式。eg：<code>console.log(节点.id);</code> <code>节点.title = &quot;新的title&quot;</code>。</p>
<p>class名字不能 <code>.class</code> ，而是使用 <code>.className</code> 代替。</p>
</li>
<li><p>自定义的标签属性</p>
<p>不能直接使用 <code>.</code> 操作。</p>
<p>设置<code>setAttribute</code> 获取<code>getAttribute</code> 移除<code>removeAttribute</code> 。</p>
</li>
</ul>
<h2 id="操作样式"><a href="#操作样式" class="headerlink" title="操作样式"></a>操作样式</h2><ul>
<li><p>修改样式</p>
<p>元素样式由<code>css</code>控制，JavaScript想要改变元素的样式，那么就相当于要改变css。</p>
<p>元素css样式的书写位置有三种：<strong>外部样式表</strong>、<strong>内部样式表</strong>、<strong>行内样式</strong>。js来操作样式时，本质上就相当于要操作这三种位置的css。</p>
<ul>
<li><strong>外部样式表</strong> ：前端的 js 不能修改一个外部的文件，所以无法通过直接修改外部样式来改变元素。</li>
<li><strong>内部样式表</strong>：内部样式放置到<code>style</code>标签中，而style又在当前页面中，所以能够被js控制。但是操作来比较麻烦，所以不推荐。</li>
<li><strong>行内样式</strong>：直接写在标签中，并且优先级最高。js操作样式的<strong>最常用</strong>方式。</li>
</ul>
<p><code>节点.style.属性</code> 来控制单个的行内样式。</p>
<p><code>节点.style.cssText</code> 来控制节点的所有行内样式。</p>
<p>当单个标签操作的样式比较多时，使用 <strong>改变class来改变样式</strong> 的形式会方便很多。</p>
</li>
<li><p>获取样式</p>
<p><code>.style</code> 只能获取行内样式，要获取元素的最终显示样式使用 <code>getComputedStyle(节点)</code>。</p>
</li>
</ul>
<h2 id="类名的操作"><a href="#类名的操作" class="headerlink" title="类名的操作"></a>类名的操作</h2><p>使用 <code>.className</code> 可以来操作标签的类名，但是需要新加一个类名，或者去掉某个类名时，使用<code>.className</code>较为麻烦。所以推荐使用新API<code>.classList</code> 来操作类名。</p>
<p>添加：<code>节点.classList.add(&quot;类名&quot;)</code></p>
<p>移除：<code>节点.classList.remove(&quot;类名&quot;)</code></p>
<p>切换（有则删，无则加）：<code>节点.classList.toggle(&quot;类名&quot;)</code></p>
<p>是否有某个类名（得到布尔值）：<code>节点.classList.contain(&quot;类名&quot;)</code></p>
<h1 id="DOM节点"><a href="#DOM节点" class="headerlink" title="DOM节点"></a>DOM节点</h1><ul>
<li>DOM 的节点我们一般分为常用的三大类 <strong>元素节点&#x2F;文本节点&#x2F;属性节点</strong></li>
<li>什么是分类，比如我们在获取元素的时候，通过各种方法获取到的我们叫做元素节点（标签节点）</li>
<li>比如我们标签里面写的文字，那么就是文本节点</li>
<li>写在每一个标签上的属性，就是属性节点</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220815045709938.png" alt="image-20220815045709938"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220815045922963.png" alt="image-20220815045922963"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220815050153499.png" alt="image-20220815050153499"></p>
<h3 id="节点类型"><a href="#节点类型" class="headerlink" title="节点类型"></a>节点类型</h3><ul>
<li><p>childNodes</p>
<p>获取一个元素的所有子节点……</p>
</li>
<li><p>节点类型</p>
<p>DOM包含了多种节点，我们通常获取的标签，只是节点中的一种：</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>节点名称</th>
<th>nodeType</th>
</tr>
</thead>
<tbody><tr>
<td><em>元素节点</em></td>
<td><em>1</em></td>
</tr>
<tr>
<td><em>属性节点</em></td>
<td><em>2</em></td>
</tr>
<tr>
<td><em>文本节点</em></td>
<td><em>3</em></td>
</tr>
<tr>
<td>CDATA节点</td>
<td>4</td>
</tr>
<tr>
<td>实体引用名称节点</td>
<td>5</td>
</tr>
<tr>
<td>实体名称节点</td>
<td>6</td>
</tr>
<tr>
<td>处理指令节点</td>
<td>7</td>
</tr>
<tr>
<td>注释节点</td>
<td>8</td>
</tr>
<tr>
<td>文档节点</td>
<td>9</td>
</tr>
<tr>
<td>文档类型节点</td>
<td>10</td>
</tr>
<tr>
<td>文档片段节点</td>
<td>11</td>
</tr>
<tr>
<td>DTD声明节点</td>
<td>12</td>
</tr>
</tbody></table>
<p>重点理解前三种节点。</p>
<p>每个节点有<code>nodeName</code>属性，文本节点和属性节点的<code>nodeValue</code>属性。</p>
<ul>
<li><p>常见的节点获取API</p>
<p>常用：children parentNode offsetParent</p>
<p>不常用：firstElementChild &#x2F; firstChild lastElementChild &#x2F; lastChild nextElementSibling &#x2F; nextSibling previousElementSibling &#x2F; previouSibling</p>
</li>
</ul>
<h3 id="创建、添加、删除节点"><a href="#创建、添加、删除节点" class="headerlink" title="创建、添加、删除节点"></a>创建、添加、删除节点</h3><ul>
<li><p>创建节点</p>
<p>createElement 创建一个元素节点；</p>
<p>createTextNode 创建一个文本节点；</p>
<p>createDocumentFragment 创建一个文档碎片，先将多个节点整合到这里面再统一添加。</p>
</li>
<li><p>添加节点</p>
<p>appendChild 元素最后添加一个子节点；</p>
<p>insertBefore 在元素某个子节点之前添加新子节点，第一个参数为新节点，第二个参数为已存在的子节点。</p>
</li>
<li><p>替换节点</p>
<p>replaceChild 用新节点替换某个子节点，第一个参数为新节点，第二个参数为已存在的某个子节点。</p>
</li>
<li><p>删除节点</p>
<p>removeChild 删除元素的某个子节点。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>WebFrontend</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>dom</tag>
      </tags>
  </entry>
  <entry>
    <title>DOM与数据交互(学习日志)</title>
    <url>/2022/09/26/WebFrontend/JavaScript/DOM%E4%B8%8E%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92(%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97)/</url>
    <content><![CDATA[<h1 id="day1-初识dom"><a href="#day1-初识dom" class="headerlink" title="day1-初识dom"></a>day1-初识dom</h1><h2 id="dom是什么"><a href="#dom是什么" class="headerlink" title="dom是什么"></a>dom是什么</h2><p>DOM就是一个<code>编程接口</code>，就是一套<code>API</code>。</p>
<p>DOM是针对标记语言（HTML文档、XML等文档）的一套API。</p>
<p><strong>JS由的三个组成部分</strong></p>
<ul>
<li>ECMAscript (js的语法规范)</li>
<li>DOM (文档对象模型)</li>
<li>BOM (浏览器对象模型)</li>
</ul>
<blockquote>
<p>注：</p>
<ul>
<li><p>api：学习浏览器向我们提供的操作页面和操作浏览器的api</p>
</li>
<li><p>DOM：不是js提供的方法，而是html向js提供的api</p>
<p>DOM树页面渲染完成以后，所有页面中的内容都会被抽象成一个树形结构</p>
</li>
</ul>
</blockquote>
<p><strong>DOM 基本名词</strong></p>
<ul>
<li>文档：一个HTML页面就叫做一个文档</li>
<li>节点：网页中所有内容都是一个节点（标签，元素，文本，注释节点）</li>
<li>元素：元素中的标签节点</li>
<li>属性：标签的属性</li>
</ul>
<p><strong>api分类</strong></p>
<ul>
<li>节点获取</li>
<li>节点操作（修改节点内容的api）</li>
<li>用户交互行为 - 事件</li>
</ul>
<p>页面中的元素都是有内置的类创建的</p>
<p>HTMLElement 类 所有html元素的根类</p>
<ul>
<li>HTMLBodyElement</li>
<li>HTMLInputElement</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">constructor</span>.<span class="hljs-property">name</span>) <span class="hljs-comment">//HTMLBodyElement</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">HTMLBodyElement</span>) <span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Element</span>) <span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Node</span>) <span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Text</span>) <span class="hljs-comment">//false</span><br><br><span class="hljs-comment">//log 和 dir 的区别, log展示元素,dir是以树形结构展示元素</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">dir</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>)<br></code></pre></td></tr></table></figure>

<h2 id="DOM-与-HTML"><a href="#DOM-与-HTML" class="headerlink" title="DOM 与 HTML"></a>DOM 与 HTML</h2><p>HTML文档是树状结构，根为html；</p>
<p>DOM Tree也是树状结构，根为window或document对象。</p>
<p>html通过DOM API来解析生成DOM Tree</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220925234249240.png" alt="image-20220925234249240"></p>
<h2 id="DOM与其他技术的联系"><a href="#DOM与其他技术的联系" class="headerlink" title="DOM与其他技术的联系"></a>DOM与其他技术的联系</h2><p>JavaScript 可以通过DOM来访问和操作HTML文档所有的元素。</p>
<p><strong>JavaScript是一种脚本语言，DOM是用来获得和操作HTML文档的节点属性。</strong></p>
<p><strong>JavaScript通常是通过DOM来获得和操作HTML属性的。这就是二者的区别与联系。</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&lt;script&gt;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;成功&#x27;</span>);<br>&#125;<br>&lt;/script&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">button</span> <span class="hljs-attr">value</span> = <span class="hljs-string">&#x27;提交&#x27;</span> <span class="hljs-attr">onClick</span> = <span class="hljs-string">&#x27;test()&#x27;</span>/&gt;</span></span><br></code></pre></td></tr></table></figure>

<p>第1，2，4，5行是javaScript代码。</p>
<p>第3行是DOM代码（此行一定不要混淆成是JavaScript代码）。这就是JavaScript调用DOM的例子。</p>
<p>第6行是html代码。</p>
<h2 id="DOM的级别Level"><a href="#DOM的级别Level" class="headerlink" title="DOM的级别Level"></a>DOM的级别Level</h2><ul>
<li>DOM0：不是W3C规范。</li>
<li>DOM1：开始是W3C规范。专注于HTML文档和XML文档。</li>
<li>DOM2：对DOM1增加了<code>样式表对象模型</code></li>
<li>DOM3：对DOM2增加了<code>内容模型</code> (DTD 、Schemas) 和<code>文档验证</code>。</li>
</ul>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220925234141261.png" alt="image-20220925234141261"></p>
<h2 id="DOM节点类型"><a href="#DOM节点类型" class="headerlink" title="DOM节点类型"></a>DOM节点类型</h2><p>DOM（文档对象模型）是针对 HTML和 XML文档的一个API（应用程序编程接口）。</p>
<p>DOM描绘了一个层次化的节点树，允许开发人员添加、移除和修改页面的某一部分。</p>
<p>DOM将整个页面映射为一个由层次节点组成的文件。有1级、2级、3级共三个级别。</p>
<p><strong>节点分类</strong></p>
<p>dom一级有一个Node类,这个类里面存储了所有节点类型</p>
<p>Node类中有个方法叫nodeType 专门用于检测节点的类型，返回时一个数值:</p>
<ul>
<li>document - dom的入口节点 9</li>
<li>元素节点 - html标签 1</li>
<li>文本节点 - 页面中的文字 3</li>
<li>注释节点 - 注释节点 8</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> ele = <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span> <span class="hljs-comment">//获取到body标签</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ele.<span class="hljs-property">nodeType</span>) <span class="hljs-comment">//1元素节点</span><br><span class="hljs-keyword">let</span> son = ele.<span class="hljs-property">firstChild</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(son.<span class="hljs-property">nodeType</span>) <span class="hljs-comment">//8注释节点</span><br><br><span class="hljs-comment">//nodeName(所有节点都能访问的属性) 和 tagName (元素节点独有的属性)</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ele.<span class="hljs-property">nodeName</span>) <span class="hljs-comment">//节点名称 BODY</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ele.<span class="hljs-property">tagName</span>)  <span class="hljs-comment">//节点名称 BODY</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(son.<span class="hljs-property">tagName</span>) <span class="hljs-comment">//undefined</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(som.<span class="hljs-property">nodeName</span>) <span class="hljs-comment">//#comment</span><br></code></pre></td></tr></table></figure>

<h2 id="获取节点"><a href="#获取节点" class="headerlink" title="获取节点"></a>获取节点</h2><p><strong>获取元素的节点</strong></p>
<p>Es5获取元素的api：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">getElementById</span>(str) <span class="hljs-comment">//str是元素的id名</span><br><span class="hljs-title function_">getElementById</span>(str) <span class="hljs-comment">//str是元素的id名</span><br><span class="hljs-title function_">getElementsByTagName</span>(str) <span class="hljs-comment">//str是元素的标签名称</span><br></code></pre></td></tr></table></figure>



<p>H5获取元素的方式:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">querySelector</span>(str) 获取满足str选择器的单个元素<br><span class="hljs-title function_">querySelectorAll</span>(str) 获取满足str选择器的所有元素<br></code></pre></td></tr></table></figure>



<p>通过id名获取 通过id名获取满足条件的第一个元素：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> oApp = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;app&#x27;</span>)<br></code></pre></td></tr></table></figure>



<p>通过class名获取，获取到的是一个类数组，保存的是满足条件的所有元素：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> aFirst = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>(<span class="hljs-string">&#x27;first&#x27;</span>)<br></code></pre></td></tr></table></figure>



<p>通过标签名获取元素：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> aP = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;p&#x27;</span>)<br></code></pre></td></tr></table></figure>



<p>H5的方式获取元素：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> p = <span class="hljs-string">&#x27;p&#x27;</span><br></code></pre></td></tr></table></figure>

<p>获取单个元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> oP = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(p)<br><span class="hljs-keyword">let</span> oP = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;p.first&#x27;</span>)<br><span class="hljs-keyword">let</span> oP = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;p[class=&quot;first&quot;]&#x27;</span>)<br></code></pre></td></tr></table></figure>

<p>获取多个元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> aPP = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;p&#x27;</span>)<br></code></pre></td></tr></table></figure>



<p>特殊标签获取：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> html = <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span><br><span class="hljs-keyword">let</span> body = <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span><br><span class="hljs-keyword">let</span> head = <span class="hljs-variable language_">document</span>.<span class="hljs-property">head</span><br>et title = <span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> <span class="hljs-comment">//获取到网页的标题</span><br><br><span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = <span class="hljs-string">&#x27;123&#x27;</span> <span class="hljs-comment">//修改标签</span><br></code></pre></td></tr></table></figure>



<p><strong>get系列获取标签和query系列获取标签的区别：</strong></p>
<p>get系列获取到的所有的节点都是动态节点（实时集合），当页面节点更新的时候get元素也会动态更新。</p>
<p>query系列获取到的是一个静态集合，不会实时更新。</p>
<h2 id="获取节点属性"><a href="#获取节点属性" class="headerlink" title="获取节点属性"></a>获取节点属性</h2><p><strong>元素的属性和特性</strong>：</p>
<ul>
<li>属性：指的就是在节点下存储的键值对。</li>
<li>特性：指的就是获取到元素，元素本身自带（合法标签属性）的标签属性的描述。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> oImg = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;img&#x27;</span>)<br><span class="hljs-keyword">let</span> oDiv = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>)<br></code></pre></td></tr></table></figure>

<p>把节点对象当普通对象使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//&lt;img src=&quot;https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fc-ssl.duitang.com%2Fuploads%2Fblog%2F202105%2F09%2F20210509225323_2c0c6.thumb.1000_0.jpeg&amp;refer=http%3A%2F%2Fc-ssl.duitang.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=auto?sec=1664979662&amp;t=f772af80870fbc53ff44e52ce83ba3cc&quot; alt=&quot;我要睡觉了&quot; title=&quot;睡觉.png&quot; id=&quot;img&quot; class=&quot;sleep&quot; is-ok=&quot;false&quot; width=&quot;300&quot;&gt;</span><br><span class="hljs-comment">//&lt;div id=&quot;div&quot; width=&quot;123&quot;&gt;123&lt;/div&gt;</span><br>oImg.<span class="hljs-property">xixi</span> = <span class="hljs-string">&#x27;xixixixi&#x27;</span><br>oImg.<span class="hljs-property">sayName</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>      <span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">tagName</span>)<br>    &#125;<br>oImg.<span class="hljs-property">isDown</span> = <span class="hljs-literal">true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">dir</span>(oImg.<span class="hljs-property">xixi</span>)<br><span class="hljs-comment">// oImg.sayName()</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(oImg.<span class="hljs-property">width</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(oImg.<span class="hljs-property">src</span>)<br><br><span class="hljs-comment">//无法获取自定义的标签属性</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(oDiv.<span class="hljs-property">width</span>) <span class="hljs-comment">//undefined</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(oDiv.<span class="hljs-property">width</span>) <span class="hljs-comment">//undefined</span><br><br><span class="hljs-comment">//class名的获取</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(oImg.<span class="hljs-property">className</span>) <span class="hljs-comment">//获取class名称</span><br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>WebFrontend</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>dom</tag>
      </tags>
  </entry>
  <entry>
    <title>Promise 笔记</title>
    <url>/2022/10/17/WebFrontend/JavaScript/Promise%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Promise介绍"><a href="#Promise介绍" class="headerlink" title="Promise介绍"></a>Promise介绍</h1><p>promise是一个异步编程的一种解决方式，专门用于解决回调函数出现的回调地狱情况。</p>
<p>抽象表达：</p>
<ol>
<li>Promise是一门新的技术（ES6规范）</li>
<li>Promise是JS中进行异步编程的新解决方法（旧方案是单纯使用回调函数）</li>
</ol>
<p>具体表达：</p>
<ol>
<li>从语法上来说：Promise是一个构造函数</li>
<li>从功能上来说：promise对象用来封装一个异步操作并可以获取成功&#x2F;失败的结果值</li>
</ol>
<blockquote>
<p>fs 文件操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">require(&#x27;fs&#x27;).readFile(&#x27;./index.html&#x27;,(err,data)=&gt;&#123;&#125;)<br></code></pre></td></tr></table></figure>

<p>数据库操作</p>
<p>AJAX</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">$.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/server&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">data</span>)=&gt;</span>&#123;&#125;)<br></code></pre></td></tr></table></figure>

<p>定时器</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;&#125;,<span class="hljs-number">2000</span>);<br></code></pre></td></tr></table></figure>
</blockquote>
<h1 id="Promise-初体验"><a href="#Promise-初体验" class="headerlink" title="Promise 初体验"></a>Promise 初体验</h1><p>使用回调函数：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>			<span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pape-header&quot;</span>&gt;</span>Promise 初体验<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>			<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn butn-primary&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>点击抽奖<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>		<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">			<span class="hljs-comment">//生成随机数</span></span><br><span class="language-javascript">			<span class="hljs-keyword">function</span> <span class="hljs-title function_">rand</span>(<span class="hljs-params">m,n</span>)&#123;</span><br><span class="language-javascript">				<span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * (n-m+<span class="hljs-number">1</span>)) + m -<span class="hljs-number">1</span></span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">			<span class="hljs-comment">/*  点击按钮，2s后显示是否中奖（30%概率中奖）</span></span><br><span class="hljs-comment"><span class="language-javascript">			 *  容易中奖弹出 恭喜恭喜，奖品为10万RMB劳斯莱斯优惠卷</span></span><br><span class="hljs-comment"><span class="language-javascript">			 *  若未中奖弹出 再接再厉</span></span><br><span class="hljs-comment"><span class="language-javascript">			 */</span></span><br><span class="language-javascript">			<span class="hljs-comment">//获取元素对象</span></span><br><span class="language-javascript">			<span class="hljs-keyword">const</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#btn&#x27;</span>);</span><br><span class="language-javascript">			<span class="hljs-comment">//绑定单击事件</span></span><br><span class="language-javascript">			btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">				<span class="hljs-comment">//定时器</span></span><br><span class="language-javascript">				<span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">					<span class="hljs-comment">//30% 1-100 1 2 30</span></span><br><span class="language-javascript">					<span class="hljs-comment">//获取从 1 - 100的一个随机数</span></span><br><span class="language-javascript">					<span class="hljs-keyword">let</span> n = <span class="hljs-title function_">rand</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>);</span><br><span class="language-javascript">					<span class="hljs-keyword">if</span>(n &lt;= <span class="hljs-number">30</span>)&#123;</span><br><span class="language-javascript">						<span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;恭喜恭喜，奖品为10万RMB劳斯莱斯优惠卷&quot;</span>);</span><br><span class="language-javascript">					&#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="language-javascript">						<span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;再接再厉&quot;</span>);</span><br><span class="language-javascript">					&#125;</span><br><span class="language-javascript">				&#125;,<span class="hljs-number">1000</span>);</span><br><span class="language-javascript">			&#125;);</span><br><span class="language-javascript">			</span><br><span class="language-javascript">		</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p>Promise方法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>			<span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pape-header&quot;</span>&gt;</span>Promise 初体验<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>			<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn butn-primary&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>点击抽奖<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>		<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">			<span class="hljs-comment">//生成随机数</span></span><br><span class="language-javascript">			<span class="hljs-keyword">function</span> <span class="hljs-title function_">rand</span>(<span class="hljs-params">m,n</span>)&#123;</span><br><span class="language-javascript">				<span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * (n-m+<span class="hljs-number">1</span>)) + m -<span class="hljs-number">1</span></span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">			<span class="hljs-comment">/*  点击按钮，2s后显示是否中奖（30%概率中奖）</span></span><br><span class="hljs-comment"><span class="language-javascript">			 *  容易中奖弹出 恭喜恭喜，奖品为10万RMB劳斯莱斯优惠卷</span></span><br><span class="hljs-comment"><span class="language-javascript">			 *  若未中奖弹出 再接再厉</span></span><br><span class="hljs-comment"><span class="language-javascript">			 */</span></span><br><span class="language-javascript">			<span class="hljs-comment">//获取元素对象</span></span><br><span class="language-javascript">			<span class="hljs-keyword">const</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#btn&#x27;</span>);</span><br><span class="language-javascript">			<span class="hljs-comment">//绑定单击事件</span></span><br><span class="language-javascript">			btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">				</span><br><span class="language-javascript">				<span class="hljs-comment">//Promise 形式实现</span></span><br><span class="language-javascript">				<span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">					<span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">						<span class="hljs-comment">//30% 1-100 1 2 30</span></span><br><span class="language-javascript">						<span class="hljs-comment">//获取从 1 - 100的一个随机数</span></span><br><span class="language-javascript">						<span class="hljs-keyword">let</span> n = <span class="hljs-title function_">rand</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>);</span><br><span class="language-javascript">						<span class="hljs-keyword">if</span>(n &lt;= <span class="hljs-number">30</span>)&#123;</span><br><span class="language-javascript">							<span class="hljs-title function_">resolve</span>();</span><br><span class="language-javascript">						&#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="language-javascript">							<span class="hljs-title function_">reject</span>();</span><br><span class="language-javascript">						&#125;</span><br><span class="language-javascript">					&#125;,<span class="hljs-number">1000</span>);</span><br><span class="language-javascript">				&#125;);</span><br><span class="language-javascript">				</span><br><span class="language-javascript">				<span class="hljs-comment">// 调用 then 方法</span></span><br><span class="language-javascript">				p.<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">					<span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;恭喜恭喜，奖品为10万RMB劳斯莱斯优惠卷&quot;</span>);</span><br><span class="language-javascript">				&#125;,<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">					<span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;再接再厉&quot;</span>);</span><br><span class="language-javascript">				&#125;);</span><br><span class="language-javascript">			&#125;);</span><br><span class="language-javascript">			</span><br><span class="language-javascript">		</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h1 id="fs读取文件"><a href="#fs读取文件" class="headerlink" title="fs读取文件"></a>fs读取文件</h1>]]></content>
      <categories>
        <category>WebFrontend</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery</title>
    <url>/2022/12/27/WebFrontend/JavaScript/jQuery/</url>
    <content><![CDATA[<h1 id="初识jQuery"><a href="#初识jQuery" class="headerlink" title="初识jQuery"></a>初识jQuery</h1><h2 id="什么是jQuery"><a href="#什么是jQuery" class="headerlink" title="什么是jQuery"></a>什么是jQuery</h2><ul>
<li>一个优秀的JS函数库（封装BOM和DOM）</li>
<li>使用jQuery的网站超过90%（18年统计）</li>
<li>中大型WEB项目开发首选</li>
<li>Write Less，Do More!!!</li>
</ul>
<h2 id="JavaScript-and-jQuery"><a href="#JavaScript-and-jQuery" class="headerlink" title="JavaScript and jQuery"></a>JavaScript and jQuery</h2><p>我们知道Javascript以Netscape公司开发的一种脚本语言（scripting language）。Javascript存在3个弊端，即复杂的文档对象模型（DOM），不一致的浏览器实现和缺乏便捷的开发、调试工具。</p>
<p>正当JavaScript从开发者的视线中渐渐隐去时，一种新型的基于Javascript的Web技术——Ajax（Asynchronous Javascript And XML，异步的Javascript和XML）诞生了，是JavaScript不再是一种仅仅用于制作Web页面的简单脚本。</p>
<p>为了简化JavaScript的开发，一些JavaScript库诞生了。JavaScript库封装了很多预定义的对象和实用函数。</p>
<p>这里主要写jQuery库，jQuery同样是一个轻量级的库，拥有强大的选择器，出色的DOM操作，可靠的事件处理、完善的兼容性和链式操作等功能。</p>
<h1 id="jQuery代码的编写"><a href="#jQuery代码的编写" class="headerlink" title="jQuery代码的编写"></a>jQuery代码的编写</h1><h2 id="jQuery环境配置"><a href="#jQuery环境配置" class="headerlink" title="jQuery环境配置"></a>jQuery环境配置</h2><p>jQuery不需要安装，把下载的jQuery放到网站上的一个公共的位置，想要在某个页面上使用jQuery时，只需要在相关的HTML文档中引入该库文件的位置即可。</p>
<h2 id="在页面引入jQuery"><a href="#在页面引入jQuery" class="headerlink" title="在页面引入jQuery"></a>在页面引入jQuery</h2><p>把jQuery放在目录script下，然后在编写的页面代码中<code>&lt;head&gt;</code>标签内引入jQuery库后，就可以使用jQuery库了，程序如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 在head标签内 引入jQuery --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span> = <span class="hljs-string">&quot;./scripts/jquery-1.10.2.js&quot;</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- Staticfile CDN引入 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.staticfile.org/jquery/1.10.2/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="编写简单的jQuery代码"><a href="#编写简单的jQuery代码" class="headerlink" title="编写简单的jQuery代码"></a>编写简单的jQuery代码</h2><p>在jQuery库中，$就是jQuery的一个简写形式，例如$(“#foo”)和jQuery(“#foo”)是等价的，$.ajax和jQuery.ajax是等价的。</p>
<p>第一个jQuery程序。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.staticfile.org/jquery/1.10.2/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">			$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">				<span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;Hello World!&quot;</span>);</span><br><span class="language-javascript">			&#125;);</span><br><span class="language-javascript">		</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220906230313680.png" alt="image-20220906230313680"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>&#123;<br><span class="hljs-comment">//...</span><br>&#125;);<br></code></pre></td></tr></table></figure>

<p>这段代码的作用类似于传统JavaScript中的window.onload方法，但有些区别;</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220906230911959.png" alt="image-20220906230911959"></p>
<h2 id="jQuery代码风格"><a href="#jQuery代码风格" class="headerlink" title="jQuery代码风格"></a>jQuery代码风格</h2><p>如果能统一jQuery代码编码风格，对日后代码的维护是非常有利的。</p>
<p>项目需求是做一个导航栏，点击不同章节名称连接，显示相应的内容，同时高亮显示当前选择的章节</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.staticfile.org/jquery/1.10.2/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css">			<span class="hljs-selector-id">#menu</span> &#123; </span><br><span class="language-css">				<span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">			&#125;</span><br><span class="language-css">			<span class="hljs-selector-class">.has_children</span>&#123;</span><br><span class="language-css">				<span class="hljs-attribute">background</span>: <span class="hljs-number">#555</span>;</span><br><span class="language-css">				<span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="language-css">				<span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="language-css">			&#125;</span><br><span class="language-css">			<span class="hljs-selector-class">.highlight</span>&#123;</span><br><span class="language-css">				<span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="language-css">				<span class="hljs-attribute">background</span>: green;</span><br><span class="language-css">			&#125;</span><br><span class="language-css">			<span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">				<span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">				<span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> <span class="hljs-number">0</span>;</span><br><span class="language-css">			&#125;</span><br><span class="language-css">			<span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">a</span> &#123;</span><br><span class="language-css">				<span class="hljs-attribute">background</span>: <span class="hljs-number">#888</span>;</span><br><span class="language-css">				<span class="hljs-attribute">display</span>: none;</span><br><span class="language-css">				<span class="hljs-attribute">float</span>: left;</span><br><span class="language-css">				<span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">			&#125;</span><br><span class="language-css">		</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;menu&quot;</span>&gt;</span><br>			<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;has_children&quot;</span>&gt;</span><br>				<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>第1章-认识jQuery<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>				<span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span>什么是jQuery<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>				<span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span>Javascript and jQuery<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>				<span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span>jQuery代码的编写<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>				<span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span>在页面进入jQuery<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>				<span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span>编写简单的jQuery代码<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>				<span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span>jQuery代码风格<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>			<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>			<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;has_children&quot;</span>&gt;</span><br>				<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>第1章-认识jQuery<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>				<span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span>什么是jQuery<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>				<span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span>Javascript and jQuery<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>				<span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span>jQuery代码的编写<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>				<span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span>在页面进入jQuery<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>				<span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span>编写简单的jQuery代码<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>				<span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span>jQuery代码风格<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>			<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>			<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;has_children&quot;</span>&gt;</span><br>				<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>第1章-认识jQuery<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>				<span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span>什么是jQuery<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>				<span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span>Javascript and jQuery<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>				<span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span>jQuery代码的编写<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>				<span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span>在页面进入jQuery<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>				<span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span>编写简单的jQuery代码<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>				<span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span>jQuery代码风格<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>			<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>		<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">			$(<span class="hljs-string">&quot;.has_children&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">				$(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&quot;highlight&quot;</span>).<span class="hljs-title function_">children</span>(<span class="hljs-string">&quot;a&quot;</span>).<span class="hljs-title function_">show</span>().<span class="hljs-title function_">end</span>().<span class="hljs-title function_">siblings</span>().<span class="hljs-title function_">removeClass</span>(<span class="hljs-string">&quot;highlight&quot;</span>).<span class="hljs-title function_">children</span>(<span class="hljs-string">&quot;a&quot;</span>).<span class="hljs-title function_">hide</span>();</span><br><span class="language-javascript">			&#125;);</span><br><span class="language-javascript">		</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br><br></code></pre></td></tr></table></figure>

<p>这段代码的作用是，当鼠标单击到class中含有has_children的元素上的时候，给其添加一个名为highlight的class，然后将其内部<code>&lt;a&gt;</code>子元素都显示出来，并且被单击的class中含有has_children元素的同辈元素都去掉一个名为highlight的class，同时同辈元素内部的<code>&lt;a&gt;</code>子元素全部隐藏</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/GIF%202022-9-6%2023-32-24.gif" alt="GIF 2022-9-6 23-32-24"></p>
<p>这就是jQuery强大的链式操作，一行代码就完成了导航栏的功能</p>
]]></content>
      <categories>
        <category>WebFrontend</category>
      </categories>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>Web学习日志(office)</title>
    <url>/2022/08/25/WebFrontend/JavaScript/Web%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97(office)/</url>
    <content><![CDATA[<h1 id="Day1"><a href="#Day1" class="headerlink" title="Day1"></a>Day1</h1><h2 id="input-button标签-实现简单加法计算器"><a href="#input-button标签-实现简单加法计算器" class="headerlink" title="input,button标签,实现简单加法计算器"></a>input,button标签,实现简单加法计算器</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">size</span> = <span class="hljs-string">&quot;6&quot;</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;input1&quot;</span>/&gt;</span>+<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">size</span> = <span class="hljs-string">&quot;6&quot;</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;input2&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>=<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">size</span> = <span class="hljs-string">&quot;6&quot;</span> / <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;input3&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220824213039132.png" alt="image-20220824213039132"></p>
<blockquote>
<p>size ：可以调输入框的长度</p>
<p>id ：id属性具有唯一值</p>
</blockquote>
<p>在script标签写入脚本，推荐使用type属性：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">var</span> firstNum = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;input1&quot;</span>).<span class="hljs-property">value</span>; <span class="hljs-comment">//获取input输入值</span><br>    <span class="hljs-keyword">var</span> secondNum = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;input2&quot;</span>).<span class="hljs-property">value</span>;<br>    <span class="hljs-comment">//输入的值会被转换成字符串类型，所以我们要从字符串类型转换为数值,也可以使用隐式转换</span><br>    firstNum = <span class="hljs-title class_">Number</span>(firstNum);<br>    secondNum = <span class="hljs-title class_">Number</span>(secondNum);<br>    <br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;input3&quot;</span>).<span class="hljs-property">value</span> = firestNum + secondNum;<br>&#125;<br></code></pre></td></tr></table></figure>

<blockquote>
<p>var ：variable的缩写</p>
<p>value：设置或者返回文本域的默认值</p>
</blockquote>
<h2 id="点击按钮切换图片，按钮触发事件"><a href="#点击按钮切换图片，按钮触发事件" class="headerlink" title="点击按钮切换图片，按钮触发事件"></a>点击按钮切换图片，按钮触发事件</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 标签 --&gt;</span><br><span class="hljs-comment">&lt;!-- 一对标签  空标签  属性--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>	<span class="hljs-comment">&lt;!-- html css js --&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>切换图片<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>	<br>	<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>		<br>		<span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/7.jpg&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;300px&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;186px&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;img_7&quot;</span>/&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/10.jpg&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;300px&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;186px&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;img_10&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;changeImage()&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>切换图片<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>		<br>		<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">			<span class="hljs-comment">/* 事件名或方法名  小驼峰 15个字符以内 */</span></span><br><span class="language-javascript">			<span class="hljs-comment">/* function 功能 ;document 文件；Element 元素*/</span></span><br><span class="language-javascript">			<span class="hljs-keyword">function</span> <span class="hljs-title function_">changeImage</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">				<span class="hljs-comment">//通过id从页面文件中获取指定元素。修改这个元素的属性来实现效果变化</span></span><br><span class="language-javascript">				x=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;img_7&quot;</span>).<span class="hljs-property">src</span>;</span><br><span class="language-javascript">				<span class="hljs-comment">/* alert(x); */</span></span><br><span class="language-javascript">				<span class="hljs-keyword">if</span>(x==<span class="hljs-string">&quot;http://127.0.0.1:8848/Day8.22/img/7.jpg&quot;</span>)&#123;</span><br><span class="language-javascript">					<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;img_7&quot;</span>).<span class="hljs-property">src</span>=<span class="hljs-string">&quot;img/10.jpg&quot;</span>;</span><br><span class="language-javascript">					<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;img_10&quot;</span>).<span class="hljs-property">src</span>=<span class="hljs-string">&quot;img/7.jpg&quot;</span>;</span><br><span class="language-javascript">					<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;btn&quot;</span>).<span class="hljs-property">innerText</span>=<span class="hljs-string">&quot;切换回去&quot;</span>;</span><br><span class="language-javascript">				&#125;</span><br><span class="language-javascript">				<span class="hljs-keyword">if</span>(x==<span class="hljs-string">&quot;http://127.0.0.1:8848/Day8.22/img/10.jpg&quot;</span>)&#123;</span><br><span class="language-javascript">					<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;img_7&quot;</span>).<span class="hljs-property">src</span>=<span class="hljs-string">&quot;img/7.jpg&quot;</span>;</span><br><span class="language-javascript">					<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;img_10&quot;</span>).<span class="hljs-property">src</span>=<span class="hljs-string">&quot;img/10.jpg&quot;</span>;</span><br><span class="language-javascript">					<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;btn&quot;</span>).<span class="hljs-property">innerText</span>=<span class="hljs-string">&quot;切换图片&quot;</span>;</span><br><span class="language-javascript">				&#125;</span><br><span class="language-javascript">				</span><br><span class="language-javascript">				</span><br><span class="language-javascript">				</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">			</span><br><span class="language-javascript">		</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>		<br>	<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span> <br></code></pre></td></tr></table></figure>

<h1 id="Day2"><a href="#Day2" class="headerlink" title="Day2"></a>Day2</h1><h2 id="使用函数实现加法计算器"><a href="#使用函数实现加法计算器" class="headerlink" title="使用函数实现加法计算器"></a>使用函数实现加法计算器</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;input1&quot;</span>/&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;add()&quot;</span>&gt;</span>+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;sum()&quot;</span>&gt;</span>=<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>		<br>		<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">			<span class="hljs-keyword">let</span> firstNum;</span><br><span class="language-javascript">			<span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">				firstNum = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;input1&quot;</span>).<span class="hljs-property">value</span>;</span><br><span class="language-javascript">				<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;input1&quot;</span>).<span class="hljs-property">value</span> = <span class="hljs-string">&quot;&quot;</span>;</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">			<span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">				<span class="hljs-keyword">let</span> secondNum = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;input1&quot;</span>).<span class="hljs-property">value</span>;</span><br><span class="language-javascript">				<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;input1&quot;</span>).<span class="hljs-property">value</span> = +firstNum+ +secondNum;</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">		</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="计算机进阶-加减计算器"><a href="#计算机进阶-加减计算器" class="headerlink" title="计算机进阶,加减计算器"></a>计算机进阶,加减计算器</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;input1&quot;</span>/&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;add()&quot;</span>&gt;</span>+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;sub()&quot;</span>&gt;</span>-<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;sum()&quot;</span>&gt;</span>=<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">			<span class="hljs-comment">//局部变量  全局变量</span></span><br><span class="language-javascript">			<span class="hljs-comment">//声明一个变量，命名为x；并且把10赋值给x</span></span><br><span class="language-javascript">			<span class="hljs-keyword">var</span> firstNum;<span class="hljs-comment">//声明全局变量</span></span><br><span class="language-javascript">			<span class="hljs-keyword">var</span> sign;</span><br><span class="language-javascript">			<span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">				firstNum=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;input1&quot;</span>).<span class="hljs-property">value</span>;</span><br><span class="language-javascript">				<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;input1&quot;</span>).<span class="hljs-property">value</span>=<span class="hljs-string">&quot;&quot;</span>;</span><br><span class="language-javascript">				sign=<span class="hljs-string">&quot;+&quot;</span>;</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">			<span class="hljs-keyword">function</span> <span class="hljs-title function_">sub</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">				firstNum=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;input1&quot;</span>).<span class="hljs-property">value</span>;</span><br><span class="language-javascript">				<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;input1&quot;</span>).<span class="hljs-property">value</span>=<span class="hljs-string">&quot;&quot;</span>;</span><br><span class="language-javascript">				sign=<span class="hljs-string">&quot;-&quot;</span>;</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">			<span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">				<span class="hljs-keyword">var</span> secondNum=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;input1&quot;</span>).<span class="hljs-property">value</span>;</span><br><span class="language-javascript">				secondNum=<span class="hljs-title class_">Number</span>(secondNum);</span><br><span class="language-javascript">				firstNum=<span class="hljs-title class_">Number</span>(firstNum);</span><br><span class="language-javascript">				<span class="hljs-keyword">if</span>(sign==<span class="hljs-string">&quot;+&quot;</span>)&#123;</span><br><span class="language-javascript">					<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;input1&quot;</span>).<span class="hljs-property">value</span>=firstNum+secondNum;</span><br><span class="language-javascript">				&#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="language-javascript">					<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;input1&quot;</span>).<span class="hljs-property">value</span>=firstNum-secondNum;</span><br><span class="language-javascript">				&#125;	</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">		</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span> <br></code></pre></td></tr></table></figure>

<blockquote>
<p>onclick ：方法，按钮的点击事件触发函数调用</p>
</blockquote>
<h1 id="Day3"><a href="#Day3" class="headerlink" title="Day3"></a>Day3</h1><p>小技巧：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">table&gt;tr*7&gt;td*7 //快速生成,输入之后输入tap键<br></code></pre></td></tr></table></figure>



<h2 id="table表格显示-正-字"><a href="#table表格显示-正-字" class="headerlink" title="table表格显示(正)字"></a>table表格显示(正)字</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">			<span class="hljs-selector-tag">table</span>&#123;</span><br><span class="language-css">				<span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;</span><br><span class="language-css">				<span class="hljs-attribute">height</span>: <span class="hljs-number">500px</span>;</span><br><span class="language-css">				<span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span>; <span class="hljs-comment">/* 边框 */</span></span><br><span class="language-css">			&#125;</span><br><span class="language-css">		</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1px&quot;</span>&gt;</span><br>			<span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>				<span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;7&quot;</span> <span class="hljs-attr">bgcolor</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>			<span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>			<span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span><br>				<span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>				<span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>				<span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>				<span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">rowspan</span>=<span class="hljs-string">&quot;5&quot;</span> <span class="hljs-attr">bgcolor</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>				<span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>				<span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>				<span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>			<span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>			<span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span><br>				<span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>				<span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>				<span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><br>				<span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>				<span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>				<span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>			<span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>			<span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;4&quot;</span>&gt;</span><br>				<span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>				<span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>				<span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><br>				<span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;3&quot;</span> <span class="hljs-attr">bgcolor</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>			<span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>			<span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;5&quot;</span>&gt;</span><br>				<span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>				<span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">rowspan</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">bgcolor</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>				<span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><br>				<span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>				<span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>				<span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>			<span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>			<span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;6&quot;</span>&gt;</span><br>				<span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><br>				<span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><br>				<span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>				<span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>				<span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>			<span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>			<span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;7&quot;</span>&gt;</span><br>				<span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;7&quot;</span> <span class="hljs-attr">bgcolor</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>			<span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>		<span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/I~IVKGSM61CU9LYV85R5X%7BX.png" alt="img"></p>
<h1 id="Day4"><a href="#Day4" class="headerlink" title="Day4"></a>Day4</h1><h2 id="实现简单前端验证码"><a href="#实现简单前端验证码" class="headerlink" title="实现简单前端验证码"></a>实现简单前端验证码</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">input</span> /&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;sendCode()&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;but1&quot;</span>&gt;</span>发送验证码<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">		<span class="hljs-keyword">var</span> x = <span class="hljs-number">60</span>;</span><br><span class="language-javascript">		<span class="hljs-keyword">var</span> timer = <span class="hljs-literal">null</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">		<span class="hljs-keyword">function</span> <span class="hljs-title function_">sendCode</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">			timer = <span class="hljs-variable language_">window</span>.<span class="hljs-built_in">setInterval</span>(change, <span class="hljs-number">100</span>);</span><br><span class="language-javascript">		&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">		<span class="hljs-keyword">function</span> <span class="hljs-title function_">change</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">			x--;</span><br><span class="language-javascript">			<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;but1&quot;</span>).<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;重新发送(&quot;</span> + x + <span class="hljs-string">&quot;)&quot;</span></span><br><span class="language-javascript">			<span class="hljs-keyword">if</span> (x == <span class="hljs-number">0</span>) &#123;</span><br><span class="language-javascript">				<span class="hljs-comment">//1.清除定时器</span></span><br><span class="language-javascript">				<span class="hljs-variable language_">window</span>.<span class="hljs-built_in">clearInterval</span>(timer);</span><br><span class="language-javascript">				<span class="hljs-comment">//2.把按钮上的文字改回“发送验证码”</span></span><br><span class="language-javascript">				<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;but1&quot;</span>).<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;发送验证码&quot;</span>;</span><br><span class="language-javascript">				<span class="hljs-comment">//3.把相关的值重置</span></span><br><span class="language-javascript">				x = <span class="hljs-number">60</span>;</span><br><span class="language-javascript">				timer = <span class="hljs-literal">null</span>;</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">		&#125;</span><br><span class="language-javascript">	</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>总结：</p>
<ul>
<li>代码使用驼峰命名法，事件名，方法命名是小驼峰</li>
<li>ctar+shift+&#x2F; 注释</li>
<li>onclick 点击事件</li>
<li>function 功能</li>
<li>documet 文件</li>
<li>Element 元素</li>
<li>Interval 间隔、间隙</li>
</ul>
<h1 id="Day5"><a href="#Day5" class="headerlink" title="Day5"></a>Day5</h1><h2 id="产生指定范围随机整数"><a href="#产生指定范围随机整数" class="headerlink" title="产生指定范围随机整数"></a>产生指定范围随机整数</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">	<span class="hljs-comment">//[10,60]  [25,77]</span></span><br><span class="language-javascript">	<span class="hljs-keyword">var</span> x = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>(); <span class="hljs-comment">//[0,1)</span></span><br><span class="language-javascript">	<span class="hljs-keyword">var</span> y = x * <span class="hljs-number">51</span> + <span class="hljs-number">10</span>; <span class="hljs-comment">//[0,51)-&gt;[10,61)</span></span><br><span class="language-javascript">	<span class="hljs-keyword">var</span> z = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(y); <span class="hljs-comment">//[10,60]</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">	<span class="hljs-keyword">var</span> a = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>(); <span class="hljs-comment">//[0,1)</span></span><br><span class="language-javascript">	<span class="hljs-keyword">var</span> b = a * <span class="hljs-number">53</span> + <span class="hljs-number">25</span>; <span class="hljs-comment">//[0,53)-&gt;[25,78) </span></span><br><span class="language-javascript">	<span class="hljs-keyword">var</span> c = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(b); <span class="hljs-comment">//[25,77]</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">	<span class="hljs-keyword">var</span> i = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">53</span> + <span class="hljs-number">25</span>);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>

<ul>
<li>Math.random产生随机数</li>
<li>Math.floor 取整</li>
</ul>
<h1 id="Day6"><a href="#Day6" class="headerlink" title="Day6"></a>Day6</h1><h2 id="随机滚动数据小练习-添加按钮"><a href="#随机滚动数据小练习-添加按钮" class="headerlink" title="随机滚动数据小练习(添加按钮)"></a>随机滚动数据小练习(添加按钮)</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;span1&quot;</span>&gt;</span>00<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;startRoll()&quot;</span>&gt;</span>开始滚动<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;stopRoll()&quot;</span>&gt;</span>停止滚动<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">		<span class="hljs-keyword">var</span> timer = <span class="hljs-literal">null</span>;</span><br><span class="language-javascript">		<span class="hljs-keyword">function</span> <span class="hljs-title function_">startRoll</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">			<span class="hljs-keyword">if</span> (timer == <span class="hljs-literal">null</span>)&#123;</span><br><span class="language-javascript">				timer = <span class="hljs-variable language_">window</span>.<span class="hljs-built_in">setInterval</span>(<span class="hljs-string">&quot;change()&quot;</span>,<span class="hljs-number">100</span>); &lt;!-- 里面填change或<span class="hljs-string">&quot;change()&quot;</span>，不能填<span class="hljs-title function_">change</span>() --&gt;</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">		&#125;</span><br><span class="language-javascript">		<span class="hljs-keyword">function</span> <span class="hljs-title function_">change</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">			<span class="hljs-keyword">var</span> x = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()*<span class="hljs-number">100</span>+<span class="hljs-number">1</span>);</span><br><span class="language-javascript">			<span class="hljs-keyword">if</span>(x&lt;<span class="hljs-number">10</span>)&#123;</span><br><span class="language-javascript">				x=<span class="hljs-string">&quot;0&quot;</span>+x;</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">			<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;span1&quot;</span>).<span class="hljs-property">innerText</span> = x;</span><br><span class="language-javascript">		&#125;</span><br><span class="language-javascript">		<span class="hljs-keyword">function</span> <span class="hljs-title function_">stopRoll</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">			<span class="hljs-variable language_">window</span>.<span class="hljs-built_in">clearInterval</span>(timer);</span><br><span class="language-javascript">			timer = <span class="hljs-literal">null</span>;</span><br><span class="language-javascript">		&#125;</span><br><span class="language-javascript">	</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/GIF%202022-9-1%2021-52-24.gif" alt="GIF 2022-9-1 21-52-24"></p>
<h2 id="定时随机滚动小练习"><a href="#定时随机滚动小练习" class="headerlink" title="定时随机滚动小练习"></a>定时随机滚动小练习</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;span1&quot;</span>&gt;</span>00<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">			<span class="hljs-keyword">var</span> timer = <span class="hljs-variable language_">window</span>.<span class="hljs-built_in">setInterval</span>(<span class="hljs-string">&quot;change()&quot;</span>,<span class="hljs-number">100</span>); <span class="hljs-comment">//间隔一定时间执行</span></span><br><span class="language-javascript">			<span class="hljs-variable language_">window</span>.<span class="hljs-built_in">setTimeout</span>(  <span class="hljs-comment">//5秒后执行，一次</span></span><br><span class="language-javascript">			<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">				<span class="hljs-variable language_">window</span>.<span class="hljs-built_in">clearInterval</span>(timer);<span class="hljs-comment">//清除定时器</span></span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">			,<span class="hljs-number">5000</span>);</span><br><span class="language-javascript">			<span class="hljs-keyword">function</span> <span class="hljs-title function_">change</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">				<span class="hljs-keyword">var</span> x = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()*<span class="hljs-number">100</span>+<span class="hljs-number">10</span>);</span><br><span class="language-javascript">				<span class="hljs-keyword">if</span>(x&lt;<span class="hljs-number">10</span>)&#123;</span><br><span class="language-javascript">					x = <span class="hljs-string">&quot;0&quot;</span>+x;</span><br><span class="language-javascript">				&#125;</span><br><span class="language-javascript">				<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;span1&quot;</span>).<span class="hljs-property">innerText</span> = x;</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">		</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/GIF%202022-9-1%2022-21-59.gif" alt="GIF 2022-9-1 22-21-59"></p>
<h1 id="Day7"><a href="#Day7" class="headerlink" title="Day7"></a>Day7</h1><h2 id="作业：定时随机滚动小练习-添加按钮"><a href="#作业：定时随机滚动小练习-添加按钮" class="headerlink" title="作业：定时随机滚动小练习(添加按钮)"></a>作业：定时随机滚动小练习(添加按钮)</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;span1&quot;</span>&gt;</span>00<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;startRoll()&quot;</span>&gt;</span>开始滚动<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">			<span class="hljs-keyword">var</span> timer = <span class="hljs-literal">null</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">			<span class="hljs-keyword">function</span> <span class="hljs-title function_">startRoll</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">				<span class="hljs-keyword">if</span> (timer == <span class="hljs-literal">null</span>) &#123;</span><br><span class="language-javascript">					timer = <span class="hljs-variable language_">window</span>.<span class="hljs-built_in">setInterval</span>(change, <span class="hljs-number">500</span>);</span><br><span class="language-javascript">					<span class="hljs-variable language_">window</span>.<span class="hljs-built_in">setTimeout</span>(</span><br><span class="language-javascript">						<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">							<span class="hljs-variable language_">window</span>.<span class="hljs-built_in">clearInterval</span>(timer);</span><br><span class="language-javascript">							timer = <span class="hljs-literal">null</span>;</span><br><span class="language-javascript">						&#125;, <span class="hljs-number">5000</span>);</span><br><span class="language-javascript">				&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">			<span class="hljs-keyword">function</span> <span class="hljs-title function_">change</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">				<span class="hljs-keyword">var</span> x = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">100</span> + <span class="hljs-number">1</span>);</span><br><span class="language-javascript">				<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;span1&quot;</span>).<span class="hljs-property">innerText</span> = x;</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">		</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/GIF%202022-9-4%200-35-46.gif" alt="GIF 2022-9-4 0-35-46"></p>
<h1 id="Day8"><a href="#Day8" class="headerlink" title="Day8"></a>Day8</h1><h2 id="随机算数题"><a href="#随机算数题" class="headerlink" title="随机算数题"></a>随机算数题</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>算术题<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;span1&quot;</span>&gt;</span>00<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>-<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;span2&quot;</span>&gt;</span>00<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>=<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;5&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;input1&quot;</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;submit()&quot;</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">			<span class="hljs-keyword">var</span> x, y;</span><br><span class="language-javascript">			<span class="hljs-keyword">var</span> timer = <span class="hljs-variable language_">window</span>.<span class="hljs-built_in">setInterval</span>(</span><br><span class="language-javascript">				<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">					x = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">100</span> + <span class="hljs-number">1</span>);</span><br><span class="language-javascript">					y = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">100</span> + <span class="hljs-number">1</span>);</span><br><span class="language-javascript">					<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;span1&quot;</span>).<span class="hljs-property">innerText</span> = x;</span><br><span class="language-javascript">					<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;span2&quot;</span>).<span class="hljs-property">innerText</span> = y;</span><br><span class="language-javascript">				&#125;, <span class="hljs-number">3000</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">			<span class="hljs-keyword">function</span> <span class="hljs-title function_">submit</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">				<span class="hljs-keyword">var</span> num = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;input1&quot;</span>).<span class="hljs-property">value</span>;</span><br><span class="language-javascript">				<span class="hljs-keyword">if</span> (x - y == num) &#123;</span><br><span class="language-javascript">					<span class="hljs-variable language_">window</span>.<span class="hljs-built_in">clearInterval</span>(timer);</span><br><span class="language-javascript">				&#125;</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">		</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h1 id="Day9"><a href="#Day9" class="headerlink" title="Day9"></a>Day9</h1><h2 id="猜大小游戏"><a href="#猜大小游戏" class="headerlink" title="猜大小游戏"></a>猜大小游戏</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>猜大小<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>猜大小<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;start()&quot;</span>&gt;</span>开始游戏<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>生成随机数为: <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;span&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;4&quot;</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;input1&quot;</span>/&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;guess()&quot;</span>&gt;</span>猜数<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;span2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>竞猜结果：<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">			<span class="hljs-keyword">var</span> num,x;</span><br><span class="language-javascript">			<span class="hljs-keyword">function</span> <span class="hljs-title function_">start</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">				<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;span&quot;</span>).<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;**&quot;</span>;</span><br><span class="language-javascript">				x = <span class="hljs-built_in">parseInt</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()*<span class="hljs-number">100</span>+<span class="hljs-number">1</span>);</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">			<span class="hljs-keyword">function</span> <span class="hljs-title function_">guess</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">				num = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;input1&quot;</span>).<span class="hljs-property">value</span>;</span><br><span class="language-javascript">				<span class="hljs-keyword">if</span>(num == x)&#123;</span><br><span class="language-javascript">					<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;span2&quot;</span>).<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;猜对了&quot;</span>;</span><br><span class="language-javascript">				&#125;</span><br><span class="language-javascript">				<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (num &gt; x)&#123;</span><br><span class="language-javascript">					<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;span2&quot;</span>).<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;猜大了&quot;</span>;</span><br><span class="language-javascript">				&#125;</span><br><span class="language-javascript">				<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (num &lt; x)&#123;</span><br><span class="language-javascript">					<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;span2&quot;</span>).<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;猜小了&quot;</span>;</span><br><span class="language-javascript">				&#125;</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">		</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="余数计算器"><a href="#余数计算器" class="headerlink" title="余数计算器"></a>余数计算器</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>判断数据是否能被2整除还能被3整除<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;input1&quot;</span>/&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;start()&quot;</span>&gt;</span>校验<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>检测结果：<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;span2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">			<span class="hljs-keyword">var</span> x,y,z;</span><br><span class="language-javascript">			<span class="hljs-keyword">function</span> <span class="hljs-title function_">start</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">				x = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;input1&quot;</span>).<span class="hljs-property">value</span></span><br><span class="language-javascript">				y = x%<span class="hljs-number">3</span>;</span><br><span class="language-javascript">				z = x%<span class="hljs-number">2</span>;</span><br><span class="language-javascript">				<span class="hljs-keyword">if</span>(y == <span class="hljs-number">0</span> &amp;&amp; z == <span class="hljs-number">0</span>)&#123;</span><br><span class="language-javascript">					<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;span2&quot;</span>).<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;是&quot;</span>;</span><br><span class="language-javascript">				&#125;</span><br><span class="language-javascript">				<span class="hljs-keyword">else</span>&#123;</span><br><span class="language-javascript">					<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;span2&quot;</span>).<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;否&quot;</span>;</span><br><span class="language-javascript">				&#125;</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">		</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">			/弱类型的语言   强类型的语言</span><br><span class="language-javascript">			<span class="hljs-keyword">var</span> x; <span class="hljs-comment">//声明一个变量，命名为x，并且把10赋值给x</span></span><br><span class="language-javascript">			<span class="hljs-comment">//alert(typeof x);//undefined 未定义的</span></span><br><span class="language-javascript">			x = <span class="hljs-number">10</span>;</span><br><span class="language-javascript">			<span class="hljs-comment">//alert(typeof x);//number  数值型</span></span><br><span class="language-javascript">			<span class="hljs-keyword">var</span> y = <span class="hljs-string">&quot;1.5&quot;</span>; <span class="hljs-comment">//声明一个变量，命名为y，并且把&quot;20&quot;赋值给y</span></span><br><span class="language-javascript">			x = x / y;</span><br><span class="language-javascript">			<span class="hljs-comment">//x=x+y;   10+&quot;20&quot;=&quot;1020&quot;  10+1.5=11.5</span></span><br><span class="language-javascript">			<span class="hljs-comment">//&#x27;+&#x27; 两边都是数值型，做加法运算；如果有一边是字符串类型，就是连接符</span></span><br><span class="language-javascript">			<span class="hljs-comment">//x=y-x;   &quot;220.9&quot;-10=210.9   &quot;张三&quot;-10=NaN</span></span><br><span class="language-javascript">			<span class="hljs-comment">//&#x27;-&#x27; 隐式的数据类型转换  只要两边能转换成number类型，就能做正常减法；</span></span><br><span class="language-javascript">			<span class="hljs-comment">//    如果转换不成数值，强制做减法，结果为NaN(not a number)</span></span><br><span class="language-javascript">			<span class="hljs-comment">//x=x*y;   10*&quot;220.9&quot;=2209    10*&quot;张三&quot;=NaN</span></span><br><span class="language-javascript">			<span class="hljs-comment">//&#x27;*&#x27; 隐式的数据类型转换  只要两边能转换成number类型，就能做正常乘法；</span></span><br><span class="language-javascript">			<span class="hljs-comment">//    如果转换不成数值，强制做乘法，结果为NaN(not a number)</span></span><br><span class="language-javascript">			<span class="hljs-comment">//x=x/y;   10/&quot;1.5&quot;=6.666666666667  10/&quot;张三&quot;=NaN</span></span><br><span class="language-javascript">			<span class="hljs-comment">//&#x27;/&#x27; 隐式的数据类型转换  只要两边能转换成number类型，就能做正常除法；</span></span><br><span class="language-javascript">			<span class="hljs-comment">//    如果转换不成数值，强制做除法，结果为NaN(not a number)</span></span><br><span class="language-javascript">			<span class="hljs-comment">//alert(typeof x);//string 字符串类型</span></span><br><span class="language-javascript">			<span class="hljs-title function_">alert</span>(x);</span><br><span class="language-javascript">		</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure>

<h1 id="Day10"><a href="#Day10" class="headerlink" title="Day10"></a>Day10</h1><h2 id="体重健康计算器"><a href="#体重健康计算器" class="headerlink" title="体重健康计算器"></a>体重健康计算器</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>计算BMI<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>		<span class="hljs-comment">&lt;!-- bmi=体重/(身高*身高)  计算时体重单位kg，身高m --&gt;</span><br>		<span class="hljs-comment">&lt;!-- 小于18.5  偏瘦；18.5~24  正常； 24~28  偏胖；28以上  肥胖 --&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>你的身高：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;8&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;input1&quot;</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>单位：厘米cm<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>你的体重：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;8&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;input2&quot;</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>单位：千克kg<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;calculate()&quot;</span>&gt;</span>计算BMI<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>你的身体状况为：<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;span1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">			<span class="hljs-keyword">function</span> <span class="hljs-title function_">calculate</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">				<span class="hljs-keyword">var</span> height = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;input1&quot;</span>).<span class="hljs-property">value</span>;</span><br><span class="language-javascript">				<span class="hljs-keyword">var</span> weight = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;input2&quot;</span>).<span class="hljs-property">value</span>;</span><br><span class="language-javascript">				height = height / <span class="hljs-number">100</span>;</span><br><span class="language-javascript">				<span class="hljs-keyword">var</span> bmi = weight / (height * height);</span><br><span class="language-javascript">				<span class="hljs-keyword">var</span> spanObject = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;span1&quot;</span>);</span><br><span class="language-javascript">				<span class="hljs-comment">//number  string  undefined  object 对象类型</span></span><br><span class="language-javascript">				<span class="hljs-keyword">if</span> (bmi &lt; <span class="hljs-number">18.5</span>) &#123;</span><br><span class="language-javascript">					spanObject.<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;偏瘦&quot;</span>;</span><br><span class="language-javascript">				&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (bmi &lt;= <span class="hljs-number">24</span>) &#123;</span><br><span class="language-javascript">					spanObject.<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;正常&quot;</span>;</span><br><span class="language-javascript">				&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (bmi &lt; <span class="hljs-number">28</span>) &#123;</span><br><span class="language-javascript">					spanObject.<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;偏胖&quot;</span>;</span><br><span class="language-javascript">				&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">					spanObject.<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;肥胖&quot;</span>;</span><br><span class="language-javascript">				&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">		</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>



<h2 id="输入框排序练习（答案）"><a href="#输入框排序练习（答案）" class="headerlink" title="输入框排序练习（答案）"></a>输入框排序练习（答案）</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>计算BMI<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>		<span class="hljs-comment">&lt;!-- bmi=体重/(身高*身高)  计算时体重单位kg，身高m --&gt;</span><br>		<span class="hljs-comment">&lt;!-- 小于18.5  偏瘦；18.5~24  正常； 24~28  偏胖；28以上  肥胖 --&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>你的身高：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;8&quot;</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;input1&quot;</span>/&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>单位：厘米cm<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>你的体重：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;8&quot;</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;input2&quot;</span>/&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>单位：千克kg<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;button()&quot;</span>&gt;</span>计算BMI<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>你的身体状况为：<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;span&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>		<br>		<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">			<span class="hljs-keyword">function</span> <span class="hljs-title function_">button</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">				<span class="hljs-keyword">let</span> height = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;input1&quot;</span>).<span class="hljs-property">value</span>;</span><br><span class="language-javascript">				height = height/<span class="hljs-number">100</span>;</span><br><span class="language-javascript">				<span class="hljs-keyword">let</span> weight = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;input2&quot;</span>).<span class="hljs-property">value</span>;</span><br><span class="language-javascript">				<span class="hljs-keyword">let</span> bmi = weight/(height*height);</span><br><span class="language-javascript">				<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(bmi)</span><br><span class="language-javascript">				<span class="hljs-keyword">if</span> (bmi &gt;= <span class="hljs-number">18.5</span> &amp;&amp; bmi &lt; <span class="hljs-number">24</span>)&#123;</span><br><span class="language-javascript">					<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;span&quot;</span>).<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;偏瘦&quot;</span>;</span><br><span class="language-javascript">				&#125;</span><br><span class="language-javascript">				<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (bmi &gt;= <span class="hljs-number">24</span> &amp;&amp; bmi &lt;= <span class="hljs-number">28</span>)&#123;</span><br><span class="language-javascript">					<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;span&quot;</span>).<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;正常&quot;</span>;</span><br><span class="language-javascript">				&#125;</span><br><span class="language-javascript">				<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (bmi &gt; <span class="hljs-number">28</span>)&#123;</span><br><span class="language-javascript">					<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;span&quot;</span>).<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;肥胖&quot;</span>;</span><br><span class="language-javascript">				&#125;</span><br><span class="language-javascript">			&#125;;</span><br><span class="language-javascript">		</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="输入框排序练习（提交）"><a href="#输入框排序练习（提交）" class="headerlink" title="输入框排序练习（提交）"></a>输入框排序练习（提交）</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;input1&quot;</span>/&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;input2&quot;</span>/&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;input3&quot;</span>/&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;button1()&quot;</span>&gt;</span>排序<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;input1_1&quot;</span>/&gt;</span> &lt;<br>		<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;input2_2&quot;</span>/&gt;</span> &lt;<br>		<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;input3_3&quot;</span>/&gt;</span><br>		<br>		<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">			<span class="hljs-keyword">function</span> <span class="hljs-title function_">button1</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">				<span class="hljs-keyword">let</span> input1 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;input1&quot;</span>).<span class="hljs-property">value</span>;</span><br><span class="language-javascript">				<span class="hljs-keyword">let</span> input2 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;input2&quot;</span>).<span class="hljs-property">value</span>;</span><br><span class="language-javascript">				<span class="hljs-keyword">let</span> input3 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;input3&quot;</span>).<span class="hljs-property">value</span>;</span><br><span class="language-javascript">				</span><br><span class="language-javascript">				<span class="hljs-keyword">var</span> points = [];</span><br><span class="language-javascript">				points.<span class="hljs-title function_">push</span>(input1);</span><br><span class="language-javascript">				points.<span class="hljs-title function_">push</span>(input2);</span><br><span class="language-javascript">				points.<span class="hljs-title function_">push</span>(input3);</span><br><span class="language-javascript">				</span><br><span class="language-javascript">				points.<span class="hljs-title function_">sort</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">a, b</span>)&#123;<span class="hljs-keyword">return</span> a - b&#125;); </span><br><span class="language-javascript">				</span><br><span class="language-javascript">				<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;input1_1&quot;</span>).<span class="hljs-property">value</span> = points[<span class="hljs-number">0</span>];</span><br><span class="language-javascript">				<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;input2_2&quot;</span>).<span class="hljs-property">value</span> = points[<span class="hljs-number">1</span>];</span><br><span class="language-javascript">				<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;input3_3&quot;</span>).<span class="hljs-property">value</span> = points[<span class="hljs-number">2</span>];</span><br><span class="language-javascript">				</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">		</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h1 id="Day11"><a href="#Day11" class="headerlink" title="Day11"></a>Day11</h1><h2 id="找出1-1000所有含6的值"><a href="#找出1-1000所有含6的值" class="headerlink" title="找出1~1000所有含6的值"></a>找出1~1000所有含6的值</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>for循环<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">			<span class="hljs-comment">//[0,1) [0,41) [10,51) 666</span></span><br><span class="language-javascript">			<span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">			<span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">1000</span>;i++)&#123;</span><br><span class="language-javascript">				<span class="hljs-keyword">let</span> b = <span class="hljs-built_in">parseInt</span>(i %<span class="hljs-number">1000</span> /<span class="hljs-number">100</span>)</span><br><span class="language-javascript">				<span class="hljs-keyword">let</span> s = <span class="hljs-built_in">parseInt</span>(i %<span class="hljs-number">100</span> /<span class="hljs-number">10</span>)</span><br><span class="language-javascript">				<span class="hljs-keyword">let</span> g = <span class="hljs-built_in">parseInt</span>(i %<span class="hljs-number">10</span> /<span class="hljs-number">1</span>)</span><br><span class="language-javascript">				<span class="hljs-keyword">if</span> (b == <span class="hljs-number">6</span> || s == <span class="hljs-number">6</span> || g ==<span class="hljs-number">6</span>)&#123;</span><br><span class="language-javascript">					count ++;</span><br><span class="language-javascript">				    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(i + <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>); </span><br><span class="language-javascript">				&#125;</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">			<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(count + <span class="hljs-string">&quot;&lt;br /&gt;&quot;</span>); <span class="hljs-comment">//271</span></span><br><span class="language-javascript">		</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure>

<h2 id="查看数组添加"><a href="#查看数组添加" class="headerlink" title="查看数组添加"></a>查看数组添加</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;input1&quot;</span>/&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;add()&quot;</span>&gt;</span>添加<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;check()&quot;</span>&gt;</span>查看所有<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">			<span class="hljs-keyword">let</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>();</span><br><span class="language-javascript">			</span><br><span class="language-javascript">			<span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">				x = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;input1&quot;</span>).<span class="hljs-property">value</span>;</span><br><span class="language-javascript">				arr.<span class="hljs-title function_">push</span>(x);</span><br><span class="language-javascript">				<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;input1&quot;</span>).<span class="hljs-property">value</span> = <span class="hljs-string">&quot;&quot;</span>;</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">			<span class="hljs-keyword">function</span> <span class="hljs-title function_">check</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">				<span class="hljs-title function_">alert</span>(arr);</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">			</span><br><span class="language-javascript">		</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h1 id="Day12"><a href="#Day12" class="headerlink" title="Day12"></a>Day12</h1><h2 id="找出最小值，并计算和"><a href="#找出最小值，并计算和" class="headerlink" title="找出最小值，并计算和"></a>找出最小值，并计算和</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">			<span class="hljs-comment">//找出数组中的最小值，并计算除所有数据的和</span></span><br><span class="language-javascript">			<span class="hljs-keyword">var</span> arr = [<span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">55</span>, <span class="hljs-number">3</span>, <span class="hljs-number">67</span>, <span class="hljs-number">99</span>, <span class="hljs-number">10</span>, <span class="hljs-number">78</span>]; <span class="hljs-comment">//数组名[下标]</span></span><br><span class="language-javascript">			<span class="hljs-comment">//arr.length 数组的长度 </span></span><br><span class="language-javascript">			<span class="hljs-keyword">var</span> min = arr[<span class="hljs-number">0</span>];</span><br><span class="language-javascript">			<span class="hljs-keyword">var</span> sum = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">			<span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">				sum = sum + arr[i]; <span class="hljs-comment">//sum += arr[i]   </span></span><br><span class="language-javascript">				<span class="hljs-keyword">if</span> (arr[i] &lt; min) &#123;</span><br><span class="language-javascript">					min = arr[i];</span><br><span class="language-javascript">				&#125;</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">			<span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;数组最小值为&quot;</span> + min);</span><br><span class="language-javascript">			<span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;数组数据总和为&quot;</span> + sum);</span><br><span class="language-javascript">		</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="按钮添加数值查看最大值"><a href="#按钮添加数值查看最大值" class="headerlink" title="按钮添加数值查看最大值"></a>按钮添加数值查看最大值</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;5&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;input1&quot;</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;add()&quot;</span>&gt;</span>添加<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;showMax()&quot;</span>&gt;</span>查看最大值<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">			<span class="hljs-comment">//用户在页面中输入任意数量整数，返回添加数字的最大值</span></span><br><span class="language-javascript">			<span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(); <span class="hljs-comment">//声明一个空数组</span></span><br><span class="language-javascript">			<span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">				<span class="hljs-keyword">var</span> x = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;input1&quot;</span>).<span class="hljs-property">value</span>;</span><br><span class="language-javascript">				x = <span class="hljs-title class_">Number</span>(x);</span><br><span class="language-javascript">				arr.<span class="hljs-title function_">push</span>(x);</span><br><span class="language-javascript">				<span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;添加成功&quot;</span>);</span><br><span class="language-javascript">				<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;input1&quot;</span>).<span class="hljs-property">value</span> = <span class="hljs-string">&quot;&quot;</span>;</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">			<span class="hljs-keyword">function</span> <span class="hljs-title function_">showMax</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">				<span class="hljs-keyword">var</span> max = arr[<span class="hljs-number">0</span>];</span><br><span class="language-javascript">				<span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">					<span class="hljs-keyword">if</span> (arr[i] &gt; max) &#123;</span><br><span class="language-javascript">						max = arr[i];</span><br><span class="language-javascript">					&#125;</span><br><span class="language-javascript">				&#125;</span><br><span class="language-javascript">				<span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;最大值为&quot;</span> + max);</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">		</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h1 id="DAY13"><a href="#DAY13" class="headerlink" title="DAY13"></a>DAY13</h1><h2 id="查找质数"><a href="#查找质数" class="headerlink" title="查找质数"></a>查找质数</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">			<span class="hljs-comment">//查找1~100之间所有的质数，并统计个数</span></span><br><span class="language-javascript">			<span class="hljs-comment">//质数（素数）只能被1和自身整除的数</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">			<span class="hljs-keyword">let</span> primeNum = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">			<span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;</span><br><span class="language-javascript">				<span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">				<span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="language-javascript">					<span class="hljs-keyword">if</span> (i % j == <span class="hljs-number">0</span>) &#123;</span><br><span class="language-javascript">						count++;</span><br><span class="language-javascript">					&#125;</span><br><span class="language-javascript">				&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">				<span class="hljs-keyword">if</span> (count == <span class="hljs-number">2</span>) &#123;</span><br><span class="language-javascript">					<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(i + <span class="hljs-string">&quot;&lt;br /&gt;&quot;</span>);</span><br><span class="language-javascript">					primeNum ++;</span><br><span class="language-javascript">				&#125;</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">			<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;1~100之间所有的质数个数为：&quot;</span>+ primeNum);</span><br><span class="language-javascript">		</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="查找完数"><a href="#查找完数" class="headerlink" title="查找完数"></a>查找完数</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">			<span class="hljs-comment">//找到1000以内所有的完数，并统计个数</span></span><br><span class="language-javascript">			<span class="hljs-comment">//完数(完全数或完美数)，所有的因子之和等于本身</span></span><br><span class="language-javascript">			<span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">			<span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">1000</span>; i++) &#123;</span><br><span class="language-javascript">				count = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">				<span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">1</span>; j &lt;= i/<span class="hljs-number">2</span>; j++) &#123;</span><br><span class="language-javascript">					<span class="hljs-keyword">if</span> (i % j == <span class="hljs-number">0</span>) &#123;</span><br><span class="language-javascript">						count = count + j;</span><br><span class="language-javascript">					&#125;</span><br><span class="language-javascript">				&#125;</span><br><span class="language-javascript">				<span class="hljs-keyword">if</span> (count == i) &#123;</span><br><span class="language-javascript">					<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(count + <span class="hljs-string">&quot;&lt;br /&gt;&quot;</span>);</span><br><span class="language-javascript">					count = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">				&#125;</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">		</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="九九乘法表"><a href="#九九乘法表" class="headerlink" title="九九乘法表"></a>九九乘法表</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">			<span class="hljs-keyword">var</span> num = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">			<span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">9</span>; i++) &#123;</span><br><span class="language-javascript">				<span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="language-javascript">					num = i * j;</span><br><span class="language-javascript">					<span class="hljs-comment">//如果乘积是一位数，则前面添加两个空格保持队列</span></span><br><span class="language-javascript">					<span class="hljs-keyword">if</span> (num / <span class="hljs-number">10</span> &lt; <span class="hljs-number">1</span>) &#123;</span><br><span class="language-javascript">						num = i * j + <span class="hljs-string">&quot;  &quot;</span>;</span><br><span class="language-javascript">					&#125;</span><br><span class="language-javascript">					<span class="hljs-comment">//如果乘积是一位数，则前面添加两个空格保持队列</span></span><br><span class="language-javascript">					<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(j + <span class="hljs-string">&quot;x&quot;</span> + i + <span class="hljs-string">&quot;=&quot;</span> + num + <span class="hljs-string">&quot;    &quot;</span>);</span><br><span class="language-javascript">				&#125;</span><br><span class="language-javascript">				<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;&lt;br /&gt;&quot;</span>);</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">		</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">			<span class="hljs-comment">//已知数组[33,55,22,77,66,99,11],从大到小排序显示到页面上</span></span><br><span class="language-javascript">			<span class="hljs-keyword">let</span> arr = [<span class="hljs-number">33</span>, <span class="hljs-number">55</span>, <span class="hljs-number">22</span>, <span class="hljs-number">77</span>, <span class="hljs-number">66</span>, <span class="hljs-number">99</span>, <span class="hljs-number">11</span>];</span><br><span class="language-javascript">			<span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>;j &lt; arr.<span class="hljs-property">length</span>;j++)&#123;</span><br><span class="language-javascript">				<span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">					<span class="hljs-keyword">if</span> (arr[i] &lt; arr[i + <span class="hljs-number">1</span>]) &#123;</span><br><span class="language-javascript">						<span class="hljs-comment">//交换位置</span></span><br><span class="language-javascript">						<span class="hljs-keyword">const</span> temp = arr[i];</span><br><span class="language-javascript">						arr[i] = arr[i + <span class="hljs-number">1</span>];</span><br><span class="language-javascript">						arr[i + <span class="hljs-number">1</span>] = temp;</span><br><span class="language-javascript">					&#125;</span><br><span class="language-javascript">				&#125;</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">			<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(arr);</span><br><span class="language-javascript">		</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="生成指定范围不重复的整数"><a href="#生成指定范围不重复的整数" class="headerlink" title="生成指定范围不重复的整数"></a>生成指定范围不重复的整数</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">			<span class="hljs-comment">//随机生成六个1-33之间不重复的整数</span></span><br><span class="language-javascript">			<span class="hljs-keyword">let</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>;</span><br><span class="language-javascript">			<span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i =<span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">6</span>;i++)&#123;</span><br><span class="language-javascript">				<span class="hljs-keyword">let</span> number = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()*<span class="hljs-number">32</span> + <span class="hljs-number">1</span>);</span><br><span class="language-javascript">				<span class="hljs-keyword">if</span>(arr.<span class="hljs-title function_">indexOf</span>(number)== -<span class="hljs-number">1</span>)&#123;</span><br><span class="language-javascript">					arr.<span class="hljs-title function_">push</span>(number);</span><br><span class="language-javascript">				&#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="language-javascript">					i--;</span><br><span class="language-javascript">				&#125;</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">			<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(arr);</span><br><span class="language-javascript">			</span><br><span class="language-javascript">		</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h1 id="DAY14"><a href="#DAY14" class="headerlink" title="DAY14"></a>DAY14</h1><h2 id="使用按钮给数组添加值，并进行排序"><a href="#使用按钮给数组添加值，并进行排序" class="headerlink" title="使用按钮给数组添加值，并进行排序"></a>使用按钮给数组添加值，并进行排序</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;5&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;input1&quot;</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;add()&quot;</span>&gt;</span>添加<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;show()&quot;</span>&gt;</span>查看<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br>		<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">			<span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>();</span><br><span class="language-javascript"></span><br><span class="language-javascript">			<span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">				<span class="hljs-keyword">var</span> x = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;input1&quot;</span>).<span class="hljs-property">value</span>;</span><br><span class="language-javascript">				x = <span class="hljs-title class_">Number</span>(x);</span><br><span class="language-javascript">				arr.<span class="hljs-title function_">push</span>(x);</span><br><span class="language-javascript">				<span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;添加成功&quot;</span>);</span><br><span class="language-javascript">				<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;input1&quot;</span>).<span class="hljs-property">value</span> = <span class="hljs-string">&quot;&quot;</span>;</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">			<span class="hljs-keyword">function</span> <span class="hljs-title function_">show</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">				<span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">					<span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = i; j &lt; arr.<span class="hljs-property">length</span>; j++) &#123;</span><br><span class="language-javascript">						<span class="hljs-keyword">if</span> (arr[i] &gt; arr[j]) &#123;</span><br><span class="language-javascript">							<span class="hljs-keyword">var</span> y = arr[i];</span><br><span class="language-javascript">							arr[i] = arr[j];</span><br><span class="language-javascript">							arr[j] = y;</span><br><span class="language-javascript">						&#125;</span><br><span class="language-javascript">					&#125;</span><br><span class="language-javascript">				&#125;</span><br><span class="language-javascript">				<span class="hljs-title function_">alert</span>(arr);</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">		</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="使用按钮给数组添加值，并添加删除键"><a href="#使用按钮给数组添加值，并添加删除键" class="headerlink" title="使用按钮给数组添加值，并添加删除键"></a>使用按钮给数组添加值，并添加删除键</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;5&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;input1&quot;</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;add()&quot;</span>&gt;</span>添加<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;del()&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>已添加的数据：<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;span1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">			<span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>();</span><br><span class="language-javascript"></span><br><span class="language-javascript">			<span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">				<span class="hljs-keyword">var</span> x = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;input1&quot;</span>).<span class="hljs-property">value</span>;</span><br><span class="language-javascript">				x = <span class="hljs-title class_">Number</span>(x);</span><br><span class="language-javascript">				arr.<span class="hljs-title function_">push</span>(x);</span><br><span class="language-javascript">				<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;span1&quot;</span>).<span class="hljs-property">innerText</span> = arr;</span><br><span class="language-javascript">				<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;input1&quot;</span>).<span class="hljs-property">value</span> = <span class="hljs-string">&quot;&quot;</span>;</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">			<span class="hljs-keyword">function</span> <span class="hljs-title function_">del</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">				arr.<span class="hljs-title function_">splice</span>(arr.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>); <span class="hljs-comment">//splice(下标值)</span></span><br><span class="language-javascript">				<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;span1&quot;</span>).<span class="hljs-property">innerText</span> = arr;</span><br><span class="language-javascript"></span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">		</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/GIF%202022-9-15%201-13-19.gif" alt="GIF 2022-9-15 1-13-19"></p>
<h2 id="使用按钮给数组添加值，并添加删除键（进行数组排序，并删除最近值）"><a href="#使用按钮给数组添加值，并添加删除键（进行数组排序，并删除最近值）" class="headerlink" title="使用按钮给数组添加值，并添加删除键（进行数组排序，并删除最近值）"></a>使用按钮给数组添加值，并添加删除键（进行数组排序，并删除最近值）</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;5&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;input1&quot;</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;add()&quot;</span>&gt;</span>添加<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;del()&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>已添加的数据：<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;span1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><br>		<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">			<span class="hljs-keyword">var</span> arr1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>();</span><br><span class="language-javascript">			<span class="hljs-keyword">var</span> arr2;</span><br><span class="language-javascript"></span><br><span class="language-javascript">			<span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">				<span class="hljs-keyword">var</span> x = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;input1&quot;</span>).<span class="hljs-property">value</span>;</span><br><span class="language-javascript">				x = <span class="hljs-title class_">Number</span>(x);</span><br><span class="language-javascript">				arr1.<span class="hljs-title function_">push</span>(x);</span><br><span class="language-javascript">				<span class="hljs-title function_">array</span>();</span><br><span class="language-javascript">				<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;input1&quot;</span>).<span class="hljs-property">value</span> = <span class="hljs-string">&quot;&quot;</span>;</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">			<span class="hljs-keyword">function</span> <span class="hljs-title function_">del</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">				arr1.<span class="hljs-title function_">splice</span>(arr1.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>);</span><br><span class="language-javascript">				<span class="hljs-title function_">array</span>();</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">			<span class="hljs-keyword">function</span> <span class="hljs-title function_">array</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">				arr2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>();</span><br><span class="language-javascript">				<span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> a = <span class="hljs-number">0</span>; a &lt; arr1.<span class="hljs-property">length</span>; a++) &#123;</span><br><span class="language-javascript">					arr2.<span class="hljs-title function_">push</span>(arr1[a]);</span><br><span class="language-javascript">				&#125;</span><br><span class="language-javascript">				arr2.<span class="hljs-title function_">sort</span>(); <span class="hljs-comment">//返回从小到大排序好的数组</span></span><br><span class="language-javascript">				<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;span1&quot;</span>).<span class="hljs-property">innerText</span> = arr2;</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">		</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/GIF%202022-9-15%201-16-50.gif" alt="GIF 2022-9-15 1-16-50"></p>
<h2 id="作业：双色球"><a href="#作业：双色球" class="headerlink" title="作业：双色球"></a>作业：双色球</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br>	<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">			span1 &#123;</span><br><span class="language-css">				<span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">				<span class="hljs-attribute">height</span>: <span class="hljs-number">70px</span>;</span><br><span class="language-css">				<span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-built_in">rgb</span>(<span class="hljs-number">48</span>, <span class="hljs-number">32</span>, <span class="hljs-number">189</span>);</span><br><span class="language-css">			&#125;</span><br><span class="language-css"></span><br><span class="language-css">			span2 &#123;</span><br><span class="language-css">				<span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">				<span class="hljs-attribute">height</span>: <span class="hljs-number">70px</span>;</span><br><span class="language-css">				<span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#a00101</span>;</span><br><span class="language-css">			&#125;</span><br><span class="language-css">		</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>	<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>双色球选号<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;ball(1)&quot;</span>&gt;</span>机选一注<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>红球号码：<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;redBallNum1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>蓝球号码：<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;blueBallNum1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;ball(2)&quot;</span>&gt;</span>开奖<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>红球号码：<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;redBallNum2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>蓝球号码：<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;blueBallNum2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>历史记录：<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;history&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><br>		<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"><span class="hljs-meta"></span></span><br><span class="hljs-meta"><span class="language-javascript">			&quot;use strict&quot;</span></span><br><span class="language-javascript">			<span class="hljs-comment">//生成不重复随机数组</span></span><br><span class="language-javascript">			<span class="hljs-keyword">function</span> <span class="hljs-title function_">randomNum</span>(<span class="hljs-params">x, y, z</span>) &#123;</span><br><span class="language-javascript">				<span class="hljs-keyword">let</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>();</span><br><span class="language-javascript">				<span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt;= z; i++) &#123;</span><br><span class="language-javascript">					<span class="hljs-keyword">let</span> number = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * (y - x + <span class="hljs-number">1</span>) + x);</span><br><span class="language-javascript">					<span class="hljs-comment">//去重</span></span><br><span class="language-javascript">					<span class="hljs-keyword">if</span> (arr.<span class="hljs-title function_">indexOf</span>(number) == -<span class="hljs-number">1</span>) &#123;</span><br><span class="language-javascript">						arr.<span class="hljs-title function_">push</span>(number);</span><br><span class="language-javascript">					&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">						i--;</span><br><span class="language-javascript">					&#125;</span><br><span class="language-javascript">				&#125;</span><br><span class="language-javascript">				<span class="hljs-keyword">return</span> arr;</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">			<span class="hljs-comment">//冒泡排序</span></span><br><span class="language-javascript">			<span class="hljs-keyword">function</span> <span class="hljs-title function_">sort</span>(<span class="hljs-params">x, y, z</span>) &#123;</span><br><span class="language-javascript">				<span class="hljs-keyword">let</span> arr = [] = <span class="hljs-title function_">randomNum</span>(x, y, z);</span><br><span class="language-javascript">				<span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; arr.<span class="hljs-property">length</span>; j++) &#123;</span><br><span class="language-javascript">					<span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">						<span class="hljs-keyword">if</span> (arr[i] &gt; arr[i + <span class="hljs-number">1</span>]) &#123;</span><br><span class="language-javascript">							<span class="hljs-comment">//交换位置</span></span><br><span class="language-javascript">							<span class="hljs-keyword">const</span> temp = arr[i];</span><br><span class="language-javascript">							arr[i] = arr[i + <span class="hljs-number">1</span>];</span><br><span class="language-javascript">							arr[i + <span class="hljs-number">1</span>] = temp;</span><br><span class="language-javascript">						&#125;</span><br><span class="language-javascript">					&#125;</span><br><span class="language-javascript">				&#125;</span><br><span class="language-javascript">				<span class="hljs-keyword">return</span> arr;</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">			</span><br><span class="language-javascript">			<span class="hljs-keyword">let</span> timer = <span class="hljs-literal">null</span>;</span><br><span class="language-javascript">			<span class="hljs-keyword">let</span> arr_red_ball1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>();</span><br><span class="language-javascript">			<span class="hljs-keyword">let</span> arr_red_ball2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>();</span><br><span class="language-javascript">			<span class="hljs-keyword">let</span> arr_bluer_ball1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>();</span><br><span class="language-javascript">			<span class="hljs-keyword">let</span> arr_bluer_ball2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>();</span><br><span class="language-javascript">			<span class="hljs-comment">//机选一注 开奖 ,添加计时器</span></span><br><span class="language-javascript">			<span class="hljs-keyword">function</span> <span class="hljs-title function_">ball</span>(<span class="hljs-params">x</span>) &#123;</span><br><span class="language-javascript">				<span class="hljs-keyword">if</span> (timer == <span class="hljs-literal">null</span>) &#123;</span><br><span class="language-javascript">					timer = <span class="hljs-variable language_">window</span>.<span class="hljs-built_in">setInterval</span>(</span><br><span class="language-javascript">						<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">							<span class="hljs-keyword">if</span> (x == <span class="hljs-number">1</span>) &#123;</span><br><span class="language-javascript">								arr_red_ball1 = <span class="hljs-title function_">sort</span>(<span class="hljs-number">1</span>, <span class="hljs-number">33</span>, <span class="hljs-number">6</span>);</span><br><span class="language-javascript">								<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">`redBallNum<span class="hljs-subst">$&#123;x&#125;</span>`</span>).<span class="hljs-property">innerText</span> = arr_red_ball1.<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;-&quot;</span>);</span><br><span class="language-javascript">								arr_bluer_ball1 = <span class="hljs-title function_">sort</span>(<span class="hljs-number">1</span>, <span class="hljs-number">16</span>, <span class="hljs-number">1</span>);</span><br><span class="language-javascript">								<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">`blueBallNum<span class="hljs-subst">$&#123;x&#125;</span>`</span>).<span class="hljs-property">innerText</span> = arr_bluer_ball1.<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;-&quot;</span>);</span><br><span class="language-javascript">							&#125;</span><br><span class="language-javascript">							<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x == <span class="hljs-number">2</span> &amp;&amp; arr_bluer_ball1.<span class="hljs-property">length</span> != <span class="hljs-number">0</span>) &#123;</span><br><span class="language-javascript">								arr_red_ball2 = <span class="hljs-title function_">sort</span>(<span class="hljs-number">1</span>, <span class="hljs-number">33</span>, <span class="hljs-number">6</span>);</span><br><span class="language-javascript">								<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">`redBallNum<span class="hljs-subst">$&#123;x&#125;</span>`</span>).<span class="hljs-property">innerText</span> = arr_red_ball2.<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;-&quot;</span>);</span><br><span class="language-javascript">								arr_bluer_ball2 = <span class="hljs-title function_">sort</span>(<span class="hljs-number">1</span>, <span class="hljs-number">16</span>, <span class="hljs-number">1</span>);</span><br><span class="language-javascript">								<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">`blueBallNum<span class="hljs-subst">$&#123;x&#125;</span>`</span>).<span class="hljs-property">innerText</span> = arr_bluer_ball2.<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;-&quot;</span>);</span><br><span class="language-javascript">							&#125;</span><br><span class="language-javascript">							<span class="hljs-keyword">if</span> (arr_red_ball1.<span class="hljs-property">length</span> == <span class="hljs-number">0</span>) &#123;</span><br><span class="language-javascript">								<span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;请点击机选一注后再开奖&quot;</span>);</span><br><span class="language-javascript">								<span class="hljs-variable language_">window</span>.<span class="hljs-built_in">clearInterval</span>(timer);</span><br><span class="language-javascript">								timer = <span class="hljs-literal">null</span>;</span><br><span class="language-javascript">							&#125;</span><br><span class="language-javascript">						&#125;, <span class="hljs-number">100</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">					<span class="hljs-comment">//设置5秒定时器,并在结束时进行数值判断,防止刷新</span></span><br><span class="language-javascript">					<span class="hljs-keyword">if</span>(x == <span class="hljs-number">1</span> ||(x == <span class="hljs-number">2</span> &amp;&amp; arr_bluer_ball1.<span class="hljs-property">length</span> != <span class="hljs-number">0</span>))&#123;</span><br><span class="language-javascript">						<span class="hljs-variable language_">window</span>.<span class="hljs-built_in">setTimeout</span>(</span><br><span class="language-javascript">							<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">								<span class="hljs-variable language_">window</span>.<span class="hljs-built_in">clearInterval</span>(timer);</span><br><span class="language-javascript">								timer = <span class="hljs-literal">null</span>;</span><br><span class="language-javascript">								<span class="hljs-comment">//执行历史记录方法</span></span><br><span class="language-javascript">								<span class="hljs-title function_">history</span>(x);</span><br><span class="language-javascript">								<span class="hljs-title function_">judge</span>(x);</span><br><span class="language-javascript">							&#125;, <span class="hljs-number">5000</span></span><br><span class="language-javascript">						);</span><br><span class="language-javascript">					&#125;</span><br><span class="language-javascript">				&#125;</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">			<span class="hljs-comment">//中奖判断</span></span><br><span class="language-javascript">			<span class="hljs-keyword">function</span> <span class="hljs-title function_">judge</span>(<span class="hljs-params">x</span>) &#123;</span><br><span class="language-javascript">				<span class="hljs-keyword">let</span> arr1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>();</span><br><span class="language-javascript">				<span class="hljs-keyword">let</span> arr2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>();</span><br><span class="language-javascript">				<span class="hljs-keyword">let</span> judge = <span class="hljs-string">&quot;&quot;</span>;</span><br><span class="language-javascript">				<span class="hljs-comment">//let arr_length_red = 0,arr_length_bluer = 0;</span></span><br><span class="language-javascript">				<span class="hljs-comment">//红球判断</span></span><br><span class="language-javascript">				<span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr_red_ball1.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">					<span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; arr_red_ball2.<span class="hljs-property">length</span>; j++) &#123;</span><br><span class="language-javascript">						<span class="hljs-keyword">if</span> (arr_red_ball1[i] == arr_red_ball2[j]) &#123;</span><br><span class="language-javascript">							arr1.<span class="hljs-title function_">push</span>(arr_red_ball1[i]);</span><br><span class="language-javascript">						&#125;</span><br><span class="language-javascript">					&#125;</span><br><span class="language-javascript">				&#125;</span><br><span class="language-javascript">				<span class="hljs-comment">//篮球判断</span></span><br><span class="language-javascript">				<span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr_bluer_ball1.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">					<span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; arr_bluer_ball2.<span class="hljs-property">length</span>; j++) &#123;</span><br><span class="language-javascript">						<span class="hljs-keyword">if</span> (arr_bluer_ball1[i] == arr_bluer_ball2[j]) &#123;</span><br><span class="language-javascript">							arr2.<span class="hljs-title function_">push</span>(arr_bluer_ball1[i]);</span><br><span class="language-javascript">						&#125;</span><br><span class="language-javascript">					&#125;</span><br><span class="language-javascript">				&#125;</span><br><span class="language-javascript">				<span class="hljs-comment">//2+1/1+1/0+1   5元</span></span><br><span class="language-javascript">				<span class="hljs-keyword">if</span> ((arr1.<span class="hljs-property">length</span> == <span class="hljs-number">2</span> &amp;&amp; arr2.<span class="hljs-property">length</span> == <span class="hljs-number">1</span>) || (arr1.<span class="hljs-property">length</span> == <span class="hljs-number">1</span> &amp;&amp; arr2.<span class="hljs-property">length</span> == <span class="hljs-number">1</span>) || (arr1.<span class="hljs-property">length</span> == <span class="hljs-number">0</span> &amp;&amp; arr2</span><br><span class="language-javascript">						.<span class="hljs-property">length</span> == <span class="hljs-number">1</span>)) &#123;</span><br><span class="language-javascript">					judge = <span class="hljs-string">&quot;5元&quot;</span>;</span><br><span class="language-javascript">				&#125;</span><br><span class="language-javascript">				<span class="hljs-comment">//4+0/3+1    10元</span></span><br><span class="language-javascript">				<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((arr1.<span class="hljs-property">length</span> == <span class="hljs-number">4</span> &amp;&amp; arr2.<span class="hljs-property">length</span> == <span class="hljs-number">0</span>) || (arr1.<span class="hljs-property">length</span> == <span class="hljs-number">3</span> &amp;&amp; arr2.<span class="hljs-property">length</span> == <span class="hljs-number">1</span>)) &#123;</span><br><span class="language-javascript">					judge = <span class="hljs-string">&quot;10元&quot;</span>;</span><br><span class="language-javascript">				&#125;</span><br><span class="language-javascript">				<span class="hljs-comment">//5+0/4+1   200元</span></span><br><span class="language-javascript">				<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((arr1.<span class="hljs-property">length</span> == <span class="hljs-number">5</span> &amp;&amp; arr2.<span class="hljs-property">length</span> == <span class="hljs-number">0</span>) || (arr1.<span class="hljs-property">length</span> == <span class="hljs-number">4</span> &amp;&amp; arr2.<span class="hljs-property">length</span> == <span class="hljs-number">1</span>)) &#123;</span><br><span class="language-javascript">					judge = <span class="hljs-string">&quot;200元&quot;</span>;</span><br><span class="language-javascript">				&#125;</span><br><span class="language-javascript">				<span class="hljs-comment">//5+1   3000元</span></span><br><span class="language-javascript">				<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((arr1.<span class="hljs-property">length</span> == <span class="hljs-number">5</span> &amp;&amp; arr2.<span class="hljs-property">length</span> == <span class="hljs-number">1</span>)) &#123;</span><br><span class="language-javascript">					judge = <span class="hljs-string">&quot;3000元&quot;</span>;</span><br><span class="language-javascript">				&#125;</span><br><span class="language-javascript">				<span class="hljs-comment">//6+0   100万</span></span><br><span class="language-javascript">				<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((arr1.<span class="hljs-property">length</span> == <span class="hljs-number">6</span> &amp;&amp; arr2.<span class="hljs-property">length</span> == <span class="hljs-number">0</span>)) &#123;</span><br><span class="language-javascript">					judge = <span class="hljs-string">&quot;100万元&quot;</span>;</span><br><span class="language-javascript">				&#125;</span><br><span class="language-javascript">				<span class="hljs-comment">//6+1    500万</span></span><br><span class="language-javascript">				<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((arr1.<span class="hljs-property">length</span> == <span class="hljs-number">6</span> &amp;&amp; arr2.<span class="hljs-property">length</span> == <span class="hljs-number">1</span>)) &#123;</span><br><span class="language-javascript">					judge = <span class="hljs-string">&quot;500万元&quot;</span>;</span><br><span class="language-javascript">				&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">					judge = <span class="hljs-string">&quot;未中奖&quot;</span>;</span><br><span class="language-javascript">				&#125;</span><br><span class="language-javascript">				<span class="hljs-comment">//更改空数组</span></span><br><span class="language-javascript">				<span class="hljs-keyword">if</span> (arr1.<span class="hljs-property">length</span> == <span class="hljs-number">0</span>) &#123;</span><br><span class="language-javascript">					arr1 = <span class="hljs-string">&quot;无&quot;</span>;</span><br><span class="language-javascript">				&#125;</span><br><span class="language-javascript">				<span class="hljs-keyword">if</span> (arr2.<span class="hljs-property">length</span> == <span class="hljs-number">0</span>) &#123;</span><br><span class="language-javascript">					arr2 = <span class="hljs-string">&quot;无&quot;</span>;</span><br><span class="language-javascript">				&#125;</span><br><span class="language-javascript">				<span class="hljs-keyword">if</span> (x == <span class="hljs-number">2</span> &amp;&amp; arr_bluer_ball1.<span class="hljs-property">length</span> != <span class="hljs-number">0</span>)&#123;</span><br><span class="language-javascript">					<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;history&quot;</span>).<span class="hljs-property">innerHTML</span> += <span class="hljs-string">&quot;中奖结果：&quot;</span> + judge + <span class="hljs-string">&quot;&lt;br/ &gt;&quot;</span> + <span class="hljs-string">&quot;匹配红球：&quot;</span> + arr1 + <span class="hljs-string">&quot;&lt;br /&gt;&quot;</span> + <span class="hljs-string">&quot;匹配篮球：&quot;</span> + arr2 + <span class="hljs-string">&quot;&lt;br/ &gt;&quot;</span>+ <span class="hljs-string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="language-javascript">				&#125;</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">			<span class="hljs-comment">//历史记录</span></span><br><span class="language-javascript">			<span class="hljs-keyword">function</span> <span class="hljs-title function_">history</span>(<span class="hljs-params">x</span>) &#123;</span><br><span class="language-javascript">				<span class="hljs-keyword">if</span> (x == <span class="hljs-number">1</span>) &#123;</span><br><span class="language-javascript">					<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;history&quot;</span>).<span class="hljs-property">innerHTML</span> += <span class="hljs-string">&quot;&lt;span1&gt;&quot;</span> + <span class="hljs-string">&quot;双色球选号：&quot;</span> + <span class="hljs-string">&quot;&lt;/span1&gt;&quot;</span> + <span class="hljs-string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="language-javascript">					<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;history&quot;</span>).<span class="hljs-property">innerHTML</span> += <span class="hljs-string">&quot;红球号码：&quot;</span> + arr_red_ball1.<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;-&quot;</span>) + <span class="hljs-string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="language-javascript">					<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;history&quot;</span>).<span class="hljs-property">innerHTML</span> += <span class="hljs-string">&quot;蓝球号码：&quot;</span> + arr_bluer_ball1.<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;-&quot;</span>) + <span class="hljs-string">&quot;&lt;br /&gt;&quot;</span> + <span class="hljs-string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="language-javascript">				&#125;</span><br><span class="language-javascript">				<span class="hljs-keyword">if</span> (x == <span class="hljs-number">2</span>) &#123;</span><br><span class="language-javascript">					<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;history&quot;</span>).<span class="hljs-property">innerHTML</span> += <span class="hljs-string">&quot;&lt;span2&gt;&quot;</span> + <span class="hljs-string">&quot;双色球开奖：&quot;</span> + <span class="hljs-string">&quot;&lt;/span1&gt;&quot;</span> + <span class="hljs-string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="language-javascript">					<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;history&quot;</span>).<span class="hljs-property">innerHTML</span> += <span class="hljs-string">&quot;红球号码：&quot;</span> + arr_red_ball2.<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;-&quot;</span>) + <span class="hljs-string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="language-javascript">					<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;history&quot;</span>).<span class="hljs-property">innerHTML</span> += <span class="hljs-string">&quot;蓝球号码：&quot;</span> + arr_bluer_ball2.<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;-&quot;</span>) + <span class="hljs-string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="language-javascript">				&#125;</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">		</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/GIF%202022-9-15%201-21-10.gif" alt="GIF 2022-9-15 1-21-10"></p>
<h1 id="DAY15"><a href="#DAY15" class="headerlink" title="DAY15"></a>DAY15</h1><h2 id="三道简单for循环题"><a href="#三道简单for循环题" class="headerlink" title="三道简单for循环题"></a>三道简单for循环题</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">			<span class="hljs-comment">//1.有一堆桃子i，猴子每天吃一半再多一个 ，吃到第五天j时发现只剩下1个桃子，问原来一共有多少桃子？</span></span><br><span class="language-javascript">			<span class="hljs-keyword">let</span> peach = <span class="hljs-number">1</span>;</span><br><span class="language-javascript">			<span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">4</span>;i++)&#123;</span><br><span class="language-javascript">				peach = (peach + <span class="hljs-number">1</span>) * <span class="hljs-number">2</span>;</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">			<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`共吃了<span class="hljs-subst">$&#123;peach&#125;</span>个桃子`</span>,)</span><br><span class="language-javascript"></span><br><span class="language-javascript">			<span class="hljs-comment">//2.小球从100米高空落下，每次弹起是原高度一半，求第10次落地时，小球所经过的米数</span></span><br><span class="language-javascript">			<span class="hljs-keyword">let</span> q = <span class="hljs-number">100</span>;</span><br><span class="language-javascript">			<span class="hljs-keyword">let</span> q2 = <span class="hljs-number">100</span>;</span><br><span class="language-javascript">			<span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">10</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;</span><br><span class="language-javascript">				q = q / <span class="hljs-number">2</span>; <span class="hljs-comment">//小球高度一半的距离 </span></span><br><span class="language-javascript">				q2 += q * <span class="hljs-number">2</span>;</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">			<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;小球所经过的米数为:&quot;</span> + q2)</span><br><span class="language-javascript">			<span class="hljs-comment">//一个人很倒霉，不小心打碎了一篮子鸡蛋。</span></span><br><span class="language-javascript">			<span class="hljs-comment">//每次拿2个则剩1个，</span></span><br><span class="language-javascript">			<span class="hljs-comment">//每次拿3个则剩2个，</span></span><br><span class="language-javascript">			<span class="hljs-comment">//每次拿5个则剩4个，</span></span><br><span class="language-javascript">			<span class="hljs-comment">//问原先篮子中最少有多少枚鸡蛋？</span></span><br><span class="language-javascript">			<span class="hljs-keyword">let</span> g = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">			<span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; g == <span class="hljs-number">0</span>; i++) &#123;</span><br><span class="language-javascript">				<span class="hljs-keyword">if</span> ((i % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>) &amp;&amp; (i % <span class="hljs-number">3</span> == <span class="hljs-number">2</span>) &amp;&amp; (i % <span class="hljs-number">5</span> == <span class="hljs-number">4</span>)) &#123;</span><br><span class="language-javascript">					g = <span class="hljs-number">1</span>;</span><br><span class="language-javascript">					<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`一共有个<span class="hljs-subst">$&#123;i&#125;</span>鸡蛋`</span>);</span><br><span class="language-javascript">				&#125;</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">		</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="倒三角生成"><a href="#倒三角生成" class="headerlink" title="倒三角生成"></a>倒三角生成</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>倒三角的行数：<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;input1&quot;</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;button1()&quot;</span>&gt;</span>生成<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;span1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">			<span class="hljs-keyword">function</span> <span class="hljs-title function_">button1</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">				<span class="hljs-keyword">let</span> inpt_value = <span class="hljs-title class_">Number</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;input1&quot;</span>).<span class="hljs-property">value</span>);</span><br><span class="language-javascript">				<span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = inpt_value; i &gt; <span class="hljs-number">0</span>; i--) &#123;</span><br><span class="language-javascript">					<span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="language-javascript">						<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;span1&quot;</span>).<span class="hljs-property">innerHTML</span> += <span class="hljs-string">&quot;-&quot;</span>;</span><br><span class="language-javascript">					&#125;</span><br><span class="language-javascript">					<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;span1&quot;</span>).<span class="hljs-property">innerHTML</span> += <span class="hljs-string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="language-javascript">				&#125;</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">		</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220919013452541.png" alt="image-20220919013452541"></p>
<h2 id="等腰三角形生成"><a href="#等腰三角形生成" class="headerlink" title="等腰三角形生成"></a>等腰三角形生成</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>等腰三角的行数：<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;input1&quot;</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;button1()&quot;</span>&gt;</span>生成<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;span1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">			<span class="hljs-keyword">function</span> <span class="hljs-title function_">button1</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">				<span class="hljs-keyword">let</span> inpt_value = <span class="hljs-title class_">Number</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;input1&quot;</span>).<span class="hljs-property">value</span>)</span><br><span class="language-javascript">				<span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; inpt_value; i++) &#123;</span><br><span class="language-javascript">					<span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> x = <span class="hljs-number">0</span>; x &lt; inpt_value - i; x++) &#123;</span><br><span class="language-javascript">						<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;span1&quot;</span>).<span class="hljs-property">innerHTML</span> += <span class="hljs-string">&#x27; &#x27;</span>;</span><br><span class="language-javascript">					&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">					<span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt;= i; j++) &#123;</span><br><span class="language-javascript">						<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;span1&quot;</span>).<span class="hljs-property">innerHTML</span> += <span class="hljs-string">&#x27;*&#x27;</span> + <span class="hljs-string">&#x27; &#x27;</span>;</span><br><span class="language-javascript">					&#125;</span><br><span class="language-javascript">					<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;span1&quot;</span>).<span class="hljs-property">innerHTML</span> += <span class="hljs-string">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class="language-javascript">				&#125;</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">		</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220919013540833.png" alt="image-20220919013540833"></p>
<h1 id="DAY16"><a href="#DAY16" class="headerlink" title="DAY16"></a>DAY16</h1><h2 id="轮播图（练习）"><a href="#轮播图（练习）" class="headerlink" title="轮播图（练习）"></a>轮播图（练习）</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>		<br>		<span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/0.webp&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;img1&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;300&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;250&quot;</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;last()&quot;</span>&gt;</span>上一张<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;next()&quot;</span>&gt;</span>下一张<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"><span class="hljs-meta"></span></span><br><span class="hljs-meta"><span class="language-javascript">			&quot;use strict&quot;</span></span><br><span class="language-javascript">			<span class="hljs-keyword">let</span> x = <span class="hljs-number">0</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">			<span class="hljs-keyword">let</span> timer = <span class="hljs-variable language_">window</span>.<span class="hljs-built_in">setInterval</span>(next,<span class="hljs-number">2000</span>);</span><br><span class="language-javascript">			<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;img1&quot;</span>).<span class="hljs-property">onmouseover</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">				<span class="hljs-variable language_">window</span>.<span class="hljs-built_in">clearInterval</span>(timer);</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">			<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;img1&quot;</span>).<span class="hljs-property">onmouseout</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">				timer = <span class="hljs-variable language_">window</span>.<span class="hljs-built_in">setInterval</span>(next,<span class="hljs-number">1500</span>);</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">			<span class="hljs-keyword">function</span> <span class="hljs-title function_">next</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">				x++;</span><br><span class="language-javascript">				<span class="hljs-keyword">if</span> (x &gt;= <span class="hljs-number">6</span>) &#123;</span><br><span class="language-javascript">					x = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">				&#125;</span><br><span class="language-javascript">				<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;img1&quot;</span>).<span class="hljs-property">src</span> = <span class="hljs-string">`img/<span class="hljs-subst">$&#123;x&#125;</span>.webp`</span>;</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">			<span class="hljs-keyword">function</span> <span class="hljs-title function_">last</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">				x--;</span><br><span class="language-javascript">				<span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>) &#123;</span><br><span class="language-javascript">					x = <span class="hljs-number">5</span>;</span><br><span class="language-javascript">				&#125;</span><br><span class="language-javascript">				<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;img1&quot;</span>).<span class="hljs-property">src</span> = <span class="hljs-string">`img/<span class="hljs-subst">$&#123;x&#125;</span>.webp`</span>;</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">		</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="广告弹窗（练习）"><a href="#广告弹窗（练习）" class="headerlink" title="广告弹窗（练习）"></a>广告弹窗（练习）</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css">			<span class="hljs-selector-class">.expdiv</span> &#123;</span><br><span class="language-css">				<span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">				<span class="hljs-attribute">top</span>:<span class="hljs-number">0px</span>;</span><br><span class="language-css">				<span class="hljs-attribute">right</span>:<span class="hljs-number">0px</span>;</span><br><span class="language-css">				<span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">				<span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">				<span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#c8c8c8</span>;</span><br><span class="language-css">				<span class="hljs-attribute">z-index</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">				<span class="hljs-attribute">display</span>: none;</span><br><span class="language-css">			&#125;</span><br><span class="language-css"></span><br><span class="language-css">			<span class="hljs-selector-class">.expimg</span> &#123;</span><br><span class="language-css">				<span class="hljs-attribute">position</span>: fixed;</span><br><span class="language-css">				<span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">				<span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">				<span class="hljs-attribute">z-index</span>: <span class="hljs-number">1</span>;</span><br><span class="language-css">			&#125;</span><br><span class="language-css"></span><br><span class="language-css">			<span class="hljs-selector-class">.expbtn</span> &#123;</span><br><span class="language-css">				<span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">				<span class="hljs-attribute">top</span>:<span class="hljs-number">0px</span>;</span><br><span class="language-css">				<span class="hljs-attribute">right</span>:<span class="hljs-number">0px</span>;</span><br><span class="language-css"><span class="hljs-comment">/* 				padding: 10px;</span></span><br><span class="hljs-comment"><span class="language-css">				width: 80px; */</span></span><br><span class="language-css">				<span class="hljs-attribute">background-color</span>: <span class="hljs-number">#efefef</span>;</span><br><span class="language-css">				<span class="hljs-attribute">z-index</span>: <span class="hljs-number">2</span>;</span><br><span class="language-css">			&#125;</span><br><span class="language-css">		</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;expdiv&quot;</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;expdiv&quot;</span>&gt;</span><br>			<span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./img/0.webp&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;expimg&quot;</span>&gt;</span><br>			<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;show()&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;expbtn&quot;</span>&gt;</span>关闭<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>		<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">			<span class="hljs-variable language_">window</span>.<span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">				<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;expdiv&quot;</span>).<span class="hljs-property">style</span> = <span class="hljs-string">&quot;display: block&quot;</span>;</span><br><span class="language-javascript">			&#125;, <span class="hljs-number">3000</span>)</span><br><span class="language-javascript"></span><br><span class="language-javascript">			<span class="hljs-keyword">function</span> <span class="hljs-title function_">show</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">				<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;expdiv&quot;</span>).<span class="hljs-property">style</span> = <span class="hljs-string">&quot;display: none&quot;</span>;</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">		</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="鼠标停留变颜色（练习）"><a href="#鼠标停留变颜色（练习）" class="headerlink" title="鼠标停留变颜色（练习）"></a>鼠标停留变颜色（练习）</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><br>		<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;spans&quot;</span>&gt;</span><br>			<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;span1&quot;</span>&gt;</span>变<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>			<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;span2&quot;</span>&gt;</span>颜<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>			<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;span3&quot;</span>&gt;</span>色<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>		<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">			<span class="hljs-selector-tag">span</span> &#123;</span><br><span class="language-css">				<span class="hljs-attribute">font-size</span>: <span class="hljs-number">40px</span>;</span><br><span class="language-css">			&#125;</span><br><span class="language-css">		</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">			arr1 = [</span><br><span class="language-javascript">				<span class="hljs-string">&quot;color: DarkCyan;&quot;</span>,</span><br><span class="language-javascript">				<span class="hljs-string">&quot;color: red;&quot;</span>,</span><br><span class="language-javascript">				<span class="hljs-string">&quot;color: blue;&quot;</span>,</span><br><span class="language-javascript">				<span class="hljs-string">&quot;color: green;&quot;</span>,</span><br><span class="language-javascript">				<span class="hljs-string">&quot;color: #00FF00;&quot;</span>,</span><br><span class="language-javascript">				<span class="hljs-string">&quot;color: #db25ff;&quot;</span>,</span><br><span class="language-javascript">				<span class="hljs-string">&quot;color: #ff4cc7;&quot;</span>,</span><br><span class="language-javascript">				<span class="hljs-string">&quot;color: #ff4197;&quot;</span>,</span><br><span class="language-javascript">				<span class="hljs-string">&quot;color: #fff88b;&quot;</span>,</span><br><span class="language-javascript">			]</span><br><span class="language-javascript">			<span class="hljs-keyword">let</span> timer = <span class="hljs-literal">null</span>;</span><br><span class="language-javascript">			<span class="hljs-comment">//鼠标移入，循环调用color函数</span></span><br><span class="language-javascript">			<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;spans&quot;</span>).<span class="hljs-property">onmouseover</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">				timer = <span class="hljs-variable language_">window</span>.<span class="hljs-built_in">setInterval</span>(color, <span class="hljs-number">100</span>);</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">			<span class="hljs-comment">//鼠标移除，清除timer方法，以及循环重置颜色</span></span><br><span class="language-javascript">			<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;spans&quot;</span>).<span class="hljs-property">onmouseout</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">				<span class="hljs-variable language_">window</span>.<span class="hljs-built_in">clearInterval</span>(timer);</span><br><span class="language-javascript">				<span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">3</span>;i++)&#123;</span><br><span class="language-javascript">					<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">`span<span class="hljs-subst">$&#123;i&#125;</span>`</span>).<span class="hljs-property">style</span> = <span class="hljs-string">&quot;color: #000000;&quot;</span></span><br><span class="language-javascript">				&#125;</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">			<span class="hljs-comment">//color函数，dom选择器颜色更改</span></span><br><span class="language-javascript">			<span class="hljs-keyword">function</span> <span class="hljs-title function_">color</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">				<span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">3</span>;i++)&#123;</span><br><span class="language-javascript">					x = <span class="hljs-title function_">random</span>();</span><br><span class="language-javascript">					<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">`span<span class="hljs-subst">$&#123;i&#125;</span>`</span>).<span class="hljs-property">style</span> = arr1[x];</span><br><span class="language-javascript">				&#125;</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">			<span class="hljs-comment">//随机数调用</span></span><br><span class="language-javascript">			<span class="hljs-keyword">function</span> <span class="hljs-title function_">random</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">				<span class="hljs-keyword">let</span> x = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">8</span>);</span><br><span class="language-javascript">				<span class="hljs-keyword">return</span> x;</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">		</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="CSS-滚动数值综合（练习）"><a href="#CSS-滚动数值综合（练习）" class="headerlink" title="CSS+滚动数值综合（练习）"></a>CSS+滚动数值综合（练习）</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css">			<span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">				<span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">				<span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">				<span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">				<span class="hljs-attribute">background-color</span>: <span class="hljs-number">#002e9b</span>;</span><br><span class="language-css">				<span class="hljs-attribute">color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">245</span>, <span class="hljs-number">223</span>, <span class="hljs-number">77</span>);</span><br><span class="language-css">				<span class="hljs-attribute">font-size</span>: <span class="hljs-number">80px</span>;</span><br><span class="language-css">				<span class="hljs-attribute">font-weight</span>: bold;</span><br><span class="language-css">				<span class="hljs-attribute">line-height</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">				<span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">				<span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">				<span class="hljs-attribute">left</span>: <span class="hljs-number">40%</span>;</span><br><span class="language-css">				<span class="hljs-attribute">top</span>: <span class="hljs-number">30%</span>;</span><br><span class="language-css">				<span class="hljs-attribute">display</span>: none;</span><br><span class="language-css">			&#125;</span><br><span class="language-css">		</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;input1&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;6&quot;</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;info()&quot;</span>&gt;</span>录入<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;change()&quot;</span>&gt;</span>开始滚动<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span> =<span class="hljs-string">&quot;div1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">		<span class="hljs-keyword">let</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>();</span><br><span class="language-javascript">		<span class="hljs-keyword">function</span> <span class="hljs-title function_">info</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">			<span class="hljs-keyword">if</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;input1&quot;</span>).<span class="hljs-property">value</span> != <span class="hljs-string">&quot; &quot;</span>)&#123;</span><br><span class="language-javascript">				arr.<span class="hljs-title function_">push</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;input1&quot;</span>).<span class="hljs-property">value</span>);</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">			<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;input1&quot;</span>).<span class="hljs-property">value</span> = <span class="hljs-string">&quot; &quot;</span>;</span><br><span class="language-javascript">		&#125;</span><br><span class="language-javascript">		<span class="hljs-keyword">function</span> <span class="hljs-title function_">change</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">			<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;div1&quot;</span>).<span class="hljs-property">style</span> = <span class="hljs-string">&quot;display: block&quot;</span>;</span><br><span class="language-javascript">			<span class="hljs-comment">//五秒清除定时器</span></span><br><span class="language-javascript">			<span class="hljs-variable language_">window</span>.<span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">				<span class="hljs-variable language_">window</span>.<span class="hljs-built_in">clearInterval</span>(timer)</span><br><span class="language-javascript">			&#125;,<span class="hljs-number">5000</span>)</span><br><span class="language-javascript">			<span class="hljs-keyword">let</span> timer = <span class="hljs-variable language_">window</span>.<span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">				x = <span class="hljs-title function_">random</span>();</span><br><span class="language-javascript">				<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;div1&quot;</span>).<span class="hljs-property">innerText</span> = arr[x];</span><br><span class="language-javascript">			&#125;,<span class="hljs-number">100</span>)</span><br><span class="language-javascript">		&#125;</span><br><span class="language-javascript">		<span class="hljs-comment">//随机数调用</span></span><br><span class="language-javascript">		<span class="hljs-keyword">function</span> <span class="hljs-title function_">random</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">			<span class="hljs-keyword">let</span> x = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * arr.<span class="hljs-property">length</span>);</span><br><span class="language-javascript">			<span class="hljs-keyword">return</span> x;</span><br><span class="language-javascript">		&#125;</span><br><span class="language-javascript">	</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="轮播图（答案）"><a href="#轮播图（答案）" class="headerlink" title="轮播图（答案）"></a>轮播图（答案）</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>轮播图<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>		&lt; img src=&quot;img/1.jpg&quot; id=&quot;img1&quot; width=&quot;400px&quot; height=&quot;250px&quot; /&gt;<br>		<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;last()&quot;</span>&gt;</span>上一张<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;next()&quot;</span>&gt;</span>下一张<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">			<span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&quot;img/1.jpg&quot;</span>, <span class="hljs-string">&quot;img/2.jpg&quot;</span>, <span class="hljs-string">&quot;img/8.jpg&quot;</span>,</span><br><span class="language-javascript">				<span class="hljs-string">&quot;img/9.jpg&quot;</span>, <span class="hljs-string">&quot;img/向日葵.jpg&quot;</span>, <span class="hljs-string">&quot;img/小松鼠.jpg&quot;</span></span><br><span class="language-javascript">			];</span><br><span class="language-javascript">			<span class="hljs-keyword">var</span> index = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">			<span class="hljs-keyword">var</span> timer = <span class="hljs-variable language_">window</span>.<span class="hljs-built_in">setInterval</span>(next, <span class="hljs-number">1000</span>);</span><br><span class="language-javascript">			<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;img1&quot;</span>).<span class="hljs-property">onmouseover</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">				<span class="hljs-variable language_">window</span>.<span class="hljs-built_in">clearInterval</span>(timer);</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">			<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;img1&quot;</span>).<span class="hljs-property">onmouseout</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">				timer = <span class="hljs-variable language_">window</span>.<span class="hljs-built_in">setInterval</span>(next, <span class="hljs-number">1000</span>);</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">			<span class="hljs-keyword">function</span> <span class="hljs-title function_">next</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">				index++;</span><br><span class="language-javascript">				<span class="hljs-keyword">if</span> (index == <span class="hljs-number">6</span>) &#123;</span><br><span class="language-javascript">					index = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">				&#125;</span><br><span class="language-javascript">				<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;img1&quot;</span>).<span class="hljs-property">src</span> = arr[index];</span><br><span class="language-javascript"></span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">			<span class="hljs-keyword">function</span> <span class="hljs-title function_">last</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">				index--;</span><br><span class="language-javascript">				<span class="hljs-keyword">if</span> (index == -<span class="hljs-number">1</span>) &#123;</span><br><span class="language-javascript">					index = <span class="hljs-number">5</span>;</span><br><span class="language-javascript">				&#125;</span><br><span class="language-javascript">				<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;img1&quot;</span>).<span class="hljs-property">src</span> = arr[index];</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">		</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="鼠标停留变颜色（练习）-1"><a href="#鼠标停留变颜色（练习）-1" class="headerlink" title="鼠标停留变颜色（练习）"></a>鼠标停留变颜色（练习）</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>鼠标停留文字变色<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">			<span class="hljs-comment">/* 标签选择器 */</span></span><br><span class="language-css">			<span class="hljs-selector-tag">span</span> &#123;</span><br><span class="language-css">				<span class="hljs-attribute">font-size</span>: <span class="hljs-number">60px</span>;</span><br><span class="language-css">			&#125;</span><br><span class="language-css">		</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;span1&quot;</span> <span class="hljs-attr">onmouseover</span>=<span class="hljs-string">&quot;changeColor()&quot;</span> <span class="hljs-attr">onmouseout</span>=<span class="hljs-string">&quot;leave()&quot;</span>&gt;</span>变<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;span2&quot;</span> <span class="hljs-attr">onmouseover</span>=<span class="hljs-string">&quot;changeColor()&quot;</span> <span class="hljs-attr">onmouseout</span>=<span class="hljs-string">&quot;leave()&quot;</span>&gt;</span>颜<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;span3&quot;</span> <span class="hljs-attr">onmouseover</span>=<span class="hljs-string">&quot;changeColor()&quot;</span> <span class="hljs-attr">onmouseout</span>=<span class="hljs-string">&quot;leave()&quot;</span>&gt;</span>色<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">			<span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-string">&quot;blue&quot;</span>, <span class="hljs-string">&quot;yellow&quot;</span>, <span class="hljs-string">&quot;green&quot;</span>, <span class="hljs-string">&quot;pink&quot;</span>, <span class="hljs-string">&quot;tan&quot;</span>, <span class="hljs-string">&quot;orange&quot;</span>, <span class="hljs-string">&quot;purple&quot;</span>, <span class="hljs-string">&quot;glod&quot;</span>, <span class="hljs-string">&quot;gray&quot;</span>];</span><br><span class="language-javascript">			<span class="hljs-keyword">var</span> timer = <span class="hljs-literal">null</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">			<span class="hljs-keyword">function</span> <span class="hljs-title function_">changeColor</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">				timer = <span class="hljs-variable language_">window</span>.<span class="hljs-built_in">setInterval</span>(</span><br><span class="language-javascript">					<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">						<span class="hljs-keyword">var</span> x = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * arr.<span class="hljs-property">length</span>);</span><br><span class="language-javascript">						<span class="hljs-keyword">var</span> y = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * arr.<span class="hljs-property">length</span>);</span><br><span class="language-javascript">						<span class="hljs-keyword">var</span> z = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * arr.<span class="hljs-property">length</span>);</span><br><span class="language-javascript">						<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;span1&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">color</span> = arr[x];</span><br><span class="language-javascript">						<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;span2&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">color</span> = arr[y];</span><br><span class="language-javascript">						<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;span3&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">color</span> = arr[z];</span><br><span class="language-javascript">					&#125;, <span class="hljs-number">100</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">			<span class="hljs-keyword">function</span> <span class="hljs-title function_">leave</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">				<span class="hljs-variable language_">window</span>.<span class="hljs-built_in">clearInterval</span>(timer);</span><br><span class="language-javascript">				<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;span1&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">color</span> = <span class="hljs-string">&quot;black&quot;</span>;</span><br><span class="language-javascript">				<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;span2&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">color</span> = <span class="hljs-string">&quot;black&quot;</span>;</span><br><span class="language-javascript">				<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;span3&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">color</span> = <span class="hljs-string">&quot;black&quot;</span>;</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">		</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="CSS-滚动数值综合（练习）-1"><a href="#CSS-滚动数值综合（练习）-1" class="headerlink" title="CSS+滚动数值综合（练习）"></a>CSS+滚动数值综合（练习）</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">			<span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">				<span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">				<span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">				<span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">				<span class="hljs-attribute">background-color</span>: <span class="hljs-number">#002e9b</span>;</span><br><span class="language-css">				<span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">				<span class="hljs-attribute">left</span>: <span class="hljs-number">40%</span>;</span><br><span class="language-css">				<span class="hljs-attribute">top</span>: <span class="hljs-number">30%</span>;</span><br><span class="language-css">				<span class="hljs-attribute">color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">245</span>, <span class="hljs-number">223</span>, <span class="hljs-number">77</span>);</span><br><span class="language-css">				<span class="hljs-attribute">font-size</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">				<span class="hljs-attribute">font-weight</span>: bold;</span><br><span class="language-css">				<span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">				<span class="hljs-attribute">line-height</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">				<span class="hljs-attribute">display</span>: none;</span><br><span class="language-css">			&#125;</span><br><span class="language-css">		</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;6&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;input1&quot;</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;enter()&quot;</span>&gt;</span>录入<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;startRoll()&quot;</span>&gt;</span>开始滚动<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;div1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">			<span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>();</span><br><span class="language-javascript">			<span class="hljs-keyword">var</span> timer = <span class="hljs-literal">null</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">			<span class="hljs-keyword">function</span> <span class="hljs-title function_">enter</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">				<span class="hljs-keyword">var</span> name = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;input1&quot;</span>).<span class="hljs-property">value</span>;</span><br><span class="language-javascript">				arr.<span class="hljs-title function_">push</span>(name);</span><br><span class="language-javascript">				<span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;录入成功！&quot;</span>);</span><br><span class="language-javascript">				<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;input1&quot;</span>).<span class="hljs-property">value</span> = <span class="hljs-string">&quot;&quot;</span>;</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">			<span class="hljs-keyword">function</span> <span class="hljs-title function_">startRoll</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">				<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;div1&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&quot;block&quot;</span>;</span><br><span class="language-javascript">				<span class="hljs-keyword">if</span> (timer == <span class="hljs-literal">null</span>) &#123;</span><br><span class="language-javascript">					timer = <span class="hljs-variable language_">window</span>.<span class="hljs-built_in">setInterval</span>(</span><br><span class="language-javascript">						<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">							<span class="hljs-keyword">var</span> index = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * arr.<span class="hljs-property">length</span>);</span><br><span class="language-javascript">							<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;div1&quot;</span>).<span class="hljs-property">innerText</span> = arr[index];</span><br><span class="language-javascript">						&#125;, <span class="hljs-number">100</span>);</span><br><span class="language-javascript">					<span class="hljs-variable language_">window</span>.<span class="hljs-built_in">setTimeout</span>(</span><br><span class="language-javascript">						<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">							<span class="hljs-variable language_">window</span>.<span class="hljs-built_in">clearInterval</span>(timer);</span><br><span class="language-javascript">							timer = <span class="hljs-literal">null</span>;</span><br><span class="language-javascript">						&#125;, <span class="hljs-number">5000</span>);</span><br><span class="language-javascript">				&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">		</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h1 id="DAY17"><a href="#DAY17" class="headerlink" title="DAY17"></a>DAY17</h1><h2 id="双色球抽奖（练习）"><a href="#双色球抽奖（练习）" class="headerlink" title="双色球抽奖（练习）"></a>双色球抽奖（练习）</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css">			<span class="hljs-selector-id">#div1</span> &#123;</span><br><span class="language-css">				<span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">				<span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">				<span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">				<span class="hljs-attribute">background-color</span>: <span class="hljs-number">#002e9b</span>;</span><br><span class="language-css">				<span class="hljs-attribute">color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">245</span>, <span class="hljs-number">223</span>, <span class="hljs-number">77</span>);</span><br><span class="language-css">				<span class="hljs-attribute">font-size</span>: <span class="hljs-number">80px</span>;</span><br><span class="language-css">				<span class="hljs-attribute">font-weight</span>: bold;</span><br><span class="language-css">				<span class="hljs-attribute">line-height</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">				<span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">				<span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">				<span class="hljs-attribute">left</span>: <span class="hljs-number">40%</span>;</span><br><span class="language-css">				<span class="hljs-attribute">top</span>: <span class="hljs-number">30%</span>;</span><br><span class="language-css">				<span class="hljs-attribute">display</span>: none;</span><br><span class="language-css">			&#125;</span><br><span class="language-css"></span><br><span class="language-css">			<span class="hljs-selector-id">#prize3</span>,</span><br><span class="language-css">			<span class="hljs-selector-id">#prize2</span>,</span><br><span class="language-css">			<span class="hljs-selector-id">#prize1</span> &#123;</span><br><span class="language-css">				<span class="hljs-attribute">display</span>: none;</span><br><span class="language-css">			&#125;</span><br><span class="language-css">		</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;input1&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;6&quot;</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;info()&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span>录入<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;change()&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;change&quot;</span>&gt;</span>开始滚动<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;div1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;prize3&quot;</span>&gt;</span>三等奖：<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;prize2&quot;</span>&gt;</span>二等奖：<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;prize1&quot;</span>&gt;</span>一等奖：<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>		<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">		<span class="hljs-keyword">let</span> arr1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>();</span><br><span class="language-javascript">		<span class="hljs-keyword">let</span> arr2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>();</span><br><span class="language-javascript">		<span class="hljs-comment">//录入button</span></span><br><span class="language-javascript">		<span class="hljs-keyword">function</span> <span class="hljs-title function_">info</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">			<span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;添加成功&quot;</span>);</span><br><span class="language-javascript">			<span class="hljs-keyword">if</span> (<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;input1&quot;</span>).<span class="hljs-property">value</span> != <span class="hljs-string">&quot; &quot;</span>) &#123;</span><br><span class="language-javascript">				arr1.<span class="hljs-title function_">push</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;input1&quot;</span>).<span class="hljs-property">value</span>);</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">			<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;input1&quot;</span>).<span class="hljs-property">value</span> = <span class="hljs-string">&quot; &quot;</span>;</span><br><span class="language-javascript">		&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">		<span class="hljs-comment">//开始滚动button</span></span><br><span class="language-javascript">		<span class="hljs-keyword">let</span> g;</span><br><span class="language-javascript">		<span class="hljs-keyword">function</span> <span class="hljs-title function_">change</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">			<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;div1&quot;</span>).<span class="hljs-property">style</span> = <span class="hljs-string">&quot;display: block&quot;</span>;</span><br><span class="language-javascript">			<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;info&quot;</span>).<span class="hljs-property">disabled</span> = <span class="hljs-string">&quot;true&quot;</span>;</span><br><span class="language-javascript">			<span class="hljs-keyword">let</span> timer = <span class="hljs-variable language_">window</span>.<span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">				<span class="hljs-comment">//随机生成0~arr.length长度单位的随机数</span></span><br><span class="language-javascript">				g = <span class="hljs-title function_">random</span>(arr1.<span class="hljs-property">length</span>, <span class="hljs-number">0</span>);</span><br><span class="language-javascript">				<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;div1&quot;</span>).<span class="hljs-property">innerText</span> = arr1[g];</span><br><span class="language-javascript">			&#125;, <span class="hljs-number">100</span>)</span><br><span class="language-javascript">			<span class="hljs-comment">//定时器</span></span><br><span class="language-javascript">			<span class="hljs-variable language_">window</span>.<span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">				<span class="hljs-variable language_">window</span>.<span class="hljs-built_in">clearInterval</span>(timer);</span><br><span class="language-javascript">				<span class="hljs-title function_">timeout</span>();</span><br><span class="language-javascript">			&#125;, <span class="hljs-number">5000</span>)</span><br><span class="language-javascript">		&#125;</span><br><span class="language-javascript">		<span class="hljs-comment">//随机数调用，扩展</span></span><br><span class="language-javascript">		<span class="hljs-keyword">function</span> <span class="hljs-title function_">random</span>(<span class="hljs-params">x, y</span>) &#123;</span><br><span class="language-javascript">			<span class="hljs-keyword">let</span> random = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * (y - x) + x);</span><br><span class="language-javascript">			<span class="hljs-keyword">return</span> random;</span><br><span class="language-javascript">		&#125;</span><br><span class="language-javascript">		<span class="hljs-comment">//奖项判断，三等奖3人，二等奖2人，一等奖1人</span></span><br><span class="language-javascript">		<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span></span><br><span class="language-javascript">		<span class="hljs-comment">//定时器结束时运行，防止浪费资源</span></span><br><span class="language-javascript">		<span class="hljs-keyword">function</span> <span class="hljs-title function_">timeout</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">			<span class="hljs-comment">//arr2.push(Number(document.getElementById(&quot;div1&quot;).innerText));</span></span><br><span class="language-javascript">			arr2.<span class="hljs-title function_">push</span>(arr1[g])</span><br><span class="language-javascript">			<span class="hljs-comment">//三等奖</span></span><br><span class="language-javascript">			<span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">3</span>) &#123;</span><br><span class="language-javascript">				<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;prize3&quot;</span>).<span class="hljs-property">style</span> = <span class="hljs-string">&quot;display: block&quot;</span>;</span><br><span class="language-javascript">				<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;prize3&quot;</span>).<span class="hljs-property">innerText</span> += arr2[i] + <span class="hljs-string">&quot;;&quot;</span>;</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">			<span class="hljs-comment">//二等奖</span></span><br><span class="language-javascript">			<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">2</span> &amp;&amp; i &lt; <span class="hljs-number">5</span>) &#123;</span><br><span class="language-javascript">				<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;prize2&quot;</span>).<span class="hljs-property">style</span> = <span class="hljs-string">&quot;display: block&quot;</span>;</span><br><span class="language-javascript">				<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;prize2&quot;</span>).<span class="hljs-property">innerText</span> += arr2[i] + <span class="hljs-string">&quot;;&quot;</span>;</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">			<span class="hljs-comment">//一等奖</span></span><br><span class="language-javascript">			<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == <span class="hljs-number">5</span>) &#123;</span><br><span class="language-javascript">				<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;prize1&quot;</span>).<span class="hljs-property">style</span> = <span class="hljs-string">&quot;display: block&quot;</span>;</span><br><span class="language-javascript">				<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;prize1&quot;</span>).<span class="hljs-property">innerText</span> += arr2[i] + <span class="hljs-string">&quot;;&quot;</span>;</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">			<span class="hljs-keyword">else</span>&#123;</span><br><span class="language-javascript">				<span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;请勿重复点击&quot;</span>);</span><br><span class="language-javascript">				<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;change&quot;</span>).<span class="hljs-property">disabled</span> = <span class="hljs-string">&quot;true&quot;</span>;</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">			arr1.<span class="hljs-title function_">splice</span>(g,<span class="hljs-number">1</span>);</span><br><span class="language-javascript">			i++;</span><br><span class="language-javascript">		&#125;</span><br><span class="language-javascript">	</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="双色球抽奖（答案）"><a href="#双色球抽奖（答案）" class="headerlink" title="双色球抽奖（答案）"></a>双色球抽奖（答案）</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css">			<span class="hljs-selector-tag">div</span>&#123;</span><br><span class="language-css">				<span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">				<span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">				<span class="hljs-attribute">background-color</span>: blue;</span><br><span class="language-css">				<span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">				<span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">				<span class="hljs-attribute">left</span>: <span class="hljs-number">40%</span>;</span><br><span class="language-css">				<span class="hljs-attribute">top</span>: <span class="hljs-number">30%</span>;</span><br><span class="language-css">				<span class="hljs-attribute">color</span>: yellow;</span><br><span class="language-css">				<span class="hljs-attribute">font-size</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">				<span class="hljs-attribute">font-weight</span>: bold;</span><br><span class="language-css">				<span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">				<span class="hljs-attribute">line-height</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">				<span class="hljs-attribute">display</span>: none;</span><br><span class="language-css">			&#125;</span><br><span class="language-css">			<span class="hljs-selector-tag">span</span>&#123;</span><br><span class="language-css">				<span class="hljs-attribute">display</span>: none;</span><br><span class="language-css">			&#125;</span><br><span class="language-css">		</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;6&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;input1&quot;</span>/&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;enter()&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn1&quot;</span>&gt;</span>录入<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;rolling()&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn2&quot;</span>&gt;</span>开始滚动<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;third_1&quot;</span>&gt;</span>三等奖<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;third_2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;second_1&quot;</span>&gt;</span>二等奖<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;second_2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;first_1&quot;</span>&gt;</span>一等奖<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;first_2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;div1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>		<br>		<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">			<span class="hljs-keyword">var</span> arr=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>();</span><br><span class="language-javascript">			<span class="hljs-keyword">var</span> count=<span class="hljs-number">0</span>;</span><br><span class="language-javascript">			<span class="hljs-keyword">function</span> <span class="hljs-title function_">enter</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">				<span class="hljs-keyword">var</span> name=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;input1&quot;</span>).<span class="hljs-property">value</span>;</span><br><span class="language-javascript">				arr.<span class="hljs-title function_">push</span>(name);</span><br><span class="language-javascript">				<span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;录入成功&quot;</span>);</span><br><span class="language-javascript">				<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;input1&quot;</span>).<span class="hljs-property">value</span>=<span class="hljs-string">&quot;&quot;</span>;</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">			<span class="hljs-keyword">function</span> <span class="hljs-title function_">rolling</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">				<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;btn1&quot;</span>).<span class="hljs-property">disabled</span>=<span class="hljs-string">&quot;false&quot;</span>;</span><br><span class="language-javascript">				<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;btn2&quot;</span>).<span class="hljs-property">disabled</span>=<span class="hljs-string">&quot;false&quot;</span>;</span><br><span class="language-javascript">				<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;div1&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">display</span>=<span class="hljs-string">&quot;block&quot;</span>;</span><br><span class="language-javascript">				<span class="hljs-keyword">var</span> index;</span><br><span class="language-javascript">				<span class="hljs-keyword">var</span> timer=<span class="hljs-variable language_">window</span>.<span class="hljs-built_in">setInterval</span>(</span><br><span class="language-javascript">				<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">					index=<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()*arr.<span class="hljs-property">length</span>);</span><br><span class="language-javascript">					<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;div1&quot;</span>).<span class="hljs-property">innerText</span>=arr[index];</span><br><span class="language-javascript">				&#125;</span><br><span class="language-javascript">				,<span class="hljs-number">100</span>);</span><br><span class="language-javascript">				<span class="hljs-variable language_">window</span>.<span class="hljs-built_in">setTimeout</span>(</span><br><span class="language-javascript">				<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">					count++;</span><br><span class="language-javascript">					<span class="hljs-variable language_">window</span>.<span class="hljs-built_in">clearInterval</span>(timer);</span><br><span class="language-javascript">					<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;btn2&quot;</span>).<span class="hljs-property">disabled</span>=<span class="hljs-string">&quot;&quot;</span>;</span><br><span class="language-javascript">					<span class="hljs-keyword">if</span>(count&lt;=<span class="hljs-number">3</span>)&#123;</span><br><span class="language-javascript">						<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;third_1&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">display</span>=<span class="hljs-string">&quot;block&quot;</span>;</span><br><span class="language-javascript">						<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;third_2&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">display</span>=<span class="hljs-string">&quot;block&quot;</span>;</span><br><span class="language-javascript">						<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;third_2&quot;</span>).<span class="hljs-property">innerText</span>=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;third_2&quot;</span>).<span class="hljs-property">innerText</span>+arr[index]+<span class="hljs-string">&quot;;&quot;</span>;</span><br><span class="language-javascript">					&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(count&lt;=<span class="hljs-number">5</span>)&#123;</span><br><span class="language-javascript">						<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;second_1&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">display</span>=<span class="hljs-string">&quot;block&quot;</span>;</span><br><span class="language-javascript">						<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;second_2&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">display</span>=<span class="hljs-string">&quot;block&quot;</span>;</span><br><span class="language-javascript">						<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;second_2&quot;</span>).<span class="hljs-property">innerText</span>=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;second_2&quot;</span>).<span class="hljs-property">innerText</span>+arr[index]+<span class="hljs-string">&quot;;&quot;</span>;</span><br><span class="language-javascript">					&#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="language-javascript">						<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;first_1&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">display</span>=<span class="hljs-string">&quot;block&quot;</span>;</span><br><span class="language-javascript">						<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;first_2&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">display</span>=<span class="hljs-string">&quot;block&quot;</span>;</span><br><span class="language-javascript">						<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;first_2&quot;</span>).<span class="hljs-property">innerText</span>=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;first_2&quot;</span>).<span class="hljs-property">innerText</span>+arr[index]+<span class="hljs-string">&quot;;&quot;</span>;</span><br><span class="language-javascript">						<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;btn2&quot;</span>).<span class="hljs-property">disabled</span>=<span class="hljs-string">&quot;false&quot;</span>;</span><br><span class="language-javascript">					&#125;</span><br><span class="language-javascript">					arr.<span class="hljs-title function_">splice</span>(index,<span class="hljs-number">1</span>);</span><br><span class="language-javascript">					</span><br><span class="language-javascript">				&#125;</span><br><span class="language-javascript">				,<span class="hljs-number">4000</span>);</span><br><span class="language-javascript">				</span><br><span class="language-javascript">			</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">		</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>		<br>	<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h1 id="DAY18"><a href="#DAY18" class="headerlink" title="DAY18"></a>DAY18</h1><h2 id="随机数滚动"><a href="#随机数滚动" class="headerlink" title="随机数滚动"></a>随机数滚动</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTMl"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>随机数滚动<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">			<span class="hljs-comment">/* 标签选择器  */</span></span><br><span class="language-css">			<span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">				<span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">				<span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">				<span class="hljs-attribute">background-color</span>: blue;</span><br><span class="language-css">				<span class="hljs-attribute">border-radius</span>: <span class="hljs-number">150px</span>;</span><br><span class="language-css">				<span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">				<span class="hljs-attribute">line-height</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">				<span class="hljs-attribute">font-size</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">				<span class="hljs-attribute">color</span>: yellowgreen;</span><br><span class="language-css">				<span class="hljs-attribute">font-weight</span>: bold;</span><br><span class="language-css">			&#125;</span><br><span class="language-css">		</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;div1&quot;</span>&gt;</span>00<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;start()&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn1&quot;</span>&gt;</span>开始<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">			<span class="hljs-keyword">function</span> <span class="hljs-title function_">start</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">				<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;btn1&quot;</span>).<span class="hljs-property">disabled</span> = <span class="hljs-string">&quot;false&quot;</span>;</span><br><span class="language-javascript">				<span class="hljs-keyword">var</span> timer = <span class="hljs-variable language_">window</span>.<span class="hljs-built_in">setInterval</span>(</span><br><span class="language-javascript">					<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">						<span class="hljs-keyword">var</span> x = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">99</span> + <span class="hljs-number">1</span>);</span><br><span class="language-javascript">						<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;div1&quot;</span>).<span class="hljs-property">innerText</span> = x;</span><br><span class="language-javascript">						<span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">10</span>) &#123;</span><br><span class="language-javascript">							<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;div1&quot;</span>).<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;0&quot;</span> + x;</span><br><span class="language-javascript">						&#125;</span><br><span class="language-javascript">					&#125;, <span class="hljs-number">100</span>);</span><br><span class="language-javascript">				<span class="hljs-variable language_">window</span>.<span class="hljs-built_in">setTimeout</span>(</span><br><span class="language-javascript">					<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">						<span class="hljs-variable language_">window</span>.<span class="hljs-built_in">clearInterval</span>(timer);</span><br><span class="language-javascript">						<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;btn1&quot;</span>).<span class="hljs-property">disabled</span> = <span class="hljs-string">&quot;&quot;</span>;</span><br><span class="language-javascript">					&#125;, <span class="hljs-number">3000</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">		</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="秒表-x2F-定时器（练习）"><a href="#秒表-x2F-定时器（练习）" class="headerlink" title="秒表&#x2F;定时器（练习）"></a>秒表&#x2F;定时器（练习）</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>秒表<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css">		<span class="hljs-selector-id">#div1</span> &#123;</span><br><span class="language-css">			<span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">			<span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">			<span class="hljs-attribute">background-color</span>: black;</span><br><span class="language-css">			<span class="hljs-attribute">border-radius</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">			<span class="hljs-attribute">color</span>: greenyellow;</span><br><span class="language-css">			<span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">			<span class="hljs-attribute">line-height</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">			<span class="hljs-attribute">font-size</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">			<span class="hljs-attribute">display</span>: table-cell;</span><br><span class="language-css">		&#125;</span><br><span class="language-css">	</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;div1&quot;</span>&gt;</span>00:00:00:00<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;but_start()&quot;</span>&gt;</span>当前时间<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;but_start2()&quot;</span>&gt;</span>计时器<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;time_stop()&quot;</span>&gt;</span>暂停<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;time_reset()&quot;</span>&gt;</span>重置<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">		<span class="hljs-comment">//当前时间</span></span><br><span class="language-javascript">		<span class="hljs-keyword">let</span> timer = <span class="hljs-literal">null</span>;</span><br><span class="language-javascript">		<span class="hljs-keyword">function</span> <span class="hljs-title function_">but_start</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">			<span class="hljs-keyword">if</span> (timer == <span class="hljs-literal">null</span>) &#123;</span><br><span class="language-javascript">				timer = <span class="hljs-variable language_">window</span>.<span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">					ms++;</span><br><span class="language-javascript">					<span class="hljs-keyword">let</span> date = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();</span><br><span class="language-javascript">					<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;div1&quot;</span>).<span class="hljs-property">innerText</span> = date.<span class="hljs-title function_">toLocaleTimeString</span>() + <span class="hljs-string">&quot;:&quot;</span> + <span class="hljs-title function_">showNum</span>(ms);</span><br><span class="language-javascript">				&#125;, <span class="hljs-number">10</span>)</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">		&#125;</span><br><span class="language-javascript">		<span class="hljs-comment">//计时器</span></span><br><span class="language-javascript">		<span class="hljs-keyword">function</span> <span class="hljs-title function_">but_start2</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">			<span class="hljs-keyword">if</span> (timer == <span class="hljs-literal">null</span>) &#123;</span><br><span class="language-javascript">				<span class="hljs-title function_">watch_ms</span>();</span><br><span class="language-javascript">				timer = <span class="hljs-variable language_">window</span>.<span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">					<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;div1&quot;</span>).<span class="hljs-property">innerText</span> = <span class="hljs-title function_">watch</span>();</span><br><span class="language-javascript">				&#125;, <span class="hljs-number">10</span>)</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">		&#125;</span><br><span class="language-javascript">		<span class="hljs-comment">//暂停</span></span><br><span class="language-javascript">		<span class="hljs-keyword">function</span> <span class="hljs-title function_">time_stop</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">			<span class="hljs-variable language_">window</span>.<span class="hljs-built_in">clearInterval</span>(timer);</span><br><span class="language-javascript">			timer = <span class="hljs-literal">null</span>;</span><br><span class="language-javascript">			ms = <span class="hljs-literal">null</span>;</span><br><span class="language-javascript">		&#125;</span><br><span class="language-javascript">		<span class="hljs-comment">//重置</span></span><br><span class="language-javascript">		<span class="hljs-keyword">function</span> <span class="hljs-title function_">time_reset</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">			<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;div1&quot;</span>).<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;00:00:00:00&quot;</span>;</span><br><span class="language-javascript">			<span class="hljs-variable language_">window</span>.<span class="hljs-built_in">clearInterval</span>(timer);</span><br><span class="language-javascript">			<span class="hljs-variable language_">window</span>.<span class="hljs-built_in">clearInterval</span>(time_ms);</span><br><span class="language-javascript">			timer = <span class="hljs-literal">null</span>;</span><br><span class="language-javascript">			time_ms = <span class="hljs-literal">null</span>;</span><br><span class="language-javascript">			s = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">			min = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">			h = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">			ms = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">		&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">		<span class="hljs-keyword">let</span> ms = <span class="hljs-number">0</span>; <span class="hljs-comment">//毫秒</span></span><br><span class="language-javascript">		<span class="hljs-keyword">let</span> s = <span class="hljs-number">0</span>; <span class="hljs-comment">//秒</span></span><br><span class="language-javascript">		<span class="hljs-keyword">let</span> min = <span class="hljs-number">0</span>; <span class="hljs-comment">//分</span></span><br><span class="language-javascript">		<span class="hljs-keyword">let</span> h = <span class="hljs-number">0</span>; <span class="hljs-comment">//时</span></span><br><span class="language-javascript">		<span class="hljs-comment">//毫秒计时器</span></span><br><span class="language-javascript">		<span class="hljs-keyword">let</span> time_ms = <span class="hljs-literal">null</span>;</span><br><span class="language-javascript">		<span class="hljs-keyword">function</span> <span class="hljs-title function_">watch_ms</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">			<span class="hljs-keyword">if</span> (time_ms == <span class="hljs-literal">null</span>) &#123;</span><br><span class="language-javascript">				time_ms = <span class="hljs-variable language_">window</span>.<span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">					ms++;</span><br><span class="language-javascript">				&#125;, <span class="hljs-number">10</span>)</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">		&#125;</span><br><span class="language-javascript">		<span class="hljs-comment">//秒表计数</span></span><br><span class="language-javascript">		<span class="hljs-keyword">function</span> <span class="hljs-title function_">watch</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">			<span class="hljs-keyword">if</span> (ms &gt;= <span class="hljs-number">99</span>) &#123;</span><br><span class="language-javascript">				s++;</span><br><span class="language-javascript">				ms = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">			<span class="hljs-keyword">if</span> (s == <span class="hljs-number">60</span>) &#123;</span><br><span class="language-javascript">				min++;</span><br><span class="language-javascript">				s = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">			<span class="hljs-keyword">if</span> (min == <span class="hljs-number">60</span>) &#123;</span><br><span class="language-javascript">				h++;</span><br><span class="language-javascript">				min = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">			<span class="hljs-keyword">return</span> <span class="hljs-title function_">showNum</span>(h) + <span class="hljs-string">&quot;:&quot;</span> + <span class="hljs-title function_">showNum</span>(min) + <span class="hljs-string">&quot;:&quot;</span> + <span class="hljs-title function_">showNum</span>(s) + <span class="hljs-string">&quot;:&quot;</span> + <span class="hljs-title function_">showNum</span>(ms);</span><br><span class="language-javascript">		&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">		<span class="hljs-comment">//封装</span></span><br><span class="language-javascript">		<span class="hljs-keyword">function</span> <span class="hljs-title function_">showNum</span>(<span class="hljs-params">i</span>) &#123;</span><br><span class="language-javascript">			<span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">10</span>) &#123;</span><br><span class="language-javascript">				<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;0&quot;</span> + i;</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">			<span class="hljs-comment">//判断为毫秒数</span></span><br><span class="language-javascript">			<span class="hljs-keyword">if</span> (i &gt;= <span class="hljs-number">99</span>) &#123;</span><br><span class="language-javascript">				ms = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">			<span class="hljs-keyword">return</span> i;</span><br><span class="language-javascript">		&#125;</span><br><span class="language-javascript">	</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/GIF%202022-9-27%200-20-45.gif" alt="GIF 2022-9-27 0-20-45"></p>
<h2 id="简单前端验证码（练习）"><a href="#简单前端验证码（练习）" class="headerlink" title="简单前端验证码（练习）"></a>简单前端验证码（练习）</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><br>		<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;input1&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;12&quot;</span>/&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;btn1&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;btn1()&quot;</span>&gt;</span>发送<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">			<span class="hljs-keyword">let</span> x = <span class="hljs-number">10</span>;</span><br><span class="language-javascript">			<span class="hljs-keyword">let</span> code = <span class="hljs-literal">null</span>;</span><br><span class="language-javascript">			<span class="hljs-keyword">function</span> <span class="hljs-title function_">btn1</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">				<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;btn1&quot;</span>).<span class="hljs-property">disabled</span> = <span class="hljs-string">&quot;false&quot;</span>;</span><br><span class="language-javascript">				<span class="hljs-variable language_">window</span>.<span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">					code = <span class="hljs-title function_">showNum</span>(<span class="hljs-title function_">random</span>(<span class="hljs-number">0</span>,<span class="hljs-number">999999</span>));</span><br><span class="language-javascript">					<span class="hljs-title function_">alert</span>(code)</span><br><span class="language-javascript">				&#125;,<span class="hljs-number">5000</span>);</span><br><span class="language-javascript">				<span class="hljs-keyword">let</span> timer = <span class="hljs-variable language_">window</span>.<span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">					x--;</span><br><span class="language-javascript">					<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;btn1&quot;</span>).<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;重新发送：&quot;</span> + x;</span><br><span class="language-javascript">					<span class="hljs-keyword">if</span>(x == <span class="hljs-number">0</span>)&#123;</span><br><span class="language-javascript">						<span class="hljs-variable language_">window</span>.<span class="hljs-built_in">clearInterval</span>(timer);</span><br><span class="language-javascript">						<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;btn1&quot;</span>).<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;发送&quot;</span>;</span><br><span class="language-javascript">						<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;btn1&quot;</span>).<span class="hljs-property">disabled</span> = <span class="hljs-string">&quot;&quot;</span>;</span><br><span class="language-javascript">						code = <span class="hljs-title function_">showNum</span>(<span class="hljs-title function_">random</span>(<span class="hljs-number">0</span>,<span class="hljs-number">999999</span>));</span><br><span class="language-javascript">						x = <span class="hljs-number">20</span>;</span><br><span class="language-javascript">					&#125;</span><br><span class="language-javascript">				&#125;,<span class="hljs-number">1000</span>)</span><br><span class="language-javascript">				</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">			<span class="hljs-comment">//随机数调用</span></span><br><span class="language-javascript">			<span class="hljs-keyword">function</span> <span class="hljs-title function_">random</span>(<span class="hljs-params">max,min</span>) &#123;</span><br><span class="language-javascript">				<span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * (max - min) + min);</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">			<span class="hljs-comment">//回车事件</span></span><br><span class="language-javascript">			<span class="hljs-variable language_">document</span>.<span class="hljs-property">onkeydown</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;</span><br><span class="language-javascript">				<span class="hljs-keyword">let</span> ev = <span class="hljs-variable language_">document</span>.<span class="hljs-property">all</span> ? <span class="hljs-variable language_">window</span>.<span class="hljs-property">event</span> : e;</span><br><span class="language-javascript">				<span class="hljs-keyword">if</span>(ev.<span class="hljs-property">keyCode</span> == <span class="hljs-number">13</span> &amp;&amp; code != <span class="hljs-literal">null</span>)&#123;</span><br><span class="language-javascript">					<span class="hljs-keyword">if</span>(code == <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;input1&quot;</span>).<span class="hljs-property">value</span>)&#123;</span><br><span class="language-javascript">						<span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;验证码正确&quot;</span>)</span><br><span class="language-javascript">					&#125;</span><br><span class="language-javascript">					<span class="hljs-keyword">else</span>&#123;</span><br><span class="language-javascript">						<span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;验证码错误&quot;</span>)</span><br><span class="language-javascript">					&#125;</span><br><span class="language-javascript">				&#125;</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">			<span class="hljs-comment">//封装</span></span><br><span class="language-javascript">			<span class="hljs-keyword">function</span> <span class="hljs-title function_">showNum</span>(<span class="hljs-params">i</span>)&#123;</span><br><span class="language-javascript">				<span class="hljs-keyword">if</span> (i &lt;<span class="hljs-number">100000</span>)&#123;</span><br><span class="language-javascript">					<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;0&quot;</span> + i;</span><br><span class="language-javascript">				&#125;</span><br><span class="language-javascript">				<span class="hljs-keyword">if</span> (i &lt;<span class="hljs-number">10000</span>)&#123;</span><br><span class="language-javascript">					<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;00&quot;</span> + i;</span><br><span class="language-javascript">				&#125;</span><br><span class="language-javascript">				<span class="hljs-keyword">if</span> (i &lt;<span class="hljs-number">1000</span>)&#123;</span><br><span class="language-javascript">					<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;000&quot;</span> + i;</span><br><span class="language-javascript">				&#125;</span><br><span class="language-javascript">				<span class="hljs-keyword">if</span> (i &lt;<span class="hljs-number">100</span>)&#123;</span><br><span class="language-javascript">					<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;0000&quot;</span> + i;</span><br><span class="language-javascript">				&#125;</span><br><span class="language-javascript">				<span class="hljs-keyword">if</span> (i &lt;<span class="hljs-number">10</span>)&#123;</span><br><span class="language-javascript">					<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;00000&quot;</span> + i;</span><br><span class="language-javascript">				&#125;</span><br><span class="language-javascript">				<span class="hljs-keyword">return</span> i;</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">		</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="获取当前系统时间（答案）"><a href="#获取当前系统时间（答案）" class="headerlink" title="获取当前系统时间（答案）"></a>获取当前系统时间（答案）</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML">万鹏:<br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>获取当前系统时间<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">			<span class="hljs-selector-tag">div</span>&#123;</span><br><span class="language-css">				<span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">				<span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">				<span class="hljs-attribute">background-color</span>: black;</span><br><span class="language-css">				<span class="hljs-attribute">border-radius</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">				<span class="hljs-attribute">color</span>: yellow;</span><br><span class="language-css">				<span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">				<span class="hljs-attribute">line-height</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">				<span class="hljs-attribute">font-size</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">			&#125;</span><br><span class="language-css">		</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;div1&quot;</span>&gt;</span>00:00:00<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;stop()&quot;</span> &gt;</span>暂停<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;start()&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn1&quot;</span>&gt;</span>开始<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">			<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;btn1&quot;</span>).<span class="hljs-property">disabled</span>=<span class="hljs-string">&quot;false&quot;</span>;</span><br><span class="language-javascript">			<span class="hljs-keyword">function</span> <span class="hljs-title function_">timeChange</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">				<span class="hljs-keyword">var</span> myDate=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();</span><br><span class="language-javascript">				<span class="hljs-keyword">var</span> hour=myDate.<span class="hljs-title function_">getHours</span>();</span><br><span class="language-javascript">				<span class="hljs-keyword">var</span> minute=myDate.<span class="hljs-title function_">getMinutes</span>();</span><br><span class="language-javascript">				<span class="hljs-keyword">var</span> second=myDate.<span class="hljs-title function_">getSeconds</span>();</span><br><span class="language-javascript">				<span class="hljs-keyword">if</span>(hour&lt;<span class="hljs-number">10</span>)&#123;</span><br><span class="language-javascript">					hour=<span class="hljs-string">&quot;0&quot;</span>+hour;</span><br><span class="language-javascript">				&#125;</span><br><span class="language-javascript">				<span class="hljs-keyword">if</span>(minute&lt;<span class="hljs-number">10</span>)&#123;</span><br><span class="language-javascript">					minute=<span class="hljs-string">&quot;0&quot;</span>+minute;</span><br><span class="language-javascript">				&#125;</span><br><span class="language-javascript">				<span class="hljs-keyword">if</span>(second&lt;<span class="hljs-number">10</span>)&#123;</span><br><span class="language-javascript">					second=<span class="hljs-string">&quot;0&quot;</span>+second;</span><br><span class="language-javascript">				&#125;</span><br><span class="language-javascript">				<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;div1&quot;</span>).<span class="hljs-property">innerText</span>=hour+<span class="hljs-string">&quot;:&quot;</span>+minute+<span class="hljs-string">&quot;:&quot;</span>+second;</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">			<span class="hljs-keyword">var</span> timer=<span class="hljs-variable language_">window</span>.<span class="hljs-built_in">setInterval</span>(timeChange,<span class="hljs-number">1000</span>);</span><br><span class="language-javascript">			<span class="hljs-keyword">function</span> <span class="hljs-title function_">stop</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">				<span class="hljs-variable language_">window</span>.<span class="hljs-built_in">clearInterval</span>(timer);</span><br><span class="language-javascript">				<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;btn1&quot;</span>).<span class="hljs-property">disabled</span>=<span class="hljs-string">&quot;&quot;</span>;</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">			<span class="hljs-keyword">function</span> <span class="hljs-title function_">start</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">				timer=<span class="hljs-variable language_">window</span>.<span class="hljs-built_in">setInterval</span>(timeChange,<span class="hljs-number">1000</span>);</span><br><span class="language-javascript">			&#125;</span><br><span class="language-javascript">			</span><br><span class="language-javascript">		</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>PS:2022年9月27日00点23分完毕,其实四天前就完事了，不小心鸽了&#x3D; &#x3D;</p>
]]></content>
      <categories>
        <category>WebFrontend</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>html</tag>
        <tag>css</tag>
        <tag>office</tag>
      </tags>
  </entry>
  <entry>
    <title>js懒加载</title>
    <url>/2022/08/26/WebFrontend/JavaScript/js%E6%87%92%E5%8A%A0%E8%BD%BD/</url>
    <content><![CDATA[<h2 id="什么是懒加载"><a href="#什么是懒加载" class="headerlink" title="什么是懒加载"></a>什么是懒加载</h2><p>图片懒加载就是延迟加载，因为浏览器可视范围是有限的，所以网页的内容都是需要进行滚动才能完成浏览，既然要滚动到网页下面才能浏览到看不见的图片。</p>
<p>第一个方法：事件监听</p>
<p>监听scroll这个事件，鼠标滚动就触发，因此我们需要知道两个参数。首先是窗口显示区的高度<code>window.innerHeight</code>,以及图片到视窗上边的距离（高度）<code>getBoundingClientRect().top</code>。</p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220826223317761.png" alt="image-20220826223317761"></p>
<p>如果图片还未能看见，也就是说图片距离视窗的距离大于窗口显示区的高度。</p>
<p>如果图片能看见，也就是说图片距离视窗的距离小于窗口显示区的高度。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>未遭拒绝的成功决不会长久。<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>把脾气拿出来，那叫本能；把脾气压回去，才叫本事。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>人只要不失去方向，就不会失去自我。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>人们痛恨的不是改变，而是被改变。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>昨日的成功经验与辉煌可能是明天成功的阻碍。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>对于幸运者来说，一生都是短暂的；对于不幸者来说，一夜都是漫长的。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>不要着急，不要害怕，一步一个脚印，踩出自我的阳关大道。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>你说那里有你的梦想，你说只要你足够努力就能成功。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>只要是辛勤的蜜蜂，在生活的广阔原野里，到处都能够找到蜜源。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>拼命去争取成功，但不要期望一定会成功。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这个社会，是赢家通吃，输者一无所有，社会，永远都是只以成败论英雄。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>生命的多少用时间计算，生命的价值用贡献计算。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>愿我们每个人都能深谙其道，也但愿我们每个人有时也都能忍耐一下。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>把脾气拿出来，那叫本能；把脾气压回去，才叫本事。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>人只要不失去方向，就不会失去自我。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>人们痛恨的不是改变，而是被改变。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>昨日的成功经验与辉煌可能是明天成功的阻碍。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>对于幸运者来说，一生都是短暂的；对于不幸者来说，一夜都是漫长的。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>不要着急，不要害怕，一步一个脚印，踩出自我的阳关大道。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>你说那里有你的梦想，你说只要你足够努力就能成功。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>只要是辛勤的蜜蜂，在生活的广阔原野里，到处都能够找到蜜源。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>拼命去争取成功，但不要期望一定会成功。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这个社会，是赢家通吃，输者一无所有，社会，永远都是只以成败论英雄。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>生命的多少用时间计算，生命的价值用贡献计算。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>愿我们每个人都能深谙其道，也但愿我们每个人有时也都能忍耐一下。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>把脾气拿出来，那叫本能；把脾气压回去，才叫本事。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>人只要不失去方向，就不会失去自我。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>人们痛恨的不是改变，而是被改变。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>昨日的成功经验与辉煌可能是明天成功的阻碍。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>对于幸运者来说，一生都是短暂的；对于不幸者来说，一夜都是漫长的。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>不要着急，不要害怕，一步一个脚印，踩出自我的阳关大道。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>你说那里有你的梦想，你说只要你足够努力就能成功。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>只要是辛勤的蜜蜂，在生活的广阔原野里，到处都能够找到蜜源。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>拼命去争取成功，但不要期望一定会成功。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这个社会，是赢家通吃，输者一无所有，社会，永远都是只以成败论英雄。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>生命的多少用时间计算，生命的价值用贡献计算。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>愿我们每个人都能深谙其道，也但愿我们每个人有时也都能忍耐一下。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">data-src</span>=<span class="hljs-string">&quot;img/1.webp&quot;</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">data-src</span>=<span class="hljs-string">&quot;img/2.webp&quot;</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">data-src</span>=<span class="hljs-string">&quot;img/3.webp&quot;</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">			<span class="hljs-keyword">const</span> images = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;img&#x27;</span>); <span class="hljs-comment">//获取所有image标签</span></span><br><span class="language-javascript">			<span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;scroll&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123; <span class="hljs-comment">//滚动事件</span></span><br><span class="language-javascript">				<span class="hljs-comment">//判断每张图片的位置是否出现在可视区域，使用forEach来进行遍历</span></span><br><span class="language-javascript">				images.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">image</span> =&gt;</span> &#123;</span><br><span class="language-javascript">					<span class="hljs-comment">//每次遍历的时候我们都获取每张图片到顶部的距离,并且进行if判断</span></span><br><span class="language-javascript">					<span class="hljs-keyword">const</span> imageTop = image.<span class="hljs-title function_">getBoundingClientRect</span>().<span class="hljs-property">top</span>;</span><br><span class="language-javascript">					<span class="hljs-comment">//如果图片距离视窗顶部的距离小于窗口显示区的高度，使得图片可以进行加载</span></span><br><span class="language-javascript">					<span class="hljs-keyword">if</span>(imageTop &lt; <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>)&#123;</span><br><span class="language-javascript">						<span class="hljs-comment">//html部分：如果用户没滚到指定的位置，我们需要不加载图片，简单的方式使用自定义属性，使用data-*来进行表示</span></span><br><span class="language-javascript">						<span class="hljs-comment">//html部分：因此我们可以把src属性改为data-src，这样就相当于不知道要在哪里下载这些图片了</span></span><br><span class="language-javascript">						<span class="hljs-keyword">const</span> data_src = image.<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&#x27;data-src&#x27;</span>)<span class="hljs-comment">//获取刚刚自定义属性</span></span><br><span class="language-javascript">						<span class="hljs-comment">//然后把这个自定义属性赋值给原本的src属性</span></span><br><span class="language-javascript">						image.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;src&#x27;</span>, data_src);</span><br><span class="language-javascript">					&#125;;</span><br><span class="language-javascript">					<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;scroll触发&#x27;</span>);</span><br><span class="language-javascript">				&#125;);</span><br><span class="language-javascript">			&#125;);</span><br><span class="language-javascript">		</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>我们打开控制台的Network选项，并勾选disable cache，也就是禁止缓存，然后是Fast 3G，也就是比较慢的网络环境来测试恶略的网络环境</p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220826233439021.png" alt="image-20220826233439021"></p>
<p>现在我们看到加载内容里面没有图片，因为图片还没有出现在可视范围，当我们滚到图片区域，可以看到图片开始进行在加载了，也基本实现了懒加载的功能</p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220826233649891.png" alt="image-20220826233649891"></p>
<p>虽然实现了懒加载，但是从控制台查看发现滚动事件触发了相当多次，页面加载很多内容就会导致任务的堆积，即使图片已经加载了还是会不断触发事件，非常消耗资源。因此目前最推荐使用的方法还是IntersectionObservers。</p>
<p>什么是IntersectionObservers？</p>
<p>IntersectionObservers（交叉观察）也就是目标元素和可视化窗口会产生交叉区域。IntersectionObservers是浏览器提供的构造函数，我们可以直接拿来使用（部分浏览器不兼容）。</p>
<p>既然是构造函数，所以需要new一个实例，我们可以用observer来表示实例，observer实例可以理解为一个用于观察的实例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> observer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntersectionObservers</span><br></code></pre></td></tr></table></figure>

<p>比如把observer实例想象为一个拿着望远镜的人，当这个人拿起望远镜就是进行观察。拿起望远镜就是使用了观察这个动作，也可以说是方法。我们就用observer.observe(DOM节点)来表示，具体要观察哪个DOM节点就在括号里面填写就行了。</p>
<p>当我们不用望远镜观察的时候，也就是一个取消的动作，一个取消的方法，就用observer.unobserve(DOM节点)来表示,这样我们就不用进行不断观察，因为图片已经被加载出来就没有必要观察了，实例可以进行开始和结束观察DOM节点,但是我们在观察到目标DOM节点的时候需要进行相应的动作，一般来说我们就需要函数来封装这些动作。</p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220827000108608.png" alt="image-20220827000108608"></p>
<p>为此IntersectionObservers接收两个参数；第一个参数是一个回调函数，既然是回调函数就需要触发条件然后来执行的，这个回调函数一般触发两次，目标元素能看见触发一次，看不见又触发一次，有了这些基本概念就可以进行代码操作了；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> images = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;img&#x27;</span>); <span class="hljs-comment">//获取所有image标签</span><br>			<span class="hljs-keyword">const</span> <span class="hljs-title function_">callback</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>				<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;看见了触发，看不见了再触发&#x27;</span>)<br>			&#125;;<br>			<span class="hljs-comment">//使用IntersectionObserver来创建一个实例，并且传入参数callback</span><br>			<span class="hljs-keyword">const</span> observer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntersectionObserver</span>(callback);<br>			images.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">image</span> =&gt;</span>&#123;<br>				<span class="hljs-comment">//使用forEach进行遍历,在每次循环的时候使用observer实例的observe方法来观察每一个img节点</span><br>				observer.<span class="hljs-title function_">observe</span>(image);<br>			&#125; );<br></code></pre></td></tr></table></figure>

<p>现在我们在控制台试着上下滚动，因为没设置显示图片但是预留了图片的区域，每次进入或者离开图片区域都会触发这个回调函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> images = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;img&#x27;</span>); <span class="hljs-comment">//获取所有image标签</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">callback</span> = entries =&gt; &#123;<br>	<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(entries)<br>&#125;;<br></code></pre></td></tr></table></figure>

<p>回调函是接收一个参数的，这个参数是一个数组。我们用entries来表示这个数组，并且在控制台输出entries，因为有三张图片，所以数组的长度为3；</p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220827001823181.png" alt="image-20220827001823181"></p>
<p>既然是数组我们依旧需要进行遍历，使用forEach来进行遍历，并且输出每一次触发的细节。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">callback</span> = entries =&gt; &#123;<br>    entries.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">entry</span> =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(entry);<br>    &#125;);<br>&#125;;<br></code></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220827002312091.png" alt="image-20220827002312091"></p>
<p>这一次我们重点看一看数组里面的isIntersecting属性，从字面意思来看就是”是否交叉“，也就是是否进行到可视区域。还没滚动之前是false，滚动到图片区域isIntersecting属性就变成了true，有这个元素我们就可以判断该次触发回调函数时是否已经观察到了图片，从中可以看到控制台每次触发了三次回调函数。</p>
<p>可以使用target属性查看目标元素</p>
<p><a href="https://www.bilibili.com/video/BV1FU4y157Li?spm_id_from=333.337.search-card.all.click&vd_source=1272b02e7a60d7fb8d81dfcdf529184e">https://www.bilibili.com/video/BV1FU4y157Li?spm_id_from=333.337.search-card.all.click&amp;vd_source=1272b02e7a60d7fb8d81dfcdf529184e</a></p>
]]></content>
      <categories>
        <category>WebFrontend</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>npm 包管理器</title>
    <url>/2023/04/18/WebFrontend/Node.js/npm%20%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8/</url>
    <content><![CDATA[<h3 id="包-package"><a href="#包-package" class="headerlink" title="包 package"></a>包 package</h3><ul>
<li>CommonJS的包规范允许我们将一组相关的模块组合到一起，形成一组完整的工具。</li>
<li>CommonJS的包规范由<strong>包结构</strong>和<strong>包描述文件</strong>两个部分构成。</li>
<li>包结构：用于组织包中的各种文件</li>
<li>包描述文件：描述包的相关信息，以供外部读取分析</li>
</ul>
<h3 id="NPM-Node-Package-Manager"><a href="#NPM-Node-Package-Manager" class="headerlink" title="NPM(Node Package Manager)"></a>NPM(Node Package Manager)</h3><ul>
<li>CommonJS包规范是理论，NPM是其中一种实践。</li>
<li>对于Node而言，NPM帮助其完成了第三方模块的发布、安装和依赖等。借助NPM，Node与第三方模块之间形成了很好的一个生态系统。</li>
</ul>
<h3 id="NVM安装-包版本控制工具"><a href="#NVM安装-包版本控制工具" class="headerlink" title="NVM安装 (包版本控制工具)"></a>NVM安装 (包版本控制工具)</h3><p>第一步下载nvm</p>
<p>然后配置nvm的安装位置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">root: D:\64\nvm<br>path: D:\system64\nodejs<br>node_mirror: https://npm.taobao.org/mirrors/node/<br>npm_mirror: https://npm.taobao.org/mirrors/npm/<br><br></code></pre></td></tr></table></figure>

<h3 id="NPM命令"><a href="#NPM命令" class="headerlink" title="NPM命令"></a>NPM命令</h3><p>查看npm版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">npm -v<br></code></pre></td></tr></table></figure>

<p>查看所有模块的版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">npm version<br></code></pre></td></tr></table></figure>



<p>帮助说明</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">npm<br></code></pre></td></tr></table></figure>

<p>搜索模块包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">npm search 包名<br></code></pre></td></tr></table></figure>

<p>在当前目录安装包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">npm install 包名<br>npm i 包名<br></code></pre></td></tr></table></figure>

<p>下载当前项目所依赖的包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">npm install<br></code></pre></td></tr></table></figure>



<p>在当前目录安装包并添加到依赖中</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">npm install 包名 --save 安装包并添加到依赖中<br></code></pre></td></tr></table></figure>

<p>删除当前目录包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">npm remove / r 包名<br></code></pre></td></tr></table></figure>

<p>全局模式安装包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">npm install 包名 -g<br></code></pre></td></tr></table></figure>



<h3 id="常用包"><a href="#常用包" class="headerlink" title="常用包"></a>常用包</h3><h4 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">pnpm i @rollup/plugin-inject jquery<br></code></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">npm i --save-dev @types/jquery<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>WebFrontend</category>
      </categories>
      <tags>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>js解构赋值</title>
    <url>/2022/08/18/WebFrontend/JavaScript/js%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/</url>
    <content><![CDATA[<h1 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h1><p>结构赋值:ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构</p>
<h2 id="一-数组的结构赋值"><a href="#一-数组的结构赋值" class="headerlink" title="一. 数组的结构赋值"></a>一. 数组的结构赋值</h2><h3 id="1-理解解构赋值"><a href="#1-理解解构赋值" class="headerlink" title="1. 理解解构赋值"></a>1. 理解解构赋值</h3><p>非常有用,特别在数据交互,ajax的时候,非常完美.</p>
<p>在ES 5中,我们想定义多个变量,同时各这些变量赋值我们可以多次声明,也可以一次声明</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 多次声明</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">12</span>;<br><span class="hljs-keyword">var</span> b = <span class="hljs-number">5</span>;<br><span class="hljs-keyword">var</span> c = <span class="hljs-number">6</span>;<br><br><span class="hljs-comment">// 一次声明过个变量</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">12</span>,<br>	b = <span class="hljs-number">5</span>,<br>	c = <span class="hljs-number">6</span>;<br></code></pre></td></tr></table></figure>

<p>在ES 6中,我们也可以采用一次声明多个变量</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = <span class="hljs-number">12</span>,<br>	b = <span class="hljs-number">5</span>,<br>	c = <span class="hljs-number">6</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a,b,b);<br></code></pre></td></tr></table></figure>

<p>但是你会发现很散,不够整齐划一,有的时候 我们需要把值存在数组中.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">12</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>];<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr[<span class="hljs-number">0</span>],arr[<span class="hljs-number">1</span>],arr[<span class="hljs-number">2</span>])<br><span class="hljs-comment">// 你会发现不好用,还不如console a,b,c呢</span><br><span class="hljs-comment">// 我就想console.log(a,b,c);怎么办</span><br><br><span class="hljs-keyword">let</span> [a,b,c] = [<span class="hljs-number">12</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>];  <span class="hljs-comment">//右边是你的数据,左边是你的结构</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a,b,c);    <span class="hljs-comment">// 12,5,6</span><br></code></pre></td></tr></table></figure>

<p>这就是解构赋值.</p>
<p>本质上，这种写法属于“模式匹配”，只要等号两边的模式相同，左边的变量就会被赋予对应的值。</p>
<blockquote>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h4><ol>
<li>左右两边,结构格式要保持一致</li>
</ol>
</blockquote>
<p>比如:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> [a,b,c] = [<span class="hljs-number">12</span>,[<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]];  <span class="hljs-comment">//右边是你的数据,左边是你的解构</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a,b,c);   <br><span class="hljs-comment">// 此时结构不对,a就是12 b是一个数组[5,6], c没有解构到值就是undefined</span><br><br><span class="hljs-comment">//如果希望数据对应,则需要结构一样</span><br><span class="hljs-keyword">let</span> [a,[b,c]] = [<span class="hljs-number">12</span>,[<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]];<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a,b,c);   <span class="hljs-comment">//12 5 6</span><br><br><span class="hljs-keyword">let</span> [foo, [[bar], baz]] = [<span class="hljs-number">1</span>, [[<span class="hljs-number">2</span>], <span class="hljs-number">3</span>]];<br>foo <span class="hljs-comment">// 1</span><br>bar <span class="hljs-comment">// 2</span><br>baz <span class="hljs-comment">// 3</span><br><br><span class="hljs-keyword">let</span> [ , , third] = [<span class="hljs-string">&quot;foo&quot;</span>, <span class="hljs-string">&quot;bar&quot;</span>, <span class="hljs-string">&quot;baz&quot;</span>];<br>third <span class="hljs-comment">// &quot;baz&quot;</span><br><br><span class="hljs-keyword">let</span> [x, , y] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>x <span class="hljs-comment">// 1</span><br>y <span class="hljs-comment">// 3</span><br></code></pre></td></tr></table></figure>

<h3 id="2-不成功的解构赋值"><a href="#2-不成功的解构赋值" class="headerlink" title="2. 不成功的解构赋值"></a>2. 不成功的解构赋值</h3><p>如果解构不成功，变量的值就等于<code>undefined</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> [foo] = [];<br><span class="hljs-keyword">let</span> [bar, foo] = [<span class="hljs-number">1</span>];<br><span class="hljs-comment">//foo 都是undefined</span><br></code></pre></td></tr></table></figure>

<p>需要被赋值的数量少于接收值的变量</p>
<h3 id="3-不完全解构"><a href="#3-不完全解构" class="headerlink" title="3. 不完全解构"></a>3. 不完全解构</h3><p>另一种情况是不完全解构，即等号左边的模式，只匹配一部分的等号右边的数组。这种情况下，解构依然可以成功。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> [x, y] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>x <span class="hljs-comment">// 1</span><br>y <span class="hljs-comment">// 2</span><br><br><span class="hljs-keyword">let</span> [a, [b], d] = [<span class="hljs-number">1</span>, [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-number">4</span>];<br>a <span class="hljs-comment">// 1</span><br>b <span class="hljs-comment">// 2</span><br>d <span class="hljs-comment">// 4</span><br><br><span class="hljs-comment">//上面两个例子，都属于不完全解构，但是可以成功。</span><br></code></pre></td></tr></table></figure>

<p>简单理解,就是要被赋值的值数量多于接收值变量的数量</p>
<h3 id="4-如果模式不匹配-那么会报错"><a href="#4-如果模式不匹配-那么会报错" class="headerlink" title="4. 如果模式不匹配,那么会报错"></a>4. 如果模式不匹配,那么会报错</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 报错</span><br><span class="hljs-keyword">let</span> [foo] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">let</span> [foo] = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">let</span> [foo] = <span class="hljs-title class_">NaN</span>;<br><span class="hljs-keyword">let</span> [foo] = <span class="hljs-literal">undefined</span>;<br><span class="hljs-keyword">let</span> [foo] = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">let</span> [foo] = &#123;&#125;;<br></code></pre></td></tr></table></figure>

<h3 id="5-默认值"><a href="#5-默认值" class="headerlink" title="5. 默认值"></a>5. 默认值</h3><p>我们刚说过,我们如果定义的变量比较多,而又没有给这个变量赋值,那么这个变量就是undefined,但是有的时候我们不希望他是undefined,我们希望他是一个值</p>
<p>解构赋值允许指定默认值。</p>
<p>正常靠谱的后台都会给值,但是就怕不靠谱的后台,怎么办,所有我想要定义一个默认值,后台有用后台的值,没有,用默认值,</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> [a,b,c = <span class="hljs-string">&quot;暂无数据&quot;</span>] = [<span class="hljs-string">&quot;aa&quot;</span>,<span class="hljs-string">&quot;bb&quot;</span>];  <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a,b,c);    <span class="hljs-comment">//aa bb 暂无数据</span><br><span class="hljs-comment">// 发现此时c就是默认值&quot;暂无数据&quot;</span><br><br><span class="hljs-comment">// 如果有值,就使用后台的值</span><br><span class="hljs-keyword">let</span> [a,b,c = <span class="hljs-string">&quot;暂无数据&quot;</span>] = [<span class="hljs-string">&quot;aa&quot;</span>,<span class="hljs-string">&quot;bb&quot;</span>,<span class="hljs-string">&quot;cc&quot;</span>];  <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a,b,c);    <span class="hljs-comment">// aa bb cc</span><br><br><span class="hljs-comment">// 如果后台穿过来的是undefined,还是表示没有值,用默认值,</span><br><span class="hljs-keyword">let</span> [a,b,c = <span class="hljs-string">&quot;暂无数据&quot;</span>] = [<span class="hljs-string">&quot;aa&quot;</span>,<span class="hljs-string">&quot;bb&quot;</span>,<span class="hljs-literal">undefined</span>];  <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a,b,c);    <span class="hljs-comment">//aa bb 暂无数据</span><br><br><span class="hljs-comment">// 如果后台传过来的是一个null,表示有值,null表示一个空对象</span><br><span class="hljs-keyword">let</span> [a,b,c = <span class="hljs-string">&quot;暂无数据&quot;</span>] = [<span class="hljs-string">&quot;aa&quot;</span>,<span class="hljs-string">&quot;bb&quot;</span>,<span class="hljs-literal">null</span>];  <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a,b,c);    <span class="hljs-comment">//aa bb null</span><br></code></pre></td></tr></table></figure>

<p>注意，ES6 内部使用严格相等运算符（<code>===</code>），判断一个位置是否有值。所以，如果一个数组成员不严格等于<code>undefined</code>，默认值是不会生效的。</p>
<h4 id="5-1-如果默认值是一个表达式"><a href="#5-1-如果默认值是一个表达式" class="headerlink" title="5.1 如果默认值是一个表达式"></a>5.1 如果默认值是一个表达式</h4><p>如果默认值是一个表达式，那么这个表达式是惰性求值的，即只有在用到的时候，才会求值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;aaa&#x27;</span>);<br>&#125;<br><br><span class="hljs-keyword">let</span> [x = <span class="hljs-title function_">f</span>()] = [<span class="hljs-number">1</span>];<br><span class="hljs-comment">//等价于</span><br><span class="hljs-keyword">let</span> x;<br><span class="hljs-keyword">if</span> ([<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] === <span class="hljs-literal">undefined</span>) &#123;<br>  x = <span class="hljs-title function_">f</span>();<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  x = [<span class="hljs-number">1</span>][<span class="hljs-number">0</span>];<br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="5-2-默认值可以引用解构赋值的其他变量"><a href="#5-2-默认值可以引用解构赋值的其他变量" class="headerlink" title="5.2 默认值可以引用解构赋值的其他变量,"></a>5.2 默认值可以引用解构赋值的其他变量,</h4><p>前提是该变量必须是已经声明的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> [x = <span class="hljs-number">1</span>, y = x] = [];     <span class="hljs-comment">// x=1; y=1</span><br><span class="hljs-keyword">let</span> [x = <span class="hljs-number">1</span>, y = x] = [<span class="hljs-number">2</span>];    <span class="hljs-comment">// x=2; y=2</span><br><span class="hljs-keyword">let</span> [x = <span class="hljs-number">1</span>, y = x] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]; <span class="hljs-comment">// x=1; y=2</span><br><span class="hljs-keyword">let</span> [x = y, y = <span class="hljs-number">1</span>] = [];     <span class="hljs-comment">// ReferenceError</span><br><span class="hljs-comment">//上面最后一个表达式之所以会报错，是因为x用到默认值y时，y还没有声明</span><br></code></pre></td></tr></table></figure>

<h3 id="6-利用解构赋值交换两个值"><a href="#6-利用解构赋值交换两个值" class="headerlink" title="6. 利用解构赋值交换两个值"></a>6. 利用解构赋值交换两个值</h3><p>交换两个值的位置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = <span class="hljs-number">12</span>;<br><span class="hljs-keyword">let</span> b = <span class="hljs-number">5</span>;<br>[a,b] = [b,c];<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a,b);  <span class="hljs-comment">//5 12</span><br><span class="hljs-comment">// 这里利用数组有序的特性和解构赋值的方式,交互两个数</span><br></code></pre></td></tr></table></figure>

<h2 id="二-对象的结构赋值"><a href="#二-对象的结构赋值" class="headerlink" title="二. 对象的结构赋值"></a>二. 对象的结构赋值</h2><h3 id="1-对象解构赋值"><a href="#1-对象解构赋值" class="headerlink" title="1. 对象解构赋值"></a>1. 对象解构赋值</h3><p>解构不仅可以用于数组，还可以用于对象。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> json = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;wuwei&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;男&quot;</span><br>&#125;<br><span class="hljs-keyword">let</span> &#123;name,age,sex&#125; = json;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name,age,sex);  <span class="hljs-comment">// wuwei 18 男</span><br></code></pre></td></tr></table></figure>

<h3 id="2-对象解构赋值属性名必须相同"><a href="#2-对象解构赋值属性名必须相同" class="headerlink" title="2. 对象解构赋值属性名必须相同"></a>2. 对象解构赋值属性名必须相同</h3><p>对象的解构与数组有一个重要的不同。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 这里解构的属性名必须和对象的属性名相同,否则解不出来就全是undefined</span><br><br><span class="hljs-keyword">let</span> &#123;nam,ag,se&#125; = json;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(nam,ag,se);  <span class="hljs-comment">// undefined undefined undefined</span><br></code></pre></td></tr></table></figure>

<h3 id="3-自定义变量名与属性名不同"><a href="#3-自定义变量名与属性名不同" class="headerlink" title="3. 自定义变量名与属性名不同"></a>3. 自定义变量名与属性名不同</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 如果想自己定义更改属性名可以如下操作</span><br><br><span class="hljs-keyword">let</span> &#123;<span class="hljs-attr">name</span>:nam,<span class="hljs-attr">age</span>:ag,<span class="hljs-attr">sex</span>:se&#125; = json; <span class="hljs-comment">// 这样依然可以改属性名,并打印了解构的值</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(nam,ag,se);  <span class="hljs-comment">//wuwei 18 男</span><br></code></pre></td></tr></table></figure>

<p>也就是说，对象的解构赋值的内部机制，是先找到同名属性，然后再赋给对应的变量。真正被赋值的是后者，而不是前者。</p>
<p>实际上说明，对象的解构赋值是下面形式的简写</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> &#123;<span class="hljs-attr">name</span>:name,<span class="hljs-attr">age</span>:age,<span class="hljs-attr">sex</span>:sex&#125; = json; <span class="hljs-comment">// 这样依然可以改属性名,并打印了解构的值</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(nam,ag,se);  <span class="hljs-comment">//wuwei 18 男</span><br></code></pre></td></tr></table></figure>

<h3 id="4-解构可以用于嵌套结构"><a href="#4-解构可以用于嵌套结构" class="headerlink" title="4. 解构可以用于嵌套结构"></a>4. 解构可以用于嵌套结构</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> obj = &#123;<br>  <span class="hljs-attr">p</span>: [<br>    <span class="hljs-string">&#x27;Hello&#x27;</span>,<br>    &#123; <span class="hljs-attr">y</span>: <span class="hljs-string">&#x27;World&#x27;</span> &#125;<br>  ]<br>&#125;;<br><br><span class="hljs-keyword">let</span> &#123; <span class="hljs-attr">p</span>: [x, &#123; y &#125;] &#125; = obj;<br>x <span class="hljs-comment">// &quot;Hello&quot;</span><br>y <span class="hljs-comment">// &quot;World&quot;</span><br></code></pre></td></tr></table></figure>

<h3 id="5-对象的解构赋值也可以指定默认值"><a href="#5-对象的解构赋值也可以指定默认值" class="headerlink" title="5. 对象的解构赋值也可以指定默认值"></a>5. 对象的解构赋值也可以指定默认值</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> &#123;x = <span class="hljs-number">3</span>&#125; = &#123;&#125;;<br>x <span class="hljs-comment">// 3</span><br><br><span class="hljs-keyword">var</span> &#123;x, y = <span class="hljs-number">5</span>&#125; = &#123;<span class="hljs-attr">x</span>: <span class="hljs-number">1</span>&#125;;<br>x <span class="hljs-comment">// 1</span><br>y <span class="hljs-comment">// 5</span><br><br><span class="hljs-keyword">var</span> &#123;<span class="hljs-attr">x</span>: y = <span class="hljs-number">3</span>&#125; = &#123;&#125;;<br>y <span class="hljs-comment">// 3</span><br><br><span class="hljs-keyword">var</span> &#123;<span class="hljs-attr">x</span>: y = <span class="hljs-number">3</span>&#125; = &#123;<span class="hljs-attr">x</span>: <span class="hljs-number">5</span>&#125;;<br>y <span class="hljs-comment">// 5</span><br><br><span class="hljs-keyword">var</span> &#123; <span class="hljs-attr">message</span>: msg = <span class="hljs-string">&#x27;Something went wrong&#x27;</span> &#125; = &#123;&#125;;<br>msg <span class="hljs-comment">// &quot;Something went wrong&quot;</span><br></code></pre></td></tr></table></figure>

<p>默认值生效的条件是，对象的属性值严格等于<code>undefined</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> &#123;x = <span class="hljs-number">3</span>&#125; = &#123;<span class="hljs-attr">x</span>: <span class="hljs-literal">undefined</span>&#125;;<br>x <span class="hljs-comment">// 3</span><br><br><span class="hljs-keyword">var</span> &#123;x = <span class="hljs-number">3</span>&#125; = &#123;<span class="hljs-attr">x</span>: <span class="hljs-literal">null</span>&#125;;<br>x <span class="hljs-comment">// null</span><br></code></pre></td></tr></table></figure>

<h3 id="6-数组也可以按照对象的方式解构"><a href="#6-数组也可以按照对象的方式解构" class="headerlink" title="6. 数组也可以按照对象的方式解构"></a>6. 数组也可以按照对象的方式解构</h3><p>由于数组本质是特殊的对象，因此可以对数组进行对象属性的解构。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">let</span> &#123;<span class="hljs-number">0</span> : first, [arr.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>] : last&#125; = arr;<br>first <span class="hljs-comment">// 1</span><br>last <span class="hljs-comment">// 3</span><br></code></pre></td></tr></table></figure>

<h3 id="7-注意点"><a href="#7-注意点" class="headerlink" title="7. 注意点:"></a>7. 注意点:</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> &#123;a&#125; = &#123;a : <span class="hljs-string">&quot;apple&quot;</span>&#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);  <span class="hljs-comment">//apple</span><br><br><span class="hljs-comment">// 这么写没什么问题</span><br><br><span class="hljs-comment">// 但是有人喜欢先定义,先定义一个变量a,在去解构</span><br><span class="hljs-keyword">let</span> a; <br>&#123;a&#125; = &#123;a : <span class="hljs-string">&quot;apple&quot;</span>&#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);  <span class="hljs-comment">//报错</span><br><span class="hljs-comment">//Uncaught SyntaxError: Unexpected token =</span><br><span class="hljs-comment">// 你会发现报语法所处,因为 &#123;a&#125;是不是有块级作用域啊,=赋值就是有问题的</span><br><br><span class="hljs-comment">// 我们可以加括变成表达式</span><br><span class="hljs-keyword">let</span> a; <br>(&#123;a&#125; = &#123;a : <span class="hljs-string">&quot;apple&quot;</span>&#125;);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);  <span class="hljs-comment">//apple</span><br><br><span class="hljs-comment">// 发现这么写没任何问题,但是这么写的意义在哪里了,所有强烈不建议你们这么写</span><br></code></pre></td></tr></table></figure>

<p>因为这个花括号被当成解构,一旦用不好,就会被当成块作用域</p>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子:"></a>例子:</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getPos</span>(<span class="hljs-params"></span>)&#123;<br>	<span class="hljs-comment">//....</span><br>    <span class="hljs-keyword">return</span> &#123;<br>		<span class="hljs-attr">left</span>:<span class="hljs-number">10</span>,<br>        <span class="hljs-attr">bottom</span>:<span class="hljs-number">20</span><br>	&#125;<br>&#125;<br><span class="hljs-keyword">let</span> &#123;left,bottom&#125; = <span class="hljs-title function_">getPos</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(left,bottom);  <span class="hljs-comment">// 10, 20</span><br><br><span class="hljs-comment">// 这里不敢用top,因为全局的top会被当成window对象.所以这个时候就取名就显得格外重要</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getPos</span>(<span class="hljs-params"></span>)&#123;<br>	<span class="hljs-comment">//....</span><br>    <span class="hljs-keyword">return</span> &#123;<br>		<span class="hljs-attr">left</span>:<span class="hljs-number">10</span>,<br>        <span class="hljs-attr">top</span>:<span class="hljs-number">20</span><br>	&#125;<br>&#125;<br><span class="hljs-keyword">let</span> &#123;left,<span class="hljs-attr">top</span>:t&#125; = <span class="hljs-title function_">getPos</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(left,t); <span class="hljs-comment">//10 20</span><br><span class="hljs-comment">// 如果使用使用top,这里在全局环境下可以使用解构自己定义名字的方式</span><br></code></pre></td></tr></table></figure>

<h2 id="三-字符串的解构赋值"><a href="#三-字符串的解构赋值" class="headerlink" title="三. 字符串的解构赋值"></a>三. 字符串的解构赋值</h2><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> [a, b, c, d, e] = <span class="hljs-string">&#x27;hello&#x27;</span>;<br>a <span class="hljs-comment">// &quot;h&quot;</span><br>b <span class="hljs-comment">// &quot;e&quot;</span><br>c <span class="hljs-comment">// &quot;l&quot;</span><br>d <span class="hljs-comment">// &quot;l&quot;</span><br>e <span class="hljs-comment">// &quot;o&quot;</span><br></code></pre></td></tr></table></figure>

<p>字符串也可以看做是类数组,因为有length属性</p>
<p>类似数组的对象都有一个<code>length</code>属性，因此还可以对这个属性解构赋值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> &#123;length : len&#125; = <span class="hljs-string">&#x27;hello&#x27;</span>;<br>len <span class="hljs-comment">// 5</span><br></code></pre></td></tr></table></figure>

<p>说明类数组可以按照正常的数组和对象方式解构</p>
<h2 id="四-函数参数的解构赋值"><a href="#四-函数参数的解构赋值" class="headerlink" title="四.函数参数的解构赋值:"></a>四.函数参数的解构赋值:</h2><h3 id="1-函数参数的解构"><a href="#1-函数参数的解构" class="headerlink" title="1. 函数参数的解构"></a>1. 函数参数的解构</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">[a,b]</span>)&#123;<br>  <span class="hljs-keyword">return</span> a+b;<br>&#125;<br><span class="hljs-title function_">add</span>([<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])<span class="hljs-comment">//5</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">&#123;a,b&#125;</span>)&#123;<br>	<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a,b); <span class="hljs-comment">//1 2</span><br>&#125;<br><span class="hljs-title function_">fn</span>(&#123;<br>	<span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">b</span>: <span class="hljs-number">2</span><br>&#125;)<br></code></pre></td></tr></table></figure>

<h3 id="2-函数参数解构的默认值"><a href="#2-函数参数解构的默认值" class="headerlink" title="2. 函数参数解构的默认值"></a>2. 函数参数解构的默认值</h3><p>函数参数的解构也可以使用默认值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">move</span>(<span class="hljs-params">&#123;x = <span class="hljs-number">0</span>, y = <span class="hljs-number">0</span>&#125; = &#123;&#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> [x, y];<br>&#125;<br><br><span class="hljs-title function_">move</span>(&#123;<span class="hljs-attr">x</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">8</span>&#125;); <span class="hljs-comment">// [3, 8]</span><br><span class="hljs-title function_">move</span>(&#123;<span class="hljs-attr">x</span>: <span class="hljs-number">3</span>&#125;); <span class="hljs-comment">// [3, 0]</span><br><span class="hljs-title function_">move</span>(&#123;&#125;); <span class="hljs-comment">// [0, 0]</span><br><span class="hljs-title function_">move</span>(); <span class="hljs-comment">// [0, 0]</span><br></code></pre></td></tr></table></figure>

<h3 id="3-参数默认值的注意事项"><a href="#3-参数默认值的注意事项" class="headerlink" title="3. 参数默认值的注意事项"></a>3. 参数默认值的注意事项</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">move</span>(<span class="hljs-params">&#123;x, y&#125; = &#123; x: <span class="hljs-number">0</span>, y: <span class="hljs-number">0</span> &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> [x, y];<br>&#125;<br><br><span class="hljs-title function_">move</span>(&#123;<span class="hljs-attr">x</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">8</span>&#125;); <span class="hljs-comment">// [3, 8]</span><br><span class="hljs-title function_">move</span>(&#123;<span class="hljs-attr">x</span>: <span class="hljs-number">3</span>&#125;); <span class="hljs-comment">// [3, undefined]</span><br><span class="hljs-title function_">move</span>(&#123;&#125;); <span class="hljs-comment">// [undefined, undefined]</span><br><span class="hljs-title function_">move</span>(); <span class="hljs-comment">// [0, 0]</span><br></code></pre></td></tr></table></figure>

<p>上面代码是为函数<code>move</code>的参数指定默认值，而不是为变量<code>x</code>和<code>y</code>指定默认值，所以会得到与前一种写法不同的结果。</p>
<h2 id="五-数值和布尔值的解构赋值"><a href="#五-数值和布尔值的解构赋值" class="headerlink" title="五. 数值和布尔值的解构赋值"></a>五. 数值和布尔值的解构赋值</h2><p>解构赋值时，如果等号右边是数值和布尔值，则会先转为对象。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> &#123;<span class="hljs-attr">toString</span>: s&#125; = <span class="hljs-number">123</span>;<br>s === <span class="hljs-title class_">Number</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span> <span class="hljs-comment">// true</span><br><br><span class="hljs-keyword">let</span> &#123;<span class="hljs-attr">toString</span>: s&#125; = <span class="hljs-literal">true</span>;<br>s === <span class="hljs-title class_">Boolean</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span> <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure>

<h2 id="六-关于圆括号的影响"><a href="#六-关于圆括号的影响" class="headerlink" title="六. 关于圆括号的影响"></a>六. 关于圆括号的影响</h2><p>解构赋值虽然很方便，但是解析起来并不容易。对于编译器来说，一个式子到底是模式，还是表达式，没有办法从一开始就知道，必须解析到（或解析不到）等号才能知道。</p>
<p>由此带来的问题是，如果模式中出现圆括号怎么处理。ES6 的规则是，只要有可能导致解构的歧义，就不得使用圆括号。</p>
<p>但是，这条规则实际上不那么容易辨别，处理起来相当麻烦。因此，建议只要有可能，就不要在模式中放置圆括号。</p>
<h3 id="1-不能使用圆括号的情况"><a href="#1-不能使用圆括号的情况" class="headerlink" title="1. 不能使用圆括号的情况"></a>1. 不能使用圆括号的情况</h3><p>以下三种解构赋值不得使用圆括号。</p>
<h4 id="1-1-变量声明语句"><a href="#1-1-变量声明语句" class="headerlink" title="1.1 变量声明语句"></a>1.1 变量声明语句</h4><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 全部报错</span><br><span class="hljs-keyword">let</span> [(a)] = [<span class="hljs-number">1</span>];<br><br><span class="hljs-keyword">let</span> &#123;<span class="hljs-attr">x</span>: (c)&#125; = &#123;&#125;;<br><span class="hljs-keyword">let</span> (&#123;<span class="hljs-attr">x</span>: c&#125;) = &#123;&#125;;<br><span class="hljs-keyword">let</span> &#123;(<span class="hljs-attr">x</span>: c)&#125; = &#123;&#125;;<br><span class="hljs-keyword">let</span> &#123;(x): c&#125; = &#123;&#125;;<br><br><span class="hljs-keyword">let</span> &#123; <span class="hljs-attr">o</span>: (&#123; <span class="hljs-attr">p</span>: p &#125;) &#125; = &#123; <span class="hljs-attr">o</span>: &#123; <span class="hljs-attr">p</span>: <span class="hljs-number">2</span> &#125; &#125;;<br></code></pre></td></tr></table></figure>

<h4 id="1-2-函数的参数"><a href="#1-2-函数的参数" class="headerlink" title="1.2 函数的参数"></a>1.2 函数的参数</h4><p>函数参数也属于变量声明，因此不能带有圆括号。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 报错</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">[(z)]</span>) &#123; <span class="hljs-keyword">return</span> z; &#125;<br><span class="hljs-comment">// 报错</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">[z,(x)]</span>) &#123; <span class="hljs-keyword">return</span> x; &#125;<br></code></pre></td></tr></table></figure>

<h4 id="1-3-赋值语句的模式"><a href="#1-3-赋值语句的模式" class="headerlink" title="1.3 赋值语句的模式"></a>1.3 赋值语句的模式</h4><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 全部报错</span><br>(&#123; <span class="hljs-attr">p</span>: a &#125;) = &#123; <span class="hljs-attr">p</span>: <span class="hljs-number">42</span> &#125;;<br>([a]) = [<span class="hljs-number">5</span>];<br><span class="hljs-comment">//上面代码将整个模式放在圆括号之中，导致报错。</span><br><span class="hljs-comment">// 报错</span><br>[(&#123; <span class="hljs-attr">p</span>: a &#125;), &#123; <span class="hljs-attr">x</span>: c &#125;] = [&#123;&#125;, &#123;&#125;];<br></code></pre></td></tr></table></figure>

<h3 id="2-可以使用圆括号的情况"><a href="#2-可以使用圆括号的情况" class="headerlink" title="2. 可以使用圆括号的情况"></a>2. 可以使用圆括号的情况</h3><p>可以使用圆括号的情况只有一种：赋值语句的非模式部分，可以使用圆括号。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">[(b)] = [<span class="hljs-number">3</span>]; <span class="hljs-comment">// 正确</span><br>(&#123; <span class="hljs-attr">p</span>: (d) &#125; = &#123;&#125;); <span class="hljs-comment">// 正确</span><br>[(<span class="hljs-built_in">parseInt</span>.<span class="hljs-property">prop</span>)] = [<span class="hljs-number">3</span>]; <span class="hljs-comment">// 正确</span><br></code></pre></td></tr></table></figure>

<p>上面三行语句都可以正确执行，因为首先它们都是赋值语句，而不是声明语句；其次它们的圆括号都不属于模式的一部分。第一行语句中，模式是取数组的第一个成员，跟圆括号无关；第二行语句中，模式是<code>p</code>，而不是<code>d</code>；第三行语句与第一行语句的性质一致。</p>
<h2 id="七-解构的用途"><a href="#七-解构的用途" class="headerlink" title="七.解构的用途"></a>七.解构的用途</h2><ol>
<li>除了可以一次定义多个变量</li>
<li>还可以让函数返回多个值</li>
<li>可以方便地让函数的参数跟值对应起来</li>
<li>提取json数据</li>
<li>函数参数的默认值</li>
</ol>
<h2 id="八-函数默认值"><a href="#八-函数默认值" class="headerlink" title="八.函数默认值"></a>八.函数默认值</h2>]]></content>
      <categories>
        <category>WebFrontend</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>js基础语法</title>
    <url>/2022/08/09/WebFrontend/JavaScript/js%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="JavaScript简介"><a href="#JavaScript简介" class="headerlink" title="JavaScript简介"></a>JavaScript简介</h1><h2 id="什么是JavaScript"><a href="#什么是JavaScript" class="headerlink" title="什么是JavaScript"></a>什么是JavaScript</h2><p>前端 : 广义上就是所有用户界面都是前端, 狭义上就是网页上展示的内容</p>
<p>html : 构建页面的结构</p>
<p>css : 描述元素的展示效果</p>
<p>js : 响应用户行为, 交互等复杂操作</p>
<h2 id="JavaScript的发展历史"><a href="#JavaScript的发展历史" class="headerlink" title="JavaScript的发展历史"></a>JavaScript的发展历史</h2><ol>
<li>1990年欧洲核能研究院在互联网上发明了万维网（规范制定了html）</li>
<li>1992年美国超级电脑应用中心（NCSA）开发了人类历史上的第一个浏览器 <code>Mosaic</code> (浏览器风波)</li>
<li>1994年 <code>Netscape Navigator1.0</code> 版浏览器问世</li>
<li>1995年JavaScript 问世 &#x3D; <strong>布兰登 艾奇</strong> self c js的优秀之处就是他并非原创,他的原创并不优秀</li>
<li>1996年微软抢占市场 ie <code>Jscript</code></li>
<li>1997年JavaScript提交给了ECMA(欧洲计算机制造商协会) 制定了一个国际化的标准JavaScript进入标准化时代 ECMA-262发布</li>
<li>2009年 ECMAScript 5.0发布 &amp; node.js诞生 2008年的 浏览器引擎v8的诞生</li>
<li>2010年 Express 发布 &amp; angular发布 NPM、BackboneJS和RequireJS 诞生</li>
</ol>
<h2 id="JavaScript的特点"><a href="#JavaScript的特点" class="headerlink" title="JavaScript的特点"></a>JavaScript的特点</h2><ol>
<li>解释性的语言</li>
<li>动态语言(弱类型语言) let a &#x3D; 123 a &#x3D; ‘asdf’</li>
<li>语法结构 和 c 和 java 非常相似</li>
<li>基于原型的面向对象</li>
</ol>
<h2 id="JavaScript的运行环境"><a href="#JavaScript的运行环境" class="headerlink" title="JavaScript的运行环境"></a>JavaScript的运行环境</h2><p>运行在网页中, 在浏览器中运行,他是一个脚本语言, js是一个不需要编译就能运行的语言, 他是嵌套进了html在浏览器中运行的语言, 它不仅仅只可以在浏览器中运行 , 也可以在任何搭载js引擎的地方运行 ,</p>
<ul>
<li>V8 — chrome , opear edge</li>
<li>SpiderMonkey – firefox</li>
<li>还有一些代号 chakra 用于 ie</li>
</ul>
<h3 id="引擎的工作原理"><a href="#引擎的工作原理" class="headerlink" title="引擎的工作原理"></a>引擎的工作原理</h3><ol>
<li>引擎读取脚本</li>
<li>将脚本转换为机器语言</li>
<li>机器语言快速执行</li>
</ol>
<h2 id="js的组成部分"><a href="#js的组成部分" class="headerlink" title="js的组成部分"></a>js的组成部分</h2><ol>
<li>ECMScript : js的语法规范</li>
<li>DOM : 文档对象模型, 描述处理网页页面和接口, 操作页面中的元素</li>
<li>BOM : 浏览器对象模型, 提供了浏览器的操作的方法</li>
</ol>
<h2 id="为什么要学习JavaScript？"><a href="#为什么要学习JavaScript？" class="headerlink" title="为什么要学习JavaScript？"></a>为什么要学习JavaScript？</h2><p>js在网页中的优势</p>
<ul>
<li>与html&#x2F;css完美集成</li>
<li>简单的事情,简单的完成</li>
<li>被所有浏览器支持并且默认开启</li>
</ul>
<p>js是将这三件事完美结合到一起的<strong>唯一</strong>的浏览器技术</p>
<p>此外js还可以用于创建服务器和移动端的应用程序</p>
<h2 id="无可替代的js"><a href="#无可替代的js" class="headerlink" title="无可替代的js"></a>无可替代的js</h2><p>每个程序员都有自己的开发习惯和项目需求,对语言和有一定的要求, 所以市面上也会出现许多新的语言能来实现网页的脚本 , 但是这些语言在浏览器执行之前<strong>都会被编译成为js</strong></p>
<p>例如</p>
<ul>
<li>typeScript : 有更加严格的数据类型的js</li>
<li>coffeeScript</li>
<li>flow</li>
<li>dart</li>
<li>brython</li>
</ul>
<h2 id="js能做啥"><a href="#js能做啥" class="headerlink" title="js能做啥"></a>js能做啥</h2><blockquote>
<p>Atwood定律：“<strong>任何可以使用JavaScript来编写的应用，最终会由JavaScript编写</strong>。</p>
<p>根据JavaScript具备的语言特性，他能做的事情将超乎你的想象，</p>
</blockquote>
<h2 id="js能做啥-1"><a href="#js能做啥-1" class="headerlink" title="js能做啥"></a>js能做啥</h2><p><strong>前端领域</strong></p>
<ul>
<li>有dom 可以操作 html页面结构样式 ui动画</li>
<li>有bom 可以响应浏览器的事件，操作浏览器</li>
<li>根据dom实现的用户行为交互</li>
<li>前端数据的验证</li>
<li>前后端数据的交互 （ajax，axios）</li>
</ul>
<p><strong>后端领域</strong></p>
<blockquote>
<p>V8 JIT NodeJS 让JavaScript可以在服务端崭露头角，打破了JavaScript只能寄生在浏览器上的魔咒。CouchDB mongodb等基于JSON格式的NoSQL类型的数据库诞生，让JavaScript也可以在DB操作上大展身手。</p>
</blockquote>
<ul>
<li>web服务框架 express&#x2F;koa</li>
<li>数据库编写 mongodb</li>
<li>自动化构建领领域。gulp</li>
</ul>
<p><strong>手机端</strong></p>
<p><strong>桌面应用</strong></p>
<p><strong>图形&#x2F;游戏</strong></p>
<p><strong>嵌入式开发与iot开发</strong></p>
<h1 id="JS声明变量关键词"><a href="#JS声明变量关键词" class="headerlink" title="JS声明变量关键词"></a>JS声明变量关键词</h1><p>变量用于存储数据</p>
<p>需要先声明变量，才能使用</p>
<p>声明变量使用关键词主要有三个：<code>let、const、var</code></p>
<blockquote>
<p>var关键词是老版本（ES5）JS所使用，现在已经淘汰</p>
</blockquote>
<h2 id="let"><a href="#let" class="headerlink" title="let"></a>let</h2><p>let是新版本用于声明变量的关键词，<strong>let声明的变量为普通变量</strong></p>
<p>用法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span><br><br><span class="hljs-comment">// 或者</span><br><br><span class="hljs-keyword">let</span> a<br><br>a = <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>

<p>上述使用<code>let</code>声明一个变量，变量名为<code>a</code>，值为1</p>
<h2 id="变量的使用"><a href="#变量的使用" class="headerlink" title="变量的使用"></a>变量的使用</h2><p>正确用法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 先声明变量【此为注释】</span><br><span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span> <span class="hljs-comment">// 声明时进行赋值</span><br><br><span class="hljs-comment">// 后使用变量</span><br><span class="hljs-title function_">alert</span>(a) <span class="hljs-comment">// 此处浏览器弹窗：1</span><br></code></pre></td></tr></table></figure>

<p>上述代码也可以</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a <span class="hljs-comment">// let变量可以声明时不赋值</span><br><br>a = <span class="hljs-number">1</span> <span class="hljs-comment">// 对变量a进行赋值</span><br><br><span class="hljs-title function_">alert</span>(a) <span class="hljs-comment">// 弹窗：1</span><br></code></pre></td></tr></table></figure>

<p>错误用法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 此处先使用变量</span><br><span class="hljs-title function_">alert</span>(a) <span class="hljs-comment">// 此处会报错</span><br><span class="hljs-comment">// 后进行声明，为错误用法，因为在使用时，变量未被声明，所以会报错</span><br><span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>

<blockquote>
<p>结论：</p>
<p><strong>变量必须先声明后使用！！！</strong></p>
<p>先使用，后声明会报错</p>
</blockquote>
<h2 id="变量的声明"><a href="#变量的声明" class="headerlink" title="变量的声明"></a>变量的声明</h2><p><strong>在同一环境中（同一作用域内）所有变量名称不能冲突，否则报错</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span><br><br><span class="hljs-comment">// 此处为其他代码</span><br><br><span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span> <span class="hljs-comment">// 此处会报错</span><br></code></pre></td></tr></table></figure>

<blockquote>
<p>结论：</p>
<p><strong>变量禁止在同一作用域内重复声明</strong></p>
</blockquote>
<p><em>作用域的概念在后续章节进行讲解</em></p>
<h2 id="更改变量值"><a href="#更改变量值" class="headerlink" title="更改变量值"></a>更改变量值</h2><p>let声明的变量的值可以进行更改</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span><br><span class="hljs-title function_">alert</span>(a) <span class="hljs-comment">// 此处弹窗：1</span><br><br>a = <span class="hljs-number">2</span> <span class="hljs-comment">// 此处更改了变量a的值为2，后续再使用a时，值就是a</span><br><span class="hljs-title function_">alert</span>(a) <span class="hljs-comment">// 此处弹窗：2</span><br></code></pre></td></tr></table></figure>

<blockquote>
<p>结论：</p>
<p>更改已声明变量的值时，直接对变量赋值即可，无需写声明关键词</p>
</blockquote>
<h2 id="const"><a href="#const" class="headerlink" title="const"></a>const</h2><p><code>const</code>所声明的变量为<strong>常量</strong>，而非<strong>普通变量</strong></p>
<p>常量：常量是一种特殊的变量，该变量的值必须在声明时就设置，且后续无法进行更改。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> a = <span class="hljs-number">1</span> <span class="hljs-comment">// 声明常量a，值为1</span><br><br>a = <span class="hljs-number">2</span> <span class="hljs-comment">// 此处修改常量的值是违规操作，所以会报错</span><br></code></pre></td></tr></table></figure>

<p>除此之外，<code>const</code>常量的特性跟<code>let</code>变量一致。</p>
<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p>数据类型是字面含义，表示各种数据的类型。在任何语言中都存在数据类型，因为数据是各种各样的。</p>
<p>JavaScript主要包含8种数据类型，8种数据类型可以分为基础类型和引用型两个分类：</p>
<ul>
<li>基础型数据类型<ol>
<li>number 数字（包含整数和浮点数）</li>
<li>string 字符串</li>
<li>boolean 布尔值</li>
<li>undefined 未定义</li>
<li>null 空指针</li>
<li>symbol 符号</li>
<li>bigint 大整数</li>
</ol>
</li>
<li>引用型数据类型<ol>
<li>object 对象</li>
</ol>
</li>
</ul>
<p>通常可以使用<code>typeof</code>操作符查看数据类型，但是请注意，在检测<code>null</code>值时返回的不是null类型，而是object类型，这是一个特例。</p>
<h2 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h2><p>JavaScript不区分整数、浮点数等，统一都叫Number。<code>typeof 100</code> 得到 <code>&quot;number&quot;</code>。</p>
<ul>
<li><p>数值字面量</p>
<p><code>10、1.5、-20</code></p>
</li>
<li><p>浮点数精度问题</p>
<p><code>console.log(0.1+0.2);</code></p>
<p><code>console.log(0.7*100);</code></p>
<p>JavaScript中采用 <a href="https://zh.wikipedia.org/wiki/IEEE_754">IEEE 754 标准 (opens new window)</a>的 64 位双精度浮点数。数值的运行会先将数值转为二进制，而这种标准下小数可能会出现表示不全的情况，从而最终的结果出现误差。（有汇编基础的同学可以自行进一步了解）</p>
<p>如果为了得到相对准确的结果，一般会将小数转为整数之后再进行运行，最后除以倍数。例如：<code>console.log( (0.1*100+0.2*100)/100 );</code></p>
</li>
<li><p>数值范围</p>
<p>根据标准，64位浮点数的指数部分的长度是11个二进制位，意味着指数部分的最大值是2047（2的11次方减1）。也就是说，64位浮点数的指数部分的值最大为2047，分出一半表示负数，则 JavaScript 能够表示的数值范围为21024到2-1023（开区间），超出这个范围的数无法表示。</p>
<p>如果一个数大于等于2的1024次方，那么就会发生“正向溢出”，即 JavaScript 无法表示这么大的数，这时就会返回<code>Infinity</code>。相反，最大负数为 <code>-Infinity</code>。</p>
<p><code>Infinity</code> 和 <code>-Infinity</code> 也是数字的一种。</p>
</li>
<li><p>特殊值</p>
<p><code>NaN</code>是一个特殊的值，它的类型是<code>number</code>，表示一个损坏的数值，通常出现在<strong>有不能转换为数字的数据参与运算时</strong>产生。</p>
</li>
</ul>
<h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p>用来放一段文字。<code>typeof &quot;文字文字&quot;</code> 得到 <code>&quot;string&quot;</code>。</p>
<ul>
<li><p>字符串字面量</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-string">&quot;文字&quot;</span> <span class="hljs-comment">// 双引号</span><br><span class="hljs-string">&#x27;ababa&#x27;</span> <span class="hljs-comment">// 单引号</span><br><span class="hljs-string">`abcd`</span> <span class="hljs-comment">// 反引号</span><br></code></pre></td></tr></table></figure>

<p>三种引号都可以用来表示字符串数据。</p>
</li>
<li><p>转义字符</p>
<p>如果想在字符串使用引号文字：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(  <span class="hljs-string">&quot;It&#x27;s an apple.&quot;</span>  ); <span class="hljs-comment">//一种引号里面使用其他两种引号没有问题</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-string">&quot;John:\&quot;I love you.\&quot;&quot;</span> ); <span class="hljs-comment">//内部使用字面量相同的引号，则需要使用 \ 转义符号</span><br></code></pre></td></tr></table></figure>

<p>其他转义含义：</p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/2-1.png" alt="img"></p>
</li>
<li><p>字符串拼接</p>
<p>进行 <code>+</code> 运算时，两边任意一边的数据是字符串的话，则是拼接的功能</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;123&quot;</span> + <span class="hljs-string">&quot;4&quot;</span>); <span class="hljs-comment">//&quot;1234&quot;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;123&quot;</span> + <span class="hljs-number">4</span>); <span class="hljs-comment">//&quot;1234&quot;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;zzt&quot;</span> + <span class="hljs-string">&quot;666&quot;</span>); <span class="hljs-comment">//&quot;zzt666&quot;</span><br></code></pre></td></tr></table></figure></li>
</ul>
<h2 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h2><p>布尔值类型只有两个值：真<code>true</code> 和 假<code>false</code>。用于判断。</p>
<p><code>typeof true</code>得到<code>&quot;boolean&quot;</code>。</p>
<h2 id="Undefined"><a href="#Undefined" class="headerlink" title="Undefined"></a>Undefined</h2><p>未定义类型的值为<code>undefined</code>。</p>
<p>在变量没有被赋值时，默认值也为<code>undefined</code>。</p>
<p><code>typeof undefined</code>得到<code>&quot;undefined&quot;</code>。</p>
<h2 id="Null"><a href="#Null" class="headerlink" title="Null"></a>Null</h2><p><code>null</code> 和 <code>undefined</code> 意义很接近，都表示“没有”。<code>null</code>可以理解为一个“空”对象，但是并不占据内存空间。通常在一个变量即将在后续的逻辑中被赋予一个对象值，但是刚开始定义的时候不能确定到底是哪个对象值时，赋予它初始值<code>null</code>。</p>
<p><strong>注意：</strong><code>typeof null</code>得到<code>&quot;object&quot;</code>。</p>
<h2 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h2><blockquote>
<p>symbol是一种运用场景极少的数据类型，该类型数据在开发中，基本不会使用。所以了解即可</p>
</blockquote>
<p><strong>Symbol值不可以进行运算</strong></p>
<p>Symbol实际上是ES6引入的一种原始数据类型，用它来产生一个独一无二的值。在JS中，基础数据类型通常只要“长得一样”在判断相等时，就是<code>true</code>，而在某些特定场合下，我们可能会需要一些独一无二的值来保证程序正常运行，比如给对象创建属性时，不会覆盖已有属性的情况。此时就需要Symbol.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> s1 = <span class="hljs-title class_">Symbol</span>() <span class="hljs-comment">// 通过Symbol函数创建一个symbol数据</span><br><br><span class="hljs-keyword">let</span> s2 = <span class="hljs-title class_">Symbol</span>() <span class="hljs-comment">// 再创建一个</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s1) <span class="hljs-comment">// 输出结果：Symbol()</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s2) <span class="hljs-comment">// 输出结果：Symbol()</span><br><br><span class="hljs-comment">// 它们俩长得一样，但是却不相等</span><br>s1 == s2 <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure>

<p>结论：每次调用<code>Symbol()</code> 都会在程序中，创建一个独一无二的值</p>
<h2 id="BigInt"><a href="#BigInt" class="headerlink" title="BigInt"></a>BigInt</h2><blockquote>
<p>该数据类型是在ES2020版本才加入的，所以2020之前的浏览器环境是不支持的。</p>
</blockquote>
<p>JavaScript在数字上一直都很糟糕，因为在没有bigint类型之前，数字只能表示<code>-(2^53-1)</code>至 <code>2^53-1</code> 范围的值，即<code>Number.MIN_SAFE_INTEGER</code> 至<code>Number.MAX_SAFE_INTEGER</code>，超出这个范围的整数计算或者表示会丢失精度。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> num = <span class="hljs-title class_">Number</span>.<span class="hljs-property">MAX_SAFE_INTEGER</span>;  <span class="hljs-comment">// -&gt; 9007199254740991</span><br><br>num = num + <span class="hljs-number">1</span>; <span class="hljs-comment">// -&gt; 9007199254740992</span><br><br><span class="hljs-comment">// 再次加 +1 后无法正常运算</span><br>num = num + <span class="hljs-number">1</span>; <span class="hljs-comment">// -&gt; 9007199254740992</span><br><br><span class="hljs-comment">// 两个不同的值，却返回了true</span><br><span class="hljs-number">9007199254740992</span> === <span class="hljs-number">9007199254740993</span>  <span class="hljs-comment">// -&gt; true</span><br></code></pre></td></tr></table></figure>

<p>于是 BigInt 应运而生，<strong>它是第7个原始类型，可安全地进行大数整型计算</strong>。 你可以在BigInt上使用与普通数字相同的运算符，例如 +, -, &#x2F;, *, %等等。</p>
<p>创建 BigInt 类型的值也非常简单，只需要在数字后面加上 n 即可。例如，123 变为 123n。也可以使用全局方法 BigInt(value) 转化，入参 value 为数字或数字字符串。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> aNumber = <span class="hljs-number">111</span>;<br><span class="hljs-keyword">const</span> aBigInt = <span class="hljs-title class_">BigInt</span>(aNumber);<br>aBigInt === <span class="hljs-number">111n</span> <span class="hljs-comment">// true</span><br><span class="hljs-keyword">typeof</span> aBigInt === <span class="hljs-string">&#x27;bigint&#x27;</span> <span class="hljs-comment">// true</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-number">111</span> <span class="hljs-comment">// &quot;number&quot;</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-number">111n</span> <span class="hljs-comment">// &quot;bigint&quot;</span><br></code></pre></td></tr></table></figure>

<p>只要在数字末尾加上 n，就可以正确计算大数了：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-number">1234567890123456789n</span> * <span class="hljs-number">123n</span>;<br><span class="hljs-comment">// -&gt; 151851850485185185047n</span><br></code></pre></td></tr></table></figure>

<p>不过有一个问题，在大多数操作中，不能将 BigInt与Number混合使用。比较Number和 BigInt是可以的，但是不能把它们相加。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-number">1n</span> &lt; <span class="hljs-number">2</span> <br><span class="hljs-comment">// true</span><br><br><span class="hljs-number">1n</span> + <span class="hljs-number">2</span><br><span class="hljs-comment">// Uncaught TypeError: Cannot mix BigInt and other types, use explicit conversions</span><br></code></pre></td></tr></table></figure>

<p>BigInt的支持情况：</p>
<p><img src="https://user-gold-cdn.xitu.io/2020/1/18/16fb8c682a33ffd1?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p>
<h2 id="Object类型"><a href="#Object类型" class="headerlink" title="Object类型"></a>Object类型</h2><p>JavaScript中<code>object</code>类型包含的数据有很多，数组、普通对象、DOM节点、内置对象、函数等等都属于<code>obejct</code>类型。</p>
<ul>
<li><p>数组</p>
<p>一个数组中可以存放一组数据。</p>
<ul>
<li><p>取值使用 <code>[数字序号]</code> 下标，序号从0开始计数。取值超出序号最大值时，得到<code>undefined</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">10</span>,<span class="hljs-number">50</span>,<span class="hljs-literal">true</span>,<span class="hljs-string">&quot;Fly&quot;</span>];<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr[<span class="hljs-number">2</span>]); <span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr[<span class="hljs-number">6</span>]); <span class="hljs-comment">//undefined</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>数组中可以存放数组。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [<br>    <span class="hljs-number">10</span>,<br>    [<br>        <span class="hljs-string">&quot;夏栀&quot;</span>,<br>        <span class="hljs-string">&quot;锦鲤&quot;</span>,<br>        [<br>            <span class="hljs-literal">true</span>,<br>            <span class="hljs-literal">false</span><br>        ]<br>    ]<br>];<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr[<span class="hljs-number">0</span>]); <span class="hljs-comment">//10</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]); <span class="hljs-comment">//&quot;夏栀&quot;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr[<span class="hljs-number">2</span>][<span class="hljs-number">1</span>]); <span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>数组拥有 <code>length</code> 属性，可以得到数组存放的数据的个数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = [<span class="hljs-number">10</span>,<span class="hljs-number">20</span>];<br><span class="hljs-keyword">let</span> b = [<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>];<br><span class="hljs-keyword">let</span> c = [<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,,<span class="hljs-number">6</span>,];<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-property">length</span>); <span class="hljs-comment">//2</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b.<span class="hljs-property">length</span>); <span class="hljs-comment">//3</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(c.<span class="hljs-property">length</span>); <span class="hljs-comment">//4 最后一个,后面没有值的话，不算个数，中间的,之间即使没有数据也算个数</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>数组可以取值，可以修改值或者新增值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">4</span>,<span class="hljs-number">5</span>];<br>arr[<span class="hljs-number">0</span>] = <span class="hljs-number">44</span>;<br>arr[<span class="hljs-number">2</span>] = <span class="hljs-number">6</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr); <span class="hljs-comment">// [44,5,6]</span><br><br><span class="hljs-keyword">let</span> arr2 = [<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>];<br>arr2.<span class="hljs-property">length</span> = <span class="hljs-number">2</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr2); <span class="hljs-comment">//[7,8]</span><br></code></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>普通对象</p>
<ul>
<li><p>对象以<strong>键值对</strong>的形式存储数据。键也就是对象的属性，值就是一个具体的数据。</p>
<p>属性的命名规则和变量命名规则有点相似，但是属性名更宽松。属性名允许是数字，不规范的属性名字可以加<code>&quot; &quot;</code>变成一个正确的属性名。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> xz = &#123;<br>    name : <span class="hljs-string">&quot;夏栀&quot;</span>,<br>    <span class="hljs-string">&quot;age&quot;</span> : <span class="hljs-number">18</span>,    <span class="hljs-comment">//属性可以加 &quot;&quot; 类似字符串的写法，也可以不加</span><br>    <span class="hljs-string">&quot;a b c&quot;</span> : <span class="hljs-literal">true</span>, <span class="hljs-comment">//不规则的属性名，必须加 &quot;&quot;，不加会报错</span><br>    <span class="hljs-number">20</span> : <span class="hljs-literal">null</span> <span class="hljs-comment">//自然数数字可以充当属性名，不必加 &quot;&quot;</span><br>&#125;;<br></code></pre></td></tr></table></figure>
</li>
<li><p>取值时使用 <code>.</code> 操作符。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> xz = &#123;<br>    name : <span class="hljs-string">&quot;夏栀&quot;</span>,<br>    age : <span class="hljs-number">18</span>,<br>    marry : <span class="hljs-literal">false</span>,<br>    friends : [<span class="hljs-string">&quot;锦鲤&quot;</span>,<span class="hljs-string">&quot;思思&quot;</span>]<br>&#125;;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( xz.<span class="hljs-property">age</span> ); <span class="hljs-comment">//18</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( xz.<span class="hljs-property">friends</span>[<span class="hljs-number">0</span>] ); <span class="hljs-comment">//&quot;锦鲤&quot;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( xz.<span class="hljs-property">hobby</span> ); <span class="hljs-comment">//undefined</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>当属性是一个数据时，使用 <code>[]</code> 来取值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> xz = &#123;<br>    name : <span class="hljs-string">&quot;夏栀&quot;</span>,<br>    age : <span class="hljs-number">18</span>,<br>    marry : <span class="hljs-literal">false</span>,<br>    friends : [<span class="hljs-string">&quot;锦鲤&quot;</span>,<span class="hljs-string">&quot;思思&quot;</span>]<br>&#125;;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( xz.<span class="hljs-property">name</span> ); <span class="hljs-comment">//&quot;夏栀&quot;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( xz[<span class="hljs-string">&quot;name&quot;</span>] ); <span class="hljs-comment">//&quot;夏栀&quot;</span><br><br><span class="hljs-keyword">let</span> a = <span class="hljs-string">&quot;age&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( xz[a] ); <span class="hljs-comment">//18</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( xz.<span class="hljs-property">a</span> ); <span class="hljs-comment">//undefined</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>对象可以取值，也可以重新赋值，也可以新增属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> obj = &#123;a : <span class="hljs-number">10</span>&#125;;<br><br>obj.<span class="hljs-property">a</span> = <span class="hljs-number">20</span>;<br>obj.<span class="hljs-property">b</span> = <span class="hljs-number">30</span>;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj); <span class="hljs-comment">// &#123;a:20,b:30&#125; </span><br></code></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>内置对象</p>
<p>JavaScript语法中本来已经存在的对象，称之为内置对象。这些对象一般都已经包含了很多属性和方法，功能健全丰富，我们可以直接哪来使用。例如 <code>window</code> <code>document</code> <code>Math</code>。</p>
</li>
<li><p>函数</p>
<p>JavaScript中函数也是对象类型，是一个极为特殊的对象。</p>
<ul>
<li><p>定义函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">//这里可以写任意js代码</span><br>&#125;;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">b</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">//这里可以写任意js代码</span><br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p>函数执行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-number">123</span>);<br>&#125;<br><span class="hljs-comment">//函数不执行是，内部函数不会运行。</span><br><br><span class="hljs-comment">//函数加 () 可以自执行</span><br><span class="hljs-title function_">fn</span>();<br></code></pre></td></tr></table></figure>
</li>
<li><p>更多函数相关的知识在后续章节会详细介绍</p>
</li>
</ul>
</li>
</ul>
<p>object类型的数据，<code>typeof</code>会得到<code>object</code>，但是函数在<code>typeof</code>时得到<code>function</code>。</p>
<h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">加(+) 减(-) 乘(*) 除(/) 取余(%) 乘方(**)<br>// 加法运算<br>let a = 1<br>let b = a + 2 // 此时b等于3<br><br>// 减、乘、除同理<br></code></pre></td></tr></table></figure>

<p>重点说下取余运算</p>
<p>取余运算即是字面含义，取除运算的余数，有时也叫模运算</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 例如：5 除以 3  商为1   余数为2</span><br><span class="hljs-keyword">let</span> a = <span class="hljs-number">5</span> % <span class="hljs-number">3</span> <span class="hljs-comment">// 此时a存储的就是5除以3的余数2</span><br><br><span class="hljs-keyword">let</span> b = <span class="hljs-number">6</span> % <span class="hljs-number">2</span> <span class="hljs-comment">// 此时能整除，所以余数为0，则b的值为0</span><br><br><span class="hljs-comment">// 小模大的余数</span><br><span class="hljs-comment">// 例如：3 除以 5，因为被除数比除数小，所以此时商为0，余数为3</span><br><span class="hljs-keyword">let</span> c = <span class="hljs-number">3</span> % <span class="hljs-number">5</span> <span class="hljs-comment">// 此时 c = 0</span><br><br><span class="hljs-keyword">let</span> d = <span class="hljs-number">2</span> % <span class="hljs-number">10</span> <span class="hljs-comment">// d = 0</span><br><span class="hljs-comment">// 所以：小值对大值取余运算时，余数为小值</span><br></code></pre></td></tr></table></figure>

<p>接着来看乘方运算，乘方运算就是计算某个数的<code>n</code>次方的结果</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 例如：计算5的平方</span><br><span class="hljs-keyword">let</span> a = <span class="hljs-number">5</span> ** <span class="hljs-number">2</span> <span class="hljs-comment">// 等同于 a = 5 * 5 ==&gt;  a = 25</span><br><br><span class="hljs-keyword">let</span> b = <span class="hljs-number">4</span> ** <span class="hljs-number">4</span> <span class="hljs-comment">// b = 256</span><br><br><span class="hljs-keyword">let</span> c = <span class="hljs-number">2</span> ** <span class="hljs-number">3</span> <span class="hljs-comment">// c = 8</span><br></code></pre></td></tr></table></figure>

<h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">等于(=) 加等于(+=) 减等于(-=) 乘等于(*=) 除等于(/=) 取余等于(%=) 乘方等于(**=)<br></code></pre></td></tr></table></figure>

<p>看起来虽然多，但是比较比较容易理解</p>
<blockquote>
<p>通常看到等号，要先计算等号右边</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 等于 以下两种都是等于运算，简单来说 就是对变量赋值</span><br><span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span> <br><span class="hljs-keyword">let</span> b = <span class="hljs-number">1</span> + <span class="hljs-number">3</span><br><br><span class="hljs-comment">// 后续的带了运算符的都是同一个原理</span><br><span class="hljs-comment">// 例如: +=</span><br><span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span><br>a += <span class="hljs-number">1</span> <span class="hljs-comment">// 此时a=2，因为a += 1等价于 a = a + 1</span><br><br><span class="hljs-comment">// 其他同理</span><br></code></pre></td></tr></table></figure>

<p>比较特殊的两个赋值运算符<code>自增1(++)、自减1(--)</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span><br>a++ <span class="hljs-comment">// 此时a = 2，因为a的自增1运算，可以理解为 a += 1，也就是 a = a + 1</span><br><br><span class="hljs-comment">// 同理</span><br><span class="hljs-keyword">let</span> b = <span class="hljs-number">3</span><br>b-- <span class="hljs-comment">// 此时b = 2，因为b的自减1运算，可以理解为 b -= 1，也就是 b = b - 1</span><br></code></pre></td></tr></table></figure>

<p>所以自增和自减，是在自身原始值的基础上，进行增1或者减1计算，并且会改变自身的值，有赋值运算的效果</p>
<p>需要注意的是，自增和自减还有一些需要注意的地方，以自增为例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span><br><br><span class="hljs-keyword">let</span> b = a++ <span class="hljs-comment">// 请注意，此时 b = 1</span><br></code></pre></td></tr></table></figure>

<p>原因是自增和自减，有两种情况，一种为后置自增或后置自减，另外一种为前置自增和前置自减，写法就是符号写在后面和前面的区别：前置自增：<code>++a</code>、后置自增：<code>a++</code>，自减同理。</p>
<p>接下来我们来看下上述为何b&#x3D;1，而不是2，原因是<strong>后置自增和后置自减参与其他运算时，是先将原始值完整参与其他运算后，才进行自增；而前置自增和前置自减，是先将原始值自增或自减后，才参与其他运算。</strong>有一个先后顺序的问题。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span><br><br><span class="hljs-keyword">let</span> b = a++ <span class="hljs-comment">// 此时 b = 1，a = 2</span><br></code></pre></td></tr></table></figure>

<p>是因为这里有一个自增运算，同时还有一个赋值的等于运算，而a的自增是后置的，所以此处程序先将a的原始值1参与其他运算（此处是赋值运算）后才会自增，所以b接收到的是原始值1，而后，a自增为2。所以结果为：<code>b=1 a=2</code>，自增运算同理。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span><br><span class="hljs-keyword">let</span> b = ++a <span class="hljs-comment">// a = 2  b = 2</span><br></code></pre></td></tr></table></figure>

<p>根据上述原理，此时a的前置自增，会先进行自增，后参与赋值运算，所以<code>a=2 b=2</code></p>
<blockquote>
<p>赋值运算符是非常简单的运算符，唯一需要关注的是自增和自减的情况。自增和自增还有一个特殊的功能，后一个章节讲解</p>
</blockquote>
<h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">大于(&gt;)、小于(&lt;)、相等(==)、不相等(！=)、全等(===)、不全等(!==)、大于等于(&gt;=)、小于等于(&lt;=)<br></code></pre></td></tr></table></figure>

<p>比较运算符的结算结果，永远都是一个布尔值，条件成立为<code>true</code>，不成立为<code>false</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = <span class="hljs-number">2</span> &gt; <span class="hljs-number">1</span> 	<span class="hljs-comment">// a = true</span><br><span class="hljs-keyword">let</span> b = -<span class="hljs-number">5</span> &gt; <span class="hljs-number">1</span> 	<span class="hljs-comment">// b = false</span><br></code></pre></td></tr></table></figure>

<p>需要注意的是相等和全等的区别（不相等和不全等同理）</p>
<p>相等判断运算时，如果两个运算数类型不相同时，会先转换为同一个类型，再进行比较，如果相等则结果为<code>true</code>，反之<code>false</code>，而不全等运算时，如果两个运算数类型不相同，则立刻返回<code>false</code>，不进行任何类型转换，如果类型相同，则正常比较，根据结果返回值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span> == <span class="hljs-string">&quot;1&quot;</span>	<span class="hljs-comment">// 请注意，第一个运算数是数字1，第二个则是字符串1</span><br><span class="hljs-comment">// 此时 a = true，由于此时是相等比较，所以会将字符串1转换为数字后进行比较。</span><br><br><span class="hljs-keyword">let</span> b = <span class="hljs-number">1</span> === <span class="hljs-string">&quot;1&quot;</span> <span class="hljs-comment">// b = false</span><br><span class="hljs-comment">// 此时，由于两个数类型不同，所以全等运算时，直接返回false</span><br><br><span class="hljs-comment">// 不相等和不全等同理</span><br></code></pre></td></tr></table></figure>

<p>字符串再比较大小时，是按位比较各自的编码。<code>&quot;3&quot;&gt;&quot;20&quot;</code>得到<code>true</code></p>
<p>对象在做相等判断时，比较的是内存地址。</p>
<p>关于不同类型的值进行比较运算时，类型的转换规则参考下表：</p>
<table>
<thead>
<tr>
<th align="left">值</th>
<th align="left">字符串操作环境</th>
<th align="left">数字运算环境</th>
<th align="left">逻辑运算环境</th>
<th align="left">对象操作环境</th>
</tr>
</thead>
<tbody><tr>
<td align="left">undefined</td>
<td align="left">“undefined”</td>
<td align="left">NaN</td>
<td align="left">false</td>
<td align="left">Error</td>
</tr>
<tr>
<td align="left">null</td>
<td align="left">“null”</td>
<td align="left">0</td>
<td align="left">false</td>
<td align="left">Error</td>
</tr>
<tr>
<td align="left">非空字符串</td>
<td align="left">不转换</td>
<td align="left">字符串对应的数字值</td>
<td align="left">True</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">空字符串</td>
<td align="left">不转换</td>
<td align="left">0</td>
<td align="left">false</td>
<td align="left">String</td>
</tr>
<tr>
<td align="left">0</td>
<td align="left">“0”</td>
<td align="left">不转换</td>
<td align="left">false</td>
<td align="left">Number</td>
</tr>
<tr>
<td align="left">NaN</td>
<td align="left">“NaN”</td>
<td align="left">不转换</td>
<td align="left">false</td>
<td align="left">Number</td>
</tr>
<tr>
<td align="left">Infinity</td>
<td align="left">“Infinity”</td>
<td align="left">不转换</td>
<td align="left">true</td>
<td align="left">Number</td>
</tr>
<tr>
<td align="left">Number.POSITIVE_INFINITY</td>
<td align="left">“Infinity”</td>
<td align="left">不转换</td>
<td align="left">true</td>
<td align="left">Number</td>
</tr>
<tr>
<td align="left">Number.NEGATIVE_INFINITY</td>
<td align="left">“-Infinity”</td>
<td align="left">不转换</td>
<td align="left">true</td>
<td align="left">Number</td>
</tr>
<tr>
<td align="left">Number.MAX_VALUE</td>
<td align="left">“1.7976931348623157e+308”</td>
<td align="left">不转换</td>
<td align="left">true</td>
<td align="left">Number</td>
</tr>
<tr>
<td align="left">Number.MIN_VALUE</td>
<td align="left">“5e-324”</td>
<td align="left">不转换</td>
<td align="left">true</td>
<td align="left">Number</td>
</tr>
<tr>
<td align="left">其他所有数字</td>
<td align="left">“数字的字符串值”</td>
<td align="left">不转换</td>
<td align="left">true</td>
<td align="left">Number</td>
</tr>
<tr>
<td align="left">true</td>
<td align="left">“true”</td>
<td align="left">1</td>
<td align="left">不转换</td>
<td align="left">Boolean</td>
</tr>
<tr>
<td align="left">false</td>
<td align="left">“false”</td>
<td align="left">0</td>
<td align="left">不转换</td>
<td align="left">Boolean</td>
</tr>
<tr>
<td align="left">对象</td>
<td align="left">toString()</td>
<td align="left">value()或toString()或NaN</td>
<td align="left">true</td>
<td align="left">不转换</td>
</tr>
<tr>
<td align="left">Symbol</td>
<td align="left">toString()</td>
<td align="left">Error</td>
<td align="left">true</td>
<td align="left">Symbol</td>
</tr>
<tr>
<td align="left">BigInt</td>
<td align="left">toString()</td>
<td align="left">不转换</td>
<td align="left">除0n都是true</td>
<td align="left">BigInt</td>
</tr>
</tbody></table>
<h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">与(&amp;&amp;)、或(||)、非(!)<br></code></pre></td></tr></table></figure>

<blockquote>
<p>与运算和或运算可以理解为一个管道</p>
</blockquote>
<p>与是和的意思，<code>true</code>能通过，<code>false</code>不通过</p>
<p>或就是或者, <code>false</code>通过，<code>true</code>不通过</p>
<p>非也叫取反。</p>
<p>逻辑运算符在运算时，会在计算时，<strong>临时</strong>将运算数转换为布尔值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span><br><br><span class="hljs-keyword">let</span> b = <span class="hljs-number">2</span><br><br><span class="hljs-keyword">let</span> c = a &amp;&amp; b <span class="hljs-comment">// 此时 c = 2</span><br></code></pre></td></tr></table></figure>

<p>与运算时，a被转为布尔值<code>true</code>，根据与运算符的特性，<code>true</code>通过了，所以取到右边的值。c就等于右边的值2</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = <span class="hljs-number">0</span><br><br><span class="hljs-keyword">let</span> b = <span class="hljs-number">2</span><br><br><span class="hljs-keyword">let</span> c = a &amp;&amp; b <span class="hljs-comment">// c = 0</span><br></code></pre></td></tr></table></figure>

<p>此时a转为布尔值<code>false</code>，<code>false</code>不能通过<code>&amp;&amp;</code>，所以停下来了，就取到了a的值，所以c等于0</p>
<p>或运算跟与运算则行为相反</p>
<p>关于各种值转为布尔值的情况，记住以下几个值即可：</p>
<p>JS中所有的值只有如下6个值可以转为<code>false</code>，除了这6个值，其他的都是转为<code>true</code></p>
<ol>
<li>数字：<code>NaN</code></li>
<li>空指针：<code>null</code></li>
<li>未定义：<code>undefined</code></li>
<li>数字：<code>0</code></li>
<li>布尔值：<code>false</code></li>
<li>空字符串：<code>“”</code></li>
</ol>
<p>非运算是将运算符之后的值临时转为布尔值后，取其相反值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span><br><br><span class="hljs-keyword">let</span> b = !a <span class="hljs-comment">// b = false</span><br></code></pre></td></tr></table></figure>

<p>a是数字1，转为布尔值为<code>true</code>，所以相反值为<code>false</code>，则<code>b = false</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = <span class="hljs-number">0</span><br><br><span class="hljs-keyword">let</span> b = !a <span class="hljs-comment">// b = true</span><br><span class="hljs-keyword">let</span> a = <span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-keyword">let</span> b = !a <span class="hljs-comment">// b = true</span><br><span class="hljs-keyword">let</span> a = <span class="hljs-string">&quot;JavaScript真是太简单了&quot;</span><br><br><span class="hljs-keyword">let</span> b = !a <span class="hljs-comment">// b = false</span><br></code></pre></td></tr></table></figure>

<h2 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h2><p><a href="https://baike.baidu.com/item/%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7/4752611?fr=aladdin">运算符优先级</a></p>
<h2 id="拓展知识（不用掌握）"><a href="#拓展知识（不用掌握）" class="headerlink" title="拓展知识（不用掌握）"></a>拓展知识（不用掌握）</h2><h3 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h3><p>位运算直接对内存中表示数据的位进行操作，所以运算效率是最高的。</p>
<p>位运算时会将数值转换为32位整型来进行运算，所以位运算遇到小数时，直接处理掉小数部分当成整数来运算。并且<em>要是一个数的二进制表示超过32位，或者运算完后超过32位，那么就会出问题。所以不是所有的情况都适用位运算</em>。</p>
<p>32位中，前31位表示数值，第32位表示符号，例如：<strong>3</strong> 的32位表示为：<code>00000000 00000000 00000000 00000011</code>。（PS：短除法求二进制）。</p>
<p>负数会以<strong>二进制补码</strong>的形式来表示，规则是：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//以 -3 为例子</span><br><br><span class="hljs-comment">//第一步：取负数对应的正数的二进制码，例子中取 3 的二进制码</span><br><span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000011</span> <span class="hljs-comment">//3的二进制码</span><br><br><span class="hljs-comment">//第二步：取得到的二进制码的反码，0变1  1变0</span><br><span class="hljs-number">11111111</span> <span class="hljs-number">11111111</span> <span class="hljs-number">11111111</span> <span class="hljs-number">11111100</span> <span class="hljs-comment">//二进制反码</span><br><br><span class="hljs-comment">//第三步：反码加1</span><br><span class="hljs-number">11111111</span> <span class="hljs-number">11111111</span> <span class="hljs-number">11111111</span> <span class="hljs-number">11111101</span> <span class="hljs-comment">//得到-3的二进制表示</span><br></code></pre></td></tr></table></figure>

<p>位运算操作符：按位非<code>~</code> 、按位与<code>&amp;</code>、按位或<code>|</code>、按位异或<code>^</code>、左移<code>&lt;&lt;</code>、无符号右移<code>&gt;&gt;&gt;</code>、有符号右移<code>&gt;&gt;</code>。</p>
<ul>
<li><strong>~ 按位非</strong></li>
</ul>
<p>每一位取反，例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = <span class="hljs-number">12</span>;<br><span class="hljs-keyword">let</span> b = ~a;<br><br><span class="hljs-comment">// 12的二进制表示：     00000000 00000000 00000000 00001100</span><br><span class="hljs-comment">// 按位非得到最终结果： 11111111 11111111 11111111 11110011  </span><br><br><span class="hljs-comment">//因为 第32位是1，代表负数，那这个负数是多少呢？按照上面的办法我们可以反推回来：</span><br><span class="hljs-comment">//负数码减-1：         11111111 11111111 11111111 11110010</span><br><span class="hljs-comment">//结果取反码：         00000000 00000000 00000000 00001101</span><br><span class="hljs-comment">//表示的正数是：13，所以该负数为  -13</span><br><br><span class="hljs-title function_">alert</span>(b); <span class="hljs-comment">//验证一下</span><br></code></pre></td></tr></table></figure>

<p>所以按位非的结果为 该数负数减1， <code>~12 === -13</code> <code>~-5 === 4</code></p>
<ul>
<li><strong>&amp; 按位与</strong></li>
</ul>
<p>与是两个数之间的操作，两个数每一位的值 1 1 得1 1 0得0 0 1得0 0 0得0，例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = <span class="hljs-number">11</span> &amp; <span class="hljs-number">4</span>;<br><br><span class="hljs-comment">//11的二进制  00000000 00000000 00000000 00001011</span><br><span class="hljs-comment">//4 的二进制  00000000 00000000 00000000 00000100</span><br><span class="hljs-comment">//按位与      00000000 00000000 00000000 00000000</span><br><span class="hljs-comment">//结果为 0</span><br><br><span class="hljs-title function_">alert</span>( a ); <span class="hljs-comment">//验证一下</span><br></code></pre></td></tr></table></figure>

<ul>
<li><strong>| 按位或 ^ 按位异或</strong></li>
</ul>
<p>这就和上面一个道理了，或都应该能理解 11得1 10得1 01得1 00得0，</p>
<p>异或：11得0 10得1 01得1 00得0</p>
<ul>
<li><strong>&lt;&lt; 左移</strong></li>
</ul>
<p>二进制码左移几位，右边的空位补0</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = <span class="hljs-number">4</span> &lt;&lt; <span class="hljs-number">2</span>;<br><br><span class="hljs-comment">//4的二进制码： 00000000 00000000 00000000 00000100</span><br><span class="hljs-comment">//左移2位：  00 00000000 00000000 00000000 000100    //左边超过32的就不用管了，右边少于8位的补0    </span><br><span class="hljs-comment">//得到：        00000000 00000000 00000000 00010000  // 16</span><br><br><span class="hljs-title function_">alert</span>(a); <span class="hljs-comment">//验证一下</span><br></code></pre></td></tr></table></figure>

<p>左移是<em>不会改变符号位</em>的，相当于原来的数乘以 2的几次方。</p>
<ul>
<li><strong>&gt;&gt;&gt; 无符号右移 &gt;&gt; 有符号右移</strong></li>
</ul>
<p>有符号右移：不动符号位，二进制码右移，左侧补0，原理和上述一样。</p>
<p>无符号右移：移动所有位包括符号位，整体右移，左侧补0，所以如果负数进行无符号右移，会得到一个很蛋疼的数。</p>
<ul>
<li>位运算的运用</li>
</ul>
<p>左移右移来进行相对于 2的乘方 运算。</p>
<p>强制取整，位运算直接会舍弃小数，例如：<code>let a = 12.12 | 0;</code>，直接舍弃小数位，并且或上0不会影响整数位。</p>
<p>判断奇偶，奇数 &amp; 1 一定是 1 偶数 &amp; 1一定是 0</p>
<h1 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h1><p>类型转换是将某个数据转换为其他类型的数据的操作。</p>
<p>可以参考表格</p>
<table>
<thead>
<tr>
<th align="left">值</th>
<th align="left">字符串操作环境</th>
<th align="left">数字运算环境</th>
<th align="left">逻辑运算环境</th>
<th align="left">对象操作环境</th>
</tr>
</thead>
<tbody><tr>
<td align="left">undefined</td>
<td align="left">“undefined”</td>
<td align="left">NaN</td>
<td align="left">false</td>
<td align="left">Error</td>
</tr>
<tr>
<td align="left">null</td>
<td align="left">“null”</td>
<td align="left">0</td>
<td align="left">false</td>
<td align="left">Error</td>
</tr>
<tr>
<td align="left">非空字符串</td>
<td align="left">不转换</td>
<td align="left">字符串对应的数字值</td>
<td align="left">True</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">空字符串</td>
<td align="left">不转换</td>
<td align="left">0</td>
<td align="left">false</td>
<td align="left">String</td>
</tr>
<tr>
<td align="left">0</td>
<td align="left">“0”</td>
<td align="left">不转换</td>
<td align="left">false</td>
<td align="left">Number</td>
</tr>
<tr>
<td align="left">NaN</td>
<td align="left">“NaN”</td>
<td align="left">不转换</td>
<td align="left">false</td>
<td align="left">Number</td>
</tr>
<tr>
<td align="left">Infinity</td>
<td align="left">“Infinity”</td>
<td align="left">不转换</td>
<td align="left">true</td>
<td align="left">Number</td>
</tr>
<tr>
<td align="left">Number.POSITIVE_INFINITY</td>
<td align="left">“Infinity”</td>
<td align="left">不转换</td>
<td align="left">true</td>
<td align="left">Number</td>
</tr>
<tr>
<td align="left">Number.NEGATIVE_INFINITY</td>
<td align="left">“-Infinity”</td>
<td align="left">不转换</td>
<td align="left">true</td>
<td align="left">Number</td>
</tr>
<tr>
<td align="left">Number.MAX_VALUE</td>
<td align="left">“1.7976931348623157e+308”</td>
<td align="left">不转换</td>
<td align="left">true</td>
<td align="left">Number</td>
</tr>
<tr>
<td align="left">Number.MIN_VALUE</td>
<td align="left">“5e-324”</td>
<td align="left">不转换</td>
<td align="left">true</td>
<td align="left">Number</td>
</tr>
<tr>
<td align="left">其他所有数字</td>
<td align="left">“数字的字符串值”</td>
<td align="left">不转换</td>
<td align="left">true</td>
<td align="left">Number</td>
</tr>
<tr>
<td align="left">true</td>
<td align="left">“true”</td>
<td align="left">1</td>
<td align="left">不转换</td>
<td align="left">Boolean</td>
</tr>
<tr>
<td align="left">false</td>
<td align="left">“false”</td>
<td align="left">0</td>
<td align="left">不转换</td>
<td align="left">Boolean</td>
</tr>
<tr>
<td align="left">对象</td>
<td align="left">toString()</td>
<td align="left">value()或toString()或NaN</td>
<td align="left">true</td>
<td align="left">不转换</td>
</tr>
<tr>
<td align="left">Symbol</td>
<td align="left">toString()</td>
<td align="left">Error</td>
<td align="left">true</td>
<td align="left">Symbol</td>
</tr>
<tr>
<td align="left">BigInt</td>
<td align="left">toString()</td>
<td align="left">不转换</td>
<td align="left">除0n都是true</td>
<td align="left">BigInt</td>
</tr>
</tbody></table>
<h2 id="显示类型转换"><a href="#显示类型转换" class="headerlink" title="显示类型转换"></a>显示类型转换</h2><p>转换方法：</p>
<ul>
<li>转数字：<code>Number()</code></li>
<li>转字符串：<code>String()</code></li>
<li>转布尔值：<code>Boolean()</code></li>
<li>转字符：<code>Symbol()</code>基本没有该需求</li>
<li>转大数字：<code>BigInt()</code></li>
</ul>
<p>常见需求是在数字、布尔值、字符串三者之间进行转换</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span><br><br><span class="hljs-keyword">let</span> r1 = <span class="hljs-title class_">String</span>(a) <span class="hljs-comment">// 将a转换为字符串</span><br><span class="hljs-keyword">let</span> r2 = <span class="hljs-title class_">Boolean</span>() <span class="hljs-comment">// 将a转换为布尔值</span><br><br><span class="hljs-keyword">let</span> b = <span class="hljs-string">&quot;123&quot;</span><br><br><span class="hljs-keyword">let</span> r3 = <span class="hljs-title class_">Number</span>(b) <span class="hljs-comment">// 将b转换为数字，请注意，如果字符串内不全是数字字符时会转换成坏值NaN</span><br><span class="hljs-keyword">let</span> r4 = <span class="hljs-title class_">Boolean</span>(b) <span class="hljs-comment">// 将b转为布尔值</span><br><br><span class="hljs-comment">// 布尔值转换为数字时，true转为1 false转为0，转为字符串时相当于给对应的值加上引号</span><br></code></pre></td></tr></table></figure>

<blockquote>
<p>以上通过对应的数据类型的接口转换的方式叫显示类型转换</p>
</blockquote>
<h2 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h2><p>隐式转换是在使用非上面的接口转换时的叫法，通常这些转换情况容易被人忽略，所以叫隐式转换</p>
<h3 id="1-转数字"><a href="#1-转数字" class="headerlink" title="1. 转数字"></a>1. 转数字</h3><p>上一章提到的自增和自减，就具有隐式类型转换的功能，会将变量转换为数字</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = <span class="hljs-string">&#x27;123&#x27;</span> <span class="hljs-comment">// 此时a是字符串，而不是数字</span><br>a++  <span class="hljs-comment">// 此时 a = 124，</span><br></code></pre></td></tr></table></figure>

<p>因为自增和自减具备类型转换的功能，会先将a转换为数字，再进行自增</p>
<p>同时在比较大于、小于、小于等于、大于等于时，有数字参与的比较，也会将另外一个非数字转换为数字</p>
<h3 id="2-转字符串"><a href="#2-转字符串" class="headerlink" title="2.转字符串"></a>2.转字符串</h3><p>当有字符串参与的加法运算时，非字符串数据会被转换成字符串，然后将两个字符串合并</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = <span class="hljs-string">&quot;123&quot;</span><br><span class="hljs-keyword">let</span> b = <span class="hljs-literal">true</span><br><span class="hljs-keyword">let</span> c = a + b<br><span class="hljs-comment">// c = &quot;123true&quot;</span><br></code></pre></td></tr></table></figure>

<h1 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h1><p>判断是代码流程控制的一个重要环节，绝大多数逻辑的实现都离不开判断。</p>
<h2 id="1-if判断"><a href="#1-if判断" class="headerlink" title="1. if判断"></a>1. if判断</h2><p>写法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//单个if</span><br><span class="hljs-keyword">if</span>( 条件 )<br>&#123;<br>    <span class="hljs-comment">//条件为真时执行的代码</span><br>&#125;<br><br><span class="hljs-comment">//if else</span><br><span class="hljs-keyword">if</span>( 条件 )<br>&#123;<br>    <span class="hljs-comment">//条件为真时执行的代码</span><br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>    <span class="hljs-comment">//条件为假时执行的代码</span><br>&#125;<br><br><span class="hljs-comment">//多个else</span><br><span class="hljs-keyword">if</span>( 条件<span class="hljs-number">1</span> )<br>&#123;<br>    <span class="hljs-comment">//条件1为真时执行的代码</span><br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>( 条件<span class="hljs-number">2</span> )<br>&#123;<br>    <span class="hljs-comment">//条件1假 条件2真时执行的代码</span><br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>( 条件<span class="hljs-number">3</span> )<br>&#123;<br>    <span class="hljs-comment">//条件1条件2都为假 条件2为真时执行的代码</span><br>&#125;<br><span class="hljs-comment">//可以一直列下去，可以if()&#123;&#125;结束，也可以else&#123;&#125;结束。</span><br></code></pre></td></tr></table></figure>

<h2 id="2-三目运算"><a href="#2-三目运算" class="headerlink" title="2. 三目运算"></a>2. 三目运算</h2><p>真语句为一条，假语句也只有一条时，我们可以将这种if else改为三目写法；</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini">条件 ? 真执行的语句 : 假执行的语句<span class="hljs-comment">;</span><br>//设 前文已定义变量 a  b<br>//if<br>if( a &gt; b )&#123;<br>    <span class="hljs-attr">oBox.className</span> = <span class="hljs-string">&quot;goudan&quot;</span><span class="hljs-comment">;</span><br>&#125;else&#123;<br>    <span class="hljs-attr">oBox.className</span> = <span class="hljs-string">&quot;dachui&quot;</span><span class="hljs-comment">;</span><br>&#125;<br><br>//三目<br> <span class="hljs-attr">oBox.className</span> = a&gt;b ? <span class="hljs-string">&quot;goudan&quot;</span> : <span class="hljs-string">&quot;dachui&quot;</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure>

<p>三目不一定比if好，有些时候看起来三目比if更直观，但是有些时候if看起来会比三目更直观。</p>
<ul>
<li>() 结合三目的使用</li>
</ul>
<p>真语句或者假语句不止一条时，是不是不能用三目呢，不一定哈，比如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//ifelse</span><br><span class="hljs-keyword">if</span>(<span class="hljs-number">2</span>&gt;<span class="hljs-number">5</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">4</span>);<br>&#125;<br><br><span class="hljs-comment">//改成三目</span><br><span class="hljs-number">2</span>&gt;<span class="hljs-number">5</span>?(<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>),<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>),<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>)<br>	):<br>	(<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>),<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>),<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">4</span>)<br>	);<br></code></pre></td></tr></table></figure>

<h2 id="3-switch"><a href="#3-switch" class="headerlink" title="3. switch"></a>3. switch</h2><p>特殊形式的ifelse可以改写为switch，更清晰。</p>
<p>例： （注意关键词 switch case break default）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//设 前文已定义变量a</span><br><span class="hljs-comment">//if else</span><br><span class="hljs-keyword">if</span>( a === <span class="hljs-string">&quot;阿飞&quot;</span> )&#123;<br>    <span class="hljs-comment">//code1</span><br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>( a === <span class="hljs-string">&quot;风屿&quot;</span>  )&#123;<br>    <span class="hljs-comment">//code2</span><br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>( a === <span class="hljs-string">&quot;夏栀&quot;</span> )&#123;<br>    <span class="hljs-comment">//code3</span><br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-comment">//code4</span><br>&#125;<br><br><span class="hljs-comment">//switch</span><br><span class="hljs-keyword">switch</span>( a )&#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;阿飞&quot;</span>:<br>    	<span class="hljs-comment">//code1</span><br>    	<span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;风屿&quot;</span>:<br>    	<span class="hljs-comment">//code2</span><br>    	<span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;夏栀&quot;</span>:<br>    	<span class="hljs-comment">//code3</span><br>    	<span class="hljs-keyword">break</span>;<br>    <span class="hljs-attr">default</span>:<br>    	<span class="hljs-comment">//code4</span><br>    	<span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="4-使用-amp-amp-来代替判断"><a href="#4-使用-amp-amp-来代替判断" class="headerlink" title="4. 使用 &amp;&amp; || 来代替判断"></a>4. 使用 &amp;&amp; || 来代替判断</h2><p>有时候会用到，</p>
<p>例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//设前文已定义变量a b</span><br><br><br><span class="hljs-comment">//if</span><br><span class="hljs-keyword">if</span>(a)&#123;<br>    somecode;<br>&#125;<br><br><span class="hljs-comment">//逻辑</span><br>a &amp;&amp; somecode;<br><br><br><br><br><span class="hljs-comment">//if</span><br><span class="hljs-keyword">if</span>( a &gt; b )&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>);<br>&#125;<br><br><span class="hljs-comment">//三目</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(   a&gt;b?<span class="hljs-number">2</span>:<span class="hljs-number">3</span>   );<br><br><span class="hljs-comment">//逻辑运算</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(    a&gt;b &amp;&amp; <span class="hljs-number">2</span> || <span class="hljs-number">3</span>    );<br></code></pre></td></tr></table></figure>

<h1 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h1><h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><p>循环是任何一门语言都会有个命令，用于反复执行某段代码。</p>
<p>例如，循环代码块5次：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>  <span class="hljs-keyword">let</span> text = <span class="hljs-string">`当前数字为<span class="hljs-subst">$&#123;i&#125;</span>`</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(text)<br>&#125;<br><br><span class="hljs-comment">// 输出结果：</span><br>当前数字为<span class="hljs-number">0</span><br>当前数字为<span class="hljs-number">1</span><br>当前数字为<span class="hljs-number">2</span><br>当前数字为<span class="hljs-number">3</span><br>当前数字为<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure>

<p>此例中，<code>let i = 0</code>是声明循环的计次变量，<code>i &lt; 5</code>是循环终止条件，<code>i++</code>是计次变量更新步长，<code>&#123;&#125;</code>内的所有代码为循环体内代码块。</p>
<p>具体流程是：计次变量进行终止条件判断运算，如果结果为true，则循环体执行，结束后进行步长更新运算，从而得到新的结果再次参与判断；如果结果为false，则立刻终止循环；</p>
<p>所以想要控制循环次数，可以通常改变判断条件实现，如果循环条件永远为<code>true</code>，则就是一个<strong>死循环</strong>。</p>
<h2 id="for-in"><a href="#for-in" class="headerlink" title="for-in"></a>for-in</h2><p>for-in循环是一种特殊循环，可用于循环对象或数组（通常循环数组，使用for-of）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> o = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;dapiaoliang&#x27;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>  <span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;woman&#x27;</span><br>&#125;<br><br><span class="hljs-comment">// 将对象内的所有键值对循环输出, 此时可以使用for-in</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> o) &#123;<br>  <span class="hljs-keyword">let</span> text = <span class="hljs-string">`当前属性名：<span class="hljs-subst">$&#123;key&#125;</span>, 值：<span class="hljs-subst">$&#123;o[key]&#125;</span>`</span><br>&#125;<br><br><span class="hljs-comment">// 结果（这种循环输出顺序可能会不一样，但数量不变）</span><br>当前属性名：name, 值：dapiaoliang<br>当前属性名：age, 值：<span class="hljs-number">18</span><br>当前属性名：sex, 值：woman<br></code></pre></td></tr></table></figure>

<p>由此可见，for-in 用于循环对象内所有的键值对，具体输出顺序可能会发生变化，但是每个键值对都会被循环一次。</p>
<h2 id="for-of"><a href="#for-of" class="headerlink" title="for-of"></a>for-of</h2><p>for-of时一种专门用于循环数组或类似数组结构（Iterator接口）的循环命令</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&quot;dapiaoliang&quot;</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&#x27;woman&#x27;</span>]<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> value <span class="hljs-keyword">of</span> arr) &#123;<br>  <span class="hljs-keyword">let</span> text = <span class="hljs-string">`当前值是：<span class="hljs-subst">$&#123;value&#125;</span>`</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(text)<br>&#125;<br><br><span class="hljs-comment">// 结果</span><br>当前值是：dapiaoliang<br>当前值是：<span class="hljs-number">18</span><br>当前值是：woman<br></code></pre></td></tr></table></figure>

<p>类似for-in，可直接循环数组的每一项数据</p>
<h2 id="while"><a href="#while" class="headerlink" title="while"></a>while</h2><p>while是for的一个变种。（不常用）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">while</span> (条件) &#123;<br>	循环体<br>&#125;<br></code></pre></td></tr></table></figure>

<p>当条件为true，循环体就会执行，这种循环没有计次变量，不需要更新步长。所以条件通常需要是一个可变参数，如果不是可变参数，就需要在循环体内，有明确的终止条件</p>
<h2 id="do-while"><a href="#do-while" class="headerlink" title="do-while"></a>do-while</h2><p>do-while是一种特殊的while循环（不常用）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">do</span> &#123;<br>  循环体<br>&#125;<span class="hljs-keyword">while</span>(条件)<br></code></pre></td></tr></table></figure>

<p>看起来是将while的条件和循环体交换了位置，所以这种循环体，在第一次时，是不需要进行判断条件就会执行，执行结束后，再进行判断，判断结果决定下一次是否会循环</p>
<blockquote>
<p>所以，do-while的条件是决定下一次是否循环，而第一次永远都会执行，所以可以理解为至少执行一次的while循环</p>
</blockquote>
<h3 id="跳出循环"><a href="#跳出循环" class="headerlink" title="跳出循环"></a>跳出循环</h3><p>如果在循环体内由于某些原因，需要在代码块内跳出循环，可以使用对应的关键字。</p>
<p><code>break</code>用于永久终止此循环，<code>continue</code>用于终止当前这次循环（立刻进入下一次）</p>
<p>例如，跳过<code>i = 3</code>时情况</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>  <span class="hljs-keyword">if</span> (i === <span class="hljs-number">3</span>) &#123;<br>    <span class="hljs-keyword">continue</span><br>  &#125;<br>  <span class="hljs-keyword">let</span> text = <span class="hljs-string">`当前数字为<span class="hljs-subst">$&#123;i&#125;</span>`</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(text)<br>&#125;<br>当前数字为<span class="hljs-number">0</span><br>当前数字为<span class="hljs-number">1</span><br>当前数字为<span class="hljs-number">2</span><br>当前数字为<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure>

<p>上述例子，在<code>i=3</code>时，循环体内判断为真，执行<code>continue</code>，那么此次后续两行代码不会执行，会立刻进入下一次循环。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>  <span class="hljs-keyword">if</span> (i === <span class="hljs-number">3</span>) &#123;<br>    <span class="hljs-keyword">break</span><br>  &#125;<br>  <span class="hljs-keyword">let</span> text = <span class="hljs-string">`当前数字为<span class="hljs-subst">$&#123;i&#125;</span>`</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(text)<br>&#125;<br>当前数字为<span class="hljs-number">0</span><br>当前数字为<span class="hljs-number">1</span><br>当前数字为<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure>

<p>此时判断内是break，那么当<code>i=3</code>时，执行了break，那么后续所有次数的循环都不会执行。break会把整个循环全部关闭。</p>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>函数是由事件驱动的或者当它被调用时执行的可重复使用的代码块。通俗的说，函数是利用特定语法，将一段代码打包在一起，每次调用函数就可以让这个代码块内的代码全部执行，复用代码。</p>
<blockquote>
<p>要注意的是，函数跟循环不相似，循环是重复一定次数的执行代码，函数虽然可以重复执行代码，但是它很灵活，可以任意决定它调用的时机</p>
</blockquote>
<h2 id="声明函数"><a href="#声明函数" class="headerlink" title="声明函数"></a>声明函数</h2><p>声明函数有两种方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 方式一</span><br><span class="hljs-keyword">let</span> fn1 = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 代码块</span><br>&#125;<br><br><span class="hljs-comment">// 方式二</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn2</span> () &#123;<br>  <span class="hljs-comment">// 代码块</span><br>&#125;<br></code></pre></td></tr></table></figure>

<p>fn1和fn2都是函数名字，这是两种不同声明方式写的位置不同。</p>
<blockquote>
<p>函数体内的代码，在声明时不会执行的。必须在调用函数后，才能执行</p>
</blockquote>
<h2 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h2><p>函数调用只需要将函数名字加括号即可，一个函数可以重复调用无数次</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> fn = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 代码块</span><br>&#125;<br><br><span class="hljs-title function_">fn</span>()<br></code></pre></td></tr></table></figure>

<p>调用后，函数内的代码块就会执行</p>
<p>例如：计算1 + 2的值，并且输出</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> add = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">let</span> res = <span class="hljs-number">1</span> + <span class="hljs-number">2</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>&#125;<br><br><span class="hljs-comment">// 第一次调用</span><br><span class="hljs-title function_">add</span>() <span class="hljs-comment">// 此时函数调用，函数体内的代码执行，输出3</span><br><br><span class="hljs-comment">// 还可以再次调用</span><br><span class="hljs-title function_">add</span>() <span class="hljs-comment">// 此时再次调用，继续执行代码，输出3</span><br>...<br></code></pre></td></tr></table></figure>

<p>这样我们就可以得到一个能自动计算1+2值的函数，但是这样很蠢…因为每次都只会计算1+2，计算其他值，就需要再写函数，很麻烦。所以…看下面</p>
<h2 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h2><p>为了不让函数内部的代码全部都固定死、每次执行都是固定结果，所以函数可以在调用时，可以从外部注入数据到内部使用，这种行为是通过函数参数完成的。</p>
<p><strong>想要使用函数参数功能，从外部注入数据，那么函数内就需要提前有占位的符号，这种符号就类似变量功能，称为形参，而注入的数据成为实参</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 例如计算，1 + n的结果</span><br><br><span class="hljs-comment">// 此时函数内需要一个n作为占位符，那么n需要提前声明</span><br><span class="hljs-keyword">let</span> add = <span class="hljs-keyword">function</span> (<span class="hljs-params">n</span>) &#123; <span class="hljs-comment">// 这个n是声明函数内会使用n（n就是形参）</span><br>  <span class="hljs-keyword">let</span> res = <span class="hljs-number">1</span> + n <span class="hljs-comment">// 这里使用n占位</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>&#125;<br><span class="hljs-comment">// 调用时，可以传入不同的数据，作为此次调用n的实际数据，</span><br><span class="hljs-title function_">add</span>(<span class="hljs-number">5</span>) <span class="hljs-comment">// 此时n=5，则执行后，输出：6 （传入的5就是此次传入的实参）</span><br><br><span class="hljs-title function_">add</span>(<span class="hljs-number">10</span>) <span class="hljs-comment">// 输出：11</span><br><br>...<br><span class="hljs-title function_">add</span>(-<span class="hljs-number">10</span>) <span class="hljs-comment">// -9</span><br></code></pre></td></tr></table></figure>

<p>这样就得到一个能计算1+n的函数，如果需要的参数很多，依次写上占位符，将实参一次写在调用的括号内即可</p>
<blockquote>
<p>实参和形参的顺序是对应的，第一个形参接收第一个实参…以此类推</p>
<p>形参需要遵守变量命名规范</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> fn = <span class="hljs-keyword">function</span> (<span class="hljs-params">a,b,c,d,e</span>) &#123;&#125;<br><br><span class="hljs-title function_">fn</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure>

<p>虽然形参和实参可以让函数使用起来非常灵活，但是这样并不是万能的。</p>
<p>例如，需要计算所有传入的实参的和。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> add = <span class="hljs-keyword">function</span> (<span class="hljs-params">a， b, c</span>)&#123;<br>  <span class="hljs-comment">// 如果实参个数不确定，那么形参就不好写，因为写少了，多出来的实参就无法接收，写多了，可能又会没有值传入</span><br>  <span class="hljs-keyword">let</span> res = a + b + c<br>&#125;<br><br><span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>) <span class="hljs-comment">// 此时传入2个实参，形参3个，那么最后一个c就没有值就是undefined，此时进行运算会得到NaN</span><br></code></pre></td></tr></table></figure>

<p>通过上面例子，发现形参实参通常实在个数确定的时候使用，如果数量不确定就很尴尬…所以请看下面</p>
<h2 id="Rest参数"><a href="#Rest参数" class="headerlink" title="Rest参数"></a>Rest参数</h2><p>rest是剩余的意思，rest参数是用于函数参数不确定，每次传入的数量都不同，或者函数参数过多，但是又不想写那么多形参的情况，那么rest可以一次性全部接收</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 例如，计算传入的所有数据</span><br><span class="hljs-keyword">let</span> add = <span class="hljs-keyword">function</span> (<span class="hljs-params">...rest</span>) &#123;<br>  <span class="hljs-keyword">let</span> res = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> value <span class="hljs-keyword">of</span> rest) &#123;<br>    res += value<br>  &#125;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>&#125;<br><br><span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>) <span class="hljs-comment">// 实参2个，此时rest接收到就是两个数据，  输出 3</span><br><br>add (<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>) <span class="hljs-comment">// 实参3个，rest内就是3个数据。输出 12</span><br></code></pre></td></tr></table></figure>

<p>通过上面例子，可以看出，rest非常灵活，可以用于接收所有实参</p>
<p>如果需要接收部分参数，也可以这么做</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> add = <span class="hljs-keyword">function</span> (<span class="hljs-params">a, b, ...rest</span>) &#123;&#125;<br><br><span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>) <span class="hljs-comment">// 此时 a = 1 b = 2 rest = [3,4,5]</span><br></code></pre></td></tr></table></figure>

<blockquote>
<p>所以，rest是用于接收剩余没有被形参所接收的全部参数的。如果一个形参都没有，只有rest，那么rest接收所有，如果rest前面有形参，则先优先其他形参接收，剩余没有被接收的都在rest内。所以rest的名字非常形象【剩余参数】</p>
</blockquote>
<p>请注意的是，rest必须是最后一个参数，rest参数后面不能写其他形参。下面的写法都是错误的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> fn = <span class="hljs-keyword">function</span> (<span class="hljs-params">...rest, a</span>)&#123;&#125;<br><br><span class="hljs-keyword">let</span> fn1 = <span class="hljs-keyword">function</span> (<span class="hljs-params">a, ...rest, b</span>)&#123;&#125;<br><br><span class="hljs-keyword">let</span> fn2 = <span class="hljs-keyword">function</span> (<span class="hljs-params">...rest, ...rest2</span>) &#123;&#125;<br><span class="hljs-comment">// 这三种都是错的。</span><br></code></pre></td></tr></table></figure>

<h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>上面的所有函数，数据只能从外传入内，然后在内部使用。无法将函数内的运算结果返回出外部使用。这是因为函数没有设置返回值。</p>
<p>函数设置返回值使用<code>return</code>命令，<code>return</code>的作用是停止函数执行，并立刻返回后面的值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> add = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">let</span> res = <span class="hljs-number">1</span> + <span class="hljs-number">3</span><br>  <span class="hljs-keyword">return</span> res<br>&#125;<br><br><span class="hljs-title function_">add</span>() <span class="hljs-comment">// 4</span><br></code></pre></td></tr></table></figure>

<p>函数内一旦执行到<code>return</code>的行，就会立刻返回值。下一行之后的代码都永远不会执行。</p>
<h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><p>箭头函数是<code>function</code>函数在某些情况的特殊写法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> fn = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> + <span class="hljs-number">3</span><br>&#125;<br><br><span class="hljs-comment">// 上面fn函数执行后，立刻返回1+3的值，对应的箭头函数写法</span><br><span class="hljs-keyword">let</span> <span class="hljs-title function_">afn</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-number">1</span> + <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure>

<p>箭头函数<code>=&gt;</code>之后的内容就相当于<code>function</code>函数return之后的内容。但是这种写法只适合上面的情况。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> fn = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">let</span> a = <span class="hljs-number">3</span><br>  <span class="hljs-keyword">let</span> b = <span class="hljs-number">2</span><br>  <span class="hljs-keyword">let</span> c = a ** b<br>  <span class="hljs-keyword">return</span> c<br>&#125;<br><br><span class="hljs-comment">// 上面的函数，函数体内有多条语句时，需要下面写法</span><br><span class="hljs-keyword">let</span> <span class="hljs-title function_">afn</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">let</span> a = <span class="hljs-number">3</span><br>  <span class="hljs-keyword">let</span> b = <span class="hljs-number">2</span><br>  <span class="hljs-keyword">let</span> c = a ** b<br>  <span class="hljs-keyword">return</span> c<br>&#125;<br></code></pre></td></tr></table></figure>

<p>通过上面两个例子可以发现，如果箭头函数内有多条语句时，需要写花括号。没有花括号的适合，箭头后只能写一条语句，并且语句的结果会默认被return，有花括号时，如果需要返回值，需要明确写上return</p>
<p>如果需要传参时：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> add = <span class="hljs-keyword">function</span> (<span class="hljs-params">a, b, ...rest</span>) &#123;<br>  <span class="hljs-keyword">let</span> res = a + b<br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> value <span class="hljs-keyword">of</span> rest) &#123;<br>    res += value<br>  &#125;<br>  <span class="hljs-keyword">return</span> res<br>&#125;<br><br><span class="hljs-comment">// 以上函数等价于下面箭头函数</span><br><span class="hljs-keyword">let</span> <span class="hljs-title function_">fn</span> = (<span class="hljs-params">a, b, ...rest</span>) =&gt; &#123;<br>  <span class="hljs-keyword">let</span> res = a + b<br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> value <span class="hljs-keyword">of</span> rest) &#123;<br>    res += value<br>  &#125;<br>  <span class="hljs-keyword">return</span> res<br>&#125;<br></code></pre></td></tr></table></figure>

<p>所以参数写法跟function函数是完全一致的。</p>
<h2 id="函数在对象内的简洁写法"><a href="#函数在对象内的简洁写法" class="headerlink" title="函数在对象内的简洁写法"></a>函数在对象内的简洁写法</h2><p>如果一个函数是对象内的某个属性的值，可以有简洁写法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> o = &#123;<br>  <span class="hljs-attr">fn</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 以上是正常写法，跟下方写法完全等价</span><br><span class="hljs-keyword">let</span> o1 = &#123;<br>  fn () &#123;<br>    <br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h1 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h1><p>作用域通俗的说，是变量起作用的范围。因为每个变量都有对应的“生活环境”</p>
<p>JavaScript中作用域主要分为以下几种：</p>
<ul>
<li>全局作用域（即script标签内的空间）</li>
<li>函数作用域（每个函数的花括号内的部分）</li>
<li>块作用域（除函数外，其他的花括号空间都是块作用域，如if的花括号）</li>
</ul>
<p><strong>变量只提供给当前环境和当前环境的子环境进行使用。</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml">	<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">		<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="language-xml">		<span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Examples<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">	<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">	<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">		<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">			<span class="hljs-comment">// 此时这里是script内部，所以这个空间是一个全局作用域，在此环境声明的变量为全局变量</span></span></span><br><span class="language-javascript"><span class="language-xml">			</span></span><br><span class="language-javascript"><span class="language-xml">			<span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span> <span class="hljs-comment">// a 为全局变量</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">			<span class="hljs-keyword">let</span> fn = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">				<span class="hljs-comment">// 这是函数体内，所以这个小空间是函数作用域</span></span></span><br><span class="language-javascript"><span class="language-xml">				<span class="hljs-keyword">let</span> a = <span class="hljs-number">2</span> <span class="hljs-comment">// 此时这个变量a服务与这个空间和这个空间的子空间</span></span></span><br><span class="language-javascript"><span class="language-xml">				<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a) <span class="hljs-comment">// 当前使用的a在这个环境中存在，所以输出 2</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">				&#123;</span></span><br><span class="language-javascript"><span class="language-xml">					<span class="hljs-comment">// 此处，直接写了一个花括号，那么就开启一个独立的空间</span></span></span><br><span class="language-javascript"><span class="language-xml">					<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a) <span class="hljs-comment">// 此时当前空间没有a，所以向上个空间查找，就找到函数内的a，所以输出 2</span></span></span><br><span class="language-javascript"><span class="language-xml">				&#125;</span></span><br><span class="language-javascript"><span class="language-xml">			&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">			<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a)  <span class="hljs-comment">// 此时的console语句是在全局环境执行，所以这里的a不是函数内的，而是全局环境的a  所以输出 1</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">			<span class="hljs-keyword">let</span> fn2 = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">				&#123;</span></span><br><span class="language-javascript"><span class="language-xml">					<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a)</span></span><br><span class="language-javascript"><span class="language-xml">					<span class="hljs-comment">// 此时这个块作用域自身空间没有a，向上级空间查找，上级空间是fn2的函数空间，也没有找到，继续向上级查找，在全局空间找到了，所以输出 1</span></span></span><br><span class="language-javascript"><span class="language-xml">				&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">			&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">		</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml">	<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure>

<p>上图作用域结构如下图所示</p>
<p>查找的规则是，先查找自身，如果查找到就用，就不在向上查找，如果没有依次向上层作用域找，直到找到为止。如果找到全局都没有找到对应名称的变量，则抛出错误<code>xxx is not defined</code>。这就是作用域的规则。</p>
<h1 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h1><h2 id="Number-1"><a href="#Number-1" class="headerlink" title="Number"></a>Number</h2><h3 id="toFixed"><a href="#toFixed" class="headerlink" title="toFixed()"></a>toFixed()</h3><p>四舍五入指定小数位数，返回结果为字符串</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> num = <span class="hljs-number">3.1415926</span><br><span class="hljs-comment">// 保留两位小数</span><br><span class="hljs-keyword">let</span> str1 = num.<span class="hljs-title function_">toFixed</span>(<span class="hljs-number">2</span>) <span class="hljs-comment">// 3.14</span><br><span class="hljs-comment">// 保留三位小数</span><br><span class="hljs-keyword">let</span> str2 = num.<span class="hljs-title function_">toFixed</span>(<span class="hljs-number">3</span>) <span class="hljs-comment">// 3.142</span><br></code></pre></td></tr></table></figure>

<h3 id="Number-isNaN"><a href="#Number-isNaN" class="headerlink" title="Number.isNaN()"></a>Number.isNaN()</h3><p>判断一个数是否是NaN</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Number</span>.<span class="hljs-built_in">isNaN</span>(<span class="hljs-string">&#x27;123&#x27;</span>) <span class="hljs-comment">// false </span><br><br><span class="hljs-title class_">Number</span>.<span class="hljs-built_in">isNaN</span>(<span class="hljs-number">456</span>) <span class="hljs-comment">// false</span><br><br><span class="hljs-title class_">Number</span>.<span class="hljs-built_in">isNaN</span>(<span class="hljs-literal">true</span>) <span class="hljs-comment">// false</span><br><br><span class="hljs-title class_">Number</span>.<span class="hljs-built_in">isNaN</span>(<span class="hljs-title class_">NaN</span>) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure>

<h3 id="Number-isFinite"><a href="#Number-isFinite" class="headerlink" title="Number.isFinite()"></a>Number.isFinite()</h3><p>检测某个值是否是有限数字</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Number</span>.<span class="hljs-built_in">isFinite</span>(<span class="hljs-number">123</span>) <span class="hljs-comment">// true</span><br><span class="hljs-title class_">Number</span>.<span class="hljs-built_in">isFinite</span>(<span class="hljs-number">12346546546545646546464646465456456456</span>) <span class="hljs-comment">// true</span><br><span class="hljs-title class_">Number</span>.<span class="hljs-built_in">isFinite</span>(<span class="hljs-literal">true</span>) <span class="hljs-comment">// false</span><br><span class="hljs-title class_">Number</span>.<span class="hljs-built_in">isFinite</span>(<span class="hljs-string">&#x27;abd&#x27;</span>) <span class="hljs-comment">// false</span><br><span class="hljs-title class_">Number</span>.<span class="hljs-built_in">isFinite</span>(<span class="hljs-title class_">NaN</span>) <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure>

<h3 id="Number-isInteger"><a href="#Number-isInteger" class="headerlink" title="Number.isInteger()"></a>Number.isInteger()</h3><p>检测某个值是否为整数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Number</span>.<span class="hljs-title function_">isInteger</span>(<span class="hljs-number">123</span>) <span class="hljs-comment">// true</span><br><span class="hljs-title class_">Number</span>.<span class="hljs-title function_">isInteger</span>(<span class="hljs-number">123.0</span>) <span class="hljs-comment">// true</span><br><span class="hljs-title class_">Number</span>.<span class="hljs-title function_">isInteger</span>(<span class="hljs-number">123.1</span>) <span class="hljs-comment">// false</span><br><span class="hljs-title class_">Number</span>.<span class="hljs-title function_">isInteger</span>(<span class="hljs-string">&#x27;abc&#x27;</span>) <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure>

<h3 id="Number-parseInt"><a href="#Number-parseInt" class="headerlink" title="Number.parseInt()"></a>Number.parseInt()</h3><p>parseInt() 函数可解析一个字符串，并返回一个整数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Number</span>.<span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27;123.456&#x27;</span>) <span class="hljs-comment">// 123</span><br><span class="hljs-title class_">Number</span>.<span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27;123aaa&#x27;</span>) <span class="hljs-comment">// 123</span><br><span class="hljs-title class_">Number</span>.<span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27;123.456aaa&#x27;</span>) <span class="hljs-comment">// 123</span><br><span class="hljs-title class_">Number</span>.<span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27;a123&#x27;</span>) <span class="hljs-comment">// NaN</span><br></code></pre></td></tr></table></figure>

<h3 id="Number-parseFloat"><a href="#Number-parseFloat" class="headerlink" title="Number.parseFloat()"></a>Number.parseFloat()</h3><p>parseInt() 函数可解析一个字符串，并返回一个浮点数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Number</span>.<span class="hljs-built_in">parseFloat</span>(<span class="hljs-string">&#x27;123.456&#x27;</span>) <span class="hljs-comment">// 123.456</span><br><span class="hljs-title class_">Number</span>.<span class="hljs-built_in">parseFloat</span>(<span class="hljs-string">&#x27;123aaa&#x27;</span>) <span class="hljs-comment">// 123</span><br><span class="hljs-title class_">Number</span>.<span class="hljs-built_in">parseFloat</span>(<span class="hljs-string">&#x27;123.456aaa&#x27;</span>) <span class="hljs-comment">// 123.456</span><br><span class="hljs-title class_">Number</span>.<span class="hljs-built_in">parseFloat</span>(<span class="hljs-string">&#x27;a123&#x27;</span>) <span class="hljs-comment">// NaN</span><br></code></pre></td></tr></table></figure>

<h2 id="String-1"><a href="#String-1" class="headerlink" title="String"></a>String</h2><h3 id="charCodeAt"><a href="#charCodeAt" class="headerlink" title="charCodeAt()"></a>charCodeAt()</h3><p>返回指定位置的字符串unicode编码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;abcde&quot;</span><br>str.<span class="hljs-title function_">charCodeAt</span>(<span class="hljs-number">2</span>)   <span class="hljs-comment">// 99 </span><br></code></pre></td></tr></table></figure>

<h3 id="String-fromCharCode"><a href="#String-fromCharCode" class="headerlink" title="String.fromCharCode()"></a>String.fromCharCode()</h3><p>通过unicode编码排序值返回对应的字符</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>(<span class="hljs-number">99</span>) <span class="hljs-comment">// c</span><br></code></pre></td></tr></table></figure>

<h3 id="substring"><a href="#substring" class="headerlink" title="substring()"></a>substring()</h3><p>substring( startNum , endNum ) 截取字符串</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;hello&quot;</span><br>str.<span class="hljs-title function_">substring</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>) <span class="hljs-comment">// e</span><br><span class="hljs-comment">// startNum 参数为起始位置(包含), endNum 参数结束位置(不包含)</span><br><span class="hljs-comment">// endNum 参数不写 默认截取所有的</span><br></code></pre></td></tr></table></figure>

<h3 id="substr"><a href="#substr" class="headerlink" title="substr( )"></a>substr( )</h3><p>substr(startNum, length) 截取字符串</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;hello&quot;</span><br>str.<span class="hljs-title function_">substr</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>) <span class="hljs-comment">//el</span><br><span class="hljs-comment">// startNum 参数为起始位置(包含), length 参数截取长度</span><br><span class="hljs-comment">// length 参数不写 默认截取所有的</span><br></code></pre></td></tr></table></figure>

<h3 id="slice"><a href="#slice" class="headerlink" title="slice( )"></a>slice( )</h3><p>slice 使用与substring 相同</p>
<h3 id="trim"><a href="#trim" class="headerlink" title="trim()"></a>trim()</h3><p>清除左右空格</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot; hello  &quot;</span><br>str.<span class="hljs-title function_">trim</span>() <span class="hljs-comment">// &quot;hello&quot;</span><br></code></pre></td></tr></table></figure>

<h3 id="replace"><a href="#replace" class="headerlink" title="replace()"></a>replace()</h3><p>replace( str , repStr ) 替换字符串</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;12345abcdef&quot;</span><br><span class="hljs-keyword">let</span> str1 = str.<span class="hljs-title function_">replace</span>(<span class="hljs-number">2</span>,<span class="hljs-number">4</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str1) <span class="hljs-comment">// 14345abcdef</span><br><span class="hljs-comment">// str 参数为查找字符的被替换字符, repStr 参数值 将替换str值</span><br><span class="hljs-comment">// 如果没有查询到将返回原字符串</span><br></code></pre></td></tr></table></figure>

<h3 id="split"><a href="#split" class="headerlink" title="split()"></a>split()</h3><p>字符串切割成数组,从选择器切割</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;hello&quot;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;e&quot;</span>))  <span class="hljs-comment">// [&quot;h&quot;, &quot;llo&quot;]</span><br></code></pre></td></tr></table></figure>

<h3 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf()"></a>indexOf()</h3><p>indexOf( Str[,num]) 查找到字符串返回下标,否则返回-1,</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> str=<span class="hljs-string">&quot;hello&quot;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;e&quot;</span>)) <span class="hljs-comment">// 1</span><br><span class="hljs-comment">// Str 参数为查找字符, num 参数为查找开始位置</span><br><span class="hljs-comment">// num参数不写 默认从0开始</span><br></code></pre></td></tr></table></figure>

<h3 id="lastIndexOf"><a href="#lastIndexOf" class="headerlink" title="lastIndexOf()"></a>lastIndexOf()</h3><p>返回结果与indexOf相同, 检索方向为从后往前;</p>
<h3 id="includes-startsWith-endsWith"><a href="#includes-startsWith-endsWith" class="headerlink" title="includes(),startsWith(),endsWith()"></a>includes(),startsWith(),endsWith()</h3><blockquote>
<p>includes((str[,num]) 返回布尔值，表示是否找到了参数字符串</p>
<p>startsWith((str[,num]) 返回布尔值，表示参数字符串是否在原字符串的头部</p>
<p>endsWith((str[,num]) 返回布尔值，表示参数字符串是否在原字符串的尾部</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;apple banana&quot;</span>;<br>str.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;apple&quot;</span>) <span class="hljs-comment">// true</span><br><br><br><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;http://www.baidu.com&quot;</span>;<br>str.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&quot;http&quot;</span>);      <span class="hljs-comment">// true</span><br>str.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&quot;https&quot;</span>);      <span class="hljs-comment">// false</span><br><br><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;http://www.baidu.com&quot;</span>;<br>str.<span class="hljs-title function_">endsWith</span>(<span class="hljs-string">&quot;com&quot;</span>);      <span class="hljs-comment">// true</span><br>str.<span class="hljs-title function_">endsWith</span>(<span class="hljs-string">&quot;cn&quot;</span>);      <span class="hljs-comment">// false</span><br><br><span class="hljs-comment">// Str 参数为查找字符, num 参数为查找开始位置</span><br><span class="hljs-comment">// num参数不写 默认从0开始</span><br></code></pre></td></tr></table></figure>

<h3 id="repeat"><a href="#repeat" class="headerlink" title="repeat()"></a>repeat()</h3><p>repeat(n) 将字符串重复n次</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;夏栀&quot;</span>;<br><span class="hljs-keyword">let</span> repstr = str.<span class="hljs-title function_">repeat</span>(<span class="hljs-number">3</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(repstr);  <span class="hljs-comment">//夏栀夏栀夏栀</span><br><span class="hljs-comment">// n 参数为重复几次   参数如果是小数，会被向下取整</span><br></code></pre></td></tr></table></figure>

<h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><h3 id="push"><a href="#push" class="headerlink" title="push()"></a>push()</h3><p>push(data[,data]) 依次往数组最后添加数组项 ,可以添加多个</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><span class="hljs-keyword">let</span> arr1 = arr.<span class="hljs-title function_">push</span>(<span class="hljs-number">4</span>,<span class="hljs-number">5</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr)  <span class="hljs-comment">// [1,2,3,4,5]  </span><br><span class="hljs-comment">// 返回值新数组的length    改变原数组</span><br></code></pre></td></tr></table></figure>

<h3 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h3><p>删除数组最后一项</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><span class="hljs-keyword">let</span> arr1 = arr.<span class="hljs-title function_">pop</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr) <span class="hljs-comment">// [1,2]</span><br><span class="hljs-comment">// 返回值是删除的数值  改变原数组</span><br></code></pre></td></tr></table></figure>

<h3 id="shift"><a href="#shift" class="headerlink" title="shift()"></a>shift()</h3><p>移除数组中第一项并返回该项</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><span class="hljs-keyword">let</span> arr1 = arr.<span class="hljs-title function_">shift</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr)     <span class="hljs-comment">// [2,3]</span><br><span class="hljs-comment">// 返回值是删除的数值   改变原数组</span><br></code></pre></td></tr></table></figure>

<h3 id="unshift"><a href="#unshift" class="headerlink" title="unshift()"></a>unshift()</h3><p>在数组前添加任意数组项,可以添加多个</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><span class="hljs-keyword">let</span> arr1 = arr.<span class="hljs-title function_">unshift</span>(<span class="hljs-number">0</span>)    <span class="hljs-comment">// 改变原数组       </span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr) <span class="hljs-comment">// [0,1,2,3] </span><br><span class="hljs-comment">// 返回值新数组的length          改变原数组</span><br></code></pre></td></tr></table></figure>

<h3 id="splice"><a href="#splice" class="headerlink" title="splice()"></a>splice()</h3><p>splice(index,num,info) 具有截取,替换,添加方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//- index 从数组第几个项开始</span><br><span class="hljs-comment">//- num  截取的数量 </span><br><span class="hljs-comment">//- info 从截取位置开始添加数组项</span><br><span class="hljs-comment">//- 会改变原数组  返回截取的数组</span><br><br><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br>arr.<span class="hljs-title function_">splice</span>(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr)<br><br><span class="hljs-comment">//1)截取方法     截取数量</span><br><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br>arr.<span class="hljs-title function_">splice</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br><br><span class="hljs-comment">//2)添加方法    截取数量为零</span><br>arr.<span class="hljs-title function_">splice</span>(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)<br>arr.<span class="hljs-title function_">splice</span>(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)  <span class="hljs-comment">// 添加多个  </span><br><br><span class="hljs-comment">//4)替代方法    截取数量与添加相同</span><br>arr.<span class="hljs-title function_">splice</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure>

<h3 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h3><p>sort( function ) 数组排序</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// function 参数为一个函数体   函数体接收两个形参</span><br><span class="hljs-comment">// 不传参数 根据ASCII码表 来比较数组中的第一个值排序</span><br><br><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">22</span>,<span class="hljs-number">44</span>,<span class="hljs-number">11</span>,<span class="hljs-number">33</span>,<span class="hljs-number">55</span>]<br>arr.<span class="hljs-title function_">sort</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">a,b</span>)&#123;<br>    <span class="hljs-keyword">return</span> a - b <span class="hljs-comment">//从小到大排列</span><br>    <span class="hljs-keyword">return</span> b - a <span class="hljs-comment">//从达到小排列</span><br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr)<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">函数 return正数 不换位置</span><br><span class="hljs-comment">	返回大于0 换位置</span><br><span class="hljs-comment">	小于0 不会位置</span><br><span class="hljs-comment">	与每一项比较</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure>

<h3 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h3><p>合并两个数组为一个新的数组 不改变原数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr1 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><span class="hljs-keyword">let</span> arr2 = [<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>]<br><span class="hljs-keyword">let</span> arr = arr1.<span class="hljs-title function_">concat</span>(arr2)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr)<br></code></pre></td></tr></table></figure>

<h3 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h3><p>join(str) 根据参数规则返回新的字符串 不改变原数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br><span class="hljs-keyword">let</span> arr1 = arr.<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;-&quot;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr1) <span class="hljs-comment">// 1-2-3-4</span><br><span class="hljs-comment">// 将数组合并成字符串</span><br></code></pre></td></tr></table></figure>

<h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h3><p>数组反向排序 改变原数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br><span class="hljs-keyword">let</span> arr1 = arr.<span class="hljs-title function_">reverse</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr1)  <span class="hljs-comment">// [4, 3, 2, 1]</span><br></code></pre></td></tr></table></figure>

<h3 id="slice-1"><a href="#slice-1" class="headerlink" title="slice()"></a>slice()</h3><p>slice(startNum,endNum) 截取数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br>arr.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>)<br><span class="hljs-comment">// startNum 参数为起始位置(包含), endNum 参数结束位置(不包含)</span><br><span class="hljs-comment">// endNum 参数不写 默认截取所有的</span><br></code></pre></td></tr></table></figure>

<h3 id="Array-isArray"><a href="#Array-isArray" class="headerlink" title="Array.isArray()"></a>Array.isArray()</h3><p>判断是否是数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(arr))<span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure>

<h3 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from()"></a>Array.from()</h3><p>把类数组(获取一组元素,arguments)对象转成数组</p>
<h3 id="indexOf-Str-num"><a href="#indexOf-Str-num" class="headerlink" title="indexOf(Str[,num])"></a>indexOf(Str[,num])</h3><p>查找到数组项返回下标, 否则返回-1, 与字符串使用一样</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>arr.<span class="hljs-title function_">indexOf</span>(<span class="hljs-number">2</span>)<br><span class="hljs-comment">// Str 参数为查找字符, num 参数为查找开始位置</span><br><span class="hljs-comment">// num参数不写 默认从0开始</span><br></code></pre></td></tr></table></figure>

<h3 id="includes"><a href="#includes" class="headerlink" title="includes()"></a>includes()</h3><p>查看数组中是否包含参数的值,返回布尔值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&quot;apple&quot;</span> , <span class="hljs-string">&quot;origan&quot;</span>,<span class="hljs-string">&quot;banana&quot;</span>];<br><span class="hljs-keyword">var</span> a = arr.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;apple&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);   <span class="hljs-comment">// true</span><br><br><span class="hljs-keyword">var</span> b = arr.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;apple2&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b);   <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure>

<h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h3><p>循环数组,无返回值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>,<span class="hljs-string">&quot;d&quot;</span>]<br>arr.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">value,index,arr</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value,index,arr);<br>&#125;)<br></code></pre></td></tr></table></figure>

<h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>正常情况下,需要配合return使用,返回新数组,如果没有return,这个就相当于forEach</p>
<p>map如果没有return 则返回元素项数个undefined组成的新数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 整理数据结构</span><br><span class="hljs-keyword">let</span> arr= [<br>    &#123;<span class="hljs-attr">title</span>: <span class="hljs-string">&quot;aa&quot;</span>,<span class="hljs-attr">read</span>: <span class="hljs-number">100</span>&#125;,<br>    &#123;<span class="hljs-attr">title</span>: <span class="hljs-string">&quot;bb&quot;</span>,<span class="hljs-attr">read</span>: <span class="hljs-number">20</span>&#125;,<br>    &#123;<span class="hljs-attr">title</span>: <span class="hljs-string">&quot;cc&quot;</span>,<span class="hljs-attr">read</span>: <span class="hljs-number">50</span>&#125;<br>]<br><span class="hljs-keyword">let</span> newArr = arr.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item,index,arr</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> json = &#123;&#125;;<br>    json.<span class="hljs-property">shop</span> = <span class="hljs-string">`*<span class="hljs-subst">$&#123;item.title&#125;</span>--`</span>;<br>    json.<span class="hljs-property">price</span> = <span class="hljs-string">`￥<span class="hljs-subst">$&#123;item.read&#125;</span>元`</span><br>    <span class="hljs-keyword">return</span> json;<br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newArr);<br></code></pre></td></tr></table></figure>

<h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><p>用的极少,比如求数组的和,阶乘都可以</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>]<br><span class="hljs-keyword">let</span> res = arr.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">prev,cur,index,arr</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> prev + cur;<br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);  <span class="hljs-comment">//55</span><br><span class="hljs-comment">// prev是上一次的运算结果,cur是当前的值,index是当前的下标,arr是当前的数组</span><br></code></pre></td></tr></table></figure>

<h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><p>Object.assign(目标对象,需要合并的对象)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> json = &#123;<span class="hljs-attr">a</span>:<span class="hljs-number">1</span>&#125;;<br><span class="hljs-keyword">let</span> json2 = &#123;<span class="hljs-attr">b</span>:<span class="hljs-number">2</span>&#125;;<br><span class="hljs-keyword">let</span> json3 = &#123;<span class="hljs-attr">c</span>:<span class="hljs-number">3</span>&#125;;<br><br><span class="hljs-keyword">let</span> obj = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(&#123;&#125;,json,json2,json3);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj);     <span class="hljs-comment">// &#123;a: 1, b: 2, c: 3&#125;</span><br></code></pre></td></tr></table></figure>

<h1 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h1><ol>
<li><p>setTimeout() 用来指定某个函数或字符串在指定的毫秒数之后执行 <strong>只执行一次</strong></p>
<ul>
<li>clearTimeout() 清除定时器</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/*setTimeout() 有两个参数</span><br><span class="hljs-comment">	1.执行体 注意:函数传递参数可以把实参放在时间参数的后面(不兼容IE9及以下)</span><br><span class="hljs-comment">	2.时间 多久执行*/</span><br><span class="hljs-keyword">let</span> a=<span class="hljs-number">0</span><br><span class="hljs-keyword">let</span> <span class="hljs-title function_">fun</span> =(<span class="hljs-params"></span>)=&gt;&#123;<br>    a++<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a)<br>    <span class="hljs-built_in">setTimeout</span>(fun,<span class="hljs-number">1000</span>)<br>&#125;<br><span class="hljs-built_in">setTimeout</span>(fun,<span class="hljs-number">1000</span>)<br><br><span class="hljs-comment">//clearTimeout() //参数是定时器的名称</span><br><span class="hljs-keyword">let</span> timer = <span class="hljs-number">0</span><br><span class="hljs-keyword">let</span> a = <span class="hljs-number">0</span><br><span class="hljs-keyword">let</span> <span class="hljs-title function_">fun</span>=(<span class="hljs-params"></span>)=&gt;&#123;<br>    a++<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a)<br>    timer = <span class="hljs-built_in">setTimeout</span>(fun,<span class="hljs-number">1000</span>)<br>&#125;<br><span class="hljs-title function_">fun</span>()<br><br><span class="hljs-variable language_">document</span>.<span class="hljs-property">onclick</span> = <span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;定时器停止了&quot;</span>)<br>    <span class="hljs-built_in">clearTimeout</span>(timer)<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p>setInterval() 用来指定某个函数或字符串在指定的毫秒数之后执行 <strong>无限循环</strong></p>
<ul>
<li>clearInterval() 清除定时器</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//传递参数是一样的结构</span><br><span class="hljs-keyword">let</span> timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>)<br>&#125;,<span class="hljs-number">1000</span>)<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">onclick</span> = <span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;定时器停止了&quot;</span>)<br>    <span class="hljs-built_in">clearInterval</span>(timer)<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p>requestAnimationFrame() 浏览器专门为动画提供的API 浏览器会自动优化方法的调用 页面不是激活的状态下 动画暂停 有效节省CPU开销 用法与setTimeout相似 只是不需要设置时间间隔</p>
<ul>
<li>cancelAnimationFrame()</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//复合动画帧的计时器,使得动画更流畅,也只是执行一次</span><br><span class="hljs-keyword">let</span> timer = <span class="hljs-number">0</span><br><span class="hljs-keyword">let</span> a = <span class="hljs-number">0</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fun</span>(<span class="hljs-params"></span>)&#123;<br>    a++<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a)<br>    timer = <span class="hljs-title function_">requestAnimationFrame</span>(fun)<br>&#125;<br><span class="hljs-title function_">fun</span>()<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">onclick</span>=<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;定时器停止了&quot;</span>)<br>    <span class="hljs-title function_">cancelAnimationFrame</span>(timer)<br>&#125;<br></code></pre></td></tr></table></figure></li>
</ol>
<h1 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h1><p>内置对象是系统预先提供的一些特殊对象，能实现不同的功能</p>
<h2 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h2><p>Math是数学对象，跟数学相关的api都在其身上</p>
<p>下面来了解些常用对象</p>
<ul>
<li><p>Math.random() 随机生成0到1之间的数 包括0不包括1</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-property">onclick</span> = <span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>())<br>&#125;<br><br><span class="hljs-comment">//生成任意范围的随机数</span><br><span class="hljs-keyword">let</span> <span class="hljs-title function_">getRandom</span> = (<span class="hljs-params">min,max</span>)=&gt; <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()*(max-min)+min<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">onclick</span> =<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-keyword">let</span> x = <span class="hljs-title function_">getRandom</span>(<span class="hljs-number">5</span>,<span class="hljs-number">10</span>)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x)<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p>Math.ceil() 向上取整(天花板值) 遇到小数向上取整</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(<span class="hljs-number">1.1</span>)) <span class="hljs-comment">//2</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>Math.floor() 向下取整(地板值) 遇到小数向下取整</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-number">1.9</span>)) <span class="hljs-comment">//1</span><br><br><span class="hljs-comment">//返回整数部分</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getInt</span>(<span class="hljs-params">x</span>)&#123;<br>    x = <span class="hljs-title class_">Number</span>(x)<br>    <span class="hljs-keyword">return</span> x&lt;<span class="hljs-number">0</span>?<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(x):<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(x)<br>&#125;<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">getInt</span>(<span class="hljs-number">0.5</span>))<br>&#125;<br><span class="hljs-comment">//返回任意范围的随机整数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getIntRadom</span>(<span class="hljs-params">min,max</span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()*(max-min)+min)<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">getIntRandom</span>(<span class="hljs-number">2</span>,<span class="hljs-number">6</span>))<br></code></pre></td></tr></table></figure>
</li>
<li><p>Math.round() 四舍五入</p>
</li>
<li><p>Math.max() 取得最大值</p>
</li>
<li><p>Math.min() 取得最小值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//随机排序</span><br><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span>,<span class="hljs-number">1</span>,<span class="hljs-number">6</span>,<span class="hljs-number">9</span>]<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    arr.<span class="hljs-title function_">sort</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    	<span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()-<span class="hljs-number">0.5</span><br>	&#125;)<br>	<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr)<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p>Math.pow() 指数 第一个参数为底数 第二个参数为幂</p>
</li>
</ul>
<h3 id="数学弧度与角度"><a href="#数学弧度与角度" class="headerlink" title="数学弧度与角度"></a>数学弧度与角度</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//60° = π/3</span><br><span class="hljs-comment">//90° = π/2  角度转弧度</span><br><br><span class="hljs-comment">//弧度 = 角度 * π/180</span><br><span class="hljs-comment">//求一个半径为5的圆心面积</span><br><span class="hljs-keyword">let</span> x = <span class="hljs-number">5</span><br><span class="hljs-keyword">let</span> y = <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>*<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">pow</span>(x,<span class="hljs-number">2</span>) <span class="hljs-comment">// 圆心面积算法</span><br>注意:<span class="hljs-variable constant_">JS</span>三角函数里面的参数值不是角度 是角度对应的弧度值<br><br><span class="hljs-comment">//30度角对应的弧度制</span><br><span class="hljs-keyword">let</span> angle = <span class="hljs-number">30</span><br><span class="hljs-keyword">let</span> randian = angle*<span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>/<span class="hljs-number">180</span>  <span class="hljs-comment">//角度转换成弧度</span><br><br>x/<span class="hljs-number">30</span><br></code></pre></td></tr></table></figure>

<h3 id="三角函数"><a href="#三角函数" class="headerlink" title="三角函数"></a>三角函数</h3><ul>
<li>Math.sin() 返回正弦 参数为弧度值</li>
<li>Math.cos() 返回余弦</li>
<li>Math.tan() 返回正切</li>
<li>Math.asin() 返回反正弦</li>
<li>Math.atan() 返回反正切</li>
<li>Math.acos() 返回反余弦</li>
</ul>
<p>其他API可参考<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math">MDN</a></p>
<h3 id="第三方插件：mathjs"><a href="#第三方插件：mathjs" class="headerlink" title="第三方插件：mathjs"></a>第三方插件：mathjs</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#x27;https://cdn.bootcdn.net/ajax/libs/mathjs/9.3.2/math.min.js&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>上面代码放到head标签中即可</p>
<p>该插件方法集成在对象<code>math</code>上，请注意<code>math</code>不是<code>Math</code></p>
<p>大写Math是内置的，math是插件</p>
<p>该插件功能较多，建议查看官网：<a href="https://mathjs.org/">mathjs</a></p>
<h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p>这里主要讲几个常用的api</p>
<h4 id="计算表达式结果"><a href="#计算表达式结果" class="headerlink" title="计算表达式结果"></a>计算表达式结果</h4><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">math.evaluate(<span class="hljs-string">&#x27;1 + 2 * 3&#x27;</span>) <span class="hljs-comment">// 7</span><br>math.evaluate(<span class="hljs-string">&#x27;(1 + 2) * 3&#x27;</span>) <span class="hljs-comment">// 9</span><br>math.evaluate(<span class="hljs-string">&#x27;1 + 2^2&#x27;</span>) <span class="hljs-comment">// 5</span><br>math.evaluate(<span class="hljs-string">&#x27;1 - sqrt(4)&#x27;</span>) <span class="hljs-comment">// -1            sqrt(4)开平方根</span><br></code></pre></td></tr></table></figure>

<h4 id="解决0-1-0-2问题"><a href="#解决0-1-0-2问题" class="headerlink" title="解决0.1+0.2问题"></a>解决0.1+0.2问题</h4><p>JS中的数字是用<a href="http://en.wikipedia.org/wiki/Floating_point#Internal_representation">IEEE 754 双精度 64 位浮点数</a>来存储的，它由64位组成，这种方式当十进制小数的二进制表示的有限数字超过 52 位时，在 JavaScript 里是不能精确存储的，这时候就存在舍入误差</p>
<p>所以很多采用双精度64位浮点数方式存储数字的语言都是这个结果<code>0.1+0.2=0.30000000000000004</code></p>
<p>此时可以用mathjs提供的大数字进行运算，就能解决这种问题</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">math.<span class="hljs-title function_">config</span>(&#123;<br>  <span class="hljs-attr">number</span>: <span class="hljs-string">&#x27;BigNumber&#x27;</span>,<br>  <span class="hljs-attr">precision</span>: <span class="hljs-number">64</span><br>&#125;)<br>math.evaluate(<span class="hljs-string">&#x27;0.1+0.2&#x27;</span>).<span class="hljs-title function_">toString</span>() <span class="hljs-comment">// 0.3   </span><br><span class="hljs-comment">//此时evaluate返回是一个对象，想要得到能理解的结果，调用toString方法即可</span><br></code></pre></td></tr></table></figure>

<h4 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h4><p>正常来说，原生<code>Math.random</code>只能随机0到1之间的数字，用起来很不方便</p>
<p><code>math.random(min, max)</code>可随机指定区间的任意数字，min指定最小边界，max最大边界，区间为左闭又开</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">math.<span class="hljs-title function_">random</span>(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>) <span class="hljs-comment">// 随机1到5区间任意数字</span><br></code></pre></td></tr></table></figure>

<p><code>math.randomInt(min, max)</code>，可随机指定区间的任意<strong>整数</strong>，min指定最小边界，max最大边界，区间为左闭又开</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">math.<span class="hljs-title function_">randomInt</span>(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>) <span class="hljs-comment">// 随机1到5之间任意整数</span><br></code></pre></td></tr></table></figure>

<h4 id="四舍五入"><a href="#四舍五入" class="headerlink" title="四舍五入"></a>四舍五入</h4><p><code>math.round(浮点数，保留位数)</code>保留小数位四舍五入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 保留三位小数</span><br>math.<span class="hljs-title function_">round</span>(<span class="hljs-number">3.1415926</span>, <span class="hljs-number">3</span>) <span class="hljs-comment">// 3.142  </span><br></code></pre></td></tr></table></figure>

<p>原生<code>Math</code>上的方法在<code>mathjs</code>上也存在，功能基本一致。</p>
<h2 id="日期对象"><a href="#日期对象" class="headerlink" title="日期对象"></a>日期对象</h2><h3 id="创建日期对象"><a href="#创建日期对象" class="headerlink" title="创建日期对象"></a>创建日期对象</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//Date() 当前电脑时间戳</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Date</span>())<br><span class="hljs-keyword">let</span> nowT = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>() <span class="hljs-comment">//new一个时间对象,可以接受参数来设置时间戳</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(nowT) <span class="hljs-comment">//返回当前时间</span><br><span class="hljs-keyword">let</span> nowT = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">123456789</span>) <span class="hljs-comment">//这个参数是一个毫秒值 从1970年1月1日00:00:00开始加上这个一个毫秒值</span><br><span class="hljs-keyword">let</span> nowT = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-string">&quot;January 6,2014&quot;</span>) <span class="hljs-comment">//参数为日期字符串</span><br><span class="hljs-keyword">let</span> nowT = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">2019</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">19</span>,<span class="hljs-number">30</span>,<span class="hljs-number">50</span>,<span class="hljs-number">20</span>) <span class="hljs-comment">//参数为多个整数包括:年 月 日 时 分 秒 毫秒  注意:这里的月份是从0开始的</span><br><span class="hljs-keyword">let</span> nowT = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-string">&quot;2019-5-1&quot;</span>)<br><span class="hljs-keyword">let</span> nowT = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-string">&quot;2019/5/1&quot;</span>)<br><span class="hljs-comment">//注意:字符串参数是时间节点 数字参数会默认为毫秒值</span><br></code></pre></td></tr></table></figure>

<h3 id="日期对象运算"><a href="#日期对象运算" class="headerlink" title="日期对象运算"></a>日期对象运算</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> nowT1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">2019</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>)<br><span class="hljs-keyword">let</span> nowT2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(nowT1 - nowT2) <span class="hljs-comment">//得到的是一个毫秒值</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(nowT1 + nowT2) <span class="hljs-comment">//字符串的拼接</span><br></code></pre></td></tr></table></figure>

<h3 id="日期对象的静态方法"><a href="#日期对象的静态方法" class="headerlink" title="日期对象的静态方法"></a>日期对象的静态方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> nowT = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>() <span class="hljs-comment">//返回当前事件距离1970年1月1日00:00:00之间的时间戳距离</span><br><span class="hljs-keyword">let</span> nowT = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-number">2019</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>) <span class="hljs-comment">//接收一个日期字符串 返回从1970-1-1 00:00:00到该日期的毫秒数</span><br><span class="hljs-keyword">let</span> noeT = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">UTC</span>(<span class="hljs-number">2019</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>) <span class="hljs-comment">//接收以逗号隔开的日期参数 返回从1970-1-1 00:00:00到该日期的毫秒数 接收的月份是0-11</span><br></code></pre></td></tr></table></figure>

<h3 id="日期格式化方法"><a href="#日期格式化方法" class="headerlink" title="日期格式化方法"></a>日期格式化方法</h3><ol>
<li><p>toDateString() 返回的是星期 月 日 年</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> nowT = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()<br><span class="hljs-keyword">let</span> <span class="hljs-title class_">Time</span> = nowT.<span class="hljs-title function_">toDateString</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Time</span>)<br></code></pre></td></tr></table></figure>
</li>
<li><p>toTimeString() 返回的是时 分 秒 时区</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> nowT = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()<br><span class="hljs-keyword">let</span> <span class="hljs-title class_">Time</span> = nowT.<span class="hljs-title function_">toTimeString</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Time</span>)<br></code></pre></td></tr></table></figure>
</li>
<li><p>toLocaleDateString() 返回的是年 月 日</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> nowT = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()<br><span class="hljs-keyword">let</span> <span class="hljs-title class_">Time</span> = nowT.<span class="hljs-title function_">toLocaleDateString</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Time</span>)<br></code></pre></td></tr></table></figure>
</li>
<li><p>toLocaleTimeString() 返回本地时 分 秒</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> nowT = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()<br><span class="hljs-keyword">let</span> <span class="hljs-title class_">Time</span> = nowT.<span class="hljs-title function_">toLocaleTimeString</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Time</span>)<br></code></pre></td></tr></table></figure>
</li>
<li><p>toUTCString() 返回对应的UTC时间 也就是国际标准时间 比北京晚8个小时</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> nowT = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()<br><span class="hljs-keyword">let</span> <span class="hljs-title class_">Time</span> = nowT.<span class="hljs-title function_">toUTCString</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Time</span>)<br></code></pre></td></tr></table></figure>
</li>
<li><p>toLocaleString() 返回本地时间</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> nowT = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()<br><span class="hljs-keyword">let</span> <span class="hljs-title class_">Time</span> = nowT.<span class="hljs-title function_">toLocaleString</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Time</span>)<br></code></pre></td></tr></table></figure></li>
</ol>
<h3 id="日期方法"><a href="#日期方法" class="headerlink" title="日期方法"></a>日期方法</h3><ol>
<li>getTime() 返回一个毫秒值 到时间零点的距离</li>
<li>getFullYear() 返回年</li>
<li>getMonth() 返回月 注意:得到的月份是从0开始 要返回当前月需要加1</li>
<li>getDate() 返回日期</li>
<li>getHours() 返回小时</li>
<li>getMinutes() 返回分钟</li>
<li>getSeconds() 返回秒</li>
<li>getDay() 返回星期</li>
<li>getTimezoneOffset() 返回是当前事件与UTC的时区差异 以分钟数表示(考虑夏令营时)</li>
</ol>
<h3 id="获取当前时间"><a href="#获取当前时间" class="headerlink" title="获取当前时间"></a>获取当前时间</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> nowT = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-keyword">let</span> oWrap = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;wrap&quot;</span>)<br>    <span class="hljs-keyword">let</span> date = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(),<br>    	oYear = date.<span class="hljs-title function_">getFullYear</span>(),<br>    	oMonth = date.<span class="hljs-title function_">getMonth</span>(),<br>    	oDate = date.<span class="hljs-title function_">getDate</span>(),<br>    	oHours = date.<span class="hljs-title function_">getHours</span>(),<br>    	oMinut = date.<span class="hljs-title function_">getMinutes</span>(),<br>    	oSecond = date.<span class="hljs-title function_">getSeconds</span>(),<br>    	oDay = date.<span class="hljs-title function_">getDay</span>(),<br>    	aDayArr = [<span class="hljs-string">&quot;日&quot;</span>,<span class="hljs-string">&quot;一&quot;</span>,<span class="hljs-string">&quot;二&quot;</span>,<span class="hljs-string">&quot;三&quot;</span>,<span class="hljs-string">&quot;四&quot;</span>,<span class="hljs-string">&quot;五&quot;</span>,<span class="hljs-string">&quot;六&quot;</span>];<br>    oWrap.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">`现在的时间是<span class="hljs-subst">$&#123;oYear&#125;</span>年<span class="hljs-subst">$&#123;oMonth&#125;</span>月<span class="hljs-subst">$&#123;oDate&#125;</span>日,星期<span class="hljs-subst">$&#123;aDayArr[oDay]&#125;</span>,<span class="hljs-subst">$&#123;oHours&#125;</span>时<span class="hljs-subst">$&#123;oMinut&#125;</span>分<span class="hljs-subst">$&#123;oSecond&#125;</span>秒`</span><br>&#125;,<span class="hljs-number">1000</span>)<br><br><span class="hljs-keyword">let</span> <span class="hljs-title function_">add0</span> = n =&gt; n=n&lt;<span class="hljs-number">10</span>?<span class="hljs-string">&quot;0&quot;</span>+<span class="hljs-attr">n</span>:n+<span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure>

<h3 id="第三方插件：date-js"><a href="#第三方插件：date-js" class="headerlink" title="第三方插件：date.js"></a>第三方插件：date.js</h3><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><p>Datejs是一个用来操作日期的库，官方网站为<a href="http://www.datejs.com/">datejs.com</a>。</p>
<p>下载后插入网页，就可以使用。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/datejs/1.0/date.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>官方还提供多种语言的版本，可以选择使用。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">// 美国版<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;date-en-US.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>// 中国版<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;date-zh-CN.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h4 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h4><p>Datejs在原生的Date对象上面，定义了许多语义化的方法，可以方便地链式使用。</p>
<h4 id="日期信息"><a href="#日期信息" class="headerlink" title="日期信息"></a>日期信息</h4><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Date</span>.<span class="hljs-title function_">today</span>() <span class="hljs-comment">// 返回当天日期，时间定在这一天开始的00:00 </span><br><br><span class="hljs-title class_">Date</span>.<span class="hljs-title function_">today</span>().<span class="hljs-title function_">getDayName</span>() <span class="hljs-comment">// 今天是星期几</span><br><br><span class="hljs-title class_">Date</span>.<span class="hljs-title function_">today</span>().<span class="hljs-title function_">is</span>().<span class="hljs-title function_">friday</span>()      <span class="hljs-comment">// 今天是否为星期五，返回true或者false</span><br><span class="hljs-title class_">Date</span>.<span class="hljs-title function_">today</span>().<span class="hljs-title function_">is</span>().<span class="hljs-title function_">fri</span>()         <span class="hljs-comment">// 等同于上一行</span><br><br><span class="hljs-title class_">Date</span>.<span class="hljs-title function_">today</span>().<span class="hljs-title function_">is</span>().<span class="hljs-title function_">november</span>()    <span class="hljs-comment">// 今天是否为11月，返回true或者false</span><br><span class="hljs-title class_">Date</span>.<span class="hljs-title function_">today</span>().<span class="hljs-title function_">is</span>().<span class="hljs-title function_">nov</span>()         <span class="hljs-comment">// 等同于上一行</span><br><br><span class="hljs-title class_">Date</span>.<span class="hljs-title function_">today</span>().<span class="hljs-title function_">isWeekday</span>() <span class="hljs-comment">// 今天是否为工作日（周一到周五）</span><br></code></pre></td></tr></table></figure>

<h4 id="日期的变更"><a href="#日期的变更" class="headerlink" title="日期的变更"></a>日期的变更</h4><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Date</span>.<span class="hljs-title function_">today</span>().<span class="hljs-title function_">next</span>().<span class="hljs-title function_">friday</span>()    <span class="hljs-comment">// 下一个星期五</span><br><span class="hljs-title class_">Date</span>.<span class="hljs-title function_">today</span>().<span class="hljs-title function_">last</span>().<span class="hljs-title function_">monday</span>()    <span class="hljs-comment">// 上一个星期一</span><br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">next</span>().<span class="hljs-title function_">march</span>()       <span class="hljs-comment">// 下个三月份的今天</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">last</span>().<span class="hljs-title function_">week</span>()        <span class="hljs-comment">// 上星期的今天</span><br><br><span class="hljs-title class_">Date</span>.<span class="hljs-title function_">today</span>().<span class="hljs-title function_">add</span>(<span class="hljs-number">5</span>).<span class="hljs-title function_">days</span>() <span class="hljs-comment">// 五天后</span><br><br><span class="hljs-title class_">Date</span>.<span class="hljs-title function_">friday</span>() <span class="hljs-comment">// 本周的星期五</span><br><br><span class="hljs-title class_">Date</span>.<span class="hljs-title function_">march</span>() <span class="hljs-comment">// 今年的三月</span><br><br><span class="hljs-title class_">Date</span>.<span class="hljs-title function_">january</span>().<span class="hljs-title function_">first</span>().<span class="hljs-title function_">monday</span>() <span class="hljs-comment">// 今年一月的第一个星期一</span><br><br><span class="hljs-title class_">Date</span>.<span class="hljs-title function_">dec</span>().<span class="hljs-title function_">final</span>().<span class="hljs-title function_">fri</span>() <span class="hljs-comment">// 今年12月的最后一个星期五</span><br><br><span class="hljs-comment">// 先将日期定在本月15日的下午4点30分，然后向后推90天</span><br><span class="hljs-title class_">Date</span>.<span class="hljs-title function_">today</span>().<span class="hljs-title function_">set</span>(&#123; <span class="hljs-attr">day</span>: <span class="hljs-number">15</span>, <span class="hljs-attr">hour</span>: <span class="hljs-number">16</span>, <span class="hljs-attr">minute</span>: <span class="hljs-number">30</span> &#125;).<span class="hljs-title function_">add</span>(&#123; <span class="hljs-attr">days</span>: <span class="hljs-number">90</span> &#125;)<br><br>(<span class="hljs-number">3</span>).<span class="hljs-title function_">days</span>().<span class="hljs-title function_">fromNow</span>() <span class="hljs-comment">// 三天后</span><br><br>(<span class="hljs-number">6</span>).<span class="hljs-title function_">months</span>().<span class="hljs-title function_">ago</span>() <span class="hljs-comment">// 6个月前</span><br><br>(<span class="hljs-number">12</span>).<span class="hljs-title function_">weeks</span>().<span class="hljs-title function_">fromNow</span>() <span class="hljs-comment">// 12个星期后</span><br><br>(<span class="hljs-number">30</span>).<span class="hljs-title function_">days</span>().<span class="hljs-title function_">after</span>(<span class="hljs-title class_">Date</span>.<span class="hljs-title function_">today</span>()) <span class="hljs-comment">// 30天后</span><br></code></pre></td></tr></table></figure>

<h4 id="日期的解析"><a href="#日期的解析" class="headerlink" title="日期的解析"></a>日期的解析</h4><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Date</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-string">&#x27;today&#x27;</span>)<br> <br><span class="hljs-title class_">Date</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-string">&#x27;tomorrow&#x27;</span>)<br> <br><span class="hljs-title class_">Date</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-string">&#x27;July 8&#x27;</span>)<br><br><span class="hljs-title class_">Date</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-string">&#x27;July 8th, 2007&#x27;</span>)<br><br><span class="hljs-title class_">Date</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-string">&#x27;July 8th, 2007, 10:30 PM&#x27;</span>)<br><br><span class="hljs-title class_">Date</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-string">&#x27;07.15.2007&#x27;</span>)<br></code></pre></td></tr></table></figure>

<h4 id="获取想要的格式"><a href="#获取想要的格式" class="headerlink" title="获取想要的格式"></a>获取想要的格式</h4><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 想要拿到当前时间的格式：2021-05-22 17:00:00</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">toString</span>(<span class="hljs-string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)<br></code></pre></td></tr></table></figure>

<h4 id="参数写法参考"><a href="#参数写法参考" class="headerlink" title="参数写法参考"></a>参数写法参考</h4><table>
<thead>
<tr>
<th>Format</th>
<th>Description</th>
<th>Example</th>
</tr>
</thead>
<tbody><tr>
<td>s</td>
<td>The seconds of the minute between 0-59.</td>
<td><code>0</code> to <code>59</code></td>
</tr>
<tr>
<td>ss</td>
<td>The seconds of the minute with leading zero if required.</td>
<td><code>00</code> to <code>59</code></td>
</tr>
<tr>
<td>m</td>
<td>The minute of the hour between 0-59.</td>
<td><code>0</code> or <code>59</code></td>
</tr>
<tr>
<td>mm</td>
<td>The minute of the hour with leading zero if required.</td>
<td><code>00</code> to <code>59</code></td>
</tr>
<tr>
<td>h</td>
<td>The hour of the day between 1-12.</td>
<td><code>1</code> to <code>12</code></td>
</tr>
<tr>
<td>hh</td>
<td>The hour of the day with leading zero if required.</td>
<td><code>01</code> to <code>12</code></td>
</tr>
<tr>
<td>H</td>
<td>The hour of the day between 0-23.</td>
<td><code>0</code> to <code>23</code></td>
</tr>
<tr>
<td>HH</td>
<td>The hour of the day with leading zero if required.</td>
<td><code>00</code> to <code>23</code></td>
</tr>
<tr>
<td>d</td>
<td>The day of the month between 1 and 31.</td>
<td><code>1</code> to <code>31</code></td>
</tr>
<tr>
<td>dd</td>
<td>The day of the month with leading zero if required.</td>
<td><code>01</code> to <code>31</code></td>
</tr>
<tr>
<td>ddd</td>
<td>Abbreviated day name. Date.CultureInfo.abbreviatedDayNames.</td>
<td><code>Mon</code> to <code>Sun</code></td>
</tr>
<tr>
<td>dddd</td>
<td>The full day name. Date.CultureInfo.dayNames.</td>
<td><code>Monday</code> to <code>Sunday</code></td>
</tr>
<tr>
<td>M</td>
<td>The month of the year between 1-12.</td>
<td><code>1</code> to <code>12</code></td>
</tr>
<tr>
<td>MM</td>
<td>The month of the year with leading zero if required.</td>
<td><code>01</code> to <code>12</code></td>
</tr>
<tr>
<td>MMM</td>
<td>Abbreviated month name. Date.CultureInfo.abbreviatedMonthNames.</td>
<td><code>Jan</code> to <code>Dec</code></td>
</tr>
<tr>
<td>MMMM</td>
<td>The full month name. Date.CultureInfo.monthNames.</td>
<td><code>January</code> to <code>December</code></td>
</tr>
<tr>
<td>yy</td>
<td>Displays the year as a two-digit number.</td>
<td><code>99</code> or <code>07</code></td>
</tr>
<tr>
<td>yyyy</td>
<td>Displays the full four digit year.</td>
<td><code>1999</code> or <code>2007</code></td>
</tr>
<tr>
<td>t</td>
<td>Displays the first character of the A.M.&#x2F;P.M. designator. Date.CultureInfo.amDesignator or Date.CultureInfo.pmDesignator</td>
<td><code>A</code> or <code>P</code></td>
</tr>
<tr>
<td>tt</td>
<td>Displays the A.M.&#x2F;P.M. designator. Date.CultureInfo.amDesignator or Date.CultureInfo.pmDesignator</td>
<td><code>AM</code> or <code>PM</code></td>
</tr>
<tr>
<td>S</td>
<td>The ordinal suffix of the current day.</td>
<td><code>st</code>, <code>nd</code>, <code>rd</code>, or <code>th</code></td>
</tr>
</tbody></table>
<h1 id="Class面向对象"><a href="#Class面向对象" class="headerlink" title="Class面向对象"></a>Class面向对象</h1><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p><strong>class跟let、const一样：不存在变量提升、不能重复声明…</strong></p>
<p>es5面向对象写法跟传统的面向对象语言（比如 C++ 和 Java）差异很大，很容易让新学习这门语言的程序员感到困惑。</p>
<p>ES6 提供了更接近传统语言的写法，引入了 Class（类）这个概念，作为对象的模板。通过<code>class</code>关键字，可以定义类。</p>
<p>ES6 的<code>class</code>可以看作只是一个语法糖，它的绝大部分功能，ES5 都可以做到，新的<code>class</code>写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//es5</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Fn</span>(<span class="hljs-params">x, y</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> = x;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> = y;<br>&#125;<br><br><span class="hljs-title class_">Fn</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">add</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span>;<br>&#125;;<br><span class="hljs-comment">//等价于</span><br><span class="hljs-comment">//es6</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Fn</span>&#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">x,y</span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> = x;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> = y;<br>  &#125;<br>  <br>  <span class="hljs-title function_">add</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> F = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fn</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(F.<span class="hljs-title function_">add</span>()) <span class="hljs-comment">//3</span><br></code></pre></td></tr></table></figure>

<p>构造函数的<code>prototype</code>属性，在 ES6 的“类”上面继续存在。事实上，类的所有方法都定义在类的<code>prototype</code>属性上面。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Fn</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// ...</span><br>  &#125;<br><br>  <span class="hljs-title function_">add</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// ...</span><br>  &#125;<br><br>  <span class="hljs-title function_">sub</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// ...</span><br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 等同于</span><br><br><span class="hljs-title class_">Fn</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;&#125;,<br>  <span class="hljs-title function_">add</span>(<span class="hljs-params"></span>) &#123;&#125;,<br>  <span class="hljs-title function_">sub</span>(<span class="hljs-params"></span>) &#123;&#125;,<br>&#125;;<br></code></pre></td></tr></table></figure>

<p>类的内部所有定义的方法，都是不可枚举的（non-enumerable），这与es5不同。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//es5</span><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Fn</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">x, y</span>) &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;;<br><br><span class="hljs-title class_">Point</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">add</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;;<br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(<span class="hljs-title class_">Fn</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>)<br><span class="hljs-comment">// [&quot;toString&quot;]</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyNames</span>(<span class="hljs-title class_">Fn</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>)<br><span class="hljs-comment">// [&quot;constructor&quot;,&quot;add&quot;]</span><br><br><span class="hljs-comment">//es6</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Fn</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">x, y</span>) &#123;<br>    <span class="hljs-comment">// ...</span><br>  &#125;<br><br>  <span class="hljs-title function_">add</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// ...</span><br>  &#125;<br>&#125;<br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(<span class="hljs-title class_">Fn</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>)<br><span class="hljs-comment">// []</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyNames</span>(<span class="hljs-title class_">Fn</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>)<br><span class="hljs-comment">// [&quot;constructor&quot;,&quot;add&quot;]</span><br></code></pre></td></tr></table></figure>

<h2 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h2><p>类和模块的内部，默认就是严格模式，所以不需要使用<code>use strict</code>指定运行模式。只要你的代码写在类或模块之中，就只有严格模式可用。</p>
<p>考虑到未来所有的代码，其实都是运行在模块之中，所以 ES6 实际上把整个语言升级到了严格模式。</p>
<h2 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h2><p><code>onstructor</code>方法是类的默认方法，通过<code>new</code>命令生成对象实例时，自动调用该方法。一个类必须有<code>constructor</code>方法，如果没有显式定义，一个空的<code>constructor</code>方法会被默认添加。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Fn</span> &#123;<br>&#125;<br><br><span class="hljs-comment">// 等同于</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Fn</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><code>constructor</code>方法默认返回实例对象（即<code>this</code>），完全可以指定返回另外一个对象。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Foo</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-literal">null</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Foo</span>() <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Foo</span><br><span class="hljs-comment">// false</span><br><span class="hljs-comment">//constructor函数返回一个全新的对象，结果导致实例对象不是Foo类的实例。</span><br></code></pre></td></tr></table></figure>

<h2 id="类必须使用new调用"><a href="#类必须使用new调用" class="headerlink" title="类必须使用new调用"></a>类必须使用new调用</h2><p>类必须使用<code>new</code>调用，否则会报错。这是它跟普通构造函数的一个主要区别，后者不用<code>new</code>也可以执行。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Foo</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-literal">null</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-title class_">Foo</span>()<br><span class="hljs-comment">// TypeError: Class constructor Foo cannot be invoked without &#x27;new&#x27;</span><br></code></pre></td></tr></table></figure>

<h2 id="Class-表达式"><a href="#Class-表达式" class="headerlink" title="Class 表达式"></a>Class 表达式</h2><p>与函数一样，类也可以使用表达式的形式定义。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">MyClass</span> = <span class="hljs-keyword">class</span> <span class="hljs-title class_">Me</span> &#123;<br>  <span class="hljs-title function_">getClassName</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Me</span>.<span class="hljs-property">name</span>;<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>

<p>上面代码使用表达式定义了一个类。需要注意的是，这个类的名字是<code>MyClass</code>而不是<code>Me</code>，<code>Me</code>只在 Class 的内部代码可用，指代当前类。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> inst = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyClass</span>();<br>inst.<span class="hljs-title function_">getClassName</span>() <span class="hljs-comment">// Me</span><br><span class="hljs-title class_">Me</span>.<span class="hljs-property">name</span> <span class="hljs-comment">// ReferenceError: Me is not defined</span><br></code></pre></td></tr></table></figure>

<p>如果类的内部没用到的话，可以省略<code>Me</code>，也就是可以写成下面的形式。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">MyClass</span> = <span class="hljs-keyword">class</span> &#123; <span class="hljs-comment">/* ... */</span> &#125;;<br></code></pre></td></tr></table></figure>

<p>采用 Class 表达式，可以写出立即执行的 Class。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> person = <span class="hljs-keyword">new</span> <span class="hljs-keyword">class</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>  &#125;<br><br>  <span class="hljs-title function_">sayName</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>  &#125;<br>&#125;(<span class="hljs-string">&#x27;张三&#x27;</span>);<br><br>person.<span class="hljs-title function_">sayName</span>(); <span class="hljs-comment">// &quot;张三&quot;</span><br></code></pre></td></tr></table></figure>

<p>上面代码中，<code>person</code>是一个立即执行的类的实例。</p>
<h2 id="私有方法和私有属性"><a href="#私有方法和私有属性" class="headerlink" title="私有方法和私有属性"></a>私有方法和私有属性</h2><p>私有方法&#x2F;私有属性是常见需求，但 ES6 不提供，只能通过变通方法模拟实现。（以后会实现）</p>
<p>通常是在命名上加以区别。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Fn</span> &#123;<br><br>  <span class="hljs-comment">// 公有方法</span><br>  foo () &#123;<br>    <span class="hljs-comment">//....</span><br>  &#125;<br><br>  <span class="hljs-comment">// 假装是私有方法（其实外部还是可以访问）</span><br>  <span class="hljs-title function_">_bar</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">//....</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="原型的属性"><a href="#原型的属性" class="headerlink" title="原型的属性"></a>原型的属性</h2><p>class定义类时，只能在constructor里定义属性，在其他位置会报错。</p>
<p>如果需要在原型上定义方法可以使用：</p>
<ol>
<li>Fn.prototype.prop &#x3D; value;</li>
<li>Object.getPrototypeOf()获取原型，再来扩展</li>
<li>Object.assign(Fn.prototype,{在这里面写扩展的属性或者方法})</li>
</ol>
<h2 id="Class-的静态方法"><a href="#Class-的静态方法" class="headerlink" title="Class 的静态方法"></a>Class 的静态方法</h2><p>类相当于实例的原型，所有在类中定义的方法，都会被实例继承。</p>
<p>如果在一个方法前，加上<code>static</code>关键字，就表示该方法不会被实例继承，而是直接通过类来调用，这就称为“静态方法”。</p>
<p>ES6 明确规定，Class 内部只有静态方法，没有静态属性。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Foo</span> &#123;<br>  <span class="hljs-keyword">static</span> <span class="hljs-title function_">classMethod</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;hello&#x27;</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-title class_">Foo</span>.<span class="hljs-title function_">classMethod</span>() <span class="hljs-comment">// &#x27;hello&#x27;</span><br><br><span class="hljs-keyword">var</span> foo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Foo</span>();<br>foo.<span class="hljs-title function_">classMethod</span>()<br><span class="hljs-comment">// TypeError: foo.classMethod is not a function</span><br><br><span class="hljs-comment">//静态属性只能手动设置</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Foo</span> &#123;<br>&#125;<br><br><span class="hljs-title class_">Foo</span>.<span class="hljs-property">prop</span> = <span class="hljs-number">1</span>;<br><span class="hljs-title class_">Foo</span>.<span class="hljs-property">prop</span> <span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure>

<h2 id="get、set"><a href="#get、set" class="headerlink" title="get、set"></a>get、set</h2><p>存值函数和取值函数，不多说，看代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Fn</span>&#123;<br>	<span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>)&#123;<br>		<span class="hljs-variable language_">this</span>.<span class="hljs-property">arr</span> = []<br>	&#125;<br>	<span class="hljs-keyword">get</span> <span class="hljs-title function_">bar</span>()&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">arr</span>;<br>	&#125;<br>	<span class="hljs-keyword">set</span> <span class="hljs-title function_">bar</span>(<span class="hljs-params">value</span>)&#123;<br>		<span class="hljs-variable language_">this</span>.<span class="hljs-property">arr</span>.<span class="hljs-title function_">push</span>(value)<br>	&#125;<br>&#125;<br><br><br><span class="hljs-keyword">let</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fn</span>();<br><br>obj.<span class="hljs-property">menu</span> = <span class="hljs-number">1</span>;<br>obj.<span class="hljs-property">menu</span> = <span class="hljs-number">2</span>;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-property">menu</span>)<span class="hljs-comment">//[1,2]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-property">arr</span>)<span class="hljs-comment">//[1,2]</span><br></code></pre></td></tr></table></figure>

<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="用法-1"><a href="#用法-1" class="headerlink" title="用法"></a>用法</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Fn</span> &#123;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Fn2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Fn</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol>
<li>子类必须在<code>constructor</code>方法中调用<code>super</code>方法，否则新建实例时会报错。这是因为子类没有自己的<code>this</code>对象，而是继承父类的<code>this</code>对象，然后对其进行加工。如果不调用<code>super</code>方法，子类就得不到<code>this</code>对象。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span> &#123; <span class="hljs-comment">/* ... */</span> &#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ColorPoint</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Point</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">super</span>()<span class="hljs-comment">//必须调用</span><br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> cp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ColorPoint</span>(); <span class="hljs-comment">// ReferenceError</span><br></code></pre></td></tr></table></figure>

<ol>
<li>父类的静态方法也会被继承。</li>
</ol>
<blockquote>
<p>嗯！就是这么让人绝望</p>
</blockquote>
<h2 id="Object-getPrototypeOf"><a href="#Object-getPrototypeOf" class="headerlink" title="Object.getPrototypeOf()"></a>Object.getPrototypeOf()</h2><p><code>Object.getPrototypeOf</code>方法可以用来从子类上获取父类。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getPrototypeOf</span>(<span class="hljs-title class_">Fn2</span>) === <span class="hljs-title class_">Fn</span><br><span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure>

<p>因此，可以使用这个方法判断，一个类是否继承了另一个类。</p>
<h2 id="super-关键字"><a href="#super-关键字" class="headerlink" title="super 关键字"></a>super 关键字</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">super方法就是用来创建父类this对象的。 如果子类没有定义constructor方法，constructor方法会被默认创建，并默认调用super函数<br></code></pre></td></tr></table></figure>

<p><code>super</code>这个关键字，既可以当作函数使用，也可以当作对象使用。在这两种情况下，它的用法完全不同。</p>
<p>第一种情况，<code>super</code>作为函数调用时，代表父类的构造函数。ES6 要求，子类的构造函数必须执行一次<code>super</code>函数。</p>
<blockquote>
<p>作为函数时，<code>super()</code>只能用在子类的构造函数之中，用在其他地方就会报错。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">A</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">super</span>();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>上面代码中，子类<code>B</code>的构造函数之中的<code>super()</code>，代表调用父类的构造函数。这是必须的，否则 JavaScript 引擎会报错。</p>
<p>注意，<code>super</code>虽然代表了父类<code>A</code>的构造函数，但是返回的是子类<code>B</code>的实例，即<code>super</code>内部的<code>this</code>指的是<code>B</code>，因此<code>super()</code>在这里相当于<code>A.prototype.constructor.call(this)</code>。</p>
<p>第二种情况，<code>super</code>作为对象时，在普通方法中，指向父类的原型对象；在静态方法中，指向父类。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>  <span class="hljs-title function_">p</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">A</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">super</span>();<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">super</span>.<span class="hljs-title function_">p</span>()); <span class="hljs-comment">// 2</span><br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> b = <span class="hljs-keyword">new</span> <span class="hljs-title function_">B</span>();<br></code></pre></td></tr></table></figure>

<p>上面代码中，子类<code>B</code>当中的<code>super.p()</code>，就是将<code>super</code>当作一个对象使用。这时，<code>super</code>在普通方法之中，指向<code>A.prototype</code>，所以<code>super.p()</code>就相当于<code>A.prototype.p()</code>。</p>
<p>由于<code>this</code>指向子类，所以如果通过<code>super</code>对某个属性赋值，这时<code>super</code>就是<code>this</code>，赋值的属性会变成子类实例的属性。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> = <span class="hljs-number">1</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">A</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">super</span>();<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> = <span class="hljs-number">2</span>;<br>    <span class="hljs-variable language_">super</span>.<span class="hljs-property">x</span> = <span class="hljs-number">3</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">super</span>.<span class="hljs-property">x</span>); <span class="hljs-comment">// undefined</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span>); <span class="hljs-comment">// 3</span><br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> b = <span class="hljs-keyword">new</span> <span class="hljs-title function_">B</span>();<br></code></pre></td></tr></table></figure>

<p>上面代码中，<code>super.x</code>赋值为<code>3</code>，这时等同于对<code>this.x</code>赋值为<code>3</code>。而当读取<code>super.x</code>的时候，读的是<code>A.prototype.x</code>，所以返回<code>undefined</code>。</p>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      <categories>
        <category>WebFrontend</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>BootStrap</title>
    <url>/2022/08/05/WebFrontend/UI/BootStrap/</url>
    <content><![CDATA[<h1 id="BootStrap"><a href="#BootStrap" class="headerlink" title="BootStrap"></a>BootStrap</h1><h2 id="BootStrap-介绍"><a href="#BootStrap-介绍" class="headerlink" title="BootStrap 介绍"></a>BootStrap 介绍</h2><p>Bootstrap是一套现成的CSS样式集合。</p>
<p>BootStrap是最受欢迎的HTML、CSS和JS框架，用于开发响应式布局、移动设备优先的WEB项目。</p>
<h2 id="BootStrap-特点"><a href="#BootStrap-特点" class="headerlink" title="BootStrap 特点"></a>BootStrap 特点</h2><ol>
<li>简洁、直观、强悍的前端开发框架，html、css、JavaScript工具集，让web开发更迅速，简单。</li>
<li>基于html5、css3的bootstrap，具有大量的诱人特性：友好的学习曲线，卓越的兼容性，响应式设计，12列格网，样式向导文档。</li>
<li>自定义jQuery插件，完整的类库，bootstrap3基于Less，bootstrap4基于Sass的CSS预处理技术</li>
<li>Bootstrap响应式布局设计，让一个网站可以兼容不同分辨率的设备。Bootstrap响应式布局设计，给用户提供更好的视觉使用体验。</li>
<li>丰富的组件</li>
</ol>
<h2 id="下载与使用"><a href="#下载与使用" class="headerlink" title="下载与使用"></a>下载与使用</h2><ol>
<li><p>下载：<a href="https://getbootstrap.com/">https://getbootstrap.com/</a></p>
</li>
<li><p>下载完成后</p>
<p>拷贝dist&#x2F;css中的bootstrap.min.css到项目css中</p>
<p>拷贝dist&#x2F;js中的bootstrap.min.js到项目的js中</p>
</li>
<li><p>下载jQuery.js</p>
</li>
<li><p>在html模板为</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Bootstrap的HTML标准模板<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>		<span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">			viewport表示用户是否可以缩放画面；</span><br><span class="hljs-comment">			width指定视区的逻辑宽度；</span><br><span class="hljs-comment">			device-width只是视区宽度应为设备的屏幕宽度；</span><br><span class="hljs-comment">			initial-scale指令用于设置web页面的初始缩放比例</span><br><span class="hljs-comment">			initial-scale=1则将显示未经缩放的web文档</span><br><span class="hljs-comment">		--&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1则将显示未经缩放的web文档=1.0&quot;</span>&gt;</span><br>		<span class="hljs-comment">&lt;!-- 载入Bootstrap 的 css --&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/bootstrap.min.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>/&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello, world!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br>		<span class="hljs-comment">&lt;!-- jQuery (Bootstrap 的 JavaScript 插件需要引入 jQuery) --&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://code.jquery.com/jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>		<span class="hljs-comment">&lt;!-- 包括所有已编译的插件 --&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/bootstrap.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure>

<p>常规</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1则将显示未经缩放的web文档=1.0&quot;</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;bootstrap/css/bootstrap.min.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>/&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello, world!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br>		<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://code.jquery.com/jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;bootstrap/js/bootstrap.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>



<h2 id="布局容器和格栅网络系统"><a href="#布局容器和格栅网络系统" class="headerlink" title="布局容器和格栅网络系统"></a>布局容器和格栅网络系统</h2></li>
</ol>
]]></content>
      <categories>
        <category>WebFrontend</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS备忘录</title>
    <url>/2023/04/18/WebFrontend/UI/CSS%E5%A4%87%E5%BF%98%E5%BD%95/</url>
    <content><![CDATA[<h3 id="div盒子水平垂直居中"><a href="#div盒子水平垂直居中" class="headerlink" title="div盒子水平垂直居中"></a>div盒子水平垂直居中</h3><p><strong>FlexBox布局居中：</strong></p>
<p>通过设置父容器的 display: flex; 和 justify-content: center; align-items: center; 样式，即可实现将子元素水平垂直居中。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;parent&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;child&quot;</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-class">.parent</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">    <span class="hljs-attribute">justify-content</span>: center;</span><br><span class="language-css">    <span class="hljs-attribute">align-items</span>: center;</span><br><span class="language-css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">100vh</span>; <span class="hljs-comment">/* 可以根据实际需求调整 */</span></span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><strong>绝对定位居中：</strong></p>
<p>父容器添加 position: relative; 样式，并为子元素添加 position: absolute; 以将其从文档流中分离出来。然后可以使用 top, bottom, left, 和 right 属性，将子元素定位到父容器的中心</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;parent&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;child&quot;</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-class">.parent</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">100vh</span>; <span class="hljs-comment">/* 可以根据实际需求调整 */</span></span><br><span class="language-css">  &#125;</span><br><span class="language-css">  </span><br><span class="language-css">  <span class="hljs-selector-class">.child</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">    <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">    <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>, -<span class="hljs-number">50%</span>);</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><strong>Flexbox“自动边距”（auto margin）居中：</strong></p>
<p>margin-top: auto; 和 margin-bottom: auto; 来实现元素在父容器中的垂直居中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;parent&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;child&quot;</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-class">.parent</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">100vh</span>;</span><br><span class="language-css">    <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">    <span class="hljs-attribute">flex-direction</span>: column;</span><br><span class="language-css">  &#125;</span><br><span class="language-css">  </span><br><span class="language-css">  <span class="hljs-selector-class">.child</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">margin-top</span>: auto;</span><br><span class="language-css">    <span class="hljs-attribute">margin-bottom</span>: auto;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>WebFrontend/UI</category>
      </categories>
  </entry>
  <entry>
    <title>HTML5布局</title>
    <url>/2022/08/05/WebFrontend/UI/HTML5%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<h1 id="HTML5布局"><a href="#HTML5布局" class="headerlink" title="HTML5布局"></a>HTML5布局</h1><h2 id="传统的HTML布局"><a href="#传统的HTML布局" class="headerlink" title="传统的HTML布局"></a>传统的HTML布局</h2><p>一直以来，网页设计人员都利用<code>&lt;div&gt;</code>元素将页面中的相关元素集中在一起（比如那些组成页眉、文章、页脚、侧边栏的元素），并使用class或id特性来指定<code>&lt;div&gt;</code>在页面结构中的作用</p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220805013034182.png" alt="image-20220805013034182"></p>
<h2 id="新的HTML5布局元素"><a href="#新的HTML5布局元素" class="headerlink" title="新的HTML5布局元素"></a>新的HTML5布局元素</h2><p>HTML5引入了一组新的元素，这些元素允许对页面各个部分进行分割。它们的名称直接表明了其中包含的内容。</p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220805013340845.png" alt="image-20220805013340845"></p>
<h2 id="页眉和页脚-lt-header-gt-lt-footer-gt"><a href="#页眉和页脚-lt-header-gt-lt-footer-gt" class="headerlink" title="页眉和页脚&lt;header&gt; &lt;footer&gt;"></a>页眉和页脚<code>&lt;header&gt;</code> <code>&lt;footer&gt;</code></h2><p><code>&lt;header&gt;</code> 和 <code>&lt;footer&gt;</code>元素可以用作：</p>
<blockquote>
<ul>
<li>网站中出现在每个页面顶部的主页眉或底部的主页脚</li>
<li>页面中单独的<code>&lt;article&gt;</code>或<code>&lt;section&gt;</code>中的页眉或页脚。</li>
</ul>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>WRXinYue&#x27;s blog<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">nav</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">class</span>= <span class="hljs-string">&quot;curremt&quot;</span>&gt;</span>home<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>classes<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>catering<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>about<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>contact<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br></code></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span><br>    $copy: 2022 WRXinYue&#x27;s blog<br><span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="导航-lt-nav-gt"><a href="#导航-lt-nav-gt" class="headerlink" title="导航&lt;nav&gt;"></a>导航<code>&lt;nav&gt;</code></h2><p><code>&lt;nav&gt;</code>元素专门用于包含网站的主要导航块，比如网站的主导航。</p>
<h2 id="文章-lt-artcle-gt"><a href="#文章-lt-artcle-gt" class="headerlink" title="文章&lt;artcle&gt;"></a>文章<code>&lt;artcle&gt;</code></h2><p><code>&lt;artcle&gt;</code>元素就像是页面中任意部分（可能是单独存在的部分，也可能是联合出现的某一部分）的一个容器。</p>
<p>它们可以是一个单独的文章、博客日志、评论、论坛帖子，或者任何其他独立的内容。</p>
<p>如果一个页面含多篇文章（或是多个文章摘要），那么每个单独的元素的文章都应个位于其专属的<code>&lt;article&gt;</code>元素中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">article</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">figure</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">scr</span> = <span class="hljs-string">&quot;images/bok-choi.jpg&quot;</span> <span class="hljs-attr">alt</span> = <span class="hljs-string">&quot;Bok Choi&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">figcaption</span>&gt;</span>Bok Choi<span class="hljs-tag">&lt;/<span class="hljs-name">figcaption</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">figure</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hgroup</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>二级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">hgroup</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>        .......<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">article</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="附属信息-lt-aside-gt"><a href="#附属信息-lt-aside-gt" class="headerlink" title="附属信息&lt;aside&gt;"></a>附属信息<code>&lt;aside&gt;</code></h2><p><code>&lt;aside&gt;</code>元素有两个作用，具体具有哪种作用取决于其是否位于<code>&lt;article&gt;</code>元素中</p>
<p>如果在<code>&lt;article&gt;</code>元素内出现时，它应该包含与当前文章相关的信息，而不必涉及页面的整体信息。</p>
<p>当在<code>&lt;article&gt;</code>元素外出现，它应该包含与整个页面相关的内容。</p>
<h2 id="部分-lt-section-gt"><a href="#部分-lt-section-gt" class="headerlink" title="部分&lt;section&gt;"></a>部分<code>&lt;section&gt;</code></h2><p><code>&lt;section&gt;</code>元素用于将相关的内容集中到一块，而每个部分通常都带有一个标题。</p>
<p><code>&lt;section&gt;</code>元素不能作为整个页面的容器使用（除非这个页面只包含一个内容）</p>
<h2 id="标题组-lt-hgroup-gt"><a href="#标题组-lt-hgroup-gt" class="headerlink" title="标题组&lt;hgroup&gt;"></a>标题组<code>&lt;hgroup&gt;</code></h2><p><code>&lt;hgroup&gt;</code>元素的作用是将一个或多个<code>&lt;h1&gt;</code>到<code>&lt;h6&gt;</code>的标题元素组合到一块，将它们当成一个标题看待。</p>
<h2 id="图形-lt-figure-gt-lt-figcaption-gt"><a href="#图形-lt-figure-gt-lt-figcaption-gt" class="headerlink" title="图形 &lt;figure&gt; &lt;figcaption&gt;"></a>图形 <code>&lt;figure&gt;</code> <code>&lt;figcaption&gt;</code></h2><p>它可以用来包含一篇文章正文中引用的任何内容</p>
<h2 id="分节元素-lt-div-gt"><a href="#分节元素-lt-div-gt" class="headerlink" title="分节元素 &lt;div&gt;"></a>分节元素 <code>&lt;div&gt;</code></h2><p>在没有合适的元素用来组合一组元素时，仍可以使用<code>&lt;div&gt;</code>元素</p>
<h2 id="为块级元素添加链接"><a href="#为块级元素添加链接" class="headerlink" title="为块级元素添加链接"></a>为块级元素添加链接</h2><p>HTML5允许网页设计人员在包含子元素的块级元素周围添加<code>&lt;a&gt;</code>元素。这将使整个块变成一个链接、</p>
]]></content>
      <categories>
        <category>WebFrontend</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS3笔记</title>
    <url>/2022/08/05/WebFrontend/UI/CSS3%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="CSS简介"><a href="#CSS简介" class="headerlink" title="CSS简介"></a>CSS简介</h1><h2 id="理解CSS：设想元素周围有一个盒子"><a href="#理解CSS：设想元素周围有一个盒子" class="headerlink" title="理解CSS：设想元素周围有一个盒子"></a>理解CSS：设想元素周围有一个盒子</h2><p>CSS允许你创建规则，来控制每个盒子（以及盒子中的内容）的呈现方式。</p>
<h2 id="CSS将样式规则与HTML元素关联"><a href="#CSS将样式规则与HTML元素关联" class="headerlink" title="CSS将样式规则与HTML元素关联"></a>CSS将样式规则与HTML元素关联</h2><p>CSS通过将规则与HTML元素相关联的方式来工作。这些规则用来控制指定元素中的内容如何显示。一条CSS规则包含两个部分：一个<strong>选择器</strong>和一条声明</p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220731142459124.png" alt="image-20220731142459124"></p>
<p>这条规则表明所有<code>&lt;p&gt;</code>元素都应该用Arial字体来显示。</p>
<p><strong>选择器</strong>表明要应用规则的元素。同一条规则可以应用在多个元素上，前提是你需要将这些元素名用逗号隔开。</p>
<p><strong>声明</strong>用于表明应该如何显示选择器指明的元素。声明分为两个部分（属性和值）并以冒号作为分隔符。</p>
<h2 id="CSS属性会影响元素的显示方式"><a href="#CSS属性会影响元素的显示方式" class="headerlink" title="CSS属性会影响元素的显示方式"></a>CSS属性会影响元素的显示方式</h2><p>CSS声明位于花括号中，而且每条声明都由两部分组成：<strong>属性</strong>和<strong>值</strong>，两者由冒号隔开。可在一条声明内指定多个属性，各属性之间用分号隔开。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h1</span>, <span class="hljs-selector-tag">h2</span>，<span class="hljs-selector-tag">h3</span> &#123;<br>    <span class="hljs-attribute">font-family</span>: Arial;<br>    <span class="hljs-attribute">color</span>: yellow;&#125;  <span class="hljs-comment">/* 属性：值 */</span><br></code></pre></td></tr></table></figure>

<p>上面这条规则表明所有的<code>&lt;h1&gt;</code>元素、<code>&lt;h2&gt;</code>元素和<code>&lt;h3&gt;</code>元素将以黄色的Arial字体显示。</p>
<p><strong>属性</strong>表明你想要改变元素的哪些方面。例如颜色、字体、宽度、高度和边框.</p>
<p><strong>值</strong>用来指定想要在所选属性上应用的设置。例如：如果指定一个颜色属性，那么这个属性的值就算你希望这些元素中的文本所呈现的颜色。</p>
<h2 id="使用外部CSS"><a href="#使用外部CSS" class="headerlink" title="使用外部CSS"></a>使用外部CSS</h2><p><code>&lt;link&gt;</code></p>
<p>在HTML文档中，<code>&lt;link&gt;</code>元素可以告诉浏览器何处寻找用于定义页面样式的CSS文件。它是一个空元素（也就是说它不需要结束标签），而且位于<code>&lt;head&gt;</code>元素中。它应该使用以下三个特性：</p>
<blockquote>
<p>href：该特性表明CSS文件的路径（通常位于css或styles文件夹中）。</p>
<p>type：表明该页面所连接的文档的类型。它的值应该是text&#x2F;css。</p>
<p>rel：该特性表明HTML页面与被链接文件的关系。当链接到一个CSS文件时，该特性的值应该为stylesheet。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span> = <span class="hljs-string">&quot;css/styles.css&quot;</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">rel</span> = <span class="hljs-string">&quot;stylesheet&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure>

<p>当建立一个包含有多个页面的网站时，应该使用外部样式表。这样做具有以下好处：</p>
<blockquote>
<ul>
<li>允许所有页面使用同样的样式规则（重复利用性）。</li>
<li>将页面的内容和表现分离。</li>
<li>可以通过修改一个文件（而不必修改每个页面）来改变所有页面的样式。</li>
</ul>
</blockquote>
<h2 id="使用内部CSS"><a href="#使用内部CSS" class="headerlink" title="使用内部CSS"></a>使用内部CSS</h2><p><code>&lt;style&gt;</code></p>
<p>可以在HTML页面添加CSS规则，这时需要将它们置于<code>&lt;style&gt;</code>元素内，<code>&lt;style&gt;</code>元素通常位于页面的<code>&lt;head&gt;</code>元素中。</p>
<p><code>&lt;style&gt;</code>使用该元素特性表明这些样式是在CSS中指定的。该特性的值应该为text&#x2F;css。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="language-css">        ......</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h2><p><a href="https://www.w3school.com.cn/cssref/css_selectors.asp">CSS选择器参考手册</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220801011311058.png" alt="image-20220801011311058"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220801011327836.png" alt="image-20220801011327836"></p>
<h2 id="CSS规则如何级联"><a href="#CSS规则如何级联" class="headerlink" title="CSS规则如何级联"></a>CSS规则如何级联</h2><p>如果有两个或者更多的规则应用在同一个元素上，那么理解这些规则的优先级关系是非常重要的。</p>
<p>就近原则：<br>如果两个选择器完全相同，那么后出现的选择器优先级较高。</p>
<p>具体性原则：<br>如果一个选择器比其他选择器更加具体，那么具体的选择器优先于一般的选择器。</p>
<p>重要性：<br>可以在任意属性值的后面添加**!important**来强调这一条规则比应用于同一元素的其他规则更重要。</p>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>如果在<code>&lt;body&gt;</code>元素上指定了font-family属性或color属性，那么它们将应用于<code>&lt;body&gt;</code>元素的大多数元素上。这是因为font - family属性被这些子元素所继承。</p>
<p>background-color属性和border属性不会被子元素继承。如果这些元素会被继承，那么这些页面会很乱。</p>
<p>可以通过将属性值设置为<strong>inherit</strong>来强制大多数元素从它的父元素中继承属性值。在本示例中，<code>&lt;div&gt;</code>元素(属于page类)从应用于<code>&lt;body&gt;</code>元素的CSS规则中继承了padding属性的值。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span> = <span class="hljs-string">&quot;page&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Potatoes<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">P</span>&gt;</span><br>        There are dozens of different potato varieties.<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">P</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>        They are usually described as early.second early and maincrop potatoes.<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<br>    <span class="hljs-attribute">font-family</span>: Arual, Verdana, sans-serif;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#665544</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;<br>&#125;<br><span class="hljs-selector-class">.page</span> &#123;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#664433</span>;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#efefef</span>;<br>    <span class="hljs-attribute">padding</span>: inherit;<br>&#125;<br></code></pre></td></tr></table></figure>

<h1 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h1><h2 id="前景色color"><a href="#前景色color" class="headerlink" title="前景色color"></a>前景色color</h2><p>color属性允许指定元素中文本的颜色。可以在CSS中采用以下三种方法之一来指定任何颜色：</p>
<p>RGB值：<br>三原色组成颜色，例如：rgb(100,100,90)。</p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/0823dd54564e92580c2f0c8d9482d158ccbf4ebe" alt="img"></p>
<p>十六进制编码：<br>这种方式是通过六位十六进制编码表示颜色，其中的六位编码（每两位构成一个值，共三个值）前面加一个#号。例如：#ee3e80。</p>
<p>颜色名称：<br>浏览器可以标识147种预定义的颜色名称。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* color name */</span><br><span class="hljs-selector-tag">h1</span> &#123;<br>    <span class="hljs-attribute">color</span>: DarkCyan;<br>&#125;<br><span class="hljs-comment">/* hex code */</span><br><span class="hljs-selector-tag">h2</span> &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#ee3e80</span>;<br>&#125;<br><span class="hljs-comment">/* rgb calue */</span><br><span class="hljs-selector-tag">p</span> &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">100.100</span>.<span class="hljs-number">90</span>);<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="背景色background-color"><a href="#背景色background-color" class="headerlink" title="背景色background-color"></a>背景色background-color</h2><p>CSS在处理每个HTML元素时都假设它们位于一个无形的盒子中，而background-color属性设置的正是这个盒子的背景色。</p>
<p>如果为指定背景色，那么背景将是透明的。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">200</span>, <span class="hljs-number">200</span>, <span class="hljs-number">200</span>);<br>&#125;<br><span class="hljs-selector-tag">h1</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: darkcyan;<br>&#125;<br><span class="hljs-selector-tag">h2</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ee3e80</span>;<br>&#125;<br><span class="hljs-selector-tag">p</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: white;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="CSS3：透明度"><a href="#CSS3：透明度" class="headerlink" title="CSS3：透明度"></a>CSS3：透明度</h2><p><code>opacity,rgba</code></p>
<p>opacity 指定透明度，数组介于0.1~1.0之间，0.5表示50%的透明度，0.15表示15%的透明度（会影响子元素）</p>
<p>CSS3中的rgba属性比rgb多个了标识透明度的值。这个值称为alpha值，数组介于0.1~1.0之间，0.5表示50%的透明度，0.15表示15%的透明度。（不会影响子元素）</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.one</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0.5</span>;<br>&#125;<br><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.two</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.5</span>);<br>&#125;<br></code></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220802014044242.png" alt="image-20220802014044242"></p>
<h2 id="CSS3：HSL和HSLA"><a href="#CSS3：HSL和HSLA" class="headerlink" title="CSS3：HSL和HSLA"></a>CSS3：HSL和HSLA</h2><p>hsl颜色属性以及作为一种新的颜色指定方式进入CSS3中。该属性的值以hsl开头，位于其后的括号内是以下几种值：</p>
<blockquote>
<p>色调：通过介于0°~360°之间的一个角度表示。</p>
<p>饱和度：通过百分数表示。</p>
<p>明度：通过百分数表示，0%表示黑色，50%表示标准色，100%表示白色</p>
<p>ALPHA：透明度，该值由于0~1.0之间的数字表示。</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#C8C8C8</span>; <span class="hljs-comment">/*添加该值为了兼容旧浏览器*/</span><br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">hsl</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0%</span>, <span class="hljs-number">78</span>);<br>&#125;<br><span class="hljs-selector-tag">p</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ffffff</span>;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">hsla</span>(<span class="hljs-number">0</span>, <span class="hljs-number">100%</span>, <span class="hljs-number">100%</span>, <span class="hljs-number">0.5</span>);<br>&#125;<br></code></pre></td></tr></table></figure>

<h1 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h1><h2 id="字体术语"><a href="#字体术语" class="headerlink" title="字体术语"></a>字体术语</h2><blockquote>
<p>衬托字体(SERIF)：衬托字体在字母主要笔画的末端有一些额外的装饰。这些装饰被称为衬线</p>
<p>无衬线字体(SABS-SERIF)：无衬线字体中的字母拥有笔直的线条，因此它的设计更加简洁。</p>
<p>等宽字体(MONOSPACE)：等宽字体中的每个字母的宽度都相同，而非等宽字体中字母的宽度不同。</p>
<p>草书字体(Cursive)： 模仿了人类的笔迹。</p>
<p>幻想字体(Fantasy)：是装饰性&#x2F;俏皮的字体。</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">font-family</span>: Georgia, Times, serif; <span class="hljs-comment">/*衬托字体*/</span><br></code></pre></td></tr></table></figure>

<h2 id="字体大小font-size"><a href="#字体大小font-size" class="headerlink" title="字体大小font-size"></a>字体大小font-size</h2><p>dont-size属性用来指定字体大小，常用方式：</p>
<blockquote>
<p>像素：像素之所以能被广泛使用，是因为它能让Web设计人员对文本占用的空间进行精准的控制。它的表示方式是在像素值后面加个px。</p>
<p>百分数：文本在浏览器中默认大小是16px。因此75%相当于12px，200%相当于32px。</p>
<p>EM值：lem相当于一个字母m的宽度。</p>
</blockquote>
<h2 id="选用更多字体-font-face"><a href="#选用更多字体-font-face" class="headerlink" title="选用更多字体@font-face"></a>选用更多字体@font-face</h2><p>@font-face通过指定字体的下载地址(当这种字体在用户的计算机上没有安装时，就会自动下载)让你调用字体，即使用户在浏览时使用的计算机上没有安装相应的字体也可以加以使用。</p>
<blockquote>
<p>font-family：该属性指定字体的名称</p>
<p>src：该属性指定字体的路径。</p>
<p>format：该属性指定所提供字体的格式。</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@font-face</span> &#123;<br>    <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;ChunckFiveRegular&#x27;</span>;<br>    <span class="hljs-attribute">src</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;fonts/chunkfive.eot&#x27;</span>);<br>&#125;<br><span class="hljs-selector-tag">h1</span>, <span class="hljs-selector-tag">h2</span> &#123;<br>    <span class="hljs-attribute">font-family</span>: ChukFiveRegular, Georgia, serif;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="粗体font-weight"><a href="#粗体font-weight" class="headerlink" title="粗体font-weight"></a>粗体font-weight</h2><p>font-weight属性允许创建粗体文本。该属性通常选用以下两个值：</p>
<blockquote>
<p>normal：该值使文本以普通粗细显示。</p>
<p>bold：该值使文本以粗体显示</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.credits</span> &#123;<br>    <span class="hljs-attribute">font-weight</span>: bold;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="斜体font-style"><a href="#斜体font-style" class="headerlink" title="斜体font-style"></a>斜体font-style</h2><p>font-style属性允许创建斜体文本：该属性有三个可选值：</p>
<blockquote>
<p>normal：该值使文以普通字体（相对斜体和倾斜来说）显示。</p>
<p>italic：该值使文本以斜体显示。</p>
<p>oblique：该值使文本倾斜显示。</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.credits</span> &#123;<br>    <span class="hljs-attribute">font-style</span>: italic;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="大写和小写text-transform"><a href="#大写和小写text-transform" class="headerlink" title="大写和小写text-transform"></a>大写和小写text-transform</h2><p>text-transform属性可以改变文本的大小写，可选用以下值之一：</p>
<blockquote>
<p>uppercase：该值使文本以大写显示。</p>
<p>lowercase：该值使文本以小写显示。</p>
<p>capitalize：该值使每个单词的首字母以大写显示。</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h1</span> &#123;<br>    <span class="hljs-attribute">text-transform</span>: uppercase;<br>&#125;<br><span class="hljs-selector-tag">h2</span> &#123;<br>    <span class="hljs-attribute">text-transform</span>: lowercase;<br>&#125;<br><span class="hljs-selector-class">.credits</span> &#123;<br>    <span class="hljs-attribute">text-transform</span>: capitalize;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="下划线和删除线text-decoratioon"><a href="#下划线和删除线text-decoratioon" class="headerlink" title="下划线和删除线text-decoratioon"></a>下划线和删除线text-decoratioon</h2><p>text-decoratioon属性可以选用以下值：</p>
<blockquote>
<p>none：删除应用在文本上的装饰线</p>
<p>underline：该值会在文本底部增加一条实线</p>
<p>overline：该值会在文本顶部增加一条实线</p>
<p>line-through：该值会用一条实现穿过文字</p>
</blockquote>
<h2 id="行间距line-height"><a href="#行间距line-height" class="headerlink" title="行间距line-height"></a>行间距line-height</h2><p>在css中，line-height属性用于设置文本行的整个高度</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span> &#123;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1.4em</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="字母间距和单词间距letter-spacing，word-spacing"><a href="#字母间距和单词间距letter-spacing，word-spacing" class="headerlink" title="字母间距和单词间距letter-spacing，word-spacing"></a>字母间距和单词间距letter-spacing，word-spacing</h2><p><strong>字距</strong>是印刷行业用来描述字母之间空隙的一个术语。可以使用letter-spacing属性来控制字母之间的间距。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h1</span>, <span class="hljs-selector-tag">h2</span>&#123;<br>    <span class="hljs-attribute">text-transform</span>: uppercase;<br>    <span class="hljs-attribute">letter-spacing</span>: <span class="hljs-number">0.2em</span>;<br>&#125;<br><span class="hljs-selector-class">.credits</span> &#123;<br>    <span class="hljs-attribute">font-weight</span>: bold;<br>    <span class="hljs-attribute">word-spacing</span>: <span class="hljs-number">1em</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="对齐方式text-align"><a href="#对齐方式text-align" class="headerlink" title="对齐方式text-align"></a>对齐方式text-align</h2><p>text-align用于控制文本的对齐方式。该属性可以选用以下值：</p>
<blockquote>
<p>left：该值表明文本向左对齐</p>
<p>right：该值表明文本向右对齐</p>
<p>center：该值将文本居中显示</p>
<p>justify：该值表明文本两端对齐，即段落中除了末行以外的其他每行都要在宽度上占满文本所在的容器。</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h1</span> &#123;<br>    <span class="hljs-attribute">text-align</span>: left;<br>&#125;<br><span class="hljs-selector-tag">p</span> &#123;<br>    <span class="hljs-attribute">text-align</span>: justify;<br>&#125;<br><span class="hljs-selector-class">.credits</span> &#123;<br>    <span class="hljs-attribute">text-align</span>: right;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="垂直对齐vertical-align"><a href="#垂直对齐vertical-align" class="headerlink" title="垂直对齐vertical-align"></a>垂直对齐vertical-align</h2><p>vertical-align属性可以选用的值包括：</p>
<blockquote>
<ul>
<li>baseline</li>
<li>sub</li>
<li>super</li>
<li>top</li>
<li>text-top</li>
<li>middle</li>
<li>bottom</li>
<li>text-bottom</li>
</ul>
</blockquote>
<p>它还可以选用长度值（通常以像素或em值指定）或是行高的百分数。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#six-moths</span> &#123;<br>    <span class="hljs-attribute">vertical-align</span>: text-top;<br>&#125;<br><span class="hljs-selector-id">#one-year</span> &#123;<br>    <span class="hljs-attribute">vertical-align</span>: baseline;<br>&#125;<br><span class="hljs-selector-id">#two-years</span> &#123;<br>    <span class="hljs-attribute">vertical-align</span>: text-bottom;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220802182646488.png" alt="image-20220802182646488"></p>
<h2 id="文本缩进text-indent"><a href="#文本缩进text-indent" class="headerlink" title="文本缩进text-indent"></a>文本缩进text-indent</h2><p>text-indent属性允许将元素中的首行文本进行所见，通常采用像素值或em值。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h1</span>&#123;<br>    <span class="hljs-attribute">text-indent</span>: -<span class="hljs-number">9999px</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="CSS3：投影text-shadow"><a href="#CSS3：投影text-shadow" class="headerlink" title="CSS3：投影text-shadow"></a>CSS3：投影text-shadow</h2><p>该属性用于创建投影，投影指的是比文本颜色更暗的版本，它位于文本的后方并略有偏移。该属性还可以通过添加亮度比文本稍高的阴影来创建浮雕效果。</p>
<p>由于创建投影需要指定三个长度值和一种颜色，因此该属性的值非常复杂：</p>
<blockquote>
<ul>
<li>第一个长度值表明阴影向左或向右延伸的距离</li>
<li>第二个长度值表明阴影向上或向下延伸的距离</li>
<li>第三个长度值为可选项，它用于指定投影的模糊程度</li>
<li>最后一项是投影的颜色值</li>
</ul>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span>&#123;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#aaaaaa</span>;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#ffffff</span>;<br>    <span class="hljs-attribute">text-shadow</span>: -<span class="hljs-number">1px</span> -<span class="hljs-number">1px</span> <span class="hljs-number">#666666</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="首字母或首行文本-first-letter-first-line"><a href="#首字母或首行文本-first-letter-first-line" class="headerlink" title="首字母或首行文本:first-letter, :first-line"></a>首字母或首行文本:first-letter, :first-line</h2><p>可以通过:first-letter和 :first-line为一个元素中的首字母或者首行文本另外指定一个值。他们被称为伪元素</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.intro</span><span class="hljs-selector-pseudo">:first</span>-letter &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">200%</span>;<br>&#125;<br><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.inro</span><span class="hljs-selector-pseudo">:first</span>-line&#123;<br>    <span class="hljs-attribute">font-weight</span>: bold;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="链接样式-link-visited"><a href="#链接样式-link-visited" class="headerlink" title="链接样式:link, :visited"></a>链接样式:link, :visited</h2><p>默认情况下,浏览器通常以蓝色显示链接并附带下划线,此外,浏览器还会改变那些已经访问过的链接的颜色,以此来帮助用户分清他们已经访问过哪些页面.</p>
<p>在CSS中,有两个伪类允许为已访问的和未访问的链接定义不同的样式.</p>
<blockquote>
<p>:link 该伪类允许给未访问的链接设置样式</p>
<p>:visited 该伪类允许给访问过链接设置样式</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:link</span> &#123;<br>    <span class="hljs-attribute">color</span>: deeppink;<br>    <span class="hljs-attribute">text-decoration</span>: none;<br>&#125;<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:visited</span> &#123;<br>    <span class="hljs-attribute">color</span>: black;<br>&#125;<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>    <span class="hljs-attribute">color</span>: deeppink;<br>    <span class="hljs-attribute">text-decoration</span>: underline;<br>&#125;<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:active</span>&#123;<br>    <span class="hljs-attribute">color</span>: darkcyan;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="相应用户-hover-active-focus"><a href="#相应用户-hover-active-focus" class="headerlink" title="相应用户 :hover, :active, :focus"></a>相应用户 :hover, :active, :focus</h2><p>当用户与元素进行交互时,可使用下面的三种伪元素来改变元素的外观.</p>
<blockquote>
<p>:hover 该伪元素在用户将定位设备(比如光标)悬停在某个元素上时生效</p>
<p>:active 该伪类在元素上进行操作时生效</p>
<p>:focus 该伪类在元素拥有拥有焦点时生效</p>
<p>当使用多个伪类时,应当遵循:link,:visited,:hover,:focus,:active顺序</p>
</blockquote>
<h2 id="特性选择器"><a href="#特性选择器" class="headerlink" title="特性选择器"></a>特性选择器</h2><p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220803021359528.png" alt="image-20220803021359528"></p>
<h1 id="盒子"><a href="#盒子" class="headerlink" title="盒子"></a>盒子</h1><h2 id="盒子的大小width-height"><a href="#盒子的大小width-height" class="headerlink" title="盒子的大小width, height"></a>盒子的大小width, height</h2><p>默认情况下,一个盒子的大小刚好容下其中的内容,并根据其中内容的变化而变化.如果自定义盒子的大小,就需要用到windth和height属性.</p>
<p>指定盒子大小最常用的方式是像素、百分数或em值。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>        一段文本<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.box</span> &#123;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ee3e80</span>;<br>&#125;<br><span class="hljs-selector-tag">p</span> &#123;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">75%</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">75%</span>;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#eeddda</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="宽度限制min-width-max-width"><a href="#宽度限制min-width-max-width" class="headerlink" title="宽度限制min-width, max-width"></a>宽度限制min-width, max-width</h2><p>为了适应用户的屏幕大小，有些设计会适时地展开或收缩页面。在此设计中min-width属性指定一个盒子在浏览器窗口较窄时可以显示的最小宽度，max-width属性指定一个盒子在浏览器较宽时成伸展的最大宽度。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span> = <span class="hljs-string">&quot;description&quot;</span>&gt;</span><br>    ......<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>......<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br></code></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">td</span><span class="hljs-selector-class">.description</span> &#123;<br>    <span class="hljs-attribute">min-width</span>: <span class="hljs-number">450px</span>;<br>    <span class="hljs-attribute">max-width</span>: <span class="hljs-number">650px</span>;<br>    <span class="hljs-attribute">text-align</span>: left;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0px</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="高度限制min-height-max-height"><a href="#高度限制min-height-max-height" class="headerlink" title="高度限制min-height, max-height"></a>高度限制min-height, max-height</h2><p>和宽度限同理</p>
<h2 id="内容移除-overflow"><a href="#内容移除-overflow" class="headerlink" title="内容移除 overflow"></a>内容移除 overflow</h2><p>ofverflow属性告诉浏览器当盒子的内容超过盒子本身时如何显示。它有两个属性值可供选择：</p>
<blockquote>
<p>hidden：该属性会直接把溢出盒子空间的内容进行隐藏。</p>
<p>scroll：该属性会在盒子上添加一个滚动条，这样用户可以通过滚动滑块来查看剩余的内容。</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.one</span> &#123;<br>    <span class="hljs-attribute">overflow</span>: hidden;<br>&#125;<br><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.two</span> &#123;<br>    <span class="hljs-attribute">overflow</span>: scroll;<br>&#125;<br></code></pre></td></tr></table></figure>



<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220803025548770.png" alt="image-20220803025548770"></p>
<h2 id="外框、外边距和内边距"><a href="#外框、外边距和内边距" class="headerlink" title="外框、外边距和内边距"></a>外框、外边距和内边距</h2><p>有三种属性可以应用在所有盒子上，可以通过调节这些属性来控制盒子的外观：</p>
<blockquote>
<p>外框(BORDER)</p>
<p>外边距(MARGIN)</p>
<p>内边距(PADDING)</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220803030020194.png" alt="image-20220803030020194"></p>
<h2 id="边框宽度border-width"><a href="#边框宽度border-width" class="headerlink" title="边框宽度border-width"></a>边框宽度border-width</h2><p>border-width属性用来控制边框宽度。该属性可以时像素值(不可以使用百分数)，也可以选择以下值之一:</p>
<blockquote>
<p>thin</p>
<p>medium</p>
<p>think</p>
</blockquote>
<p>可以通过下面4种属性分别对各个边框大小进行控制:</p>
<blockquote>
<p>border-top-width</p>
<p>border-right-width</p>
<p>border-bottom-width</p>
<p>border-left-width</p>
</blockquote>
<p>又或者：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">border-width</span>: <span class="hljs-number">2px</span> <span class="hljs-number">1px</span> <span class="hljs-number">1px</span> <span class="hljs-number">2px</span>; <span class="hljs-comment">/*顺序为，上方，右侧，下方，左侧*/</span><br></code></pre></td></tr></table></figure>

<h2 id="边框样式border-style"><a href="#边框样式border-style" class="headerlink" title="边框样式border-style"></a>边框样式border-style</h2><p>可使用border-style属性来控制边框的样式。该属性可以选用以下值：</p>
<blockquote>
<p>solid 一条实现</p>
<p>dotted 一串方形点</p>
<p>dashed 一条虚线</p>
<p>double 两条实线</p>
<p>ridge 显示为在页面上凸起的效果</p>
<p>inset 显示为嵌入页面的效果</p>
<p>outset 看起来像是凸出屏幕</p>
<p>hedden&#x2F;none 不显示任何边框</p>
<p>每个边也可以单独设置样式</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.one</span> &#123;<span class="hljs-attribute">border-style</span>: solid;&#125;<br></code></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220803031425280.png" alt="image-20220803031425280"></p>
<h2 id="边框颜色border-color"><a href="#边框颜色border-color" class="headerlink" title="边框颜色border-color"></a>边框颜色border-color</h2><p>可利用RGB值、十六进制码或是CSS颜色名称来指定边框颜色。</p>
<p>每个边框可以单独设置。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.one</span> &#123;<br>    <span class="hljs-attribute">border-color</span>: <span class="hljs-number">#0088dd</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="快捷方式border"><a href="#快捷方式border" class="headerlink" title="快捷方式border"></a>快捷方式border</h2><p>border属性允许你在一个属性中同时指定边框的宽度、样式和颜色</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">250px</span>;<br>    <span class="hljs-attribute">border</span>:<span class="hljs-number">3px</span> dotted <span class="hljs-number">#0088dd</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220803032040230.png" alt="image-20220803032040230"></p>
<h2 id="内边距padding"><a href="#内边距padding" class="headerlink" title="内边距padding"></a>内边距padding</h2><p>padding属性用来指定元素的内容与元素边框之间保持多大的空隙。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span> &#123;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220803032254374.png" alt="image-20220803032254374"></p>
<h2 id="外边距margin"><a href="#外边距margin" class="headerlink" title="外边距margin"></a>外边距margin</h2><p>margin属性用来控制盒子之间的空隙。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span> &#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220803032433775.png" alt="image-20220803032433775"></p>
<h2 id="内容居中"><a href="#内容居中" class="headerlink" title="内容居中"></a>内容居中</h2><p>如果想让一个盒子在页面上居中显示（或者在某个元素居中显示），可将left-margin属性和right-margin属性的值设置为auto</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<br>    <span class="hljs-attribute">text-align</span>: center;<br>&#125;<br><span class="hljs-selector-tag">p</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">50px</span>;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">20px</span> solid <span class="hljs-number">#0088dd</span>;<br>&#125;<br><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.example</span> &#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> auto <span class="hljs-number">10px</span> auto;<br>    <span class="hljs-attribute">text-align</span>: left;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220803033236133.png" alt="image-20220803033236133"></p>
<h2 id="内联元素与块级元素的转换display"><a href="#内联元素与块级元素的转换display" class="headerlink" title="内联元素与块级元素的转换display"></a>内联元素与块级元素的转换display</h2><p>display属性允许你将一个内联元素转换成一个块级元素，反之赤然，而且该属性还可以从页面上隐藏元素。该属性可以选用以下值：</p>
<blockquote>
<p>inline：该值可以使一个块级元素表现得像一个内联元素。</p>
<p>block：该值可以使一个内联元素表现得像一个块级元素。</p>
<p>inline-block：该值可以使一个块级元素像内联元素那样浮动并保持其他的块级元素特征。</p>
<p>none：该值将一个元素从页面上隐藏。</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">li</span> &#123;<br>    <span class="hljs-attribute">display</span>: inline;<br>    <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">10px</span>;<br>&#125;<br><span class="hljs-selector-tag">li</span><span class="hljs-selector-class">.coming-soon</span> &#123;<br>    <span class="hljs-attribute">display</span>: none;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220803034202040.png" alt="image-20220803034202040"></p>
<h2 id="盒子的隐藏visibility"><a href="#盒子的隐藏visibility" class="headerlink" title="盒子的隐藏visibility"></a>盒子的隐藏visibility</h2><p>visibility属性允许从用户的视线中隐藏盒子，但它保留了元素原来占用的空间。该属性可以选用以下值之一：</p>
<blockquote>
<p>hidden：该值用于隐藏元素。</p>
<p>visible：该值用于显示元素。</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">li</span> &#123;<br>    <span class="hljs-attribute">display</span>: inline;<br>    <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">100px</span>;<br>&#125;<br><span class="hljs-selector-tag">li</span><span class="hljs-selector-class">.coming-soom</span> &#123;<br>    <span class="hljs-attribute">visibility</span>: hidden;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220803035335170.png" alt="image-20220803035335170"></p>
<h2 id="CSS3：边框图像border-image"><a href="#CSS3：边框图像border-image" class="headerlink" title="CSS3：边框图像border-image"></a>CSS3：边框图像border-image</h2><p>border-image属性将图片应用到盒子的边框上。它采用一张背景图片，并将图片切割成九块。</p>
<p>该属性需要三种信息：</p>
<blockquote>
<ul>
<li><p>图片的URL</p>
</li>
<li><p>切割图片的位置</p>
</li>
<li><p>如何处理直边，可以选用以下值：</p>
<ul>
<li>stretch 伸展图片</li>
<li>repeat 重复图片</li>
<li>round 平铺图片</li>
</ul>
</li>
</ul>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#borderimg</span> &#123;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">10px</span> solid transparent;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">15px</span>;<br>  <span class="hljs-attribute">border-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">border.png</span>) <span class="hljs-number">30</span> stretch;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220803040837063.png" alt="image-20220803040837063"></p>
<h2 id="CSS3：盒子的阴影box-shadow"><a href="#CSS3：盒子的阴影box-shadow" class="headerlink" title="CSS3：盒子的阴影box-shadow"></a>CSS3：盒子的阴影box-shadow</h2><p>box-shadow属性允许在盒子的周围增加阴影。使用该属性时，至少包含下列项目中前两项的值以及一个颜色值。</p>
<blockquote>
<p>水平偏移：负值表示将阴影置于盒子的左侧。</p>
<p>垂直偏移：负值表示将阴影置于盒子的上方。</p>
<p>模糊距离：缺省默认为实边。</p>
<p>阴影扩展：如果使用该值，正值会使用阴影向四周延伸，负值则会使阴影收缩。</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span> &#123;<br>    <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">5px</span> <span class="hljs-number">5px</span> <span class="hljs-number">5px</span> <span class="hljs-number">#777777</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220803041620416.png" alt="image-20220803041620416"></p>
<h2 id="CSS3：圆角border-radius"><a href="#CSS3：圆角border-radius" class="headerlink" title="CSS3：圆角border-radius"></a>CSS3：圆角border-radius</h2><p>css3引入了在盒子上创建圆角的功能。为了实现该功能，需要使用一个称为border-radius的属性。该值表示半径（像素）</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span> &#123;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span><br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="CSS3：椭圆形border-radius"><a href="#CSS3：椭圆形border-radius" class="headerlink" title="CSS3：椭圆形border-radius"></a>CSS3：椭圆形border-radius</h2><p>要创建更复杂的形状，可给圆角的横向值和纵向值指定不同的距离。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span> &#123;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">80px</span> <span class="hljs-number">50px</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220803042115435.png" alt="image-20220803042115435"></p>
<h1 id="列表、表格和表单"><a href="#列表、表格和表单" class="headerlink" title="列表、表格和表单"></a>列表、表格和表单</h1><h2 id="项目符号样式list-style-type"><a href="#项目符号样式list-style-type" class="headerlink" title="项目符号样式list-style-type"></a>项目符号样式list-style-type</h2><p>list-style-type属性允许控制项目符号（也成为标记）的形状或样式。</p>
<p>该属性可在应用到<code>&lt;ol&gt;</code>元素、<code>&lt;ul&gt;</code>元素和<code>&lt;li&gt;</code>元素的规则中使用。</p>
<p>无序列表：</p>
<p>对于一个无序列表的list-style-type属性，可以使用以下值：</p>
<blockquote>
<p>none</p>
<p>disc</p>
<p>circle</p>
<p>square</p>
</blockquote>
<p>有序列表：</p>
<p>对于一个有序（编号）列表的list-style-type属性，可以使用以下值：</p>
<blockquote>
<p>decimal：123</p>
<p>decimal-leading-zero：01 02 03</p>
<p>lower-alpha：a b c</p>
<p>upper-alpha：A B C</p>
<p>lower-roman：i. ii. iii.</p>
<p>upper-roman：I II III</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">ol</span> &#123;<br>    <span class="hljs-attribute">list-style-type</span>: lower-roman;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="项目图像list-style-image"><a href="#项目图像list-style-image" class="headerlink" title="项目图像list-style-image"></a>项目图像list-style-image</h2><p>可利用list-style-imagge属性将一个图像作为项目符号使用。</p>
<p>该属性的值以字母url开头，后秒跟着一对圆括号。在括号里面，图像的路径在双引号中给出。</p>
<p>该属性可以在应用到<code>&lt;ul&gt;</code>元素和<code>&lt;li&gt;</code>元素的规则中使用。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">ul</span> &#123;<br>    <span class="hljs-attribute">list-style-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;images/star.png&quot;</span>);<br>&#125;<br><span class="hljs-selector-tag">li</span> &#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> <span class="hljs-number">0px</span> <span class="hljs-number">0px</span> <span class="hljs-number">0px</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220803152800407.png" alt="image-20220803152800407"></p>
<h2 id="标记的定位list-style-position"><a href="#标记的定位list-style-position" class="headerlink" title="标记的定位list-style-position"></a>标记的定位list-style-position</h2><p>默认情况下，列表会缩进到页面中。list-style-position属性用于表明标记显示的位置，是在包含主体内容的盒子的内部，还是其在外部。</p>
<p>该属性可以选用以下两个值：</p>
<blockquote>
<p>outside：该值表明标记于文本块的左侧（这也是未使用该属性时的默认处理方式）</p>
<p>inside：该值表明标记位于文本的内部，同时文本块会被缩进。  </p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">ul</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">250</span>;<br>&#125;<br><span class="hljs-selector-tag">li</span> &#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span>;<br>&#125;<br><span class="hljs-selector-tag">ul</span><span class="hljs-selector-class">.illuminations</span> &#123;<br>    <span class="hljs-attribute">list-style-position</span>: outside;<br>&#125;<br><span class="hljs-selector-tag">ul</span><span class="hljs-selector-class">.season</span> &#123;<br>    <span class="hljs-attribute">list-style-position</span>: inside;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220803154637968.png" alt="image-20220803154637968"></p>
<h2 id="列表快捷方式list-style"><a href="#列表快捷方式list-style" class="headerlink" title="列表快捷方式list-style"></a>列表快捷方式list-style</h2><p>与其他的一些CSS属性一样，针对列表样式也有一个类似快捷方式的属性。该属性称为list-style，它允许按任意顺序表示标记的样式、图像和位置属性。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">ul</span> &#123;<br>    <span class="hljs-attribute">list-style</span>:inside circle;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220803174955075.png" alt="image-20220803174955075"></p>
<h2 id="表格属性"><a href="#表格属性" class="headerlink" title="表格属性"></a>表格属性</h2><blockquote>
<p>width：表格宽度</p>
<p>padding：用于设置每个单元格边框与器内容之间的空隙</p>
<p>text-transform：用于将表格标题中的内容转换大写。</p>
<p>letter-spacing，font-size：用于为表格标题的内容增加额外的样式。</p>
<p>border-top，border-bottom：用于设置表格标题上方和下方的边框。</p>
<p>text-align：用于将某些单元格中的书写方式设置为左对齐或者向右对齐</p>
<p>background-color：用于交替改变表格行的背景颜色。</p>
<p>:hover：在用户把光标悬停在某个表格行时将此高亮显示</p>
</blockquote>
<h2 id="空单元格的边框empty-cells"><a href="#空单元格的边框empty-cells" class="headerlink" title="空单元格的边框empty-cells"></a>空单元格的边框empty-cells</h2><p>如果在一个表格中含有空单元格，那么就可以使用empty-cells属性来指定是否显示空单元格的边框。</p>
<p>如果想显示或隐藏单元格的边框，就需要用到empty-cells属性。可以选用以下三个值之一：</p>
<blockquote>
<p>show：用于显示空单元格的边框</p>
<p>hide：该值用于隐藏空单元格边框</p>
<p>inherit：如果一个表格嵌套在另一个表格中，那么inherit值表明单元格遵循外部表格规则。</p>
</blockquote>
<h2 id="单元格之间的空隙border-spacing，border-collapse"><a href="#单元格之间的空隙border-spacing，border-collapse" class="headerlink" title="单元格之间的空隙border-spacing，border-collapse"></a>单元格之间的空隙border-spacing，border-collapse</h2><p>border-spacing属性允许你控制相邻单元格之间的距离。默认情况下，浏览器经常在每个单元格之间留有一个较小的空隙，利用border-spacing属性可以进行控制，该属性的可选值有：</p>
<blockquote>
<p>collapse：该值表示尽可能将单元格相邻的边框合并为一个单独的边框</p>
<p>separate：该值表示将相邻的边框分离</p>
</blockquote>
<h2 id="定义单行文本框样式"><a href="#定义单行文本框样式" class="headerlink" title="定义单行文本框样式"></a>定义单行文本框样式</h2><p>文本输入框的一些常用CSS属性：</p>
<blockquote>
<p>font-size：用于设置用户输入文本的大小</p>
<p>color，background-color：文本颜色,输入框的背景色</p>
<p>border，border-radius：增加边框边缘,创建圆角</p>
<p>:focus(伪类)：用来改变输入时文本输入框的背景颜色</p>
<p>:hover(伪类)：用来在用户将光标悬停在文本输入框时改变文本输入框的背景色</p>
<p>background-image：为盒子增加背景图像。</p>
</blockquote>
<h2 id="定义提交按钮样式"><a href="#定义提交按钮样式" class="headerlink" title="定义提交按钮样式"></a>定义提交按钮样式</h2><blockquote>
<p>color：控制按钮上文本颜色</p>
<p>text-shandow：可在支持该属性的浏览器中展示3D效果的文本</p>
<p>border-bottom：使按钮的下方边框稍粗一点，从而使3D效果更加逼真</p>
<p>background-color：可以使提交按钮从周围的项目中突显出来</p>
</blockquote>
<h2 id="光标样式cursor"><a href="#光标样式cursor" class="headerlink" title="光标样式cursor"></a>光标样式cursor</h2><p>cursor属性用于控制显示给用户的光标的类型。</p>
<p>例如，对于一个表单，把光标悬停于表单上时将光标设置为手型。常用值如下：</p>
<blockquote>
<ul>
<li><p>auto</p>
</li>
<li><p>crosshair</p>
</li>
<li><p>default</p>
</li>
<li><p>pointer</p>
</li>
<li><p>move</p>
</li>
<li><p>text</p>
</li>
<li><p>wait</p>
</li>
<li><p>help</p>
</li>
<li><p>url(“cursor.gif”);</p>
</li>
</ul>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span> &#123;<br>    <span class="hljs-attribute">cursor</span>: move;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220804000157227.png" alt="image-20220804000157227"></p>
<h1 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h1><h2 id="普通流position-static"><a href="#普通流position-static" class="headerlink" title="普通流position:static"></a>普通流position:static</h2><p>在普通流中，每个块级元素都会在下一个元素的上方。由于这是浏览器处理HTML元素的默认方式。</p>
<h2 id="相对定位position-relative"><a href="#相对定位position-relative" class="headerlink" title="相对定位position:relative"></a>相对定位position:relative</h2><p>如果将一个盒子的position属性值设置为absolute，那么它就会脱离普通流，不在影响页面中其它元素的位置（如同它不在那个位置一样）。</p>
<p>盒子的位移属性（top或bottom以及keft或right）用于指定元素相对于它的包含元素应该显示在什么位置、</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h1</span> &#123;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">0px</span>;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">500px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">250px</span>;<br>&#125;<br><span class="hljs-selector-tag">p</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">450px</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220804003146839.png" alt="image-20220804003146839"></p>
<h2 id="固定定位position-fixed"><a href="#固定定位position-fixed" class="headerlink" title="固定定位position:fixed"></a>固定定位position:fixed</h2><p>固定定位时绝对定位的一种类型，将position属性的值设置为fixed就表示固定定位</p>
<p>固定定位时指元素相对于浏览器窗口进行定位。因此，当用户滚动页面时，这类元素的位置保持不变。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h1</span> &#123;<br>    <span class="hljs-attribute">position</span>: fixed;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">0px</span>;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">0px</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#efefef</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220804005016393.png" alt="image-20220804005016393"></p>
<h2 id="重叠元素z-index"><a href="#重叠元素z-index" class="headerlink" title="重叠元素z-index"></a>重叠元素z-index</h2><p>当使用相对定位、固定定位或者绝对定位时，盒子时可以重叠的。如果盒子出现重叠，那么在HTML代码中，后出现的元素将位于页面中先出现元素的上层。</p>
<p>如果要控制元素的层次，可使用z-index属性。该属性的值是一个数字，数值越大，元素的层级就越靠前。</p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220804005615033.png" alt="image-20220804005615033"></p>
<h2 id="浮动元素float"><a href="#浮动元素float" class="headerlink" title="浮动元素float"></a>浮动元素float</h2><p>float属性允许将普通流的元素在它的包含元素内尽可能地向左或向右排列。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">blockquote</span> &#123;<br>    <span class="hljs-attribute">float</span>: right;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220804012217388.png" alt="image-20220804012217388"></p>
<h2 id="清除浮动clear"><a href="#清除浮动clear" class="headerlink" title="清除浮动clear"></a>清除浮动clear</h2><p>clear属性用于表明一个盒子的左侧或者右侧不允许浮动元素（在同一个包含元素内）。该属性可以选用以下值：</p>
<blockquote>
<p>left：盒子的左侧不能接触同一个包含元素内其他任何元素。</p>
<p>right：盒子的右侧不能接触同一个包含元素内其他任何元素。</p>
<p>both：盒子的左侧和右侧都不能接触同一个包含元素内的其他任何元素。</p>
<p>none：盒子的两侧都可以接触元素。</p>
</blockquote>
<h2 id="利用浮动创建多列式布局"><a href="#利用浮动创建多列式布局" class="headerlink" title="利用浮动创建多列式布局"></a>利用浮动创建多列式布局</h2><p>许多网页都采用了多列式的设计。这种设计的每一个列用一个<code>&lt;div&gt;</code>元素表示。下面三种CSS属性用来将多个列并排到一起：</p>
<blockquote>
<p>width：该属性用于设置列宽</p>
<p>float：该属性用于将多个列并排</p>
<p>margin：该属性用于将多个列之间创建空隙</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.columnlof2</span> &#123;<br>    <span class="hljs-attribute">float</span>: left;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">620px</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span>;<br>&#125;<br><span class="hljs-selector-class">.column2of2</span> &#123;<br>    <span class="hljs-attribute">float</span>: left;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220804015424279.png" alt="image-20220804015424279"></p>
<h2 id="固定宽度布局，流体布局"><a href="#固定宽度布局，流体布局" class="headerlink" title="固定宽度布局，流体布局"></a>固定宽度布局，流体布局</h2><p>固定宽度布局的设计不会因为用户扩大或缩小浏览器窗口而发生变化。这种设计通常以像素作为衡量单位。</p>
<p>流体布局设计随着用户对浏览器窗口的扩大或缩小而伸展或收缩，这种设计通常使用百分数。</p>
<h2 id="多个样式表-import-link"><a href="#多个样式表-import-link" class="headerlink" title="多个样式表@import,link"></a>多个样式表@import,link</h2><p>有些网页设计人员将它们的CSS规则分为几个单独的样式表。例如他们可能会使用一个样式表来控制布局，而用另一个样式表来控制字体和颜色等</p>
<p>有些设计人员采取更加模块化的方法指定样式表，他们创建单独的样式表分别控制印刷排版、布局、表单、表格，甚至为网站内的每个子栏目指定不同的样式。</p>
<p>在一个页面内加入多个样式表的方法有两种：</p>
<blockquote>
<ul>
<li>在HTML页面链接一个样式表，然后再这个样式表中使用@import规则来导入其他的样式表。</li>
<li>可在HTML页面内使用多个<code>&lt;link&gt;</code>元素分别引用样式表。</li>
</ul>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Import<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span> = <span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span> = <span class="hljs-string">&quot;css/styles.css&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@import</span> url(<span class="hljs-string">&quot;tables.css&quot;</span>);<br><span class="hljs-keyword">@import</span> url(<span class="hljs-string">&quot;typography.css&quot;</span>);<br><span class="hljs-selector-tag">body</span> &#123;<br>    ......<br>&#125;<br></code></pre></td></tr></table></figure>

<h1 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h1><h2 id="在CSS中控制图像的大小"><a href="#在CSS中控制图像的大小" class="headerlink" title="在CSS中控制图像的大小"></a>在CSS中控制图像的大小</h2><p>可在CSS中利用width属性和height属性控制一个图像的大小</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;images/magnolia-large.jpg&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;large&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Magnolia&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">img</span><span class="hljs-selector-class">.large</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">500px</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="使用CSS将图像对齐"><a href="#使用CSS将图像对齐" class="headerlink" title="使用CSS将图像对齐"></a>使用CSS将图像对齐</h2><p>相对于<code>&lt;img&gt;</code>元素的align特性来说，越来越多的网页设计人员使用float属性来对齐图像。可以采用两种方式来实现对齐：</p>
<blockquote>
<ul>
<li>将float属性添加到控制图像大小的类中（比如small类）。</li>
<li>使用如align-left或align-right的名称创建新类，将图像在页面内向左或右对齐。</li>
</ul>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">img</span><span class="hljs-selector-class">.align-left</span> &#123;<br>    <span class="hljs-attribute">float</span>: left;<br>    <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">10px</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="使用CSS将图像居中"><a href="#使用CSS将图像居中" class="headerlink" title="使用CSS将图像居中"></a>使用CSS将图像居中</h2><p>默认情况下，图像属于内联元素。这意味着它们与周围的文本一起流动。为使图像居中，我们应该转换成块级元素，通过将display属性的值设置为block可以完成转换。</p>
<p>图像被转换成块级元素后，可采用以下两种方法将其水平居中：</p>
<blockquote>
<ul>
<li><p>对于图像的包含元素，可将其text-align属性的值设置为center。</p>
</li>
<li><p>对于图像本身而言，可使用margin属性并将其左，右外边距的值设置为auto。</p>
</li>
</ul>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">img</span><span class="hljs-selector-class">.align-center</span>&#123;<br>    dispaly: block;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0px</span> auto;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="背景图像background-image"><a href="#背景图像background-image" class="headerlink" title="背景图像background-image"></a>背景图像background-image</h2><p>background-image属性允许你在任何HTML元素之后放置图像。背景图像可以填满整个页面或是填充页面的一部分。默认情况下，背景图像会自动重复并充满整个盒子。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<br>    <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;images/pattern.gif&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="重复图像background-repeat-background-attachment"><a href="#重复图像background-repeat-background-attachment" class="headerlink" title="重复图像background-repeat background-attachment"></a>重复图像background-repeat background-attachment</h2><p>background-repeat 属性可选用以下四个字值中的一个：</p>
<blockquote>
<ul>
<li><p>repeat：背景图像在水平方向和垂直方向上都进行重复（默认的显示方式）</p>
</li>
<li><p>repeat-x：背景图像只在水平方向进行重复</p>
</li>
<li><p>repeat-y：背景图像仅在垂直方向上重复</p>
</li>
<li><p>no-repeat：背景图像只显示一次。background-attachment属性用于指定背景图像在用户混动页面时的移动方式，可以选用以下两个值中的一个：</p>
<ul>
<li>fixed：背景图像固定在页面中的一个位置</li>
<li>scroll：背景图像随用户上下滚动页面而上下移动</li>
</ul>
</li>
</ul>
</blockquote>
<h2 id="背景图像的定位background-position"><a href="#背景图像的定位background-position" class="headerlink" title="背景图像的定位background-position"></a>背景图像的定位background-position</h2><p>如果背景图像不进行重复，可以使用background-position属性来指定背景图像在浏览器在窗口中的位置</p>
<p>该属性通常会有一堆值。第一个值表示水平位置，第二个值表示垂直位置</p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220805005947429.png" alt="image-20220805005947429"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<br>    <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;images/tulip.gif&quot;</span>);<br>    <span class="hljs-attribute">background-repeat</span>: no-repeat;<br>    <span class="hljs-attribute">background-position</span>: center top;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="简写background"><a href="#简写background" class="headerlink" title="简写background"></a>简写background</h2><p>该属性比如按照以下顺序来指定，但如果不想指定某个属性，可将其忽略。</p>
<blockquote>
<p>background-color</p>
<p>background-image</p>
<p>background-repeat</p>
<p>background-attachment</p>
<p>background-position</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">background</span>:<br>        <span class="hljs-built_in">url</span>(<span class="hljs-string">example-1.jpg</span>)<br>        no-repeat top left<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="图像翻转与子画面"><a href="#图像翻转与子画面" class="headerlink" title="图像翻转与子画面"></a>图像翻转与子画面</h2><p>利用CSS，可在用户将光标悬停在一个链接或按钮上时为链接或按钮创建另一种样式（称为翻转），还可以在用户单击它时创建第三种样式。</p>
<p>当一个单独的图像应用在某个界面的多个不同部位时，它就被称为子画面（sprite）</p>
<h2 id="CSS3：渐变background-image"><a href="#CSS3：渐变background-image" class="headerlink" title="CSS3：渐变background-image"></a>CSS3：渐变background-image</h2><p>渐变通过background-image属性来创建。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#grad</span> &#123;<br>    <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">linear-gradient</span>(<span class="hljs-number">#e66465</span>, <span class="hljs-number">#9198e5</span>);<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>WebFrontend</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>XHTML</title>
    <url>/2022/12/27/WebFrontend/UI/XHTML/</url>
    <content><![CDATA[<h1 id="XHTML-简介"><a href="#XHTML-简介" class="headerlink" title="XHTML 简介"></a>XHTML 简介</h1><h2 id="什么是XHTML"><a href="#什么是XHTML" class="headerlink" title="什么是XHTML"></a>什么是XHTML</h2><p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220926165030652.png" alt="image-20220926165030652"></p>
<ul>
<li>XHTML指的是可扩展性超文本标签语言（EXtensible HyperText Markup Language）。</li>
<li>XHTML的目标是取代HTML。</li>
<li>XHTML 与 HTML 4.01 几乎是相同的。</li>
<li>XHTML是更严格纯净的HTML版本。</li>
<li>XHTML是作为一种 XML 应用被重新定义的HTML</li>
<li>XHTML是一个W3C标准。</li>
</ul>
<h2 id="需要掌握的知识"><a href="#需要掌握的知识" class="headerlink" title="需要掌握的知识"></a>需要掌握的知识</h2><ul>
<li>HTML</li>
<li>基本的网站建设知识</li>
</ul>
<h2 id="HTML、XHTML、XML与HTML5区别与联系"><a href="#HTML、XHTML、XML与HTML5区别与联系" class="headerlink" title="HTML、XHTML、XML与HTML5区别与联系"></a>HTML、XHTML、XML与HTML5区别与联系</h2><p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220926100030989.png" alt="image-20220926100030989"></p>
<p>xhtml：可扩展超文本标记语言，是一种置标语言，表现方式与超文本标记语言（HTML）类似，不过语法上更加严格。</p>
<p>html5（h5）：更先由WHATWG（web 超文本应用技术工作组）命名的一种超文本标记语言，随后和W3C的xhtml2.0(标准)相结合，产生现在更新一代的超文本标记语言。可以简单理解为：h5 ≈ html + CSS 3 + js + API。</p>
<p>XML：<del>未来再进行讨论</del></p>
<p><strong>html特性：</strong></p>
<ul>
<li>标识文本、建立超链接、创建列表、多媒体、制作表格表单等</li>
</ul>
<p><strong>h5的认识：</strong></p>
<ul>
<li><p>新特性应该基于HTML、CSS、DOM以及JavaScript</p>
</li>
<li><p>减少对外部插件的需求（比如Flash）</p>
</li>
<li><p>更优秀的错误处理</p>
</li>
<li><p>更多取代脚本的标记</p>
</li>
</ul>
<p><strong>h5新特性：</strong></p>
<ul>
<li>用于绘画的<code>canvas</code>元素</li>
<li>用于媒介回放的<code>video</code>和<code>audio</code>元素</li>
<li>更具语义化的标签，便于浏览器识别</li>
<li>对本地离线存储有更好的支持，可通过ofline实现</li>
<li>新的特殊内容元素，比如<code>article</code>、<code>footer</code>、<code>header</code>、<code>nav</code>、<code>section</code></li>
<li>新的表单控件，比如<code>calendar</code>、<code>date</code>、<code>time</code>、<code>email</code>、<code>url</code>、<code>search</code></li>
</ul>
<h1 id="XHTML语法"><a href="#XHTML语法" class="headerlink" title="XHTML语法"></a>XHTML语法</h1><ol>
<li>XHTML要求正确嵌套</li>
<li>XHTML所有元素必须关闭</li>
<li>XHTML区分大小写</li>
<li>XHTML属性要用双引号</li>
<li>XHTML用id属性替代name属性</li>
<li>XHTML特殊字符的处理</li>
</ol>
<h1 id="XHTML-DTD"><a href="#XHTML-DTD" class="headerlink" title="XHTML DTD"></a>XHTML DTD</h1><p>XHTML 定义了三种文件类型声明。</p>
<p>使用最普遍的是XHTML Transitional。</p>
<h2 id="lt-DOCTYPE-gt-是强制使用的"><a href="#lt-DOCTYPE-gt-是强制使用的" class="headerlink" title="&lt;!DOCTYPE&gt;是强制使用的"></a><code>&lt;!DOCTYPE&gt;</code>是强制使用的</h2><p>一个XHTML文档有三个主要的部分：</p>
<ul>
<li>DOCTYPE</li>
<li>Head</li>
<li>Body</li>
</ul>
<figure class="highlight xhtml"><table><tr><td class="code"><pre><code class="hljs XHTML"><span class="hljs-meta">&lt;!DOCTYPE ...&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>... <span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span> ... <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>在XHTML文档中，文档类型声明总是位于首行。</p>
<h2 id="一个XHTML的实例"><a href="#一个XHTML的实例" class="headerlink" title="一个XHTML的实例"></a>一个XHTML的实例</h2><p>一个简单的（最小化的）XHTML文档：</p>
<figure class="highlight xhtml"><table><tr><td class="code"><pre><code class="hljs XHTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span></span><br><span class="hljs-meta"><span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot;</span></span><br><span class="hljs-meta"><span class="hljs-string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>simple document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>a simple paragraph<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>文档类型声明定义文档的类型：</p>
<figure class="highlight xhtml"><table><tr><td class="code"><pre><code class="hljs XHTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span></span><br><span class="hljs-meta"><span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot;</span></span><br><span class="hljs-meta"><span class="hljs-string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>文档的其余部分类似HTML：</p>
<figure class="highlight xhtml"><table><tr><td class="code"><pre><code class="hljs XHTML"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>simple document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>a simple paragraph<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="3种文档类型声明"><a href="#3种文档类型声明" class="headerlink" title="3种文档类型声明"></a>3种文档类型声明</h2><ul>
<li>DTD规定了使用通用标记语言（SGML）的网页的语法。</li>
<li>诸如HTML这样的通用标记语言应该使用DTD来规定应用于某种特定文档中的标签的规则，这些规则包括一系列的元素和实体的声明。</li>
<li>在通用标记语言（SGML）的文档类型声明或DTD中，XHTML被详细地进行了描述。</li>
<li>XHTML DTD使用精确的可被计算机读取的语言来描述合法的XHTML标记的语法和句法。</li>
</ul>
<p><strong>XHTML 1.0 Strict（严格模式）：</strong></p>
<figure class="highlight xhtml"><table><tr><td class="code"><pre><code class="hljs XHTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span></span><br><span class="hljs-meta"><span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot;</span> </span><br><span class="hljs-meta"><span class="hljs-string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>使用场景：需要干净的标记，避免表现上的混乱。与层叠样式表配合使用。</p>
<p>严格 DTD 包含没有被反对使用的或不出现在框架结构中的元素和属性</p>
<p><strong>XHTML 1.0 Transitional（过度类型）：</strong></p>
<figure class="highlight xhtml"><table><tr><td class="code"><pre><code class="hljs XHTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span></span><br><span class="hljs-meta"><span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span></span><br><span class="hljs-meta"><span class="hljs-string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>使用场景：当需要利用HTML在表现上的特征时，并且上需要为那些不支持层叠样式表的浏览器编写XHTML时。</p>
<p>过渡 DTD 包含严格 DTD 中的一切，外加那些不赞成使用的元素和属性</p>
<p><strong>XHTML 1.0 Frameset（框架类型）：</strong></p>
<figure class="highlight xhtml"><table><tr><td class="code"><pre><code class="hljs XHTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span></span><br><span class="hljs-meta"><span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD XHTML 1.0 Frameset//EN&quot;</span></span><br><span class="hljs-meta"><span class="hljs-string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>使用场景：需要使用HTML框架将浏览器窗口分割为两部分或更多框架时。</p>
<p>框架 DTD 包含过渡 DTD 中的一切，外加框架</p>
<p>详细参数请参考：<a href="https://www.w3school.com.cn/tags/index.asp">XHTML参考手册</a></p>
<h1 id="XHTML的普及率"><a href="#XHTML的普及率" class="headerlink" title="XHTML的普及率"></a>XHTML的普及率</h1><p>在知名站点(在 Google 上搜索“A”时排名前 30)的随机样本中，只有1个站点(3%)仍然使用 XHTML。 自2000年1月XHTML 被推荐为HTML的下一代标准以来，已经过去了将近三年，但还不能说它已经变得非常流行，可能是因为转向 XHTML 并没有太大的优势。现在的情况。 </p>
<p>顺便说一句，3个站点(10%)符合推荐的规范，例如 HTML 3.2&#x2F;4.0&#x2F;4.01，尽管存在一些错误，7 个站点 (23%) 尽管有 DOCTYPE 声明，但使用了浏览器特定的属性。19  个站点(63%)，包括雅虎、微软、网景、Adobe、NCSA 和 Amazon.com 等知名网站，不编写 DOCTYPE 声明，使用 HTML 有免费限制。  （2003 年 1 月调查） </p>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>HTML 和 XHTML 都是用于创建网页和应用程序的标记语言。  HTML和XHTML一些使它们与众不同的关键区别，但它们也有一些相似之处。 XHTML是HTML的扩展版本，两种语言都用于开发基于 Web和Android 的应用程序。 </p>
<p>虽然 HTML 可能更简单，但 XHTML 更结构化。  XHTML 旨在提高 HTML 的可扩展性和灵活性，使其更容易将 HTML 与其他数据格式（如 XML）集成。  因此，在做出决定时必须牢记每一方的优势和劣势。</p>
]]></content>
      <categories>
        <category>WebFrontend</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>js(学习日志)</title>
    <url>/2022/08/20/WebFrontend/JavaScript/js(%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97)/</url>
    <content><![CDATA[<h2 id="day01-开班典礼"><a href="#day01-开班典礼" class="headerlink" title="day01-开班典礼"></a>day01-开班典礼</h2><h2 id="day02-基础知识"><a href="#day02-基础知识" class="headerlink" title="day02-基础知识"></a>day02-基础知识</h2><h3 id="js代码书写位置"><a href="#js代码书写位置" class="headerlink" title="js代码书写位置"></a>js代码书写位置</h3><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">        js的书写位置</span><br><span class="hljs-comment">        - 页面的 script 标签书写</span><br><span class="hljs-comment">        - 外部js文件引入</span><br><span class="hljs-comment">            1. 需要提前准备好一个js的文件</span><br><span class="hljs-comment">            2. 通过script标签的src引入</span><br><span class="hljs-comment">        - 标签内书写js代码</span><br><span class="hljs-comment">            不推荐使用</span><br><span class="hljs-comment">     --&gt;</span><br>     <span class="hljs-comment">&lt;!-- script 书写 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//js代码书写位置</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;hello word&#x27;</span>)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 老版本的script引入方式 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> &gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;hello word&#x27;</span>)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 写法 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">language</span>=<span class="hljs-string">&quot;javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">         <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;hello word&#x27;</span>)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><br>    <span class="hljs-comment">&lt;!-- 外部js文件引入 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./bendi.js&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 外部引入文件的js 标签内是不允许再书写js代码的</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我是外部js标签内的代码&#x27;</span>)<span class="hljs-comment">//不能识别</span></span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h3 id="简单交互行为"><a href="#简单交互行为" class="headerlink" title="简单交互行为"></a>简单交互行为</h3><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"> //弹窗功能 alert(msg)  msg你需要弹出的内容<br>// alert(&#x27;你好 嘻嘻嘻&#x27;)<br><br>//确认弹窗 跟普通弹窗一样, 知识多了个选项,可以选择确定或者取消confirm(qus) qus 需要用户确认的内容 也是一个字符串<br>//confirm(&#x27;你确定要进入这个网站吗&#x27;)<br><br>        /* <br>            prompt(msg,default) <br>            msg : 给用户的提示语<br>            default : 默认值<br>            带有交互确认弹窗, 用于收集用户信息的弹窗<br>        */<br><br>//prompt(&#x27;你今年多大了?&#x27;,18)<br><br>//打印日志, 打印的内容会在控制台中展示通常用于代码调试<br>//console.log(&#x27;打印的内容&#x27;)<br></code></pre></td></tr></table></figure>

<h3 id="js的代码结构"><a href="#js的代码结构" class="headerlink" title="js的代码结构"></a>js的代码结构</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">/* <br>    语句<br>    语句就是我们刚才所看到的 console.log() alert() 就是所有的语句<br>    一句代码就是一条语句<br><br>    分号<br>    分号作为代码结束的标识符<br>    但是分号不是必须加的  js 会隐式的将换行理解为分号<br><br>    大部分情况下都是可以不加分号的 <br>    看一个特殊情况<br>    alert(3 +<br>3)  进行运算的时候 换行不会被解析为分号<br><br>    必须加分号的情况<br><br>    养成加分号的习惯<br><br><br>    注释的写法<br>    注释的作用 方便多人协作, 写注释后期你还能知道自己在干嘛<br>    单行注释<br>        写法 //需要注释的代码 快捷键 是 ctrl + /  command+/<br>    多行注释<br>        书写方式 /* * /  快捷键  可以自己设置, 设置---快捷键--搜索注释  默认是 shift+alt+a<br>        需要注意多行注释里面不能再嵌套多行注释<br>        <br>*/<br>//alert(&#x27;hello world&#x27;)<br><br>// alert(&#x27;hello&#x27;);<br>// alert(&#x27;world&#x27;);<br><br>// alert(&#x27;hello&#x27;)  <br>// alert(&#x27;world&#x27;)<br>// alert(3 +<br>// 3)<br><br><br>//必须加分号的情况<br>// alert(&#x27;接下来给大家表演弹出123&#x27;);<br>// [1,2,3].forEach(alert);<br><br>// alert(&#x27;接下来给大家表演弹出123&#x27;)[1,2,3].forEach(alert);<br><br>/* <br>    undefined[1,2,3].forEach(alert);<br>*/<br></code></pre></td></tr></table></figure>

<h3 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h3><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">&#x27;use strict&#x27;;<br>   /* <br>       开启严格模式 <br>       开启方式 在js代码的最顶层写上 &#x27;use strict&#x27;;<br>       开启严格模式以后代码就会按照最新的标签去解析<br>   */<br><br>   // x = 123<br>   // console.log(x) //非严格模式下可以访问 x<br>   // console.log(x) //严格模式下会报错 报错x未定义<br><br><br>   // function fn()&#123;<br>   //     console.log(this) //非严格模式是 window 对象<br>   //     console.log(this) // 严格模式下 this 等于 undefined<br>   // &#125;<br>   // fn()<br></code></pre></td></tr></table></figure>

<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">&#x27;use strict&#x27;;<br>    /* <br>        变量<br>        在做开发的时候我们可能会遇到的一些项目<br>        1. 开发一个游戏 <br>            1.1 应该有每个英雄的基本信息 ,生命值 , 护甲值.....<br>            1.2 还需要用到 攻击力, 防御力的变化<br>            1.3 装备系统<br>        2. 开发个聊天软件<br>            2.1 考虑用户的信息<br>            2,2 用户发送的信息<br>        3. 开发个网上商城<br>            3.1 商品信息<br>            3.2 商品价格<br>            3.3 用户信息<br>    */<br><br>    //创建一个容器来存储留言信息  <br>    //在js中存储信息靠的就是变量  变量也称为标识符<br>    //创建变量  需要用到关键词 let<br>    //创建<br>    let message; //创建了一个名字叫message的变量<br><br>    //存储数据<br>    message = &#x27;你好&#x27; //变量赋值操作, 为message变量存储数据<br>    message = &#x27;嘻嘻嘻&#x27;<br><br>    console.log(&#x27;你好&#x27;)<br>    console.log(message) //嘻嘻嘻<br><br>    //创建一个生命值的变量<br>    //创建变量的同事进行赋值<br>    let hp = 100<br>    //修改变量的值<br>    hp = 90<br>    console.log(hp) // 90<br><br><br>    //变种写法<br>    // let user = &#x27;wuxian&#x27;;<br>    // let age = 19;<br>    // let sex = &#x27;男&#x27;;<br>    //简写<br>    // let user = &#x27;七喜&#x27;,age = 50,sex = &#x27;女&#x27;;<br><br>    // let user = &#x27;七喜&#x27;<br>    // ,age = 50<br>    // ,sex = &#x27;女&#x27;;<br><br>    //先创建再赋值<br>    // let user,age,sex;<br>    // user = &#x27;七喜&#x27;;<br>    // age = 19;<br>    // sex = &#x27;女&#x27;<br>    // console.log(user,age,sex)<br><br><br><br>    //老版本创建变量的方式 var 用法和let 一模一样  不推荐使用<br>    // console.log(age) //undefined<br>    // var age = 19<br>    // var age = 18<br>    // console.log(age)<br><br>    //let 不允许声明前调用也不允许重复声明<br>    // console.log(goudan) //报错<br>    // let goudan = &#x27;狗蛋&#x27;;<br>    // let goudan = &#x27;狗蛋&#x27;;<br><br>    // console.log(goudan)<br><br>    /* <br>        变量命名的规范<br>        1. 变量名称只能包含数字,字母符号,$和,_<br>        2. 首字母必须是非数字<br>        3. 严格区分大小写, 不能使用关键词(保留词)<br>        4. 见名知意<br><br>        优秀的命名<br>        如果命名包含多个单词 通常采用驼峰命名的规则命名,驼峰的规则就是首个单词字母小写后续单词的首字母统一大写<br>        userName<br>        productPic<br>        myVeryGoodName<br>        backgroundColor<br>        <br>    */<br><br>    //正确的示范<br>    let _age,$123,abcd,goudan,你好;<br>    // console.log(你好)<br><br>    //错误的示范<br>    // let 1age,max-age,(sex,let,window,return,***;<br></code></pre></td></tr></table></figure>

<h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">&#x27;use strict&#x27;;<br>    <br>/* <br>    1. 使用变量<br>    要求<br>    1 声明两个变量 admin 和 name<br>    2.将值 无限 赋值给 name<br>    3. 从name变量中将值拷贝给 admin<br>    4. 使用弹窗alert 显示出 admin 的值<br><br><br>    2. 根据需求自定义一个优秀的命名<br>    1. 将我们所居住的星球创建一个变量 <br>    2. 创建一个用于存储当前浏览者的名称 <br>*/<br></code></pre></td></tr></table></figure>

<h2 id="day03-数据类型"><a href="#day03-数据类型" class="headerlink" title="day03-数据类型"></a>day03-数据类型</h2><h3 id="专业术语"><a href="#专业术语" class="headerlink" title="专业术语"></a>专业术语</h3><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">&#x27;use strict&#x27;;<br>/* <br>    数据类型<br>    数据类型值得是一门语言中对不同的数据的划分, 在js中有8种数据类型<br>    数据类型可以分为两类<br>    - 基本类型(值类型)<br>    - 引用类型(对象类型)<br>*/<br><br>// 语句 字面量 表达式<br>let age = 18;<br>age = 18 + 1 ;<br>/* <br>    let age = 18;<br>    let 变量声明 <br>    age 变量标识符<br>    =  赋值操作<br>    18 字面量 常见的就是数值字面量 字符串字面量 等等..<br><br>    18 + 1  表达式 , 表达式通常为一个运算公式或者一个函数执行,最终表达式一定会得到一个结果 赋值给变量<br><br>    语句   let age = 18; 完整的一条代码就是一条语句<br>    还有 if for流程控相关的都成为语句<br>*/<br></code></pre></td></tr></table></figure>

<h3 id="基础类型之数值"><a href="#基础类型之数值" class="headerlink" title="基础类型之数值"></a>基础类型之数值</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    数据类型</span><br><span class="hljs-comment">    数据类型值得是一门语言中对不同的数据的划分, 在js中有8种数据类型</span><br><span class="hljs-comment">    数据类型可以分为两类</span><br><span class="hljs-comment">    - 基本类型(值类型)</span><br><span class="hljs-comment">    - 引用类型(对象类型)</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//Number 类型 </span><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    Number 类型表示一个数值类型,在js中数值类型是不区分整数,浮点数的统一都叫number 类型,一切数字都是数值类型(十进制,二进制,十六进制)指数类型</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//创建一个数值类型</span><br><span class="hljs-comment">//字面量创建数值类型</span><br><span class="hljs-keyword">let</span> integer = <span class="hljs-number">666</span> <span class="hljs-comment">//创建了一个十进制的整数数值类型</span><br><span class="hljs-keyword">let</span> decimal = <span class="hljs-number">3.1415</span> <span class="hljs-comment">//创建了一个小数的数值类型</span><br><br><span class="hljs-comment">//通过内置方法创建数值</span><br><span class="hljs-keyword">let</span> num = <span class="hljs-title class_">Number</span>(<span class="hljs-number">10</span>) <br><br><span class="hljs-comment">//内置方法的应用</span><br><span class="hljs-comment">// let userAge = prompt(&#x27;你今年多大&#x27;,19)</span><br><span class="hljs-comment">// let user_age = Number(userAge)</span><br><br><span class="hljs-comment">//一些列的进制展示 , 0b开头表示他是一个二进制的数值, 0x开头表示他是一个十六进制的数值, 0o开头表示他是一个8进制的数值</span><br><span class="hljs-comment">//存储可以用进制存储, 但是在页面中展示一定是会被转换为十进制展示的</span><br><span class="hljs-keyword">let</span> bin = <span class="hljs-number">0b1101</span>  <span class="hljs-comment">//13 对应的二进制</span><br><span class="hljs-keyword">let</span> hex = <span class="hljs-number">0xa3</span> <span class="hljs-comment">// 163 对应的十六进制</span><br><span class="hljs-keyword">let</span> bahe = <span class="hljs-number">0o12</span> <span class="hljs-comment">//10 的八进制    </span><br><span class="hljs-keyword">let</span> index = <span class="hljs-number">5e6</span> <span class="hljs-comment">//e表示指数 表示5*10的6次方</span><br><br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    关于小数的问题</span><br><span class="hljs-comment">    js中小数计算的时候会被转为二进制进行存储所以在计算的时候可能会出现计算误差的情况</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">let</span> result = <span class="hljs-number">0.1</span> + <span class="hljs-number">0.2</span> <span class="hljs-comment">//0.30000000000000004</span><br><br><span class="hljs-comment">//解决方法, 让小数转换为整数再进行计算</span><br><span class="hljs-keyword">let</span> result2 = (<span class="hljs-number">0.1</span>*<span class="hljs-number">100</span> + <span class="hljs-number">0.2</span>*<span class="hljs-number">100</span>) / <span class="hljs-number">100</span><br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    特殊数值 </span><br><span class="hljs-comment">    除了常见的数值类型的以外js中还存在两个特殊的数值类型</span><br><span class="hljs-comment">    - infinity</span><br><span class="hljs-comment">        表示一个无穷大的数值,在js存储数据标准的问题, 在存储数据的时候如果存储的数值超过他能存储的最大范围就会出现正向溢出反之则是反向溢出, js中能展示的最大数值 为 2**1024</span><br><span class="hljs-comment">    - NaN</span><br><span class="hljs-comment">        not a number  表示一个不合法的数字,通常是由计算错误得到的结果</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">let</span> maxNum = -(<span class="hljs-number">2</span>**<span class="hljs-number">1024</span>) <span class="hljs-comment">//2的1024次方</span><br><span class="hljs-keyword">let</span> jsMaxNum = <span class="hljs-title class_">Number</span>.<span class="hljs-property">MAX_VALUE</span> <span class="hljs-comment">//最大值</span><br><span class="hljs-keyword">let</span> num2 = <span class="hljs-number">1</span> / <span class="hljs-number">0</span> <span class="hljs-comment">//Infinity</span><br><span class="hljs-keyword">let</span> num3 = <span class="hljs-title class_">Infinity</span> <span class="hljs-comment">//Infinity 也可以作为值赋值给变量</span><br><br><br><span class="hljs-keyword">let</span> res1 = <span class="hljs-string">&#x27;你好&#x27;</span> / <span class="hljs-number">2</span> <span class="hljs-comment">//计算错误得到的结果就为 nan</span><br><span class="hljs-keyword">let</span> res2 = <span class="hljs-title class_">NaN</span> + <span class="hljs-number">1</span> <span class="hljs-comment">//只要是跟NaN进行就计算得到的结果永远都是NaN</span><br><span class="hljs-keyword">let</span> nn = <span class="hljs-title class_">NaN</span> <span class="hljs-comment">//也可以用做值赋值给变量</span><br><br><span class="hljs-comment">//console.log(NaN**0) //1 特殊情况 NaN的0次方等于1</span><br><br><span class="hljs-comment">//js中的数学运算中有NaN这个值是非常好的一件事, 有他的存在就能保证在js中做数学运算他一定是非常安全的, 因为你无论怎么计算他都能得到一个结果不会报错,最坏的结果就是 NaN</span><br><br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    最大安全整数值</span><br><span class="hljs-comment">    也是由于js存储数据的规则问题, 在js中会出现精度确实的问题, 当计算超出 2**53-1的值的时候, 再进行运算就会出现计算错误</span><br><span class="hljs-comment">    9007199254740991</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">let</span> maxInt = <span class="hljs-number">2</span>**<span class="hljs-number">53</span>-<span class="hljs-number">1</span><span class="hljs-comment">//9007199254740991</span><br>maxInt = maxInt + <span class="hljs-number">2</span> <span class="hljs-comment">//9007199254740992</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Number</span>.<span class="hljs-property">MAX_SAFE_INTEGER</span>)<span class="hljs-comment">//9007199254740991</span><br></code></pre></td></tr></table></figure>

<h3 id="基础类型binint"><a href="#基础类型binint" class="headerlink" title="基础类型binint"></a>基础类型binint</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br>   <span class="hljs-comment">/* </span><br><span class="hljs-comment">       bigint类型 超大整数类型</span><br><span class="hljs-comment">       由于最大安全整数的存在计算会出现精度确实, 所有es6以后引入了一个新的数据类型叫做bigint 专门用于超大的整数计算</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">       注意事项</span><br><span class="hljs-comment">       进行数学运算的时候必须两个值都为超大整数类型才可以计算</span><br><span class="hljs-comment">   */</span><br>  <br>   <span class="hljs-comment">//创建方式 1. 字面量创建 在数值末尾加上一个n表示一个bigint类型</span><br>   <span class="hljs-keyword">let</span> bigInt = <span class="hljs-number">9007199254740991n</span> <span class="hljs-comment">// 123n</span><br><br>   <span class="hljs-comment">//2 通过 内置方法创建 bigint</span><br>   <span class="hljs-keyword">let</span> big2 = <span class="hljs-title class_">BigInt</span>(<span class="hljs-number">2</span>) <span class="hljs-comment">// 2n</span><br><br>   <span class="hljs-keyword">let</span> result = bigInt + big2 <span class="hljs-comment">//9007199254740993n</span><br><br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span> &gt; big2) <span class="hljs-comment">// 3 &gt; 2n  可以跟基础数值类型做比较</span><br></code></pre></td></tr></table></figure>

<h3 id="基础类型string"><a href="#基础类型string" class="headerlink" title="基础类型string"></a>基础类型string</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    String类型  字符串类型</span><br><span class="hljs-comment">    用于存储一段文字信息</span><br><span class="hljs-comment">    字面量创建有三种形式</span><br><span class="hljs-comment">    1. 单引号</span><br><span class="hljs-comment">    2. 双引号</span><br><span class="hljs-comment">    3. 反引号</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//创建方式1  字面量方式创建</span><br><span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;你好&#x27;</span><br><span class="hljs-keyword">let</span> str1 = <span class="hljs-string">&quot;嘻嘻嘻&quot;</span><br><span class="hljs-keyword">let</span> str2 = <span class="hljs-string">`你好你好嘻嘻嘻`</span><br><br><span class="hljs-comment">//反引号也称为模板字符串(功能扩展引号) 他跟普通的引号有一定的区别, 模板字符串内可以通过 $&#123;&#125; 插入变量或者是表达式</span><br><br><span class="hljs-keyword">let</span> myName = <span class="hljs-string">&#x27;yaya&#x27;</span>;<br><span class="hljs-keyword">let</span> age = <span class="hljs-number">18</span>;<br><span class="hljs-comment">// alert(`大家好我叫 $&#123;myName&#125;`) //大家好我叫yaya</span><br><span class="hljs-comment">// alert(`大家好我叫 $&#123;myName&#125;,我今年$&#123;age+1&#125;岁`) //大家好我叫yaya</span><br><span class="hljs-comment">// alert(&quot;大家好我叫 $&#123;myName&#125;&quot;) //大家好我叫 $&#123;myName&#125;</span><br><br><span class="hljs-comment">//+ 号在于字符串运算的时候会进行字符串的拼接</span><br><span class="hljs-keyword">let</span> result = <span class="hljs-string">&#x27;大家好我叫&#x27;</span> + myName + <span class="hljs-string">&#x27;我今年&#x27;</span>+(age+<span class="hljs-number">1</span>)+<span class="hljs-string">&#x27;岁&#x27;</span><br><br><br><span class="hljs-comment">//引号嵌套引号的情况 的解决方法</span><br><span class="hljs-keyword">let</span> str3 = <span class="hljs-string">&#x27;鲁迅说:&quot;今年很开心&quot;&#x27;</span>;<br><span class="hljs-keyword">let</span> str4 = <span class="hljs-string">`&#x27;鲁迅说&#x27;:&quot;今年很开心&quot;`</span>;<br><span class="hljs-comment">//使用转移符号解决</span><br><span class="hljs-keyword">let</span> str5 = <span class="hljs-string">&#x27;鲁迅说:\&#x27;今年很开心\&#x27;&#x27;</span>;<br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    转移符号的扩展</span><br><span class="hljs-comment">    \ 普通的转移符号</span><br><span class="hljs-comment">    \n 表示换行符</span><br><span class="hljs-comment">    \r 表示回车符</span><br><span class="hljs-comment">    \t 表示一个制表符</span><br><span class="hljs-comment">    \b 表示一个退格符</span><br><span class="hljs-comment">    \f 表示换页符号</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure>

<h3 id="基础类型boolean类型"><a href="#基础类型boolean类型" class="headerlink" title="基础类型boolean类型"></a>基础类型boolean类型</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    Boolean 类型（布尔值类型 || 逻辑类型）</span><br><span class="hljs-comment">    该数据类型里面一共就两个值 true 和 false </span><br><span class="hljs-comment">    这种类型的值通常用语表示 yes 或者no , true 表示正确 ,false表示失败</span><br><span class="hljs-comment">*/</span><br>   <br><span class="hljs-comment">//创建布尔值</span><br><span class="hljs-keyword">let</span> bool = <span class="hljs-literal">true</span><br><span class="hljs-keyword">let</span> bool2 = <span class="hljs-literal">false</span><br><br><span class="hljs-comment">//内置方法创建</span><br><span class="hljs-keyword">let</span> bool3 = <span class="hljs-title class_">Boolean</span>(<span class="hljs-literal">true</span>)<br><br><span class="hljs-comment">//应用场景 ,通常用于记录一系列的状态</span><br><span class="hljs-keyword">let</span> is180 = <span class="hljs-literal">false</span><br><br><span class="hljs-comment">//布尔值通常出现于数值比较的结果</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">5</span> &gt; <span class="hljs-number">3</span>) <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure>

<h3 id="基础类型null-undefined"><a href="#基础类型null-undefined" class="headerlink" title="基础类型null-undefined"></a>基础类型null-undefined</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    null 类型 (值)</span><br><span class="hljs-comment">    null 类型存储的值只有一个null 他自己就是一个数据类型同时值也就他一个</span><br><span class="hljs-comment">    null 类型表示空对象或者是空值</span><br><span class="hljs-comment">    其他语言成为空指针</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    应用场景就是用来释放内存</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">let</span> age = <span class="hljs-literal">null</span>; <span class="hljs-comment">//表示 age 存储的值是一个空值,或者是一个未知的值,通常情况null 的应用场景就是用来释放内存</span><br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    undefined 类型(值)</span><br><span class="hljs-comment">    跟null一样自成一派,自己就是一个数据类型,值也就只有自己</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    特殊值表示 值未被赋值 </span><br><span class="hljs-comment">    如果一个变量或者对象的属性创建了但是你没有为它赋值,那他默认就是undefined</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">let</span> sex;<br><span class="hljs-comment">// console.log(sex) //undefined</span><br><span class="hljs-comment">// console.log(window.adsfsadf)//undefined</span><br><br><span class="hljs-keyword">let</span> myName = <span class="hljs-string">&#x27;xuxing&#x27;</span>;<br><span class="hljs-comment">//过了一段时间不需要这个值了怎么处理</span><br>myName = <span class="hljs-literal">null</span>;<br></code></pre></td></tr></table></figure>

<h3 id="基础类型symbol"><a href="#基础类型symbol" class="headerlink" title="基础类型symbol"></a>基础类型symbol</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br>    <span class="hljs-comment">/* </span><br><span class="hljs-comment">        symbol 类型</span><br><span class="hljs-comment">        应用场景比较少,一般用于一些架构的设计,或者底层代码</span><br><span class="hljs-comment">        </span><br><span class="hljs-comment">        symbol类型的值是不可以进行运算的</span><br><span class="hljs-comment">        他的应用场景是用于创建一个独一无二的值</span><br><span class="hljs-comment">    */</span><br>   <br>    <span class="hljs-comment">//创建方式</span><br>    <span class="hljs-keyword">let</span>  s1 = <span class="hljs-title class_">Symbol</span>() <span class="hljs-comment">//创建一个独一无法的symbol数据</span><br>    <span class="hljs-keyword">let</span>  s2 = <span class="hljs-title class_">Symbol</span>() <span class="hljs-comment">//创建一个独一无法的symbol数据</span><br>    <span class="hljs-comment">// let  s3 = s1</span><br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s1 === s2) <span class="hljs-comment">//false</span><br><br>    <span class="hljs-comment">/* Object 类型 引用类型, , 后续再探讨引用类型 */</span><br></code></pre></td></tr></table></figure>

<h3 id="typeof运算符"><a href="#typeof运算符" class="headerlink" title="typeof运算符"></a>typeof运算符</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br>   <span class="hljs-comment">/* </span><br><span class="hljs-comment">       typeof 运算符</span><br><span class="hljs-comment">       专用用于检测数据类型的运算符</span><br><span class="hljs-comment">       语法 typeof 需要检测的数据</span><br><span class="hljs-comment">   */</span><br><br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-string">&#x27;23&#x27;</span>) <span class="hljs-comment">//string</span><br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-number">12</span>) <span class="hljs-comment">//number</span><br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-literal">true</span>) <span class="hljs-comment">//boolean</span><br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-number">123n</span>) <span class="hljs-comment">//bigint</span><br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-title class_">Symbol</span>()) <span class="hljs-comment">//symbol</span><br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-literal">undefined</span>) <span class="hljs-comment">//undefined</span><br>   <br><br>   <span class="hljs-comment">//其他类型</span><br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-literal">null</span>) <span class="hljs-comment">//object  type判断null的结构是object这是一个typeof 的错误判断,问题源自js早期兼容问题保留下来的 null 绝对不是一个对象</span><br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> alert) <span class="hljs-comment">//function 判断alert得到的结果是 function 需要注意 function 不是一个数据类型他属于对象类型,这是一个非常好的错误</span><br><br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-variable language_">window</span>) <span class="hljs-comment">//object</span><br><br><br>   <span class="hljs-comment">//typeof 的另一种写法 语法 typeof(需要检测的值)</span><br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">typeof</span>(<span class="hljs-number">1</span>))<span class="hljs-comment">//number</span><br></code></pre></td></tr></table></figure>

<h2 id="day04-类型转换与运算符"><a href="#day04-类型转换与运算符" class="headerlink" title="day04-类型转换与运算符"></a>day04-类型转换与运算符</h2><h3 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    数据类型转换</span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">    大多数情况下运算和函数会自动的将值转换成不同的类型 比如 alert 会将传入的值转换为字符串</span><br><span class="hljs-comment">    还有prompt会将收集到的值也转换为字符串, 这种转换方式我们称为 隐式类型转换</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    很多需求下我们是需要手动的将值转换为我们需要的一个数据类型 , 这时候就需要用一些特定的方法进行数据类型的转换, 这种转换方式我们称为 显示类型转换</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// let age = prompt(&#x27;你今年多大了&#x27;,19)</span><br><span class="hljs-comment">// console.log(typeof age) // string</span><br><br><span class="hljs-comment">//需求是 增加用户的年龄增大一岁</span><br><span class="hljs-comment">// console.log(age+1)//191</span><br><br><span class="hljs-comment">//转换为字符串</span><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    将其他数据类型转换为字符串</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">let</span> num = <span class="hljs-number">5</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> num)<br><span class="hljs-comment">//将5数值转换为字符串</span><br><span class="hljs-comment">// 语法 xx.toString()   xx 表示你需要进行转换的变量</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num.<span class="hljs-title function_">toString</span>()) <span class="hljs-comment">// 5</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">NaN</span>.<span class="hljs-title function_">toString</span>()) <span class="hljs-comment">// NaN</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Symbol</span>().<span class="hljs-title function_">toString</span>()) <span class="hljs-comment">// Symbol()</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Infinity</span>.<span class="hljs-title function_">toString</span>()) <span class="hljs-comment">// Infinity</span><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    toSting 有个问题就是不能转换 undefined 和 null , 转换就报错</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">// console.log(undefined.toString()) // 报错</span><br><span class="hljs-comment">// console.log(null.toString()) // 报错</span><br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    String(xx)  xx需要转换为字符串的值</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">String</span>(<span class="hljs-number">123</span>))<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">String</span>(<span class="hljs-literal">undefined</span>))<span class="hljs-comment">//undefined</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">String</span>(<span class="hljs-literal">null</span>))<span class="hljs-comment">//null</span><br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    还可以通过 +号运算跟字符串做运算 也能转换为字符串</span><br><span class="hljs-comment">    进行+号运算的时候有个规则, 只要运算符两边有一个字符串就会进行字符串拼接</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">let</span> und = <span class="hljs-literal">undefined</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> und) <span class="hljs-comment">// undefined</span><br>und = und+<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> und) <span class="hljs-comment">//string</span><br><br><span class="hljs-keyword">let</span> x = <span class="hljs-number">100</span> + <span class="hljs-string">&#x27;&#x27;</span> + <span class="hljs-number">100</span> <span class="hljs-comment">//100100</span><br><span class="hljs-keyword">let</span> y = <span class="hljs-number">100</span> + <span class="hljs-number">100</span> + <span class="hljs-string">&#x27;&#x27;</span> + <span class="hljs-number">100</span> <span class="hljs-comment">//200100</span><br></code></pre></td></tr></table></figure>

<h3 id="转换为数值类型"><a href="#转换为数值类型" class="headerlink" title="转换为数值类型"></a>转换为数值类型</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">转换为数值</span><br><span class="hljs-comment">将其他类型转换为数值 </span><br><span class="hljs-comment"></span><br><span class="hljs-comment">- Number(value) value你需要转换为数值的值</span><br><span class="hljs-comment">number一定会转换成数值,如果不是一个合法的数值或者特殊值那就直接转换为NaN</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">特殊值, null 和 false在转为数值的时候会被转为0 , true在做转换的时候会被转换为 1</span><br><span class="hljs-comment">undefined 转为数值为 NaN</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">string 转为数值的时候如果他是一个合法的数值字符串是可以进行转换的</span><br><span class="hljs-comment">什么是合法的数值字符串: 字符串掐头去尾(指的是去除开头和结束的空格字符串)剩下的都是数值字符串中间都没有空格的情况就为合法数值字符串</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">空字符串转为数值等于 0</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//合法的数值字符串</span><br><span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;123&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> str)<span class="hljs-comment">//string</span><br>str = <span class="hljs-title class_">Number</span>(str)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> str)<span class="hljs-comment">//number</span><br><br><span class="hljs-comment">//不是一个合法的数值字符串</span><br><span class="hljs-keyword">let</span> str1 = <span class="hljs-string">&#x27;123abc&#x27;</span><br>str1 = <span class="hljs-title class_">Number</span>(str1)<span class="hljs-comment">// 123 A 1 B  NaN C</span><br><br><span class="hljs-comment">//其他数据类型转换为字符串 </span><br><span class="hljs-comment">// console.log(Number(Symbol()))</span><br><span class="hljs-comment">//特殊值</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Number</span>(<span class="hljs-literal">undefined</span>))<span class="hljs-comment">//NaN</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Number</span>(<span class="hljs-literal">null</span>))<span class="hljs-comment">//0</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Number</span>(<span class="hljs-literal">false</span>))<span class="hljs-comment">//0</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Number</span>(<span class="hljs-literal">true</span>))<span class="hljs-comment">//1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Number</span>(<span class="hljs-string">&#x27;&#x27;</span>))<span class="hljs-comment">//0</span><br><br><span class="hljs-comment">//字符串的特殊情况</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Number</span>(<span class="hljs-string">&#x27;          123&#x27;</span>))<span class="hljs-comment">//123</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Number</span>(<span class="hljs-string">&#x27;          123    &#x27;</span>))<span class="hljs-comment">//123</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Number</span>(<span class="hljs-string">&#x27;          1 23    &#x27;</span>))<span class="hljs-comment">//NaN</span><br></code></pre></td></tr></table></figure>

<h3 id="转换为布尔值"><a href="#转换为布尔值" class="headerlink" title="转换为布尔值"></a>转换为布尔值</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    转换为布尔值</span><br><span class="hljs-comment">    语法  Boolean(xx)  把xx的数据转换为布尔值</span><br><span class="hljs-comment">    布尔值的转换规则</span><br><span class="hljs-comment">    - 除了以下的6个值以外其他的所有值都转换为 true</span><br><span class="hljs-comment">    - &#x27;&#x27; 0 false null undefined NaN</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">let</span> bool = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">let</span> bool2 = <span class="hljs-title class_">Boolean</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Boolean</span>(<span class="hljs-number">1</span>))<span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Boolean</span>(<span class="hljs-literal">null</span>))<span class="hljs-comment">//false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Boolean</span>(<span class="hljs-number">5</span>+<span class="hljs-number">3</span>))<span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Boolean</span>([]))<span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Boolean</span>(sessionStorage))<span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Boolean</span>(<span class="hljs-title class_">NaN</span>))<span class="hljs-comment">// false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Boolean</span>(<span class="hljs-string">&#x27; &#x27;</span>))<span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Boolean</span>(<span class="hljs-string">&#x27;&#x27;</span>+<span class="hljs-number">0</span>))<span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Boolean</span>(<span class="hljs-string">&#x27;0&#x27;</span>))<span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Boolean</span>(<span class="hljs-number">3</span>*<span class="hljs-string">&#x27;abc&#x27;</span>))<span class="hljs-comment">// false</span><br><br><br><br><span class="hljs-comment">// console.log(Boolean(undefined))//false</span><br><span class="hljs-comment">// console.log(Number(undefined))//NaN</span><br></code></pre></td></tr></table></figure>

<h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    js中的运算符一共有5中</span><br><span class="hljs-comment">    1. 算术运算符 + - * / ** /%</span><br><span class="hljs-comment">    2. 赋值运算符 = += -= *=</span><br><span class="hljs-comment">    3. 关系(比较)运算符 &gt; &lt; &gt;= &lt;= != </span><br><span class="hljs-comment">    4. 逻辑运算符 &amp;&amp; || ! ??</span><br><span class="hljs-comment">    5. 自增自减运算符  ++ -- </span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    专业术语</span><br><span class="hljs-comment">    运算元  -- 运算元应用的对象 比如 乘法 3 * 4 里面就有两个运算元, 左运算元叫3 右运算元叫 4 , 大部分人称它为 参数</span><br><span class="hljs-comment">    一元运算符  运算符旁边只有一个运算元,就叫一元运算符  -5 +3</span><br><span class="hljs-comment">    二元运算符  运算符旁边有两个运算元就叫 二元运算 3 * 4  就是二元运算</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">let</span> w = <span class="hljs-number">100</span><br><span class="hljs-comment">//希望将w取相反的负数</span><br></code></pre></td></tr></table></figure>

<h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    算术运算符 就是一个数学运算符号</span><br><span class="hljs-comment">    +</span><br><span class="hljs-comment">    -</span><br><span class="hljs-comment">    * 乘</span><br><span class="hljs-comment">    / 除</span><br><span class="hljs-comment">    ** 求幂</span><br><span class="hljs-comment">    % 取余</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    运算规则</span><br><span class="hljs-comment">    加法的规则, 只有两边都是数值的时候才会进行数学加法运算,如果有一边为字符串就进行字符串拼接</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    除了加法运算以为其他运算</span><br><span class="hljs-comment">    跟其他类型进行数学运算的时候 会优先加其他类型的值转换为数值再进行数学运算</span><br><span class="hljs-comment">    如果转换的值为nan那结果就一定是nan (nan 跟任何值做数学运算的时候结果都是nan)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    运算符优先级 : https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence</span><br><span class="hljs-comment">*/</span><br>    <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span> % <span class="hljs-number">5</span>) <span class="hljs-comment">//3</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">5</span> % <span class="hljs-number">3</span>) <span class="hljs-comment">//2</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">5</span> / <span class="hljs-number">3</span>) <span class="hljs-comment">//1.6666666666666667</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>**<span class="hljs-number">3</span>) <span class="hljs-comment">//8</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>**(<span class="hljs-number">1</span>/<span class="hljs-number">3</span>))<span class="hljs-comment">//1.2599210498948732</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-literal">undefined</span>+<span class="hljs-literal">undefined</span>)<span class="hljs-comment">//NaN</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-literal">null</span>+<span class="hljs-literal">null</span>,<span class="hljs-string">&#x27;null+null&#x27;</span>)<span class="hljs-comment">//0 </span><br><br><span class="hljs-comment">//二元运算的 加法</span><br><span class="hljs-comment">//数值跟字符串做加法运算的情况</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">5</span>+<span class="hljs-string">&#x27;3&#x27;</span>)<span class="hljs-comment">//53</span><br><br><span class="hljs-comment">//数值跟数值做加法</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">5</span>+<span class="hljs-number">3</span>)<span class="hljs-comment">//8</span><br><br><span class="hljs-comment">//跟特殊值运算</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">5</span>+<span class="hljs-literal">null</span>)<span class="hljs-comment">//5</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">5</span>*<span class="hljs-string">&#x27;3&#x27;</span>) <span class="hljs-comment">// 5 * 3 = 15</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">5</span>+<span class="hljs-number">4</span>+<span class="hljs-string">&#x27;3&#x27;</span>) <span class="hljs-comment">// 9+&#x27;3&#x27; = &#x27;93&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>-<span class="hljs-literal">true</span>+<span class="hljs-string">&#x27;1&#x27;</span>) <span class="hljs-comment">// 3-1+&#x27;1&#x27; = 2+&#x27;1&#x27; = &#x27;21&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>+<span class="hljs-literal">undefined</span>*<span class="hljs-number">5</span>-<span class="hljs-number">3</span>) <span class="hljs-comment">// NaN</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;6&#x27;</span>*<span class="hljs-string">&#x27;3&#x27;</span>) <span class="hljs-comment">// 18</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;5&#x27;</span>+<span class="hljs-literal">undefined</span>)<span class="hljs-comment">//5undefined</span><br><br><span class="hljs-comment">//计算错误的情况 需要注意 跟 undefined 和 nan计算的时候得到的结构一定是nan</span><br>   <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(+<span class="hljs-literal">true</span>) <span class="hljs-comment">//一元运算会隐式的将运算符旁边的值转换为数值</span><br><br><span class="hljs-comment">//应用场景</span><br><span class="hljs-keyword">let</span> a = <span class="hljs-string">&#x27;4&#x27;</span><br><span class="hljs-keyword">let</span> b = <span class="hljs-string">&#x27;5&#x27;</span><br><span class="hljs-comment">//需求计算 a 加 b 的值 期望得到数值9</span><br><br><span class="hljs-comment">// console.log(a+b)//&#x27;45&#x27;</span><br><span class="hljs-comment">//方式一</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Number</span>(a)+<span class="hljs-title class_">Number</span>(b))<span class="hljs-comment">//9</span><br><br><span class="hljs-comment">//方式二 利用一元运算</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(+a + +b)<span class="hljs-comment">//9</span><br><br><span class="hljs-comment">// let age = +prompt(&#x27;今年多大&#x27;)</span><br><span class="hljs-comment">// console.log(typeof age) //number</span><br><br><span class="hljs-keyword">let</span> res = (<span class="hljs-number">5</span> + <span class="hljs-number">2</span>) * <span class="hljs-number">3</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<span class="hljs-comment">//31</span><br></code></pre></td></tr></table></figure>

<h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br>   <span class="hljs-comment">/* </span><br><span class="hljs-comment">       赋值运算符 = </span><br><span class="hljs-comment">       let x = 2+2 先计算2+2 在进行赋值运算 将4赋值给 x</span><br><span class="hljs-comment">   */</span><br><br>   <span class="hljs-keyword">let</span> w = <span class="hljs-number">7</span><br>   <span class="hljs-keyword">let</span> x = <span class="hljs-number">3</span><br>   <span class="hljs-keyword">let</span> c = <span class="hljs-number">11</span> - (w = x * <span class="hljs-number">2</span>)<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(w) <span class="hljs-comment">//? 6</span><br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(c) <span class="hljs-comment">//? 11 - 6 = 5</span><br><br>   <span class="hljs-comment">//链式赋值</span><br>   <span class="hljs-keyword">let</span> a,b,d;<br>   <span class="hljs-comment">//期望a和b和d 都相等都等于20</span><br>   <span class="hljs-comment">//方案一</span><br>   <span class="hljs-comment">// a = 20;</span><br>   <span class="hljs-comment">// b = 20;</span><br>   <span class="hljs-comment">// c = 20;</span><br>   <span class="hljs-comment">// a = 20</span><br>   <span class="hljs-comment">// b = a</span><br>   <span class="hljs-comment">// d = b</span><br><br>   <span class="hljs-comment">//链式赋值</span><br>   a = b = d = <span class="hljs-number">20</span>;<br><br>   <span class="hljs-comment">//原地修改</span><br>   <span class="hljs-keyword">let</span> money = <span class="hljs-number">1000</span>;<br><br>   <span class="hljs-comment">//常规写法</span><br>   <span class="hljs-comment">// money = money + 1000;</span><br><br>   <span class="hljs-comment">//赋值并且修改 在原有值的基础上进行修改</span><br>   money += <span class="hljs-number">1000</span> <span class="hljs-comment">// ==&gt; money = money + 1000;</span><br>   money += <span class="hljs-number">1000</span> <span class="hljs-comment">// ==&gt; money = money + 1000;</span><br>   money *= <span class="hljs-number">2</span> <span class="hljs-comment">// ==&gt; money = money * 2;</span><br>   money *= <span class="hljs-number">5</span>-<span class="hljs-number">2</span> <span class="hljs-comment">// ==&gt; money = money * 2;</span><br></code></pre></td></tr></table></figure>

<h3 id="数据类型总结"><a href="#数据类型总结" class="headerlink" title="数据类型总结"></a>数据类型总结</h3><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">&#x27;use strict&#x27;;<br>   /* <br>       ### 总结<br>           JavaScript 中有八种基本的数据类型（译注：前七种为基本数据类型，也称为原始类型，而 `object` 为复杂数据类型）。<br><br>           -   `number` 用于任何类型的数字：整数或浮点数，在 `±(253-1)` 范围内的整数。<br>           -   `bigint` 用于任意长度的整数。<br>           -   `string` 用于字符串：一个字符串可以包含 0 个或多个字符，所以没有单独的单字符类型。<br>           -   `boolean` 用于 `true` 和 `false`。<br>           -   `null` 用于未知的值 —— 只有一个 `null` 值的独立类型。<br>           -   `undefined` 用于未定义的值 —— 只有一个 `undefined` 值的独立类型。<br>           -   `symbol` 用于唯一的标识符。<br>           -   `object` 用于更复杂的数据结构。<br><br>           我们可以通过 `typeof` 运算符查看存储在变量中的数据类型。<br><br>           -   通常用作 `typeof x`，但 `typeof(x)` 也可行。<br>           -   以字符串的形式返回类型名称，例如 `&quot;string&quot;`。<br>           -   `typeof null` 会返回 `&quot;object&quot;` —— 这是 JavaScript 编程语言的一个错误，实际上它并不是一个 `object`。<br>   */<br></code></pre></td></tr></table></figure>

<h2 id="day05-运算符续集"><a href="#day05-运算符续集" class="headerlink" title="day05-运算符续集"></a>day05-运算符续集</h2><h3 id="自增自减运算"><a href="#自增自减运算" class="headerlink" title="自增自减运算"></a>自增自减运算</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    自增自减运算</span><br><span class="hljs-comment">    在原有的数值基础上增加1或者是减少1</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    语法分为</span><br><span class="hljs-comment">     ++变量/--变量</span><br><span class="hljs-comment">    后置自增/自减  变量++ 前置自增/自减/变量--</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    前置++ 和后置++的区别</span><br><span class="hljs-comment">    最终所实现的效果是一模一样的都是在原变量的基础上进行自增或者自减</span><br><span class="hljs-comment">    区别在于 后置++ 会将原变量变化前的值返回出来 </span><br><span class="hljs-comment">    前置++ 会将改变后的值返回出来</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    前置++返回的是最新的值,后置++返回的是变化前一次的值</span><br><span class="hljs-comment">*/</span><br>   <br><span class="hljs-keyword">let</span> num = <span class="hljs-number">19</span><br><span class="hljs-comment">//方式一</span><br><span class="hljs-comment">// console.log(num+=1)</span><br><span class="hljs-comment">//方式 后置++</span><br><span class="hljs-keyword">let</span> addNum = num++ <span class="hljs-comment">//后置自增运算</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num)<span class="hljs-comment">//20</span><br>num--<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num)<span class="hljs-comment">//19</span><br><br><span class="hljs-comment">//前置++</span><br>++num<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num) <span class="hljs-comment">// 20</span><br><br><br><span class="hljs-keyword">let</span> height = <span class="hljs-number">150</span>;<span class="hljs-comment">//151 152 </span><br><span class="hljs-comment">// console.log(height++)// 150 先进行赋值再去原有变量上进行+1</span><br><span class="hljs-comment">// console.log(height++)// 151 先进行赋值再去原有变量上进行+1</span><br><span class="hljs-comment">// console.log(height)// 152 先进行赋值再去原有变量上进行+1</span><br><br><span class="hljs-comment">// console.log(++height)//151 先改变变量再进行赋值</span><br><br><span class="hljs-keyword">let</span> age = <span class="hljs-number">1</span><br><span class="hljs-keyword">let</span> result = age++ + ++age * age++ ;<br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    age = 4</span><br><span class="hljs-comment">    1 + 3 * 3</span><br><span class="hljs-comment">    1+9</span><br><span class="hljs-comment">    10</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">// console.log(19++) //报错, 自增自检只能用于变量</span><br><br><span class="hljs-keyword">let</span> aa = <span class="hljs-number">2</span><br><span class="hljs-keyword">let</span> res = <span class="hljs-string">&#x27;5&#x27;</span> + <span class="hljs-number">3</span> * ++aa - <span class="hljs-number">2</span> + aa++ + ++aa + <span class="hljs-string">&#x27;4&#x27;</span>;<br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    aa =5</span><br><span class="hljs-comment">    &#x27;5&#x27; + 3 * 3 - 2 + 3 + 5 +&#x27;4&#x27;</span><br><span class="hljs-comment">    &#x27;5&#x27;+9-2 + 3 + 5 +&#x27;4&#x27;</span><br><span class="hljs-comment">    65+&#x27;4&#x27;</span><br><span class="hljs-comment">    654</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure>

<h3 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br>   <span class="hljs-comment">/* </span><br><span class="hljs-comment">       位运算</span><br><span class="hljs-comment">       位运算会先把运算元做成32位二进制来表示</span><br><span class="hljs-comment">       根据位运算符的规则进行进制的变化</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">       位运算</span><br><span class="hljs-comment">      **~ 按位非**</span><br><span class="hljs-comment">      **&amp; 按位与**</span><br><span class="hljs-comment">      **| 按位或 ^ 按位异或**</span><br><span class="hljs-comment">      **&gt;&gt;&gt; 无符号右移 &gt;&gt; 有符号右移**</span><br><span class="hljs-comment">   */</span><br><br>   <span class="hljs-keyword">let</span> a = <span class="hljs-number">12</span>;<br>   <span class="hljs-keyword">let</span> b = ~a;<br><br>   <span class="hljs-comment">// 12的二进制表示：     00000000 00000000 00000000 00001100</span><br>   <span class="hljs-comment">// 按位非得到最终结果： 11111111 11111111 11111111 11110011  </span><br><br>   <span class="hljs-comment">//因为 第32位是1，代表负数，那这个负数是多少呢？按照上面的办法我们可以反推回来：</span><br>   <span class="hljs-comment">//负数码减-1：         11111111 11111111 11111111 11110010</span><br>   <span class="hljs-comment">//结果取反码：         00000000 00000000 00000000 00001101</span><br>   <span class="hljs-comment">//表示的正数是：13，所以该负数为  -13</span><br><br>   <span class="hljs-comment">// alert(b); //验证一下</span><br><br>   <span class="hljs-keyword">let</span> c = <span class="hljs-number">123.2564564565</span><br>   <span class="hljs-comment">//去除小数</span><br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(~~c) <span class="hljs-comment">// 123</span><br></code></pre></td></tr></table></figure>

<h3 id="逗号运算符"><a href="#逗号运算符" class="headerlink" title="逗号运算符"></a>逗号运算符</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    逗号运算符,</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    逗号运算符可以将多条语句分隔开,每一条语句都会执行,并且会返回最后一个逗号执行的结果</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    逗号运算符优先级非常低, 通常应用的时候都会加上括号</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// let a = (1+2,3+4)//7</span><br><br><span class="hljs-comment">// let b = 3 // 4 7</span><br><span class="hljs-comment">// let c = 4</span><br><span class="hljs-comment">// let d = (++b,b+=3,c+b)// 4 + 7</span><br><span class="hljs-comment">// console.log(b,c,d) // 7 4 11</span><br><br><br><br><span class="hljs-comment">// let a,b,c;</span><br><span class="hljs-comment">// //高级用法</span><br><span class="hljs-comment">// for (a=1,b=3,c=a*b; a &lt; 10; a++,c=a*b) &#123;</span><br><span class="hljs-comment">//     console.log(c)</span><br><span class="hljs-comment">// &#125;</span><br></code></pre></td></tr></table></figure>

<h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    比较运算符用于比较两个值的大小 或者是关系</span><br><span class="hljs-comment">    用于做判断</span><br><span class="hljs-comment">    大于小于 &gt; &lt;</span><br><span class="hljs-comment">    大于等于小于等于 &gt;= &lt;=</span><br><span class="hljs-comment">    检测相等 == 一个等号表示赋值两个等号表示判断 a == b 表示a和b想不想等</span><br><span class="hljs-comment">    检测两个值不相等  在js中的表示形式为 !=  比如 a != b a是不是不等于b </span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    比较运算符组成的表达式返回值永远是一个布尔值</span><br><span class="hljs-comment">    - ture 成立</span><br><span class="hljs-comment">    - false 不成立</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    字符串之间的比较</span><br><span class="hljs-comment">    规则是根据字符串对应的 unicode 编码顺序(存储的值是一个数值)来进行比较</span><br><span class="hljs-comment">    如果是单个字符串之间的比较就直接比较他的编码顺序</span><br><span class="hljs-comment">    如果是多个字符串之间的比较</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//数值之间的比较</span><br><span class="hljs-comment">// console.log(2 &gt; 1)//true</span><br><span class="hljs-comment">// console.log(2 == 1)// flse</span><br><span class="hljs-comment">// console.log(2 &gt;= 2)// true</span><br><span class="hljs-comment">// console.log(3 != 2)// true</span><br><br><span class="hljs-comment">//字符串跟字符串比较</span><br><span class="hljs-comment">// let a = &#x27;abd&#x27;</span><br><span class="hljs-comment">// let b = &#x27;abcsdfafd&#x27;</span><br><span class="hljs-comment">// console.log(a &gt; b) //true</span><br><span class="hljs-comment">// //获取unicode中对应的编码顺序</span><br><span class="hljs-comment">// console.log(a.charCodeAt(2))</span><br><span class="hljs-comment">// console.log(b.charCodeAt(2))</span><br><br><span class="hljs-comment">//不同类型之间的比较</span><br><span class="hljs-comment">//不同类型js会优先转为数值在进行比较</span><br><span class="hljs-comment">// console.log(5 &gt; &#x27;4&#x27;) // 5 &gt; 4 = true</span><br><span class="hljs-comment">// //NaN 跟任何值做比较运算的时候得到的结果都为false</span><br><span class="hljs-comment">// console.log(&#x27;s4&#x27; &gt; 5) // false</span><br><span class="hljs-comment">// //Undefined 在做除了 == 判断的时候跟任何值做比较较运算都为false</span><br><span class="hljs-comment">// console.log(undefined &gt; 5) // false</span><br><span class="hljs-comment">// console.log( 5 &gt; true) // true</span><br><br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    相等== 和 全等===</span><br><span class="hljs-comment">    js 在做比较的时候分为两种情况相等和全等</span><br><span class="hljs-comment">    相等就是只要长得一样那就相等</span><br><span class="hljs-comment">        相等的规则是优先将两个不同的类型转换为数值类型再做比较</span><br><span class="hljs-comment">    全等必须数据类型并且值一样才叫全等</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">// console.log(5 == &#x27;5&#x27;)//true</span><br><br><span class="hljs-keyword">let</span> a = <span class="hljs-number">0</span><br><span class="hljs-comment">// console.log(Boolean(a)) // false</span><br><span class="hljs-keyword">let</span> b = <span class="hljs-string">&#x27;0&#x27;</span><br><span class="hljs-comment">// console.log(Boolean(b)) //true</span><br><span class="hljs-comment">// console.log(a == b)//true</span><br><span class="hljs-comment">// console.log(true == 1)//true</span><br><span class="hljs-comment">// console.log(true == &#x27;1&#x27;)//true</span><br><br><br><span class="hljs-comment">//全等比较</span><br><span class="hljs-comment">// console.log(&#x27;1&#x27; === &#x27;2&#x27;)//false</span><br><span class="hljs-comment">// console.log(&#x27;1&#x27; === 1)//false</span><br><br><span class="hljs-comment">//!= 表示不等于 跟相等的规则是一样的  !== 表示不全等于 规则跟全等一样的</span><br><span class="hljs-comment">// console.log(&#x27;1&#x27; != 1)//false</span><br><span class="hljs-comment">// console.log(&#x27;1&#x27; !== 1)//true</span><br><br><br><span class="hljs-comment">//特殊情况</span><br><span class="hljs-comment">// console.log(undefined == undefined)//true</span><br><span class="hljs-comment">// console.log(NaN == NaN)//false</span><br><br><span class="hljs-comment">// console.log(null == null)//true</span><br><br><span class="hljs-comment">// console.log(undefined == null)//true js设计的时候认为两个值都表示空,所有在比较的时候就当做空来比较</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-literal">null</span> &gt; <span class="hljs-number">0</span>)<span class="hljs-comment">//false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-literal">null</span> == <span class="hljs-number">0</span>)<span class="hljs-comment">//false null在做相等比较的时候不会转换为数值</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-literal">null</span> &lt; <span class="hljs-number">0</span>)<span class="hljs-comment">//false</span><br><span class="hljs-comment">//做大于等于运算的时候 是优先进行大于的运算 null = 0 然后再做等于判断 0 == 0 true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-literal">null</span> &gt;= <span class="hljs-number">0</span>)<span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-literal">null</span> &lt;= <span class="hljs-number">0</span>)<span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure>

<h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    逻辑运算符</span><br><span class="hljs-comment">    js中一共有四种逻辑运算</span><br><span class="hljs-comment">    || 或</span><br><span class="hljs-comment">    &amp;&amp; 与</span><br><span class="hljs-comment">    ! 非</span><br><span class="hljs-comment">    ?? 空值合并</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    逻辑运算符是可以用于任意的数据类型并不仅仅只有布尔值</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    逻辑或 ||</span><br><span class="hljs-comment">    书写格式 a || b</span><br><span class="hljs-comment">    规则 在做逻辑运算的时候会临时将运算符两边的值转换为布尔值,再进行逻辑运算</span><br><span class="hljs-comment">    逻辑或运算的规则就是 逐个判断,找到第一个为true 的值然后就停止后续的判断直接返回 为 true 的值,如果都不为true就返回最有一个值 </span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">let</span> a = <span class="hljs-string">&#x27;xixixi&#x27;</span>;<br><span class="hljs-keyword">let</span> b = <span class="hljs-literal">false</span><br><span class="hljs-comment">// console.log(a || b) // true || false</span><br><span class="hljs-comment">// console.log(1 || 0) // true || false = 1 </span><br><span class="hljs-comment">// console.log(null || undefined || 18 || 24) // 18</span><br><span class="hljs-comment">// console.log(null || undefined ) // undefined</span><br><br><span class="hljs-comment">//应用场景  如果用户输入了名字就用他自己的名字,如果没有输入就用默认的昵称</span><br><span class="hljs-comment">// let name = prompt(&#x27;你叫什么名字?&#x27;) || &#x27;狗蛋&#x27;</span><br><br><span class="hljs-comment">// alert(`$&#123;name&#125;登录成功`)</span><br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    逻辑与</span><br><span class="hljs-comment">    书写方式 a &amp;&amp; b</span><br><span class="hljs-comment">    规则临时转换为布尔值 依次判断 如果遇到结果为 false 的值,就停止计算并且返回第一个为false的值</span><br><span class="hljs-comment">    如果都为ture就返回最后ture</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span> &amp;&amp; <span class="hljs-number">2</span> ) <span class="hljs-comment">//2</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span> &amp;&amp; <span class="hljs-string">&#x27;xixixi&#x27;</span> &amp;&amp; <span class="hljs-literal">undefined</span> ) <span class="hljs-comment">//undefined</span><br><br><br><span class="hljs-comment">//例 判断的用户的年龄 如果满足18以上就给用户一个弹窗</span><br><span class="hljs-comment">// let age = +prompt(&#x27;你今年多大&#x27;)</span><br><br><span class="hljs-comment">// let result =  age &gt; 18 &amp;&amp; alert(&#x27;恭喜你进入了这个网站&#x27;)</span><br><br><span class="hljs-comment">//优先级的问题,  在逻辑判断的时候 逻辑 &amp;&amp; 比逻辑 || 优先级更高</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-literal">null</span> || <span class="hljs-number">2</span> &amp;&amp; <span class="hljs-number">3</span> || <span class="hljs-number">4</span>)<br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    null || 3 || 4</span><br><span class="hljs-comment">    3</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    逻辑非</span><br><span class="hljs-comment">    书写方式 !</span><br><span class="hljs-comment">    表示取反 非运算符得到的结果一定是一个布尔值</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(!<span class="hljs-string">&#x27;123&#x27;</span>) <span class="hljs-comment">// false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(!!<span class="hljs-string">&#x27;123&#x27;</span>)<span class="hljs-comment">//ture</span><br><br> <span class="hljs-comment">//应用场景 需要将ss 变量的值转换为布尔值</span><br><span class="hljs-keyword">let</span> ss =<span class="hljs-string">&#x27;asdkfjhkasfd&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Boolean</span>(ss))<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(!!ss)<br></code></pre></td></tr></table></figure>

<h3 id="类型转换与与运算符总结"><a href="#类型转换与与运算符总结" class="headerlink" title="类型转换与与运算符总结"></a>类型转换与与运算符总结</h3><h4 id="数据类型总结-1"><a href="#数据类型总结-1" class="headerlink" title="数据类型总结"></a>数据类型总结</h4><p>有三种常用的类型转换：转换为 string 类型、转换为 number 类型和转换为 boolean 类型。</p>
<p><strong>字符串转换</strong> —— 转换发生在输出内容的时候，也可以通过 <code>String(value)</code> 进行显式转换。原始类型值的 string 类型转换通常是很明显的。</p>
<p><strong>数字型转换</strong> —— 转换发生在进行算术操作时，也可以通过 <code>Number(value)</code> 进行显式转换。</p>
<p>数字型转换遵循以下规则：</p>
<table>
<thead>
<tr>
<th>值</th>
<th>转换后</th>
</tr>
</thead>
<tbody><tr>
<td>undefined</td>
<td>NaN</td>
</tr>
<tr>
<td>null</td>
<td>0</td>
</tr>
<tr>
<td>true</td>
<td>1</td>
</tr>
<tr>
<td>false</td>
<td>0</td>
</tr>
<tr>
<td>string</td>
<td>去掉首尾空格后的纯数字字符串中含有的数字。如果剩余字符串为空，则转换结果为 0。否则，将会从剩余字符串中“读取”数字。当类型转换出现任何一个 非数字 时返回 <code>NaN </code>。</td>
</tr>
</tbody></table>
<p>“按原样读取”字符串，两端的空白会被忽略。空字符串变成 <code>0</code>。转换出错则输出 <code>NaN</code>。</p>
<p><strong>布尔型转换</strong> —— 转换发生在进行逻辑操作时，也可以通过 <code>Boolean(value)</code> 进行显式转换。</p>
<p>布尔型转换遵循以下规则： 除了 <code>0</code>, <code>null</code>, <code>undefined</code>, <code>NaN</code>, <code>&quot;&quot;</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">false<br></code></pre></td></tr></table></figure>

<p>其他值都为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">true<br></code></pre></td></tr></table></figure>

<p>上述的大多数规则都容易理解和记忆。人值得注意的例子有以下几个：</p>
<ul>
<li>对 <code>undefined</code> 进行数字型转换时，输出结果为 <code>NaN</code>，而非 <code>0</code>。</li>
<li>对 <code>&quot;0&quot;</code> 和只有空格的字符串（比如：<code>&quot; &quot;</code>）进行布尔型转换时，输出结果为 <code>true</code>。</li>
</ul>
<p>我们在本小节没有讲 object 类型的转换。在我们学习完更多关于 JavaScript 的基础知识后，我们会在专门介绍 object</p>
<h4 id="算术运算小总结"><a href="#算术运算小总结" class="headerlink" title="算术运算小总结"></a>算术运算小总结</h4><ul>
<li>如果一个侧为NaN，则结果为NaN</li>
<li>如果两侧都是数字，则进行加法运算</li>
<li>如果两侧都是字符串则进行字符串连接</li>
<li>如果一侧为字符串，另一侧是其他类型，则转成字符串之后，然后进行字符串连接</li>
<li><code>只要 + 旁边有一个为字符串就会变成字符串拼接</code></li>
<li>除了加法以为其他的数学运算符都会转为数字进行计算，无法计算的都返回<code>NaN</code></li>
</ul>
<h2 id="day06-控制流程"><a href="#day06-控制流程" class="headerlink" title="day06-控制流程"></a>day06-控制流程</h2><h3 id="空值合并运算"><a href="#空值合并运算" class="headerlink" title="空值合并运算"></a>空值合并运算</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br>   <span class="hljs-comment">/* </span><br><span class="hljs-comment">       空值合并运算符</span><br><span class="hljs-comment">       语法 a ?? b</span><br><span class="hljs-comment">       空值合并是专门用于区分undefined 和 null 这两个特殊值的</span><br><span class="hljs-comment">       运算流程 如果当前不是undefined 和 null 就返回当前值,如果是undefined 和 null就继续下一次判断,如果都是undefined 和 null就返回最后一个结果</span><br><span class="hljs-comment">   */</span><br><br>   <span class="hljs-comment">// console.log(undefined ?? 123)//123</span><br>   <span class="hljs-comment">// console.log(undefined ?? null)//null</span><br>   <span class="hljs-comment">// console.log(123 ?? null)//123</span><br>   <span class="hljs-comment">// console.log(undefined ?? null ?? 456)//456</span><br>   <span class="hljs-comment">// console.log(NaN ?? 123)//NaN</span><br><br><br>   <span class="hljs-comment">//应用场景</span><br>   <span class="hljs-keyword">let</span> userName = <span class="hljs-number">0</span>;<br><br>   <span class="hljs-comment">//保护用户的昵称,如若用户没有输入昵称就给他个默认昵称</span><br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(userName || <span class="hljs-string">&#x27;默认昵称&#x27;</span>) <span class="hljs-comment">//默认昵称</span><br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(userName ?? <span class="hljs-string">&#x27;默认昵称&#x27;</span>) <span class="hljs-comment">//0</span><br><br><br> <br>   <span class="hljs-keyword">let</span> a = <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">let</span> b;<br><br>   <span class="hljs-comment">//计算他们的乘积 如果没有值就用默认值 1计算</span><br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a ?? <span class="hljs-number">1</span> * b ?? <span class="hljs-number">1</span>)<span class="hljs-comment">//0</span><br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a || <span class="hljs-number">1</span> * b || <span class="hljs-number">1</span>) <span class="hljs-comment">//1</span><br><br>   <span class="hljs-comment">// 空值合并 不可以和逻辑运算 &amp;&amp; || 一起运算</span><br>   <span class="hljs-comment">// let xxx = 1 &amp;&amp; (2 ?? 3);</span><br></code></pre></td></tr></table></figure>

<h3 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta"> &#x27;use strict&#x27;</span>;<br> <span class="hljs-comment">/* </span><br><span class="hljs-comment">     流程控制语句</span><br><span class="hljs-comment">     用于控制代码走向的语句</span><br><span class="hljs-comment">     1. 顺序结构</span><br><span class="hljs-comment">         代码从上到下执行</span><br><span class="hljs-comment">     2. 分支结构</span><br><span class="hljs-comment">         根据不同的情况执行不同的代码</span><br><span class="hljs-comment">     3. 循环结构</span><br><span class="hljs-comment">         重复的做某一些事情</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">     条件语句 if</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     写法一</span><br><span class="hljs-comment">     if(表达式)&#123;</span><br><span class="hljs-comment">         代码块</span><br><span class="hljs-comment">     &#125;</span><br><span class="hljs-comment">     如果表达式成立那就执行代码块里的代码</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     写法二</span><br><span class="hljs-comment">     if(表达式)&#123;</span><br><span class="hljs-comment">         //条件满足代码块</span><br><span class="hljs-comment">     &#125;else&#123;</span><br><span class="hljs-comment">         //条件不满足执行的代码块</span><br><span class="hljs-comment">     &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     写法三</span><br><span class="hljs-comment">      if(表达式)&#123;</span><br><span class="hljs-comment">         //条件满足代码块</span><br><span class="hljs-comment">     &#125;else if()&#123;</span><br><span class="hljs-comment">         //第二次判断</span><br><span class="hljs-comment">     &#125;else&#123;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     分支语句永远只会执行一个结果内的代码</span><br><span class="hljs-comment"> */</span><br><br> <span class="hljs-comment">//张三遇到一个喜欢的妹妹 ,追求妹妹 , 如果张三有 1000块钱就可以约到心意的妹妹出来吃饭</span><br> <span class="hljs-keyword">let</span> money = <span class="hljs-number">5000</span> <span class="hljs-comment">//张三的钱</span><br> <span class="hljs-keyword">let</span> key = <span class="hljs-literal">false</span> <span class="hljs-comment">//是否有钻戒 true有false表示没有</span><br> <span class="hljs-comment">// if(money &gt; 1000)&#123;</span><br> <span class="hljs-comment">//     console.log(&#x27;约会成功&#x27;)</span><br> <span class="hljs-comment">// &#125;</span><br> <span class="hljs-comment">//如果约会不成功的话需要给出反馈比如骂张三一顿</span><br><br> <span class="hljs-comment">// if(money &gt; 1000)&#123;</span><br> <span class="hljs-comment">//     console.log(&#x27;约会成功&#x27;)</span><br> <span class="hljs-comment">// &#125;else&#123;</span><br> <span class="hljs-comment">//     console.log(&#x27;今天身体不舒服不去了&#x27;)</span><br> <span class="hljs-comment">// &#125;</span><br><br> <span class="hljs-comment">//张三要进行求婚 </span><br> <span class="hljs-comment">/* </span><br><span class="hljs-comment">     求婚需要准备一个戒指</span><br><span class="hljs-comment">     还需要准备2w块钱</span><br><span class="hljs-comment">     1. 如果你有2w块钱就可以去求婚</span><br><span class="hljs-comment">     2. 如果你有5000块 并且 你有一个钻戒也可以考虑考虑</span><br><span class="hljs-comment">     3. 如果你5000都没有那就求婚失败</span><br><span class="hljs-comment"> */</span><br><br> <span class="hljs-comment">// if(money &gt;= 20000)&#123;</span><br> <span class="hljs-comment">//     console.log(&#x27;求婚成功&#x27;)</span><br> <span class="hljs-comment">// &#125;else if(money &gt;= 5000 &amp;&amp; key)&#123;</span><br> <span class="hljs-comment">//     console.log(&#x27;考虑一下&#x27;)</span><br> <span class="hljs-comment">// &#125;else&#123;</span><br> <span class="hljs-comment">//     console.log(&#x27;求婚失败嘻嘻嘻&#x27;)</span><br> <span class="hljs-comment">// &#125;</span><br><br><br> <span class="hljs-keyword">let</span> grade = -<span class="hljs-number">120</span> <span class="hljs-comment">//分数</span><br> <span class="hljs-comment">/* </span><br><span class="hljs-comment">     考试评分 </span><br><span class="hljs-comment">     grade &gt; 90 给出评分 A</span><br><span class="hljs-comment">     grade &gt; 80 给出评分 B</span><br><span class="hljs-comment">     grade &gt; 70 给出评分 C</span><br><span class="hljs-comment">     grade &gt; 60 给出评分 D</span><br><span class="hljs-comment">     grade &lt; 60 给出评分 E</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     把最难实现的放到判断的最前面</span><br><span class="hljs-comment"> */</span><br><br> <span class="hljs-comment">//错误示范</span><br> <span class="hljs-comment">// if(grade &gt; 60)&#123;</span><br> <span class="hljs-comment">//     console.log(&#x27;E&#x27;)</span><br> <span class="hljs-comment">// &#125;else if(grade &gt; 70)&#123;</span><br> <span class="hljs-comment">//     console.log(&#x27;D&#x27;)</span><br> <span class="hljs-comment">// &#125;</span><br><br> <span class="hljs-comment">//正确示范</span><br> <span class="hljs-comment">// if(grade &gt;= 90)&#123;</span><br> <span class="hljs-comment">//     console.log(&#x27;A&#x27;)</span><br> <span class="hljs-comment">// &#125;else if(grade &gt;= 80)&#123;</span><br> <span class="hljs-comment">//     console.log(&#x27;B&#x27;)</span><br> <span class="hljs-comment">// &#125;else if(grade &gt;= 70)&#123;</span><br> <span class="hljs-comment">//     console.log(&#x27;C&#x27;)</span><br> <span class="hljs-comment">// &#125;else if(grade &gt;= 60)&#123;</span><br> <span class="hljs-comment">//     console.log(&#x27;D&#x27;)</span><br> <span class="hljs-comment">// &#125;else &#123;</span><br> <span class="hljs-comment">//     console.log(&#x27;E&#x27;)</span><br> <span class="hljs-comment">// &#125;</span><br><br> <span class="hljs-keyword">let</span> result = <span class="hljs-string">&#x27;E&#x27;</span><br> <span class="hljs-keyword">if</span>(grade &lt;= <span class="hljs-number">100</span> &amp;&amp; grade &gt;= <span class="hljs-number">0</span>)&#123;<br>     <span class="hljs-keyword">if</span>(grade &gt;= <span class="hljs-number">90</span>)&#123;<br>         result = <span class="hljs-string">&#x27;A&#x27;</span><br>     &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(grade &gt;= <span class="hljs-number">80</span>)&#123;<br>         result = <span class="hljs-string">&#x27;B&#x27;</span><br>     &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(grade &gt;= <span class="hljs-number">70</span>)&#123;<br>         result = <span class="hljs-string">&#x27;C&#x27;</span><br>     &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(grade &gt;= <span class="hljs-number">60</span>)&#123;<br>         result = <span class="hljs-string">&#x27;D&#x27;</span><br>     &#125;<span class="hljs-keyword">else</span> &#123;<br>         result = <span class="hljs-string">&#x27;E&#x27;</span><br>     &#125;<br> &#125;<br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result)<br></code></pre></td></tr></table></figure>

<h3 id="三目表达式"><a href="#三目表达式" class="headerlink" title="三目表达式"></a>三目表达式</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    三目运算 || 三元运算符</span><br><span class="hljs-comment">    就是 if else 的简写方案</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    语法 表达式 ? 表达式成立结果 : 表达式失败的结果</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// let age = +prompt(&#x27;age&#x27;,19)</span><br><br><span class="hljs-comment">//if写法</span><br><span class="hljs-comment">// if(age &gt; 18)&#123;</span><br><span class="hljs-comment">//     console.log(&#x27;成年人&#x27;)</span><br><span class="hljs-comment">// &#125;else&#123;</span><br><span class="hljs-comment">//     console.log(&#x27;未成年&#x27;)</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-comment">//优化1</span><br><span class="hljs-comment">// age &gt; 18 ? console.log(&#x27;成年人&#x27;) :  console.log(&#x27;未成年&#x27;)</span><br><span class="hljs-comment">//优化2</span><br><span class="hljs-comment">// console.log(age &gt; 18?&#x27;成年人&#x27;:&#x27;未成年&#x27;)</span><br><br><span class="hljs-comment">//多个 ? 一起使用, 循环判断 , 判断年龄阶段 age &lt; 3 就是婴儿, age &lt; 18 未成年 age &lt; 25 青年 , age &lt; 50 中年 ,age &lt; 100 老年</span><br><br><span class="hljs-keyword">let</span> message = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-comment">// if(age &lt;= 3)&#123;</span><br><span class="hljs-comment">//     message = &#x27;婴儿&#x27;</span><br><span class="hljs-comment">// &#125;else if(age &lt;= 18)&#123;</span><br><span class="hljs-comment">//     message = &#x27;未成年&#x27;</span><br><span class="hljs-comment">// &#125;else if(age &lt;= 25)&#123;</span><br><span class="hljs-comment">//     message = &#x27;青年&#x27;</span><br><span class="hljs-comment">// &#125;else if(age &lt;= 50)&#123;</span><br><span class="hljs-comment">//     message = &#x27;中年&#x27;</span><br><span class="hljs-comment">// &#125;else&#123;</span><br><span class="hljs-comment">//     message = &#x27;老年&#x27;</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-comment">//优化</span><br><span class="hljs-comment">// message = (age &lt;= 3) ? &#x27;婴儿&#x27; : (age &lt;= 18) ?  &#x27;未成年&#x27;:(age &lt;= 25)? &#x27;青年&#x27; : &#x27;其他情况&#x27;</span><br><br><span class="hljs-comment">// console.log(message)</span><br><br><br> <span class="hljs-comment">/*  </span><br><span class="hljs-comment">    if(a)&#123;</span><br><span class="hljs-comment">        code</span><br><span class="hljs-comment">    &#125; </span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    //逻辑运算写法</span><br><span class="hljs-comment">    a &amp;&amp; code</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    if(a &gt; b)&#123;</span><br><span class="hljs-comment">        c</span><br><span class="hljs-comment">    &#125;else&#123;</span><br><span class="hljs-comment">        d</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    //三目</span><br><span class="hljs-comment">    a&gt;b?c:d</span><br><span class="hljs-comment">    //逻辑运算</span><br><span class="hljs-comment">    a &amp;&amp; c || d</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//应用场景  数字补0</span><br><span class="hljs-keyword">let</span> num = <span class="hljs-number">8</span> <span class="hljs-comment">// 补0以后 01   10 补0 = 10</span><br><span class="hljs-comment">//if写法 </span><br><span class="hljs-comment">// if(num &lt; 10)&#123;</span><br><span class="hljs-comment">//     num = &#x27;0&#x27;+num</span><br><span class="hljs-comment">// &#125;else&#123;</span><br><span class="hljs-comment">//     num = String(num)</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">//三目</span><br><span class="hljs-comment">// num &lt; 10 ? num = &#x27;0&#x27;+num : num = String(num)</span><br><span class="hljs-comment">// num = num &lt; 10 ? &#x27;0&#x27;+num : String(num)</span><br><br><span class="hljs-comment">//逻辑运算</span><br><span class="hljs-comment">// num = num &lt; 10 &amp;&amp; &#x27;0&#x27;+num || String(num)</span><br></code></pre></td></tr></table></figure>

<h3 id="swith语句"><a href="#swith语句" class="headerlink" title="swith语句"></a>swith语句</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    swith 语句可以用于替代多个if的判断</span><br><span class="hljs-comment">    swith 语句是大量分支语句组成的一种语句, 比if更加直观</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    语法</span><br><span class="hljs-comment">    swith(判断的值)</span><br><span class="hljs-comment">        case vlaue1 //判断 值是否等于 value1</span><br><span class="hljs-comment">            代码块 // 如果满足条件就执行代码块的内容</span><br><span class="hljs-comment">        break//跳出当前case判断</span><br><span class="hljs-comment">        case vlaue2 //下一次判断该值是否等于 vlaue2</span><br><span class="hljs-comment">        break</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    break 是跳出当次判断, 这个值不是必须的, 可以不写,不写就是落空的情况, 落空可以用于多次判断 可以理解为逻辑或</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//数字转大写 输入 1 最终转换为 一 输入2 转换为二</span><br><span class="hljs-keyword">let</span> num = <span class="hljs-number">1</span><br><span class="hljs-keyword">let</span> result = <span class="hljs-string">&#x27;一&#x27;</span>;<br><span class="hljs-comment">// if(num === 1)&#123;</span><br><span class="hljs-comment">//     result = &#x27;一&#x27;</span><br><span class="hljs-comment">// &#125;else if(num === 2)&#123;</span><br><span class="hljs-comment">//     result = &#x27;二&#x27;</span><br><span class="hljs-comment">// &#125;else if(num === 3)&#123;</span><br><span class="hljs-comment">//     result = &#x27;三&#x27;</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-comment">//swith 写法</span><br><span class="hljs-comment">// switch(num)&#123;</span><br><span class="hljs-comment">//     case 1: //if(num === 1)</span><br><span class="hljs-comment">//         result = &#x27;一&#x27; </span><br><span class="hljs-comment">//     break //跳出当次判断</span><br><span class="hljs-comment">//     case 2://num === 2</span><br><span class="hljs-comment">//         result = &#x27;二&#x27;</span><br><span class="hljs-comment">//     break</span><br><span class="hljs-comment">//     case 3:</span><br><span class="hljs-comment">//         result = &#x27;三&#x27;</span><br><span class="hljs-comment">//     break</span><br><span class="hljs-comment">// &#125;</span><br><br><br><span class="hljs-comment">//num 表示星期几 输入是否是工作日</span><br><span class="hljs-keyword">switch</span>(num)&#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: <br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<span class="hljs-comment">//当num 为1或者num 为2 的时候执行代码块的内容</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;上班&#x27;</span>)<br>    <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;解答&#x27;</span>)<br>    <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;上班&#x27;</span>)<br>    <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;休息&#x27;</span>)<br>    <span class="hljs-keyword">break</span><br>&#125;<br><br><br><span class="hljs-comment">//非主流的玩法</span><br><span class="hljs-comment">//switch 的值可以传入一个布尔值true ,无论什么情况都能进入swithc </span><br><br><span class="hljs-keyword">let</span> jifen = <span class="hljs-number">100000</span><br><span class="hljs-keyword">switch</span> (<span class="hljs-literal">true</span>) &#123;<br>    <span class="hljs-keyword">case</span> jifen &gt; <span class="hljs-number">10000</span>: <span class="hljs-comment">//swith为true 的情况内部的case可以为表达式</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;贵族5&#x27;</span>)<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> jifen &gt; <span class="hljs-number">8000</span>:<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;贵族4&#x27;</span>)<br>        <span class="hljs-keyword">break</span>;<br>   <span class="hljs-keyword">case</span> jifen &gt; <span class="hljs-number">5000</span>:<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;贵族3&#x27;</span>)<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> jifen &gt; <span class="hljs-number">2000</span>:<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;贵族2&#x27;</span>)<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> jifen &gt; <span class="hljs-number">1000</span>:<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;贵族1&#x27;</span>)<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-attr">default</span>: <span class="hljs-comment">//default 最终值,如果上面的所有case都没成功就会走 defalut 的结果</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;重置1000以上才有贵族&#x27;</span>)<br>        <span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="运算符总结"><a href="#运算符总结" class="headerlink" title="运算符总结"></a>运算符总结</h3><ul>
<li>比较运算符始终返回布尔值。</li>
<li>字符串的比较，会按照“词典”顺序逐字符地比较大小。</li>
<li>当对不同类型的值进行比较时，它们会先被转化为数字（不包括严格相等检查）再进行比较。</li>
<li>在非严格相等 <code>==</code> 下，<code>null</code> 和 <code>undefined</code> 相等且各自不等于任何其他的值。</li>
<li>在使用 <code>&gt;</code> 或 <code>&lt;</code> 进行比较时，需要注意变量可能为 <code>null/undefined</code> 的情况。比较好的方法是单独检查变量是否等于 <code>null/undefined</code>。<code>null</code>是可以在比较的时候转为数值的,但是<code>undefined</code>不可以</li>
<li><code>NaN </code>跟任何值都想等</li>
</ul>
<h4 id="逻辑运算总结"><a href="#逻辑运算总结" class="headerlink" title="逻辑运算总结"></a>逻辑运算总结</h4><ul>
<li>逻辑运算 <code>&amp;&amp; 和 ||</code> 在运算的时候 会将运算元 <strong>临时转换为布尔值</strong></li>
<li>逻辑<code>&amp;&amp;</code> 如果条件为真走下一次判断,如果条件为假返回当前结果并且停止后续判断,全为真返回最后一次判断的结果</li>
<li>逻辑<code>||</code> 如果条件为假走下一次判断,如果条件为真返回当前结果并且结束后续判断,全为假返回最后一次判断的记过</li>
<li>逻辑<code>!</code> 将运算的值转换为布尔值并且取相反的结果</li>
</ul>
<h2 id="day07-循环语句"><a href="#day07-循环语句" class="headerlink" title="day07-循环语句"></a>day07-循环语句</h2><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    循环语句</span><br><span class="hljs-comment">    应用场景 适用于处理一些需要重复执行的操作, 比如打印1-10的所有整数</span><br><span class="hljs-comment">    循环就是一种重复运行同一个代码的方法</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    循环在js中一共有</span><br><span class="hljs-comment">    for</span><br><span class="hljs-comment">    while</span><br><span class="hljs-comment">    do while</span><br><span class="hljs-comment">    //讲对象和数组的时候讲</span><br><span class="hljs-comment">    for in</span><br><span class="hljs-comment">    for of</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    while 循环</span><br><span class="hljs-comment">    语法</span><br><span class="hljs-comment">    while(condition)&#123; // condition 判断条件</span><br><span class="hljs-comment">        //body 代码块区域</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    当判断条件为真的时候执行代码块区域的所有代码 为假跳出循环</span><br><span class="hljs-comment">    循环体的单词执行就称为一次迭代</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//例如输入1-10之间的整数</span><br><span class="hljs-comment">// let index = 0 // 1 2 9 10 11</span><br><span class="hljs-comment">// while (index &lt;= 10) &#123; //条件必须要有机会能成为false 不然就会死循环</span><br><span class="hljs-comment">//     console.log(index)//0 1 9 10 </span><br><span class="hljs-comment">//     index++  // 9 10 11 // 必须有改变判断条件的语句 ,改变的目的是为了让循环能有终止的情况</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// console.log(index)//11</span><br><br><span class="hljs-comment">//循环的判断条件不一定非要是表达式, 也可以是一个变量,当然你要确定这个变量有机会转换为布尔值 false,  0 null false undefined &#x27;&#x27; NaN</span><br><br><span class="hljs-comment">//打印10-1之间的所有整数</span><br><span class="hljs-comment">// let index = 10</span><br><span class="hljs-comment">// while (index) &#123;</span><br><span class="hljs-comment">//     console.log(index--) //10 9 .... 1</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-comment">/* while (index) (console.log(index), index--); */</span><br><br><br>  <br><span class="hljs-comment">//循环内还可以嵌套其他任何语句</span><br><span class="hljs-comment">//打印1-100之间的所有偶数</span><br><span class="hljs-comment">// let indx = 0</span><br><span class="hljs-comment">// while(indx &lt;= 100)&#123;</span><br><span class="hljs-comment">//     // if(indx % 2 == 0)&#123; //满足 % 2等于0 说明是偶数</span><br><span class="hljs-comment">//     //     console.log(indx)</span><br><span class="hljs-comment">//     // &#125;</span><br><span class="hljs-comment">//     console.log(indx)</span><br><span class="hljs-comment">//     indx+=2</span><br><span class="hljs-comment">// &#125;</span><br><br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    do while 语句</span><br><span class="hljs-comment">    跟 while 语句非常类似 , 但是它的代码块区域不在whiel的&#123;&#125;内,而是在do的花括号内</span><br><span class="hljs-comment">    do &#123;</span><br><span class="hljs-comment">        //body循环体代码块区域</span><br><span class="hljs-comment">    &#125; while (condition);//condition 终止条件</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    跟while的区别在于 dowhile会先进行一次代码块的执行再进行条件判断</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// let index = 0</span><br><span class="hljs-comment">// do &#123;</span><br><span class="hljs-comment">//     //body循环体代码块区域</span><br><span class="hljs-comment">//     //改变条件的值 </span><br><span class="hljs-comment">//     index++</span><br><span class="hljs-comment">//     console.log(index)</span><br><span class="hljs-comment">// &#125; while (index &lt;= 10);//condition 终止条件</span><br></code></pre></td></tr></table></figure>

<h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br> <span class="hljs-comment">/* </span><br><span class="hljs-comment">    for 循环 </span><br><span class="hljs-comment">    语法</span><br><span class="hljs-comment">    for(begin;condition;step)&#123;</span><br><span class="hljs-comment">        //body</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    begin 初始化表达式</span><br><span class="hljs-comment">    condition 判断条件</span><br><span class="hljs-comment">    step 更新初始值</span><br><span class="hljs-comment">    body 循环体</span><br><span class="hljs-comment"> */</span><br><br> <span class="hljs-comment">//打印 0 - 3 之间的整数 ,不包含3 , 一共需要迭代3次</span><br><span class="hljs-comment">//  let index = 3</span><br><span class="hljs-comment">//  while (index &lt;= 0) &#123;</span><br><span class="hljs-comment">//     index--</span><br><span class="hljs-comment">//     console.log(&#x27;你好&#x27;)</span><br><span class="hljs-comment">//  &#125;</span><br><br><span class="hljs-comment">// for (let index = 0; index &lt; 3; index++) &#123;</span><br><span class="hljs-comment">//     console.log(index)// 0 1 2 </span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">//内置变量 , 循环内初始表达式创建的变量外部是无法访问的</span><br><span class="hljs-comment">// console.log(index)</span><br><br><span class="hljs-comment">//执行规则</span><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">第一次迭代</span><br><span class="hljs-comment">- 初始化变量 let index = 0</span><br><span class="hljs-comment">- 判断表达式是否成立 index &lt; 3 , 如果成立就运行body</span><br><span class="hljs-comment">- 执行 更新初始值index++</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">第二次迭代</span><br><span class="hljs-comment">- 判断表达式是否成立 index &lt; 3 , 如果成立就运行body</span><br><span class="hljs-comment">- 执行 更新初始值index++</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//初始化变量</span><br><span class="hljs-comment">// let index = 0</span><br><span class="hljs-comment">// //判断条件是否为真</span><br><span class="hljs-comment">// if(index &lt; 3)&#123; console.log(index);index++&#125;</span><br><span class="hljs-comment">// if(index &lt; 3)&#123; console.log(index);index++&#125;</span><br><span class="hljs-comment">// if(index &lt; 3)&#123; console.log(index);index++&#125;</span><br><br><span class="hljs-comment">//for 循环的每一个区域都可以省略 或者抽离出来</span><br><span class="hljs-comment">// let index = 0//初始化表达式抽离到外面</span><br><span class="hljs-comment">// for (;index &lt; 3 ;index++ ) &#123;</span><br><span class="hljs-comment">//    console.log(index,&#x27;循环体内&#x27;)</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// console.log(index,&#x27;循环外&#x27;)</span><br><br><span class="hljs-comment">// for (let index = 0; ;index++ ) &#123;</span><br><span class="hljs-comment">//    if(index &lt; 3)&#123;</span><br><span class="hljs-comment">//     console.log(index)</span><br><span class="hljs-comment">//    &#125;else&#123;</span><br><span class="hljs-comment">//      break</span><br><span class="hljs-comment">//    &#125;</span><br><span class="hljs-comment">// &#125;</span><br><br><br><span class="hljs-comment">//省略step </span><br><span class="hljs-comment">// for (let index = 0; index &lt; 3; ) &#123;</span><br><span class="hljs-comment">//     console.log(index)</span><br><span class="hljs-comment">//     index++</span><br><span class="hljs-comment">// &#125;</span><br><br><br><span class="hljs-comment">//3条语句都省略 就是一个死循环 , 但是不能省略分号</span><br><span class="hljs-comment">// for (;;) &#123;</span><br>    <br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-comment">//嵌套循环 10*10 = 100</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>; index &lt; <span class="hljs-number">10</span>; index++) &#123; <span class="hljs-comment">// 0 1 2</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">10</span>; k++) &#123; <span class="hljs-comment">// 1 - 10 1-10  1-10 </span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-property">log</span> (<span class="hljs-string">&#x27;坐标&#x27;</span>,index,k)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="for循环break"><a href="#for循环break" class="headerlink" title="for循环break"></a>for循环break</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    循环控制语句</span><br><span class="hljs-comment">    当你需要手动提前从循环过程中结束或者跳出的时候就可以使用循环控制语句</span><br><span class="hljs-comment">    分别是</span><br><span class="hljs-comment">    continue 表示跳出当次循环继续下一次循环</span><br><span class="hljs-comment">    break 表示跳出整个循环</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//找 0 - 100 之间第一个能被13整除的数, 除了13自身以外</span><br><span class="hljs-keyword">let</span> num = <span class="hljs-number">0</span><span class="hljs-comment">//记录已经找到了几个 满足条件</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;<br>    <span class="hljs-keyword">if</span>(i % <span class="hljs-number">13</span> == <span class="hljs-number">0</span> &amp;&amp; i != <span class="hljs-number">13</span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i)<br>        num++ <span class="hljs-comment">//更新当前找到了几个</span><br>        <span class="hljs-comment">//找到第一个以后停止后续循环</span><br>        <span class="hljs-comment">//新增需求, 我还需要找到第二个能被13整除的数怎么操作</span><br>        <span class="hljs-keyword">if</span>(num == <span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-keyword">break</span> <span class="hljs-comment">//跳出了所有的循环</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//跳出当次循环 ,应用场景  找50-100的所有偶数</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">50</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;<br>    <span class="hljs-keyword">if</span>(i % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">continue</span> <span class="hljs-comment">//如果他不是偶数就跳出当次循环</span><br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i)<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="day08-函数基础"><a href="#day08-函数基础" class="headerlink" title="day08-函数基础"></a>day08-函数基础</h2><h3 id="函数基础"><a href="#函数基础" class="headerlink" title="函数基础"></a>函数基础</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br>    <span class="hljs-comment">/* </span><br><span class="hljs-comment">        函数基础</span><br><span class="hljs-comment">        函数的主要作用就是用于构建模块, 函数可以使一段大量的代码存储到一起, 在合适的地方执行</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        通俗一点函数就是一堆语句的集合, 可以独立执行的程序单元, 本质上就是一个子程序, 函数是js的核心</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        创建语法</span><br><span class="hljs-comment">        function fnName()&#123;  // fnName 表示函数的名称</span><br><span class="hljs-comment">            //函数体内的代码</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">    */</span><br>   <br>    <span class="hljs-comment">///创建函数 函数声明</span><br>    <span class="hljs-comment">// function name()&#123;</span><br>    <span class="hljs-comment">//     //函数体代码块区域</span><br>    <span class="hljs-comment">//     console.log(&#x27;123&#x27;)</span><br>    <span class="hljs-comment">//     console.log(&#x27;446&#x27;)</span><br>    <span class="hljs-comment">//     let age = 18</span><br>    <span class="hljs-comment">//     console.log(age)</span><br>    <span class="hljs-comment">// &#125;</span><br><br>    <span class="hljs-comment">// //执行函数</span><br>    <span class="hljs-comment">// name() </span><br>    <span class="hljs-comment">// console.log(typeof alert) //function</span><br><br><br>    <span class="hljs-comment">//自己写一个log方法用于简化console.log</span><br><br>    <span class="hljs-keyword">let</span> age = <span class="hljs-number">19</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">log</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-comment">//函数体内是一个全新的环境</span><br>        <span class="hljs-keyword">let</span> age = <span class="hljs-number">18</span> <span class="hljs-comment">//内部变量和外部变量相同时我们称为变量遮罩,出现这种情况的时候函数会优先使用内部的变量</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;123&#x27;</span>,age) <span class="hljs-comment">//函数内是可以访问函数外部的变量</span><br>    &#125;<br>    <span class="hljs-title function_">log</span>()<br>    <span class="hljs-title function_">log</span>()<br>    <span class="hljs-comment">// console.log(age)// 函数外是无法访问函数内的变量</span><br></code></pre></td></tr></table></figure>

<h3 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br>    <span class="hljs-comment">/* </span><br><span class="hljs-comment">        函数的参数</span><br><span class="hljs-comment">        形参  形式参数 , 在函数创建的时候可以以变量的形式接受外界传递过来的一些数据</span><br><span class="hljs-comment">        实参  实际参数, 在函数调用的时候传递过去的数据,对应的是函数的形参接受</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        语法 </span><br><span class="hljs-comment">        function fnName(parme1,parme2....)&#123; //形参</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        fnName(parme1,parme2....)//实参</span><br><span class="hljs-comment">        实参跟形参必须一一对应</span><br><span class="hljs-comment">    */</span><br><br>    <span class="hljs-comment">// function log(txt)&#123; // txt 表示一个形参变量</span><br>    <span class="hljs-comment">//     // let txt = &#x27;123&#x27;</span><br>    <span class="hljs-comment">//     console.log(txt)</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-comment">// // console.log(&#x27;123&#x27;)</span><br>    <span class="hljs-comment">// log(&#x27;123&#x27;) //123就是实参数</span><br><br><br>    <span class="hljs-comment">//需求 需要一个函数 用于计算 1+1 的结果</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">let</span> ss = <span class="hljs-number">1</span> + <span class="hljs-number">1</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ss)<br>    &#125;<br>    <span class="hljs-comment">//需求, 计算3+4怎么办</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">sum2</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">let</span> ss = <span class="hljs-number">3</span> + <span class="hljs-number">4</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ss)<br>    &#125;<br>    <span class="hljs-comment">//计算99+33呢</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">sumPam</span>(<span class="hljs-params">a,b,c</span>)&#123;<br>        <span class="hljs-comment">//形参没有对应的实参接受 , 他的默认值就是undefined</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(c)<span class="hljs-comment">// undefined</span><br>        <span class="hljs-comment">//a = 33 b = 99</span><br>        <span class="hljs-keyword">let</span> ss = a + b <br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ss)<br>    &#125;<br>    <span class="hljs-comment">// sum()</span><br>    <span class="hljs-comment">// sum2()</span><br>    <span class="hljs-comment">// sumPam(33,99)</span><br>    <span class="hljs-comment">// sumPam(123,456)</span><br>    <span class="hljs-comment">// sumPam(123)</span><br><br><br>    <span class="hljs-comment">//函数参数默认值 es6 可以支持设置参数默认值</span><br>    <span class="hljs-comment">// function sumPam2(a=0,b=1)&#123;//b 参数的默认值为1 , 没有实参对应就用默认值</span><br>    <span class="hljs-comment">//     let ss = a * b </span><br>    <span class="hljs-comment">//     console.log(ss)</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-comment">// sumPam2(1,2)</span><br>    <span class="hljs-comment">// sumPam2()</span><br><br><br>    <span class="hljs-comment">//后备参数</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">sumPam2</span>(<span class="hljs-params">a,b</span>)&#123;<span class="hljs-comment">//b 参数的默认值为1 , 没有实参对应就用默认值</span><br>        <span class="hljs-comment">//解决方案1</span><br>        a = a || <span class="hljs-number">0</span><br>        <span class="hljs-comment">//b = b || 1 //存在一个问题就是无法判断0</span><br>        <span class="hljs-comment">//解决方法</span><br>        <span class="hljs-comment">// if(typeof b != &#x27;number&#x27;)&#123;</span><br>        <span class="hljs-comment">//     b = 1</span><br>        <span class="hljs-comment">// &#125;</span><br>        b = b ?? <span class="hljs-number">0</span><br>        <span class="hljs-keyword">let</span> ss = a * b <br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ss)<br>    &#125;<br>    <span class="hljs-title function_">sumPam2</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure>

<h3 id="断点测试"><a href="#断点测试" class="headerlink" title="断点测试"></a>断点测试</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br>     <span class="hljs-keyword">let</span> num = <span class="hljs-number">0</span> <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> big = <span class="hljs-number">0</span>; big &lt;= <span class="hljs-number">50</span>; big++) &#123; <span class="hljs-comment">// 1 2 </span><br>      <span class="hljs-comment">//中马</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> middle = <span class="hljs-number">0</span>; middle &lt;= <span class="hljs-number">100</span>; middle++) &#123; <span class="hljs-comment">//1</span><br>            <span class="hljs-comment">//小马</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> small = <span class="hljs-number">0</span>; small &lt;= <span class="hljs-number">200</span>; small++) &#123; <span class="hljs-comment">// 1 - 200</span><br>                <span class="hljs-comment">// debugger</span><br>                <span class="hljs-keyword">if</span>(small+middle+big == <span class="hljs-number">100</span> &amp;&amp; small*<span class="hljs-number">0.5</span>+middle*<span class="hljs-number">1</span> + big*<span class="hljs-number">2</span> == <span class="hljs-number">100</span>)&#123;<br>                    <span class="hljs-comment">///最优分配方法</span><br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`大马用了<span class="hljs-subst">$&#123;big&#125;</span>头,中马用了<span class="hljs-subst">$&#123;middle&#125;</span>,小马用了<span class="hljs-subst">$&#123;small&#125;</span>头`</span>)<br>                    num++<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num)<br></code></pre></td></tr></table></figure>

<h3 id="循环总结"><a href="#循环总结" class="headerlink" title="循环总结"></a>循环总结</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">三种循环：<br><br><span class="hljs-keyword">while</span>()&#123;&#125; —— 每次迭代之前都要检查条件。<br><span class="hljs-keyword">do</span>&#123;&#125;..<span class="hljs-title function_">while</span>() —— 每次迭代后都要检查条件。<br><span class="hljs-keyword">for</span> (1begin;2con;3step)&#123;<span class="hljs-number">4</span>&#125; —— 每次迭代之前都要检查条件，可以使用其他设置。<br>通常使用 <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) 来构造“无限”循环。这样的循环和其他循环一样，都可以通过 <span class="hljs-keyword">break</span> 指令来终止。<br><br>如果我们不想在当前迭代中做任何事，并且想要转移至下一次迭代，那么可以使用 <span class="hljs-keyword">continue</span> 指令。<br></code></pre></td></tr></table></figure>

<h2 id="day09-继续函数学习"><a href="#day09-继续函数学习" class="headerlink" title="day09-继续函数学习"></a>day09-继续函数学习</h2><h3 id="函数的命名"><a href="#函数的命名" class="headerlink" title="函数的命名"></a>函数的命名</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br>    <span class="hljs-comment">/* </span><br><span class="hljs-comment">        函数通常是用于标识某个行为, 一般情况他们的命名都是动词加名词的组成</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        例</span><br><span class="hljs-comment">        get -- 获取或者是返回某个值</span><br><span class="hljs-comment">        calc -- 用于计算某些内容</span><br><span class="hljs-comment">        create -- 创建某些内容</span><br><span class="hljs-comment">        check -- 检测内容返回布尔值</span><br><span class="hljs-comment">        is -- 判断内容漫步满足条件 返回布尔值</span><br><span class="hljs-comment">        .....</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        showMessage() </span><br><span class="hljs-comment">        calcSum()</span><br><span class="hljs-comment">        createTable()</span><br><span class="hljs-comment">        checkUser()</span><br><span class="hljs-comment">        checkAdmin()</span><br><span class="hljs-comment">    */</span><br></code></pre></td></tr></table></figure>

<h3 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br>    <span class="hljs-comment">/* </span><br><span class="hljs-comment">        函数返回值</span><br><span class="hljs-comment">        函数返回值 可以将函数内部的值作为函数表达式的结果返回出去</span><br><span class="hljs-comment">        默认情况下函数没有手动指定返回值的时候默认是返回 undefined</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        借助关键词return 可以再函数内部任意的位置执行,当执行到return语句的时候 会立马终止函数的执行,并且将return关键词后面的表达式或者字面量内容作为表达式的结果返回出去</span><br><span class="hljs-comment">    */</span><br><br>    <span class="hljs-comment">//函数声明  = 函数表达式</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">let</span>  message = <span class="hljs-string">&#x27;123&#x27;</span><br><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">123</span> <span class="hljs-comment">//函数停止执行 并且将 123 这个数值作为结果返回出去</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">456</span>)<span class="hljs-comment">// 不会打印</span><br>    &#125;<br><br>    <span class="hljs-keyword">let</span> fnRes = <span class="hljs-title function_">fn</span>()<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">fn</span>()) <span class="hljs-comment">// 123</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fnRes) <span class="hljs-comment">// 123</span><br><br>    <span class="hljs-keyword">let</span> age = <span class="hljs-number">13</span><br>    <span class="hljs-comment">// let age = +prompt(&#x27;你今年多大&#x27;)</span><br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">isAdult</span>(<span class="hljs-params">age</span>)&#123;<br>        <span class="hljs-comment">//期望函数检测年龄是否成年,并且返回一个布尔值</span><br>        <span class="hljs-comment">// return num &gt;= 18 ? true : false</span><br><br>        <span class="hljs-comment">// if(age &gt;= 18)&#123;</span><br>        <span class="hljs-comment">//     return true</span><br>        <span class="hljs-comment">// &#125;else&#123;</span><br>        <span class="hljs-comment">//     return confirm(&#x27;你父母是否在旁边陪同&#x27;)</span><br>        <span class="hljs-comment">// &#125;</span><br>    &#125;<br>    <span class="hljs-comment">// console.log(isAdult(1))</span><br><br>    <span class="hljs-comment">// if(isAdult(age))&#123;</span><br>    <span class="hljs-comment">//     alert(&#x27;欢迎用户进入&#x27;)</span><br>    <span class="hljs-comment">// &#125;else&#123;</span><br>    <span class="hljs-comment">//     alert(&#x27;未成年人进制入内&#x27;)</span><br>    <span class="hljs-comment">// &#125;</span><br></code></pre></td></tr></table></figure>

<h3 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br>    <span class="hljs-comment">//函数声明</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn1</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;123&#x27;</span>)<br>    &#125;<br><br>    <span class="hljs-comment">//函数表达式创建</span><br>    <span class="hljs-keyword">let</span> fn2 = fn1 <br>    <span class="hljs-comment">//函数表达式创建2  格式 let fnname = 匿名函数</span><br>    <span class="hljs-keyword">let</span> fn3 = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;456&#x27;</span>)<br>    &#125;<br><br>    <span class="hljs-comment">// fn1()</span><br>    <span class="hljs-comment">// fn2()</span><br>    <span class="hljs-comment">// fn3()</span><br><br>    <span class="hljs-comment">//函数声明和函数表达式的区别</span><br>    <span class="hljs-comment">// fff()//函数声明创建的函数可以再创建函数之前调用函数</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">fff</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;ffff&#x27;</span>)<br>    &#125;<br><br>    <span class="hljs-comment">// kkk()//函数表达式创建的函数不可以在创建之前调用</span><br>    <span class="hljs-keyword">let</span> kkk = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;kkkk&#x27;</span>)<br>    &#125;<br>    <span class="hljs-comment">// kkk()</span><br><br><br><br>    <span class="hljs-keyword">let</span> age = <span class="hljs-number">14</span><br><br>    <span class="hljs-comment">//用户年龄检测的程序, 根据用户年龄的大小决定欢迎语句</span><br>    <span class="hljs-comment">// if(age &lt; 18)&#123;</span><br><br>    <span class="hljs-comment">//     function welcome()&#123;</span><br>    <span class="hljs-comment">//         console.log(&#x27;欢迎小朋友光临&#x27;)</span><br>    <span class="hljs-comment">//     &#125;</span><br>    <span class="hljs-comment">// welcome()</span><br>        <br>    <span class="hljs-comment">// &#125;else&#123;</span><br>    <span class="hljs-comment">//     //函数只在内部能访问到</span><br>    <span class="hljs-comment">//     function welcome()&#123;</span><br>    <span class="hljs-comment">//         console.log(&#x27;欢迎光临&#x27;)</span><br>    <span class="hljs-comment">//     &#125;</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-comment">// // welcome()// 报错</span><br><br>    <span class="hljs-keyword">let</span> welcome;<br>    <span class="hljs-keyword">if</span>(age &lt; <span class="hljs-number">18</span>)&#123;<br><br>        welcome =  <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;欢迎小朋友光临&#x27;</span>)<br>        &#125;<br><br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-comment">//函数只在内部能访问到</span><br>        welcome =  <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;欢迎光临&#x27;</span>)<br>        &#125;<br>    &#125;<br>    <span class="hljs-title function_">welcome</span>()<br></code></pre></td></tr></table></figure>

<h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    箭头函数 </span><br><span class="hljs-comment">    箭头函数就是普通函数的另一种写法 , 而且这种写法比普通的函数表达式效果更好</span><br><span class="hljs-comment">    箭头函数就是普通函数的简写方案</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    标准简化规则</span><br><span class="hljs-comment">    1. 省略function关键词和函数名称</span><br><span class="hljs-comment">    2. 保留函数参数部分</span><br><span class="hljs-comment">    3. 参数部分新增一个 箭头写法 =&gt;</span><br><span class="hljs-comment">    4. 箭头后面书写代码块和代码块内的内容</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// function fn(a,b,c)&#123;</span><br><span class="hljs-comment">//     console.log(&#x27;1asdf&#x27;)</span><br><span class="hljs-comment">//     return true</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-comment">//标准简化</span><br><span class="hljs-comment">// let fn =  (a,b,c)=&gt;&#123;</span><br><span class="hljs-comment">//     console.log(&#x27;1asdf&#x27;)</span><br><span class="hljs-comment">//     return true</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-comment">// let fn2 =  function()&#123;</span><br><span class="hljs-comment">//     console.log(&#x27;1asdf&#x27;)</span><br><span class="hljs-comment">//     return true</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-comment">//简化</span><br><span class="hljs-comment">// let fn2 = ()=&gt;&#123;</span><br><span class="hljs-comment">//     console.log(&#x27;1asdf&#x27;)</span><br><span class="hljs-comment">//     return true</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-comment">// fn2()</span><br><br><br><span class="hljs-comment">//变种写法</span><br><span class="hljs-comment">//1. 当传递参数只有一个的时候 是可以省略括号的</span><br><span class="hljs-comment">// let ff2 = function(a)&#123;</span><br><span class="hljs-comment">//     console.log(a)</span><br><span class="hljs-comment">//     return a</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-comment">// let ff22 = a=&gt;&#123;console.log(a);return a &#125;</span><br><span class="hljs-comment">// ff22(1)</span><br><br><span class="hljs-comment">//2.当函数体内只有一条语句的的时候可以省略花括号</span><br><span class="hljs-comment">// let ff3 = function(a)&#123;</span><br><span class="hljs-comment">//     console.log(a)</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// ff3(1)</span><br><br><span class="hljs-comment">// let ff33 = a=&gt;console.log(a);</span><br><br><span class="hljs-comment">//3. 可以通过逗号运算符进行大量的简化</span><br><span class="hljs-keyword">let</span> ff4 = <span class="hljs-keyword">function</span>(<span class="hljs-params">x,y</span>)&#123;<br>    x = x+<span class="hljs-number">2</span><br>    y = x * y<br>    <span class="hljs-keyword">return</span> y<br>&#125;<br><br><span class="hljs-keyword">let</span> <span class="hljs-title function_">ff44</span> = (<span class="hljs-params">x,y</span>)=&gt;(x = x+<span class="hljs-number">2</span>,y = x * y,y)<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">ff4</span>(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">ff44</span>(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))S<br></code></pre></td></tr></table></figure>

<h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    回调函数</span><br><span class="hljs-comment">    当函数作为参数传递给另一个函数的时候,我们就称这个函数的参数为回调函数</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// function fn(cb)&#123;//cb对应的函数 就称为回调函数</span><br><span class="hljs-comment">//     console.log(cb) // function...</span><br><span class="hljs-comment">//     cb()</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-comment">// let f = function()&#123;</span><br><span class="hljs-comment">//     console.log(&#x27;回调函数执行成功&#x27;)</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-comment">// fn(f)</span><br><br><br><span class="hljs-comment">//编辑问答函数 ask(question,yes,no) </span><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    question 提问的问题</span><br><span class="hljs-comment">     yes 回答正确需要做的事情</span><br><span class="hljs-comment">     no 回答错误需要做的事情</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">showYes</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>; index &lt; <span class="hljs-number">5</span>; index++) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我吃了我吃了&#x27;</span>)<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我吃了我吃了&#x27;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">showYes2</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>; index &lt; <span class="hljs-number">5</span>; index++) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;睡醒了睡醒了&#x27;</span>)<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;睡醒了睡醒了&#x27;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">showNo2</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>; index &lt; <span class="hljs-number">5</span>; index++) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;还没睡醒&#x27;</span>)<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;还没睡醒&#x27;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">showNo</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>; index &lt; <span class="hljs-number">5</span>; index++) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;还没吃饱还没吃饱&#x27;</span>)<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;还没吃饱还没吃饱&#x27;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ask</span>(<span class="hljs-params">question,yes,no</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_">confirm</span>(question)) &#123;<br>        <span class="hljs-comment">//选择正确</span><br>        <span class="hljs-title function_">yes</span>()<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">//选择错误</span><br>        <span class="hljs-title function_">no</span>()<br>    &#125;<br>&#125;<br><br><span class="hljs-title function_">ask</span>(<span class="hljs-string">&#x27;你吃饭了吗&#x27;</span>,showYes,showNo)<br><span class="hljs-title function_">ask</span>(<span class="hljs-string">&#x27;你睡着了吗&#x27;</span>,showYes2,showNo2)<br></code></pre></td></tr></table></figure>

<h3 id="纯函数和非纯函数"><a href="#纯函数和非纯函数" class="headerlink" title="纯函数和非纯函数"></a>纯函数和非纯函数</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br>    <span class="hljs-comment">/* </span><br><span class="hljs-comment">        纯函数 : 函数的执行的过程中不会影响到到外界环境中的变量只依赖于自身函数内的数据执行的函数就称为纯函数</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        非纯函数 : 函数的内部的执行需要依赖外界的参数或者函数的执行会改变外检的参数 就叫非纯函数</span><br><span class="hljs-comment">    */</span><br>   <br>    <span class="hljs-comment">//纯函数</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">padLeft</span>(<span class="hljs-params">num</span>)&#123;<br>        <span class="hljs-keyword">return</span> num &lt; <span class="hljs-number">10</span>? <span class="hljs-string">&#x27;0&#x27;</span>+num : num<br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">padLeft</span>(<span class="hljs-number">3</span>))<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">padLeft</span>(<span class="hljs-number">10</span>))<br><br>    <span class="hljs-comment">//非纯函数</span><br>    <span class="hljs-keyword">let</span> result = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">a,b</span>)&#123;<br>        result = a+b<br>    &#125;<br>    <span class="hljs-title function_">sum</span>(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result)<br></code></pre></td></tr></table></figure>

<h3 id="柯里化函数"><a href="#柯里化函数" class="headerlink" title="柯里化函数"></a>柯里化函数</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br>    <span class="hljs-comment">/* </span><br><span class="hljs-comment">        柯理化 currying</span><br><span class="hljs-comment">        当函数的返回值还是一个函数的时候,那这个函数就称为柯理化函数</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        柯理化函数的应用场景是用于将复杂的功能分解成多个小功能</span><br><span class="hljs-comment">    */</span><br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x,y</span>)&#123;<br>        <span class="hljs-keyword">return</span> x+y<br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">add</span>(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>))<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">addCury</span>(<span class="hljs-params">x</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params">y</span>)&#123;<br>            <span class="hljs-keyword">return</span> x+y <br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//需求每次计算的值都是 125 加y的值</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">add</span>(<span class="hljs-number">125</span>,<span class="hljs-number">5</span>))<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">add</span>(<span class="hljs-number">125</span>,<span class="hljs-number">6</span>))<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">add</span>(<span class="hljs-number">125</span>,<span class="hljs-number">10</span>))<br><br><br>    <span class="hljs-comment">// console.log(addCury(1)(2))</span><br><br>    <span class="hljs-keyword">let</span> curAdd = <span class="hljs-title function_">addCury</span>(<span class="hljs-number">125</span>) <span class="hljs-comment">// function(y)&#123;return x+y &#125;</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">curAdd</span>(<span class="hljs-number">5</span>))<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">curAdd</span>(<span class="hljs-number">6</span>))<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">curAdd</span>(<span class="hljs-number">123</span>))<br><br>    <span class="hljs-comment">/* </span><br><span class="hljs-comment">        更多的高级函数 后续了解 工厂函数 ,偏函数, 递归函数....</span><br><span class="hljs-comment">    */</span><br></code></pre></td></tr></table></figure>

<h2 id="day10-对象与数组"><a href="#day10-对象与数组" class="headerlink" title="day10-对象与数组"></a>day10-对象与数组</h2><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    基础数据类型 number null undefined string.... </span><br><span class="hljs-comment">    引用数据类型 Object</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    万物皆对象</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    对象是一个无序的集合, 用于存储一堆杂乱的数据</span><br><span class="hljs-comment">    创建方式 </span><br><span class="hljs-comment">    1. 通过字面量创建 let xx =  &#123;&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    js中的对象分为三种</span><br><span class="hljs-comment">    - 内置对象(Number Boolean,Array,Math ...)</span><br><span class="hljs-comment">    - 浏览器对象(XMLM , window , Navigator,...)</span><br><span class="hljs-comment">    - 自定义对象(构造函数对象)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    对象中的属性名只能是一个字符串</span><br><span class="hljs-comment">*/</span><br>   <br><span class="hljs-comment">//对象的创建 内置方法创建</span><br><span class="hljs-keyword">let</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>()<br>obj.<span class="hljs-property">age</span> = <span class="hljs-number">19</span><br><br><span class="hljs-comment">//字面量创建对象</span><br><span class="hljs-keyword">let</span> yaSuo = &#123;&#125;<br><br><span class="hljs-comment">// console.log(obj)</span><br><span class="hljs-comment">// console.log(xx)</span><br><br><span class="hljs-comment">//对象数据的新增  对象内数据的存储都是以键值对的形式作为存储 格式属性名 : 属性值</span><br><span class="hljs-comment">//通过 .操作符存储数据</span><br>yaSuo.<span class="hljs-property">ph</span> = <span class="hljs-number">100</span> <span class="hljs-comment">// 在yasuo变量中存储了一个属性叫ph 值为 100</span><br>yaSuo.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;疾风剑豪&#x27;</span> <span class="hljs-comment">// 在yasuo变量中存储了一个属性叫name 值为 &#x27;疾风剑豪&#x27;</span><br><span class="hljs-comment">// yaSuo.font-size = 200 //错误写法不能用点操作符存储 有连字符的属性名</span><br><br><span class="hljs-comment">//中括号存储数据 语法 obj[string] = xxx  存储的string 就表示在obj对象中的属性名  中括号可以解析变量</span><br>yaSuo[<span class="hljs-string">&#x27;max-ph&#x27;</span>] = <span class="hljs-number">200</span>;<br><span class="hljs-keyword">let</span> heightName = <span class="hljs-string">&#x27;height&#x27;</span> <br>yaSuo[heightName] = <span class="hljs-string">&#x27;200px&#x27;</span>; <span class="hljs-comment">//yaSuo[&#x27;height&#x27;] = &#x27;200px&#x27;;</span><br><br><span class="hljs-keyword">let</span> ageName = <span class="hljs-string">&#x27;age&#x27;</span><br>yaSuo.<span class="hljs-property">ageName</span> = <span class="hljs-string">&#x27;123&#x27;</span><span class="hljs-comment">//在yaSuo变量中存储一个 ageName 的属性名值为 123</span><br>yaSuo[ageName] = <span class="hljs-string">&#x27;16&#x27;</span><br><br><br><span class="hljs-comment">//对象的取值 , 语法  不赋值直接访问对象的属性名就是取值</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(yaSuo.<span class="hljs-property">age</span>) <span class="hljs-comment">//16</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(yaSuo[<span class="hljs-string">&quot;max-ph&quot;</span>])<span class="hljs-comment">//200</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(yaSuo[heightName])<span class="hljs-comment">//200px</span><br><br><br><span class="hljs-comment">//可以创建的时候就添加对象的值</span><br><span class="hljs-keyword">let</span> teacher = &#123;<br>    name : <span class="hljs-string">&#x27;夏栀&#x27;</span>,<br>    age : <span class="hljs-number">18</span>,<br>    marry : <span class="hljs-literal">false</span>,<br>    fd : &#123;<br>        xuxing : &#123;<br>            name : <span class="hljs-string">&#x27;xuxing&#x27;</span>,<br>            age : <span class="hljs-number">39</span><br>        &#125;,<br>        luyao : &#123;<br>            name : <span class="hljs-string">&#x27;luyao&#x27;</span>,<br>            age : <span class="hljs-number">19</span><br>        &#125;,<br>        afei : &#123;<br>            name : <span class="hljs-string">&#x27;afei&#x27;</span>,<br>            age : <span class="hljs-number">20</span><br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//嵌套结构访问规则 必须层访问</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(teacher.<span class="hljs-property">fd</span>.<span class="hljs-property">xuxing</span>.<span class="hljs-property">age</span>)<br><br><span class="hljs-comment">//访问对象中不存在的值默认是undefined</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(teacher.<span class="hljs-property">color</span>)<span class="hljs-comment">//undefined </span><br><br><span class="hljs-comment">//重复添加相同的属性名会覆盖</span><br><span class="hljs-comment">//对象的修改值</span><br>teacher.<span class="hljs-property">color</span> = <span class="hljs-string">&#x27;blue&#x27;</span><br>teacher.<span class="hljs-property">color</span> = <span class="hljs-string">&#x27;red&#x27;</span><br>teacher[<span class="hljs-string">&#x27;age&#x27;</span>] += <span class="hljs-number">1</span> <br><br><span class="hljs-comment">//对象删除属性 语法  delete obj.attr 删除obj下的attr属性</span><br><span class="hljs-keyword">delete</span> teacher.<span class="hljs-property">color</span>;<br><span class="hljs-keyword">delete</span> teacher.<span class="hljs-property">fd</span>;<br><span class="hljs-comment">// delete teacher; //错误示范, 不可以直接删除对象</span><br><br><span class="hljs-comment">//删除整个对象</span><br><span class="hljs-comment">// teacher = null</span><br><br><br><span class="hljs-comment">//对象属性的计算属性</span><br><br><span class="hljs-keyword">let</span> ballName = <span class="hljs-string">&#x27;lnaqiu&#x27;</span>;<br><br><span class="hljs-keyword">let</span> ball = &#123;<br>    [ballName+<span class="hljs-string">&#x27;Count&#x27;</span>] : <span class="hljs-number">6</span><br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="对象的简写方案"><a href="#对象的简写方案" class="headerlink" title="对象的简写方案"></a>对象的简写方案</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-comment">/* </span><br><span class="hljs-comment">对象的简写</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">makeUser</span>(<span class="hljs-params">name,age</span>)&#123;<br>    <span class="hljs-comment">// return &#123;</span><br>    <span class="hljs-comment">//     &quot;name&quot; : name,</span><br>    <span class="hljs-comment">//     &quot;age&quot; : age</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-comment">//属性值和属性名相同的时候可以简写为只写一个属性值</span><br>    <span class="hljs-keyword">return</span> &#123;<br>        name,<br>        age<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> user1 = <span class="hljs-title function_">makeUser</span>(<span class="hljs-string">&#x27;xuxing&#x27;</span>,<span class="hljs-number">20</span>)<br><span class="hljs-keyword">let</span> user2 = <span class="hljs-title function_">makeUser</span>(<span class="hljs-string">&#x27;xiazhi&#x27;</span>,<span class="hljs-number">19</span>)<br><br><span class="hljs-comment">//对象新增属性</span><br>user1.<span class="hljs-property">sex</span> = <span class="hljs-string">&#x27;sex&#x27;</span><br><br><span class="hljs-comment">//特殊值 __proto__ 不可以用于做属性名</span><br><span class="hljs-comment">// user1.__proto__ = &#x27;123&#x27;</span><br><br><br><span class="hljs-comment">//为用户添加一个id值, 如果用户已经有了id值就不能再添加</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">setId</span>(<span class="hljs-params">obj,idStr</span>)&#123;<br>    <span class="hljs-comment">// if(!obj.id)&#123;</span><br>    <span class="hljs-comment">//     //不存在id值</span><br>    <span class="hljs-comment">//     obj.id = idStr</span><br>    <span class="hljs-comment">//     console.log(&#x27;添加成功&#x27;)</span><br>    <span class="hljs-comment">// &#125;else&#123;</span><br>    <span class="hljs-comment">//     console.log(&#x27;id已经存在不要重复添加&#x27;)</span><br>    <span class="hljs-comment">// &#125;</span><br><br>    <span class="hljs-comment">//检测对象中是否存在 该属性 语法 attr in obj 检测 attr属性是否存在于obj   attr 必须是一个字符串 ,返回值是一个布尔值存在返回true</span><br>    <span class="hljs-keyword">if</span>(!(<span class="hljs-string">&#x27;id&#x27;</span> <span class="hljs-keyword">in</span> obj))&#123;<br>        <span class="hljs-comment">//不存在id值</span><br>        obj.<span class="hljs-property">id</span> = idStr<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;添加成功&#x27;</span>)<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;id已经存在不要重复添加&#x27;</span>)<br>    &#125;<br>    <br>&#125;<br><br>user2.<span class="hljs-property">id</span> = <span class="hljs-literal">undefined</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-string">&#x27;id&#x27;</span> <span class="hljs-keyword">in</span> user2)<span class="hljs-comment">//ture</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-string">&#x27;id123&#x27;</span> <span class="hljs-keyword">in</span> user2) <span class="hljs-comment">//false</span><br><br><span class="hljs-title function_">setId</span>(user1,<span class="hljs-string">&#x27;xxxxx&#x27;</span>)<br><span class="hljs-title function_">setId</span>(user1,<span class="hljs-string">&#x27;kkkk&#x27;</span>)<br><span class="hljs-title function_">setId</span>(user2,<span class="hljs-string">&#x27;23324&#x27;</span>)<br></code></pre></td></tr></table></figure>

<h3 id="对象遍历"><a href="#对象遍历" class="headerlink" title="对象遍历"></a>对象遍历</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    for in 循环用于专门遍历对象的一个循环</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    语法</span><br><span class="hljs-comment">    for (let key in object) &#123; //key表示属性名 object需要遍历的对象</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">let</span> user = &#123;<br>    name : <span class="hljs-string">&#x27;xuxing&#x27;</span>,<br>    age : <span class="hljs-number">19</span>,<br>    sex : <span class="hljs-string">&#x27;nan&#x27;</span>,<br>    isAdmin : <span class="hljs-literal">true</span><br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> user) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(key,<span class="hljs-string">&#x27;属性名&#x27;</span>)<span class="hljs-comment">//name age sex isAdmin</span><br>    <span class="hljs-comment">// console.log(user[key],&#x27;属性值&#x27;)//xuxing 19</span><br>&#125;<br><br><span class="hljs-comment">//遍历的顺序  , 如果属性名都是合法的数值字符串就会按照数值字符串的大小进行顺序迭代 从小到大的顺序, 不满足这个条件就会根据创建属性的先后顺序遍历</span><br><br><span class="hljs-keyword">let</span> idObj = &#123;<br>    <span class="hljs-string">&#x27;12&#x27;</span>:<span class="hljs-string">&#x27;xxxx&#x27;</span>,<br>    <span class="hljs-string">&#x27;23&#x27;</span>:<span class="hljs-string">&#x27;yyyy&#x27;</span>,<br>    <span class="hljs-string">&#x27;15&#x27;</span>:<span class="hljs-string">&#x27;wwww&#x27;</span>,<br>    <span class="hljs-string">&#x27;88&#x27;</span>:<span class="hljs-string">&#x27;dddd&#x27;</span>,<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> idObj) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(key,<span class="hljs-string">&#x27;属性名&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="对象与基础类型的区别"><a href="#对象与基础类型的区别" class="headerlink" title="对象与基础类型的区别"></a>对象与基础类型的区别</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><br><span class="hljs-comment">/* 关于数据类型的引用和复制 */</span><br><span class="hljs-keyword">let</span> message = <span class="hljs-string">&#x27;hello&#x27;</span><br><span class="hljs-keyword">let</span> copyMes = message <span class="hljs-comment">//hello</span><br><br><br><span class="hljs-comment">//修改copyMes的内容</span><br>copyMes = <span class="hljs-string">&#x27;word&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(message,copyMes)<br><br><br><span class="hljs-comment">//引用类型</span><br><span class="hljs-keyword">let</span>  user = &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;xuxing&#x27;</span>&#125;<br><span class="hljs-keyword">let</span>  copyUser = user<br><br><span class="hljs-comment">//需要给copyUser新增一个年龄属性</span><br>copyUser.<span class="hljs-property">age</span> = <span class="hljs-number">19</span><br>user.<span class="hljs-property">sex</span> = <span class="hljs-string">&#x27;男&#x27;</span><br><br><span class="hljs-comment">// console.log(user === copyUser)</span><br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    js存储数据的规则</span><br><span class="hljs-comment">    - 基础类型</span><br><span class="hljs-comment">    1. 在内存中的栈内存中直接存储变量的标识符和变量的值</span><br><span class="hljs-comment">    2. 基础类型是可以直接访问内存中存储的实际值</span><br><span class="hljs-comment">    3. 不能给基础类型添加属性和方法</span><br><span class="hljs-comment">    - 引用类型</span><br><span class="hljs-comment">    1. 引用类型是按照引用地址来进行存储的</span><br><span class="hljs-comment">    2. 引用类型有自己的属性和方法, 并且是可以动态修改的</span><br><span class="hljs-comment">    3. 引用类型的存储数据会同时使用到栈内存和堆内存</span><br><span class="hljs-comment">    4. 会在栈内存中存储数据的引用地址,真实数据存储于堆内存中</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">let</span> obj111 = &#123;&#125;<br><span class="hljs-keyword">let</span> obj222 = &#123;&#125;<br><br><span class="hljs-keyword">let</span> str1 = <span class="hljs-string">&#x27;123&#x27;</span><br><span class="hljs-keyword">let</span> str2 = <span class="hljs-number">123</span><br><span class="hljs-comment">// console.log(obj111 === obj222)//false</span><br><span class="hljs-comment">// console.log(obj111 == obj222)//fasle</span><br><span class="hljs-comment">// console.log(str1 == str2)</span><br><br><span class="hljs-comment">//浅拷贝, 需求拷贝一个对象, 并且不和原有的对象有关联</span><br><br><span class="hljs-keyword">let</span> xuxing = &#123;<br>    name : <span class="hljs-string">&#x27;xuxing&#x27;</span>,<br>    age : <span class="hljs-number">10</span>,<br>    sex : <span class="hljs-string">&#x27;男&#x27;</span>,<br>    fd : &#123;<br>        name : <span class="hljs-string">&#x27;123&#x27;</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// let copyX = &#123;&#125;</span><br><span class="hljs-comment">// copyX.name = xuxing.name</span><br><span class="hljs-comment">// console.log(xuxing == copyX)</span><br><br><span class="hljs-comment">//浅拷贝对象</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">coypeObj</span>(<span class="hljs-params">obj</span>)&#123;<br>    <span class="hljs-keyword">let</span> newObj = &#123;&#125;<br><br>    <span class="hljs-comment">//方案一利用循环拷贝</span><br>    <span class="hljs-comment">//将obj对象的属性和值添加到 newObj中</span><br>    <span class="hljs-comment">// for (const key in obj) &#123;</span><br>    <span class="hljs-comment">//    newObj[key] = obj[key]</span><br>    <span class="hljs-comment">// &#125;</span><br><br>    <span class="hljs-comment">//方案二利用 Object.assgin() 方法</span><br>    <span class="hljs-comment">/* </span><br><span class="hljs-comment">     Object.assgin(target,obj1,obj2...)用于做对象合并 </span><br><span class="hljs-comment">     作用将 obj1 和 obj2 对象合并到 target对象</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(newObj,obj)<br>    <span class="hljs-keyword">return</span> newObj<br>&#125;<br><br><span class="hljs-keyword">let</span> coyX = <span class="hljs-title function_">coypeObj</span>(xuxing)<br>coyX.<span class="hljs-property">height</span> = <span class="hljs-number">150</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(coyX === xuxing) <span class="hljs-comment">//ture</span><br><br><span class="hljs-comment">//浅拷贝无法切断对象嵌套对象的情况</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(coyX.<span class="hljs-property">fd</span> === xuxing.<span class="hljs-property">fd</span>) <span class="hljs-comment">//ture</span><br></code></pre></td></tr></table></figure>

<h3 id="函数基础总结"><a href="#函数基础总结" class="headerlink" title="函数基础总结"></a>函数基础总结</h3><h4 id="函数总结"><a href="#函数总结" class="headerlink" title="函数总结"></a>函数总结</h4><p>函数就是一堆 <strong>语句</strong>的集合， 可以独立执行的程序单元</p>
<ul>
<li>函数是值。它们可以在代码的任何地方被分配，复制或声明。</li>
<li>如果函数在主代码流中被声明为单独的语句，则称为“函数声明”。</li>
<li>如果该函数是作为表达式的一部分创建的，则称其“函数表达式”。</li>
<li>在执行代码块之前，内部算法会先处理函数声明。所以函数声明在其被声明的代码块内的任何位置都是可见的。</li>
<li>函数表达式在执行流程到达时创建。</li>
<li>函数执行一定会有一个返回值默认是 <code>undefined</code> 可以使用关键词<code>return</code>手动指定返回的内容</li>
</ul>
<p>在大多数情况下，当我们需要声明一个函数时，最好使用函数声明，因为函数在被声明之前也是可见的。这使我们在代码组织方面更具灵活性，通常也会使得代码可读性更高。</p>
<h4 id="箭头函数总结"><a href="#箭头函数总结" class="headerlink" title="箭头函数总结"></a>箭头函数总结</h4><p>对于一行代码的函数来说，箭头函数是相当方便的。它具体有三种种：</p>
<ol>
<li>不带花括号：<code>(...args) =&gt; expression</code> — 右侧是一个表达式：函数计算表达式并返回其结果。</li>
<li>带花括号：<code>(...args) =&gt; &#123; body &#125;</code> — 花括号允许我们在函数中编写多个语句，但是我们需要显式地 <code>return</code> 来返回一些内容。</li>
<li>不带参数括号 <code>a=&gt;&#123;body&#125;</code> 当传递的参数只有一个时可以省略括号</li>
</ol>
<h2 id="day11-深入对象"><a href="#day11-深入对象" class="headerlink" title="day11-深入对象"></a>day11-深入对象</h2><h3 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    垃圾回收</span><br><span class="hljs-comment">    js中的内存管理是自动打开的 , 在js中垃圾回收是自动执行的</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    执行上下文</span><br><span class="hljs-comment">    值得就是代码当前执行阶段 , 执行完成以后,js就需要对不在需要的变量进行一些列的回收操作</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    当程序结束不在需要用到内存的时候,就需要及时的释放内存,如果没有释放,就会造成内存泄漏</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    垃圾回收是一个定期性周期性执行的程序,他会自动去找不再需要使用的内存(变量)然后释放他的内存</span><br><span class="hljs-comment">    常见的垃圾回收机制有两种, 引用计数 标记清除</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//引用计数</span><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    规则当数据存储到变量中的时候,就为变量添加一个引用计数为1,当他的数据拷贝给别人重复建立引用的时候 引用计数就+1 ,较少一个引用 计数-1</span><br><span class="hljs-comment">    当引用计数为0的时候就将这个变量进行回收</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">// let obj1 = &#123;name : &#x27;xixi&#x27;&#125;; // 对象的引用计数 2 - 1  // 1</span><br><span class="hljs-comment">// let obj2 = obj1 // 此时obj2引用了obj1的数据,此时的引用计数就增加1 ,变为 2  自身引用为1</span><br><span class="hljs-comment">// // 接触obj2的引用 </span><br><span class="hljs-comment">// obj2.sex = &#x27;男&#x27;</span><br><span class="hljs-comment">// obj2 = null // obj2 没有引用对象</span><br><span class="hljs-comment">// obj1 = null // obj1的引用设置为 0 </span><br><br><span class="hljs-comment">//标记清除</span><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    当变量进入环境的时候, 给变量做上一个标记,标记为进入环境</span><br><span class="hljs-comment">    当环境不存在的时候,就将变量标记为离开环境</span><br><span class="hljs-comment">    内存定期去清空标记为离开环境的变量</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// function go()&#123;</span><br><span class="hljs-comment">//     let a = 1 //标记为进入</span><br><span class="hljs-comment">//     let b = &#x27;hello&#x27; //标记为进入</span><br><br><span class="hljs-comment">//     return//表示函数执行完成  将内部的变量标记为离开环境</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// go()</span><br><span class="hljs-comment">// console.log(a)</span><br><br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    可达性</span><br><span class="hljs-comment">    js内存管理的一个概念</span><br><span class="hljs-comment">    可达性值得就是可以以为某种方式访问到或者使用到这个内存中的值,我们就认为这个数据是可达的</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    当一个数据不可达的时候js就会自动进行垃圾回收</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    js中有个跟对象叫做全局对象 global</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">let</span> user = &#123;<br>    name : <span class="hljs-string">&#x27;快乐的小树&#x27;</span><br>&#125;<br><br><span class="hljs-comment">// console.log(window) // global</span><br><span class="hljs-comment">// console.log(window.user) // global</span><br><span class="hljs-comment">// console.log(window.alert) // global</span><br><span class="hljs-comment">// console.log(window.fnfn) // global</span><br><br><span class="hljs-comment">//user不需要</span><br>user = <span class="hljs-literal">null</span><br><br><br><span class="hljs-keyword">let</span> student = &#123;<br>    name : <span class="hljs-string">&#x27;葡萄哥&#x27;</span><br>&#125;<br><br><span class="hljs-comment">//存储谁是管理员</span><br><span class="hljs-keyword">let</span> admin = student<br><br><span class="hljs-comment">//取消了student对象</span><br>student = <span class="hljs-literal">null</span><br><br><span class="hljs-comment">// console.log(admin)</span><br><br><br><span class="hljs-comment">//复杂情况的垃圾回收案例</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">marry</span>(<span class="hljs-params">man,woman</span>)&#123;<br>    woman.<span class="hljs-property">husband</span> = man <span class="hljs-comment">//女方的老公是 man</span><br>    man.<span class="hljs-property">wife</span> = woman <span class="hljs-comment">//男方的老婆是 woman</span><br>    <span class="hljs-keyword">return</span>&#123;<br>        father : man,<br>        mother : woman<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//女</span><br><span class="hljs-keyword">let</span> lin = &#123;<br>    name : <span class="hljs-string">&#x27;林晨曦&#x27;</span><br>&#125;<br><br><span class="hljs-comment">//男</span><br><span class="hljs-keyword">let</span> tang = &#123;<br>    name : <span class="hljs-string">&#x27;汤子星&#x27;</span><br>&#125;<br><br><span class="hljs-keyword">let</span> family = <span class="hljs-title function_">marry</span>(tang,lin)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(family)<br><br><br><span class="hljs-comment">//汤子星去世了</span><br><span class="hljs-comment">// delete family.father</span><br><span class="hljs-comment">// delete family.mother.husband</span><br><br><span class="hljs-keyword">let</span> san = &#123;<br>    name : <span class="hljs-string">&#x27;三月尽&#x27;</span>,<br>    friend : tang<br>&#125;<br><span class="hljs-comment">//家庭删除</span><br>family = <span class="hljs-literal">null</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(family)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(san)<br></code></pre></td></tr></table></figure>

<h3 id="对象的this"><a href="#对象的this" class="headerlink" title="对象的this"></a>对象的this</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><br><span class="hljs-keyword">let</span> user = &#123;<br>    name : <span class="hljs-string">&#x27;罗超&#x27;</span>,<br>    age : <span class="hljs-number">18</span>,<br>    money : <span class="hljs-number">200</span>,<br>    say : <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-comment">//函数内内的 this , this表示当前函数的调用主体</span><br>        <span class="hljs-comment">// console.log(`my name is $&#123;user.name&#125;`)</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)<br><br>        <span class="hljs-comment">// function setSex()&#123;</span><br>        <span class="hljs-comment">//     this.sex = &#x27;nan&#x27;</span><br>        <span class="hljs-comment">// &#125;</span><br>        <span class="hljs-comment">// setSex()</span><br>    &#125;,<br>    buy : <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">money</span> -= <span class="hljs-number">20</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`购买了一个奥特曼花了20块钱还剩下<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.money&#125;</span>`</span>)<br>    &#125;,<br>    <span class="hljs-comment">//函数在对象内的简写方案</span><br>    <span class="hljs-title function_">getAge</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>)<br>    &#125;<br>&#125;<br><span class="hljs-comment">//编程的时候通常将事物抽象成一个对象, 分别用属性来描述他的特征,函数来标识事物的行为</span><br>user.<span class="hljs-title function_">say</span>()<br>user.<span class="hljs-title function_">buy</span>()<br>user.<span class="hljs-title function_">getAge</span>()<br><br><span class="hljs-comment">//坑坑</span><br><span class="hljs-keyword">let</span> getBuy = user.<span class="hljs-property">buy</span> <span class="hljs-comment">// 你把user下面的函数拷贝了一份过来</span><br><span class="hljs-comment">// getBuy() //this =  undefined</span><br><br><span class="hljs-comment">// let fn =  function()&#123;</span><br><span class="hljs-comment">//     console.log(this) //undefined </span><br><span class="hljs-comment">//     // console.log(&#x27;韩式执行&#x27;)</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// fn()</span><br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    1. this 是函数内的一个关键词 ,表示调用函数的主体对象</span><br><span class="hljs-comment">    2. this 创建的时候是不确定的, 是在函数执行的过程中获取的</span><br><span class="hljs-comment">    3. 没有明确的调用主体this指向undefined(严格模式下)</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure>

<h3 id="箭头函数的this"><a href="#箭头函数的this" class="headerlink" title="箭头函数的this"></a>箭头函数的this</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><br><span class="hljs-keyword">let</span> user = &#123;<br>    name : <span class="hljs-string">&#x27;于森&#x27;</span>,<br>    <span class="hljs-title function_">sayHi</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;你好&#x27;</span>)<br><br>        <span class="hljs-comment">// let sayName = function()&#123;</span><br>        <span class="hljs-comment">//     console.log(this.name) //报错</span><br>        <span class="hljs-comment">// &#125;</span><br><br>        <span class="hljs-comment">//箭头函数是没有this,如果在箭头函数中使用了this那他他会去找外层环境中的this</span><br>        <span class="hljs-comment">// let sayName = ()=&gt;&#123;</span><br>        <span class="hljs-comment">//     console.log(this.name)//于森</span><br>        <span class="hljs-comment">// &#125;</span><br><br>        <span class="hljs-comment">//this 是一个值可以存储起来</span><br>        <span class="hljs-keyword">let</span> _this = <span class="hljs-variable language_">this</span><br>        <span class="hljs-keyword">let</span> sayName = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(_this.<span class="hljs-property">name</span>) <span class="hljs-comment">//报错</span><br>        &#125;<br>        <span class="hljs-title function_">sayName</span>()<br>    &#125;<br>&#125;<br><br>user.<span class="hljs-title function_">sayHi</span>()<br></code></pre></td></tr></table></figure>

<h3 id="symbol作为属性名"><a href="#symbol作为属性名" class="headerlink" title="symbol作为属性名"></a>symbol作为属性名</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><br><span class="hljs-comment">// const symbol = Symbol()</span><br><br><span class="hljs-comment">// let obj = &#123;</span><br><span class="hljs-comment">//     [symbol] : &#x27;123&#x27;</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-comment">// console.log(obj[&#x27;Symbol()&#x27;])//undefined</span><br><span class="hljs-comment">// console.log(obj.Symbol())//报错</span><br><span class="hljs-comment">// console.log(obj[symbol])//报错</span><br><br><span class="hljs-comment">// function creatObje()&#123;</span><br><span class="hljs-comment">//     let obj = &#123;&#125;</span><br><span class="hljs-comment">//     let obj2 = &#123;&#125;</span><br><br><span class="hljs-comment">//     obj.name = &#x27;徐星&#x27;</span><br><span class="hljs-comment">//     obj.age = 19</span><br><br><span class="hljs-comment">//     //期望外界只能看到obj 不能修改obj</span><br><span class="hljs-comment">//     let symbol = Symbol()</span><br><span class="hljs-comment">//     obj2[symbol] = obj</span><br><br><span class="hljs-comment">//     return obj2</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-comment">// let obj = creatObje()</span><br></code></pre></td></tr></table></figure>

<h3 id="对象总结"><a href="#对象总结" class="headerlink" title="对象总结"></a>对象总结</h3><p>对象是具有一些特殊特性的关联数据集合。</p>
<p>它们存储属性（键值对），其中：</p>
<ul>
<li>属性的键必须是字符串或者 symbol（通常是字符串）。</li>
<li>值可以是任何类型。</li>
</ul>
<p>我们可以用下面的方法访问属性：</p>
<ul>
<li>点符号: <code>obj.property</code>。</li>
<li>方括号 <code>obj[&quot;property&quot;]</code>，方括号允许从变量中获取键，例如 <code>obj[varWithKey]</code>。</li>
</ul>
<p>其他操作：</p>
<ul>
<li>删除属性：<code>delete obj.prop</code>。</li>
<li>检查是否存在给定键的属性：<code>&quot;key&quot; in obj</code>。</li>
<li>遍历对象：<code>for(let key in obj)</code> 循环。</li>
</ul>
<p>我们在这一章学习的叫做“普通对象（plain object）”，或者就叫对象。</p>
<p>JavaScript 中还有很多其他类型的对象：</p>
<ul>
<li><code>Array</code> 用于存储有序数据集合，</li>
<li><code>Date</code> 用于存储时间日期，</li>
<li><code>Error</code> 用于存储错误信息。</li>
<li>……等等。</li>
</ul>
<p>它们有着各自特别的特性，我们将在后面学习到。有时候大家会说“Array 类型”或“Date 类型”，但其实它们并不是自身所属的类型，而是属于一个对象类型即 “object”。它们以不同的方式对 “object” 做了一些扩展。</p>
<p>JavaScript 中的对象非常强大。这里我们只接触了其冰山一角。在后面的学习中，我们将频繁使用对象进行编程，并学习更多关于对象的知识。</p>
<h2 id="day12-数组与函数进阶"><a href="#day12-数组与函数进阶" class="headerlink" title="day12_数组与函数进阶"></a>day12_数组与函数进阶</h2><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span><br><br><span class="hljs-comment">// let cat1 = &#123;</span><br><span class="hljs-comment">//     name : &#x27;xuxing&#x27;,</span><br><span class="hljs-comment">//     color : &#x27;red&#x27;,</span><br><span class="hljs-comment">//     age : 2,</span><br><span class="hljs-comment">//     like : &#x27;小鱼干&#x27;,</span><br><span class="hljs-comment">//     speak : function()&#123;</span><br><span class="hljs-comment">//         console.log(&#x27;喵喵喵&#x27;)</span><br><span class="hljs-comment">//     &#125;</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-comment">// let cat2 = &#123;</span><br><span class="hljs-comment">//     name : &#x27;jiuwei&#x27;,</span><br><span class="hljs-comment">//     color : &#x27;blue&#x27;,</span><br><span class="hljs-comment">//     age : 3,</span><br><span class="hljs-comment">//     like : &#x27;小鱼干&#x27;,</span><br><span class="hljs-comment">//     speak : function()&#123;</span><br><span class="hljs-comment">//         console.log(&#x27;喵喵喵&#x27;)</span><br><span class="hljs-comment">//     &#125;</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-comment">//工厂函数创建对象</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createCat</span>(<span class="hljs-params">name,color,age</span>)&#123;<br>    <span class="hljs-keyword">let</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>()<br>    obj.<span class="hljs-property">name</span> = name;<br>    obj.<span class="hljs-property">color</span> = color<br>    obj.<span class="hljs-property">age</span> = age<br>    obj.<span class="hljs-property">like</span> = <span class="hljs-string">&#x27;小鱼干&#x27;</span>;<br>    obj.<span class="hljs-property">speak</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;喵喵喵&#x27;</span>)<br>    &#125;<br>    <span class="hljs-keyword">return</span> obj<br>&#125;<br><br><span class="hljs-keyword">let</span>  xuxing =  <span class="hljs-title function_">createCat</span>(<span class="hljs-string">&#x27;xuxing&#x27;</span>,<span class="hljs-string">&#x27;red&#x27;</span>,<span class="hljs-number">2</span>)<br><span class="hljs-keyword">let</span>  jiuwei =  <span class="hljs-title function_">createCat</span>(<span class="hljs-string">&#x27;jiuwei&#x27;</span>,<span class="hljs-string">&#x27;blue&#x27;</span>,<span class="hljs-number">3</span>)<br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    new 操作符的作用</span><br><span class="hljs-comment">    1. 用于调用函数创建一个新的对象</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    构造函数约定函数的首字母必须大写</span><br><span class="hljs-comment">*/</span><br>   <br><span class="hljs-comment">//构造函数  </span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">CreateCat</span>(<span class="hljs-params">name,age,color</span>)&#123;<br><br>    <span class="hljs-comment">// 用于检测是否是通过new 调用的该函数</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">new</span>.<span class="hljs-property">target</span> === <span class="hljs-literal">undefined</span>)&#123;<br>        <span class="hljs-comment">//是通过普通函数调用</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">createCat</span>(name,color,age)<br>    &#125;<br>    <span class="hljs-comment">// this 就指向new 创建出来的对象</span><br>    <span class="hljs-comment">// let this = &#123;&#125;</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">color</span> = color<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">like</span> = <span class="hljs-string">&#x27;小鱼干&#x27;</span>;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">speak</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;喵喵喵&#x27;</span>)<br>    &#125;<br>    <span class="hljs-comment">//构造函数内的return 默认是返回this,也可以手动指定返回一个对象</span><br>    <span class="hljs-comment">// return this</span><br>    <span class="hljs-comment">/* </span><br><span class="hljs-comment">        new 操作符调用函数的时候会执行3个步骤</span><br><span class="hljs-comment">        1. 在函数内创建一个空对象并且分配给this</span><br><span class="hljs-comment">        2. 可以直接通过修改this的内容为对象添加新的属性或者方法</span><br><span class="hljs-comment">        3. 返回this</span><br><span class="hljs-comment">    */</span><br>&#125;<br><span class="hljs-keyword">let</span> wuxian = <span class="hljs-title class_">CreateCat</span>(<span class="hljs-string">&#x27;wuxian&#x27;</span>,<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;pink&#x27;</span>)<br><br><span class="hljs-comment">//实例化对象 new操作符创建的对象称为实例化对象</span><br><span class="hljs-keyword">let</span> yaya = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CreateCat</span>(<span class="hljs-string">&#x27;yaya&#x27;</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;blue&#x27;</span>)<br><span class="hljs-keyword">let</span> goudan = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CreateCat</span>(<span class="hljs-string">&#x27;goudan&#x27;</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;blue&#x27;</span>)<br><br>goudan.<span class="hljs-property">goujiao</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;汪汪汪&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="可选链操作符"><a href="#可选链操作符" class="headerlink" title="可选链操作符"></a>可选链操作符</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><br><span class="hljs-keyword">let</span> user = &#123;<br>    address : &#123;<br>        street : &#123;<br>            name : <span class="hljs-string">&#x27;123&#x27;</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// console.log(user.address) // undefined</span><br><span class="hljs-comment">// console.log(user.address.street) // 报错</span><br><span class="hljs-comment">// console.log(user.like.animal) //报错</span><br><br><span class="hljs-comment">//解决方案</span><br><span class="hljs-comment">// let street = user.address ? user.address.street : undefined;</span><br><br><span class="hljs-comment">//逻辑运算</span><br><span class="hljs-keyword">let</span> street = user.<span class="hljs-property">address</span> &amp;&amp; user.<span class="hljs-property">address</span>.<span class="hljs-property">street</span> &amp;&amp; user.<span class="hljs-property">address</span>.<span class="hljs-property">street</span>.<span class="hljs-property">name</span><br>    <br><span class="hljs-comment">//可选链 vlaue?.prop</span><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    - 如果 vlaue存在则结果与value.prop相同</span><br><span class="hljs-comment">    - 如果value 不存在为 undefined或者null时 就直接返回 undefined</span><br><span class="hljs-comment">    可选链是一种安全访问对象属性的最好方法</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">let</span>  stet =  user?.<span class="hljs-property">address</span>?.<span class="hljs-property">street</span>?.<span class="hljs-property">name</span><br><br><br><span class="hljs-comment">//变体写法</span><br><span class="hljs-comment">//短路操作</span><br><span class="hljs-comment">// let abc = null</span><br><span class="hljs-comment">// let x = 1</span><br><span class="hljs-comment">// abc?.sayHi(x++)</span><br><br><span class="hljs-comment">//安全的调用函数</span><br><span class="hljs-keyword">let</span> admin = &#123;<br>    <span class="hljs-title function_">setAdmin</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;设置成功&#x27;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> uu = &#123;&#125;<br>uu?.<span class="hljs-property">setAdmin</span>?.()<br>admin?.<span class="hljs-title function_">setAdmin</span>()<br><br><span class="hljs-comment">//访问属性</span><br><span class="hljs-keyword">let</span> uu2 = &#123;<br>    name : <span class="hljs-string">&#x27;xuxing&#x27;</span>,<br>    address : &#123;<br>        <span class="hljs-attr">street</span>:<span class="hljs-string">&#x27;123&#x27;</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> kye = <span class="hljs-string">&#x27;age&#x27;</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(uu2?.[kye])<br><br><span class="hljs-comment">//删除属性</span><br><span class="hljs-keyword">delete</span> uu2?.<span class="hljs-property">address</span>?.<span class="hljs-property">street</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> uu2)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">String</span>(uu2)) <span class="hljs-comment">//[object Object]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Number</span>(uu2)) <span class="hljs-comment">//[object Object]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Boolean</span>(uu2)) <span class="hljs-comment">//[object Object]</span><br></code></pre></td></tr></table></figure>

<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    数组</span><br><span class="hljs-comment">    当我们需要一些有序的集合的时候就可以用数组来创建</span><br><span class="hljs-comment">    数组是属于object类型的其中一个数据结构 Array</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    数组存储的值没有属性名只需要存储单个值就可以了</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//创建方式 构造函数</span><br><span class="hljs-keyword">let</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-string">&#x27;luyao&#x27;</span>,<span class="hljs-string">&#x27;yaya&#x27;</span>,<span class="hljs-string">&#x27;xiazhi&#x27;</span>)<br><span class="hljs-comment">//字面量创建</span><br><span class="hljs-keyword">let</span> arr2 = [<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>]<br><br><span class="hljs-comment">//取值  arr[index] 表示取arr数组中的第几个数据, 数据是从0开始计算</span><br><span class="hljs-keyword">let</span> name1 = arr[<span class="hljs-number">0</span>] <span class="hljs-comment">//luyao</span><br><span class="hljs-keyword">let</span> name2 = arr[<span class="hljs-number">1</span>] <span class="hljs-comment">//yaya</span><br><br><span class="hljs-comment">//修改值和新增值</span><br>arr2[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;一&#x27;</span><br><span class="hljs-comment">// arr2[5] = &#x27;五&#x27;</span><br><br><span class="hljs-comment">//length 的属性 用于获取数组的长度 , 长度是从1开始计数</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr2.<span class="hljs-property">length</span>)<br>arr2[arr2.<span class="hljs-property">length</span>] = <span class="hljs-string">&#x27;六&#x27;</span><br>arr2[arr2.<span class="hljs-property">length</span>] = &#123;<br>    name : <span class="hljs-string">&#x27;xuxing&#x27;</span>,<br>    age : <span class="hljs-number">123</span><br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr2[<span class="hljs-number">4</span>].<span class="hljs-property">age</span>)<br><br><span class="hljs-comment">//下标的长度默认是根据创建的值自动计算生成,当然也可以手动来设置长度</span><br><span class="hljs-comment">//以下的方法都是一些不好的做法,不推荐这样使用</span><br>arr2.<span class="hljs-property">length</span> = <span class="hljs-number">200</span><br>arr2[<span class="hljs-number">999</span>] = <span class="hljs-string">&#x27;九九九&#x27;</span><br>arr2.<span class="hljs-property">age</span> = <span class="hljs-string">&#x27;18&#x27;</span><br><br><br><span class="hljs-comment">//length修改值的应用场景 length 的值是会自动更新数据</span><br><span class="hljs-keyword">let</span> fruits = [<span class="hljs-string">&#x27;apple&#x27;</span>,<span class="hljs-string">&#x27;banana&#x27;</span>,<span class="hljs-string">&#x27;orange&#x27;</span>]<br><span class="hljs-comment">//length 小于数组内的数据, 他就会自动去更新数据把多余的部分进行删除</span><br>fruits.<span class="hljs-property">length</span> = fruits.<span class="hljs-property">length</span> - <span class="hljs-number">1</span><br><span class="hljs-comment">//清空数组</span><br><span class="hljs-comment">// fruits = []</span><br><span class="hljs-comment">// fruits.length = 0</span><br><span class="hljs-comment">// fruits = null</span><br></code></pre></td></tr></table></figure>

<h3 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><br><span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&#x27;一&#x27;</span>,<span class="hljs-string">&#x27;二&#x27;</span>,<span class="hljs-string">&#x27;三&#x27;</span>,<span class="hljs-string">&#x27;四&#x27;</span>,<span class="hljs-string">&#x27;五&#x27;</span>]<br><br><span class="hljs-comment">//for of 遍历数组 这个遍历方法只能用于数组</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> item <span class="hljs-keyword">of</span> arr) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item)<br>&#125;<br><br><span class="hljs-comment">//for in 进行遍历</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> arr) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr[key])<br>&#125;<br><br><span class="hljs-comment">//for 循环遍历</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>; index &lt; arr.<span class="hljs-property">length</span>; index++) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr[index])<br>&#125;<br><br><br><span class="hljs-comment">//数据类型转换</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">String</span>(arr)) <span class="hljs-comment">//一,二,三,四,五</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Number</span>(arr)) <span class="hljs-comment">//NaN</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Number</span>([<span class="hljs-string">&#x27;2&#x27;</span>])) <span class="hljs-comment">//1 数组中只有一个数值或者空值的时候是可以直接转换为数值的</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Boolean</span>([<span class="hljs-string">&#x27;123123&#x27;</span>,<span class="hljs-string">&#x27;123213&#x27;</span>]))<span class="hljs-comment">//ture</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>([] == []) <span class="hljs-comment">//false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">0</span> == []) <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure>

<h3 id="复习"><a href="#复习" class="headerlink" title="复习"></a>复习</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><br> <span class="hljs-comment">/* </span><br><span class="hljs-comment">    1. this 是函数内的一个关键词 ,表示调用函数的主体对象</span><br><span class="hljs-comment">    2. this 创建的时候是不确定的, 是在函数执行的过程中获取的</span><br><span class="hljs-comment">    3. 没有明确的调用主体this指向undefined(严格模式下)</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">var</span> obj = &#123;<br>    name : <span class="hljs-string">&#x27;obj&#x27;</span>,<br>    fn : <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span> === obj)<br>    &#125;,<br>    bb : &#123;<br>        name : <span class="hljs-string">&#x27;bb&#x27;</span>,<br>        cc : &#123;<br>            name : <span class="hljs-string">&#x27;cc&#x27;</span>,<br>            dd : <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>)<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br>obj.<span class="hljs-property">ff</span> = obj.<span class="hljs-property">bb</span>.<span class="hljs-property">cc</span>.<span class="hljs-property">dd</span><br><span class="hljs-keyword">let</span> nice = obj.<span class="hljs-property">bb</span>.<span class="hljs-property">cc</span>.<span class="hljs-property">dd</span><br><br><span class="hljs-title function_">nice</span>()<span class="hljs-comment">//undefined</span><br><br>obj.<span class="hljs-title function_">ff</span>() <span class="hljs-comment">// obj 函数的this是调用的时候确定</span><br><br>obj.<span class="hljs-property">bb</span>.<span class="hljs-property">cc</span>.<span class="hljs-title function_">dd</span>() <span class="hljs-comment">// cc</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">aa</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>)<br>&#125;<br><br><span class="hljs-comment">//没有明确的调用主体就是window调用, this指向window(非严格模式, 如果在严格模式下指向undefined)</span><br><span class="hljs-title function_">aa</span>()<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(aa == <span class="hljs-variable language_">window</span>.<span class="hljs-property">aa</span>) <span class="hljs-comment">//ture</span><br><br>obj.<span class="hljs-title function_">fn</span>()<br><br><span class="hljs-comment">//函数的调用主体就是函数执行前的那个对象</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">obj</span>.<span class="hljs-title function_">fn</span>()<br></code></pre></td></tr></table></figure>

<h2 id="day13-函数进阶"><a href="#day13-函数进阶" class="headerlink" title="day13-函数进阶"></a>day13-函数进阶</h2><h3 id="感受递归"><a href="#感受递归" class="headerlink" title="感受递归"></a>感受递归</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    递归函数 就是函数自身调用自身</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//pow(x,n) 计算x的n次方</span><br><span class="hljs-comment">//普通函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">pow</span>(<span class="hljs-params">x,n</span>)&#123;<br>    <span class="hljs-keyword">let</span> result = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        result *= x<br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result)<br>&#125;<br><span class="hljs-title function_">pow</span>(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br><br><span class="hljs-comment">//递归函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">pow2</span>(<span class="hljs-params">x,n</span>)&#123;<br>    <span class="hljs-comment">//递归一定要有个终点, 每次递归都会逐渐的接近终点</span><br>    <span class="hljs-keyword">if</span>(n == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">return</span> x<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> x * <span class="hljs-title function_">pow2</span>(x,n-<span class="hljs-number">1</span>)<br>    &#125;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">pow2</span>(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)) <span class="hljs-comment">// 2*2*2  2 * pwo(2,2)  2 * pow2(x,1) = x</span><br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">1. pow(2,3) = 2 * pow2(2,2) = 8</span><br><span class="hljs-comment">2. pow2(2,2) = 2 * pow2(2,1)  = 4</span><br><span class="hljs-comment">3. pow2(2,1) = 2</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">递归调用次数我们称为递归的深度, 深度是有限制的,不能大于10000</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure>

<h3 id="执行上下文"><a href="#执行上下文" class="headerlink" title="执行上下文"></a>执行上下文</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br> <span class="hljs-comment">/* </span><br><span class="hljs-comment">     执行上下文 是js代码执行前, js引擎需要做的准备工作 , 创建执行上下文</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     js的上下文分为3了类</span><br><span class="hljs-comment">     - 全局执行上下文</span><br><span class="hljs-comment">     - 函数上下文</span><br><span class="hljs-comment">     - eval 上下文</span><br><span class="hljs-comment"> */</span><br> <span class="hljs-comment">// console.log(eval(&#x27;1*3+6&#x27;))</span><br><br> <span class="hljs-comment">//全局执行上下文 , 就是所谓的全局对象</span><br> <span class="hljs-comment">// console.log(window)</span><br> <span class="hljs-comment">// function fu()&#123;</span><br><br> <span class="hljs-comment">// &#125;</span><br> <span class="hljs-comment">// var a = 1</span><br><br> <span class="hljs-comment">//函数执行上下文</span><br> <span class="hljs-comment">// let a = 1</span><br> <span class="hljs-comment">// function fn()&#123;</span><br> <span class="hljs-comment">//     let a = 2</span><br> <span class="hljs-comment">//     console.log(a)</span><br> <span class="hljs-comment">// &#125;</span><br> <span class="hljs-comment">// fn()</span><br><br> <span class="hljs-comment">//执行栈 </span><br> <span class="hljs-comment">/* </span><br><span class="hljs-comment">     执行上下文栈也叫执行栈,执行栈用于存储函数执行期间的上下文</span><br><span class="hljs-comment">     栈是一个数据结构 具备 LIFO 先进后出 的特性</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     js首次执行的时候就会创建一个执行栈, 并且最先把全局执行上下文压栈,之后如果有新的函数调用,就会把函数的执行上下文压入栈中</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     当函数内嵌套函数调用的时候</span><br><span class="hljs-comment">     - 当前函数暂停执行</span><br><span class="hljs-comment">     - 与他关联的上下文会被执行栈中保存起来(压栈)</span><br><span class="hljs-comment">     - 执行嵌套函数</span><br><span class="hljs-comment">     - 嵌套函数结束后,在从堆栈中恢复之前的上下文, 并从停止的位置恢复函数的执行(出栈)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     创建上下文做的事情</span><br><span class="hljs-comment">     1. 确定this</span><br><span class="hljs-comment">     2. 词法环境组件</span><br><span class="hljs-comment">         1. 就是一个包含标量标识符的映射结构</span><br><span class="hljs-comment">         2. 全局的词法环境组件 : 建立词法环境的引用 null</span><br><span class="hljs-comment">         3. 函数词法环境组件 建立外部词法环境的引用关系</span><br><span class="hljs-comment">     3. 变量环境组件</span><br><span class="hljs-comment">         规定变量生效的范围,也具备记录外部变量的引入</span><br><span class="hljs-comment"> */</span><br><br> <span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span><br> <span class="hljs-keyword">function</span> <span class="hljs-title function_">f1</span>(<span class="hljs-params"></span>)&#123;<br>     <span class="hljs-title function_">f2</span>()<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>,a)<br> &#125;<br><br> <span class="hljs-keyword">function</span> <span class="hljs-title function_">f2</span>(<span class="hljs-params"></span>)&#123;<br>     <span class="hljs-title function_">f3</span>()<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>)<br> &#125;<br><br> <span class="hljs-keyword">function</span> <span class="hljs-title function_">f3</span>(<span class="hljs-params"></span>)&#123;<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>)<br> &#125;<br><br> <span class="hljs-title function_">f1</span>() <span class="hljs-comment">// </span><br><br> <span class="hljs-comment">/* </span><br><span class="hljs-comment">     f1  = f2 = 1</span><br><span class="hljs-comment">     f2 = f3 = 2</span><br><span class="hljs-comment">     f3 = 3</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure>

<h3 id="继续研究递归"><a href="#继续研究递归" class="headerlink" title="继续研究递归"></a>继续研究递归</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">nice</span>(<span class="hljs-params">x</span>)&#123;<br>    <span class="hljs-keyword">if</span>(x === <span class="hljs-number">1</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x) <span class="hljs-comment">// 654312  进栈</span><br>    <span class="hljs-title function_">nice</span>(x-<span class="hljs-number">1</span>)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x) <span class="hljs-comment">// 123456  出栈</span><br>&#125;<br><span class="hljs-title function_">nice</span>(<span class="hljs-number">4</span>)<br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">进栈</span><br><span class="hljs-comment">nice(4) == console.log(4),nice(3)</span><br><span class="hljs-comment">nice(3) == console.log(3),nice(2)</span><br><span class="hljs-comment">nice(2) =  console.log(2),nice(1)</span><br><span class="hljs-comment">nice(1) =  return 1</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">出栈</span><br><span class="hljs-comment">2</span><br><span class="hljs-comment">3</span><br><span class="hljs-comment">4</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure>

<h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    作用域就是变量生效的范围</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    js每次执行或者&#123;&#125;的创建都会被称为一个词法环境的组件, 内部隐藏的映射关联对象就会产生</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    词法环境由两个部分组成</span><br><span class="hljs-comment">    - 环境记录  存储所有局部变量作为其属性 包括this</span><br><span class="hljs-comment">    - 外部词法环境的引用  建立与外部词法环境的关联</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    js中有三种作用域</span><br><span class="hljs-comment">    - 全局作用域</span><br><span class="hljs-comment">    - 函数作用域</span><br><span class="hljs-comment">    - 块级作用域</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//块级作用域 如果在代码块 &#123;&#125; 内部创建了变量,name这个变量所在的花括号内就是块级作用域</span><br><br>&#123;<br>    <span class="hljs-comment">//块级作用域</span><br>    <span class="hljs-keyword">let</span> message = <span class="hljs-string">&#x27;hello&#x27;</span> <span class="hljs-comment">//只在花括号内能访问 </span><br>    <span class="hljs-comment">// var hello = &#x27;123&#x27;</span><br>&#125;<br><br><span class="hljs-comment">// console.log(hello)</span><br><br><span class="hljs-comment">//if语句</span><br><span class="hljs-keyword">if</span>(<span class="hljs-literal">true</span>)&#123;<br>    <span class="hljs-keyword">let</span> message = <span class="hljs-string">&#x27;hello&#x27;</span> <span class="hljs-comment">//只在花括号内能访问 </span><br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;<br>    <span class="hljs-keyword">let</span> message = <span class="hljs-string">&#x27;hello&#x27;</span> <span class="hljs-comment">//只在花括号内能访问 </span><br>&#125;<br><br><span class="hljs-comment">//函数作用域 函数内部的变量就是函数作用域 ,函数内部的变量只在函数内部能访问到, 函数的作用域是创建的时候就已经确定的</span><br><span class="hljs-keyword">let</span> name = <span class="hljs-string">&#x27;global&#x27;</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">let</span> name = <span class="hljs-string">&#x27;infn&#x27;</span> <span class="hljs-comment">// out就是一个函数作用域</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name)<br>&#125;<br><span class="hljs-title function_">fn</span>()<br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">作用域存在的机制</span><br><span class="hljs-comment">1. 使用变量</span><br><span class="hljs-comment">    当访问变量的时候有限查看自身作用域有没有,有就用,没有就向外查找</span><br><span class="hljs-comment">    如果最顶层都没有就报错 xxx is not defined</span><br><span class="hljs-comment">2. 赋值变量</span><br><span class="hljs-comment">    跟访问同理</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure>

<h3 id="作用域练习"><a href="#作用域练习" class="headerlink" title="作用域练习"></a>作用域练习</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-comment">// let num = 22</span><br><span class="hljs-comment">// function fn1()&#123;</span><br><span class="hljs-comment">//     let num = 666</span><br><span class="hljs-comment">//     console.log(num)//666</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// fn1()</span><br><br><br><span class="hljs-comment">// let num = 22</span><br><span class="hljs-comment">// function fn1()&#123;</span><br><span class="hljs-comment">//     num = 666</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// console.log(num)//22</span><br><span class="hljs-comment">// fn1()</span><br><br><br><br><span class="hljs-comment">// let num = 22</span><br><span class="hljs-comment">// function fn1()&#123;</span><br><span class="hljs-comment">//     let num = 666</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// fn1()</span><br><span class="hljs-comment">// console.log(num)//22</span><br><br><br><br><br><br><br><br><span class="hljs-comment">// let num = 22</span><br><span class="hljs-comment">// function fn1()&#123;</span><br><span class="hljs-comment">//     console.log(num)//</span><br><span class="hljs-comment">//     let num = 666</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// fn1()</span><br><br><br><br><br><span class="hljs-comment">// let num = 22</span><br><span class="hljs-comment">// function fn1()&#123;</span><br><span class="hljs-comment">//     let num = 666</span><br><span class="hljs-comment">//     fn2()</span><br><span class="hljs-comment">//     console.log(num) // 666</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-comment">// function fn2()&#123;</span><br><span class="hljs-comment">//     num = 567</span><br><span class="hljs-comment">// &#125;</span><br>   <br><span class="hljs-comment">// fn1()</span><br><span class="hljs-comment">// console.log(num) // 567</span><br></code></pre></td></tr></table></figure>

<h3 id="作用链接"><a href="#作用链接" class="headerlink" title="作用链接"></a>作用链接</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    只有函数会产生作用域结构, 每一个函数的创建都是一个作用域, 当作用域嵌套作用域的时候, 组成的结构结构就叫作用域链</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    变量的访问规则,自身作用域没有就会沿着作用域链向上查找上一个作用域中有没有</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">let</span> xxx = <span class="hljs-string">&#x27;123&#x27;</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">let</span> width = <span class="hljs-string">&#x27;123&#x27;</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn2</span>(<span class="hljs-params"></span>)&#123;<br>        xxx = <span class="hljs-number">789</span><br>    &#125;<br>    <span class="hljs-title function_">fn2</span>()<br>&#125;<br><span class="hljs-title function_">fn</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(xxx)<br></code></pre></td></tr></table></figure>

<h2 id="day14-函数补充"><a href="#day14-函数补充" class="headerlink" title="day14-函数补充"></a>day14-函数补充</h2><h3 id="递归练习"><a href="#递归练习" class="headerlink" title="递归练习"></a>递归练习</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    深拷贝练习</span><br><span class="hljs-comment">    深拷贝就是 复制一个引用类型,并且切断与原有变量的引用关系</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">let</span> user = &#123;<br>    name : <span class="hljs-string">&#x27;张宏杨&#x27;</span>,<br>    age : <span class="hljs-number">21</span>,<br>    say : <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;hello&#x27;</span>)&#125;,<br>    friend : [<span class="hljs-string">&#x27;三月尽&#x27;</span>,<span class="hljs-string">&#x27;葡萄哥&#x27;</span>,<span class="hljs-string">&#x27;林晨曦&#x27;</span>],<br>    like : &#123;<br>        game : [<span class="hljs-string">&#x27;lol&#x27;</span>,<span class="hljs-string">&#x27;cf&#x27;</span>],<br>        eat : <span class="hljs-literal">true</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> coypUsr = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(&#123;&#125;,user)<br><span class="hljs-comment">//浅拷贝</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(coypUsr.<span class="hljs-property">like</span>.<span class="hljs-property">game</span> === user.<span class="hljs-property">like</span>.<span class="hljs-property">game</span> ) <span class="hljs-comment">// true</span><br><br><br><span class="hljs-comment">// let depUser = deepClone(user)</span><br><br><span class="hljs-comment">//深拷贝函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">deepClone</span>(<span class="hljs-params">obj</span>)&#123;<br>    <span class="hljs-comment">//返回一个拷贝后的结果</span><br>    <span class="hljs-keyword">let</span> result; <span class="hljs-comment">//&#123;name,age ,say,fired:[xxx,xxx],like:&#123;game:[xxx],ett&#125;&#125;</span><br>    <span class="hljs-comment">//判断数据类型</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> obj === <span class="hljs-string">&#x27;object&#x27;</span>)&#123;<br>        <span class="hljs-comment">//说明是数组或者对象</span><br>        result = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(obj)?[]:&#123;&#125; <span class="hljs-comment">//判断是不是一个数组</span><br>        <span class="hljs-comment">//是引用类型</span><br>       <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> obj) &#123;<br>         result[key] = <span class="hljs-title function_">deepClone</span>(obj[key])<br>       &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-comment">//不是引用类型</span><br>        result = obj<br>    &#125;<br>    <span class="hljs-keyword">return</span> result<br>&#125;<br><br><span class="hljs-keyword">let</span> oo = &#123;<br>    name : <span class="hljs-string">&#x27;xuxing&#x27;</span>,<br>    like : &#123;<br>        eat : <span class="hljs-literal">true</span>,<br>        fd : &#123;<br>            name : <span class="hljs-string">&#x27;123&#x27;</span><br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">deepClone</span>(oo).<span class="hljs-property">like</span> === oo.<span class="hljs-property">like</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">deepClone</span>(user).<span class="hljs-property">like</span>.<span class="hljs-property">game</span> === user.<span class="hljs-property">like</span>.<span class="hljs-property">age</span>)<br></code></pre></td></tr></table></figure>

<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    执行上下文有一个生命周期, </span><br><span class="hljs-comment">    创建阶段 == 进行预编译 ,预解析</span><br><span class="hljs-comment">    执行阶段 == 根据上下文顺序执行代码</span><br><span class="hljs-comment">    回收阶段 == 垃圾回收</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//复杂情况</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">let</span> value = <span class="hljs-number">1</span> <br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">inner</span>(<span class="hljs-params"></span>)&#123; <span class="hljs-comment">//闭包函数</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(++value)<span class="hljs-comment">//value访问了外层函数的变量,导致外侧函数变量被保留了下来</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    内部函数使用了外部作用域的变量,导致变量没有被垃圾回收这种情况就称闭包</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// f()() // 2</span><br><span class="hljs-comment">// f()() // 2</span><br><span class="hljs-comment">// f()() // 2</span><br><br><br><span class="hljs-comment">// let ff = f() //得到的是f的返回函数inner  &#123;value:1 , inner()&#123;&#125;&#125;</span><br><span class="hljs-comment">// ff() // 2</span><br><span class="hljs-comment">// ff() // 3</span><br><span class="hljs-comment">// ff() // 4</span><br><br><br><span class="hljs-comment">//购买东西的函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">xuxingBuy</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">let</span> money = <span class="hljs-number">100</span> <span class="hljs-comment">//总金额</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">buy</span>(<span class="hljs-params">name,pic</span>)&#123;<br>        money -= pic <span class="hljs-comment">//更新总金额</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`徐星购买了<span class="hljs-subst">$&#123;name&#125;</span>,花费了<span class="hljs-subst">$&#123;pic&#125;</span>,还剩下<span class="hljs-subst">$&#123;money&#125;</span>`</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//购买东西</span><br><span class="hljs-keyword">let</span> buyXuxing = <span class="hljs-title function_">xuxingBuy</span>()<span class="hljs-comment">// money = 100</span><br><span class="hljs-title function_">buyXuxing</span>(<span class="hljs-string">&#x27;美女写真&#x27;</span>,<span class="hljs-number">60</span>) <span class="hljs-comment">//40</span><br><span class="hljs-title function_">buyXuxing</span>(<span class="hljs-string">&#x27;奥特曼&#x27;</span>,<span class="hljs-number">20</span>) <span class="hljs-comment">//20</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">qiXiBuy</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">let</span> money = <span class="hljs-number">100</span> <span class="hljs-comment">//总金额</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">buy</span>(<span class="hljs-params">name,pic</span>)&#123;<br>        money -= pic <span class="hljs-comment">//更新总金额</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`七喜购买了<span class="hljs-subst">$&#123;name&#125;</span>,花费了<span class="hljs-subst">$&#123;pic&#125;</span>,还剩下<span class="hljs-subst">$&#123;money&#125;</span>`</span>)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> buyQixi =  <span class="hljs-title function_">qiXiBuy</span>()<br><span class="hljs-title function_">buyQixi</span>(<span class="hljs-string">&#x27;牙刷&#x27;</span>,<span class="hljs-number">5</span>)<br><span class="hljs-title function_">buyQixi</span>(<span class="hljs-string">&#x27;牙膏&#x27;</span>,<span class="hljs-number">15</span>)<br></code></pre></td></tr></table></figure>

<h3 id="参数rest参数与spread"><a href="#参数rest参数与spread" class="headerlink" title="参数rest参数与spread"></a>参数rest参数与spread</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    rest 参数 和 spread 语法</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// function max()&#123;</span><br><span class="hljs-comment">//     let maxNum = -Number.MAX_SAFE_INTEGER</span><br><span class="hljs-comment">//     console.log(arguments) //存储已经接收到的所有参数</span><br>    <br><span class="hljs-comment">//     for (const num of arguments) &#123;</span><br><span class="hljs-comment">//         if(num &gt; maxNum)&#123;</span><br><span class="hljs-comment">//             maxNum = num</span><br><span class="hljs-comment">//         &#125;</span><br><span class="hljs-comment">//     &#125;</span><br><span class="hljs-comment">//     return maxNum</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-comment">// console.log(max(5,6,567,567,87))</span><br><br><br><span class="hljs-comment">// function sum(name,sex)&#123;</span><br><span class="hljs-comment">//     let sum = 0</span><br><span class="hljs-comment">//     console.log(arguments) //存储已经接收到的所有参数</span><br>    <br><span class="hljs-comment">//     for (let i = 1; i &lt; arguments.length; i++) &#123;</span><br><span class="hljs-comment">//         sum += arguments[i]</span><br><span class="hljs-comment">//     &#125;</span><br><span class="hljs-comment">//     console.log(sum)</span><br><span class="hljs-comment">//     return sum</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-comment">// //求和函数, 第一个参数用户的名称, 后续参数是用户的工资, 要求用户的所有工资之和</span><br><span class="hljs-comment">// sum(&#x27;程力&#x27;,100,200,500,1000,2000)</span><br><span class="hljs-comment">// // sum(&#x27;程力&#x27;,&#x27;男&#x27;,100,200,500,1000,2000)</span><br><br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    ...rest 用作参数的时候表示剩余参数 , 会将参数剩余的部分整合成一个数组</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">name,sex,...rest</span>)&#123; <span class="hljs-comment">//接受name参数和sex参数剩余的参数统一 为 rest接受</span><br>    <span class="hljs-keyword">let</span> sum = <span class="hljs-number">0</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name,sex,rest)<br>   <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> iterator <span class="hljs-keyword">of</span> rest) &#123;<br>        sum += iterator<br>    &#125;<br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name,sum)<br>    <span class="hljs-keyword">return</span> sum<br>&#125;<br><br><span class="hljs-comment">//求和函数, 第一个参数用户的名称, 后续参数是用户的工资, 要求用户的所有工资之和</span><br><span class="hljs-comment">// sum(&#x27;程力&#x27;,&#x27;男&#x27;,100,200,500,1000,2000)</span><br><br><br><span class="hljs-comment">// function fn(...rest)&#123;</span><br><span class="hljs-comment">//     console.log(rest)</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// fn(1,23,12,31,2312,3)</span><br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    arguments 获取到的是所有参数的集合 ,不可以手动规定范围</span><br><span class="hljs-comment">    ...rest 获取的是剩余参数集合, 可以手动规定从什么位置开始获取剩余参数</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    注意</span><br><span class="hljs-comment">    ...rest 后面不允许再出现形参</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// function fnfn(...rest,age)&#123;&#125; //错误写法</span><br><br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment"> spread 语法(扩展运算)</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">max</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">let</span> maxNum = -<span class="hljs-title class_">Number</span>.<span class="hljs-property">MAX_SAFE_INTEGER</span>    <br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-variable language_">arguments</span>[<span class="hljs-number">0</span>] === <span class="hljs-string">&#x27;object&#x27;</span>)&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> num <span class="hljs-keyword">of</span> <span class="hljs-variable language_">arguments</span>[<span class="hljs-number">0</span>]) &#123;<br>            <span class="hljs-keyword">if</span>(num &gt; maxNum)&#123;<br>                maxNum = num<br>            &#125;<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> num <span class="hljs-keyword">of</span> <span class="hljs-variable language_">arguments</span>) &#123;<br>            <span class="hljs-keyword">if</span>(num &gt; maxNum)&#123;<br>                maxNum = num<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(maxNum)<br>    <span class="hljs-keyword">return</span> maxNum<br>&#125;<br><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">max2</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">let</span> maxNum = -<span class="hljs-title class_">Number</span>.<span class="hljs-property">MAX_SAFE_INTEGER</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> num <span class="hljs-keyword">of</span> <span class="hljs-variable language_">arguments</span>) &#123;<br>        <span class="hljs-keyword">if</span>(num &gt; maxNum)&#123;<br>            maxNum = num<br>        &#125;<br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(maxNum)<br>    <span class="hljs-keyword">return</span> maxNum<br>&#125;<br><br><br><span class="hljs-comment">//传入的参数是数组</span><br><span class="hljs-keyword">let</span> age = [<span class="hljs-number">1</span>,<span class="hljs-number">23234</span>,<span class="hljs-number">34</span>,<span class="hljs-number">53</span>,<span class="hljs-number">45</span>,<span class="hljs-number">243</span>,<span class="hljs-number">52</span>,<span class="hljs-number">436</span>,<span class="hljs-number">456</span>,<span class="hljs-number">34</span>,<span class="hljs-number">6554</span>,<span class="hljs-number">76</span>,<span class="hljs-number">6587</span>]<br><span class="hljs-comment">//找到age中最大的年龄</span><br><span class="hljs-title function_">max</span>(age)<br><span class="hljs-comment">// max(1,23,1,23)</span><br><br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    扩展运算</span><br><span class="hljs-comment">    通过 ...arr的形式将数组的每一项单词拆解出来</span><br><span class="hljs-comment">*/</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(...age) <span class="hljs-comment">//1 23234 34 53 45 243 52 436 456 34 6554 76 6587</span><br><br><span class="hljs-keyword">let</span> age2 = [<span class="hljs-number">32432</span>,<span class="hljs-number">345</span>,<span class="hljs-number">34</span>,<span class="hljs-number">6456</span>,<span class="hljs-number">9999999</span>]<br><span class="hljs-title function_">max2</span>(...age)<span class="hljs-comment">//23234</span><br><span class="hljs-title function_">max2</span>(...age,...age2,<span class="hljs-number">82379847298437928374</span>)<span class="hljs-comment">//9999999</span><br><br><br><span class="hljs-comment">//花样玩法 合并数组</span><br><span class="hljs-keyword">let</span> arr1 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><span class="hljs-keyword">let</span> arr2 = [<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]<br><br><span class="hljs-comment">// for (const value of arr1) &#123;</span><br><span class="hljs-comment">//     arr2[arr2.length] = value</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-keyword">let</span> arr3 = [...arr1,...arr2,...<span class="hljs-string">&#x27;axadsfasdf&#x27;</span>] <span class="hljs-comment">// [1, 2, 3, 4, 5, 6]</span><br></code></pre></td></tr></table></figure>

<h3 id="var创建变量"><a href="#var创建变量" class="headerlink" title="var创建变量"></a>var创建变量</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br>   <span class="hljs-comment">/* </span><br><span class="hljs-comment">       var跟let 类似都是创建变量的方式</span><br><span class="hljs-comment">   */</span><br><br>   <span class="hljs-comment">//1. var 没有块级作用域</span><br>   &#123;<br>       <span class="hljs-keyword">var</span> messge = <span class="hljs-string">&#x27;123&#x27;</span><br>   &#125;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(messge)<br><br>   <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> index = <span class="hljs-number">0</span>; index &lt; <span class="hljs-number">5</span>; index++) &#123;<br>       <span class="hljs-comment">// console.log(index)</span><br>   &#125;<br>   <span class="hljs-comment">// console.log(index)//5</span><br><br>   <span class="hljs-comment">// let ali =  document.querySelectorAll(&#x27;li&#x27;)</span><br><br>   <span class="hljs-comment">// var i = 0//5</span><br>   <span class="hljs-comment">// for (let i = 0; i &lt; ali.length; i++) &#123;</span><br>   <span class="hljs-comment">//     ali[i].onclick = function()&#123;</span><br>   <span class="hljs-comment">//         console.log(i)</span><br>   <span class="hljs-comment">//         ali[i].style.background = &#x27;red&#x27;</span><br>   <span class="hljs-comment">//     &#125;</span><br>   <span class="hljs-comment">// &#125;</span><br><br>   <span class="hljs-comment">//2. 变量可以重复声明</span><br>   <span class="hljs-comment">// var index = 1</span><br>   <span class="hljs-comment">// var index = 2</span><br><br><br>   <span class="hljs-comment">//3. 变量可以声明前使用</span><br>   <span class="hljs-comment">// console.log(age)</span><br>   <span class="hljs-comment">// var age = 19</span><br><br><br>   <span class="hljs-comment">//4. 变量存储的位置是window</span><br>   <span class="hljs-comment">// var age = 19</span><br>   <span class="hljs-comment">// console.log(window.age)</span><br>   <span class="hljs-comment">// console.log(window.age = 20)</span><br>   <span class="hljs-comment">// let sex = &#x27;男&#x27; // let存储的位置是 script标签内部</span><br>   <span class="hljs-comment">// console.log(window.sex)</span><br><br><br>   <span class="hljs-comment">//函数声明提升</span><br>   <span class="hljs-comment">/* </span><br><span class="hljs-comment">       函数声明会出现作用域提升,会将函数声明提升到作用域的最顶层</span><br><span class="hljs-comment">   */</span><br>   <span class="hljs-title function_">fn</span>()<br>   <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>)&#123;<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;fnnfnfnf&#x27;</span>)<br>   &#125;<br></code></pre></td></tr></table></figure>

<h2 id="day15-解答课"><a href="#day15-解答课" class="headerlink" title="day15-解答课"></a>day15-解答课</h2><h3 id="case01"><a href="#case01" class="headerlink" title="case01"></a>case01</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-comment">// function fn()&#123;</span><br>    <br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// console.log(typeof fn) //function</span><br><span class="hljs-comment">// console.log(typeof null) //object</span><br><span class="hljs-comment">// console.log(new fn()) //&#123;&#125;</span><br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    循环使用来批量多次的执行某一些代码或者是行为</span><br><span class="hljs-comment">    循环还可以用来获取对象或者数组中的每个值(遍历)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    while(表达式)&#123; 代码块 &#125;</span><br><span class="hljs-comment">    do&#123;代码块&#125; while(表达式)</span><br><span class="hljs-comment">    for(初始化变量;循环终止条件;更新初始值)&#123;代码块&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    当表达式为真的时候执行代码块的内容</span><br><span class="hljs-comment">    forin 遍历对象的循环</span><br><span class="hljs-comment">    forof 遍历数组的循环</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">let</span> obj = &#123;<br>    name : <span class="hljs-string">&#x27;xuxing&#x27;</span>,<br>    age : <span class="hljs-number">19</span>,<br>    sex : <span class="hljs-string">&#x27;男&#x27;</span><br>&#125;<br><br><span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&#x27;123&#x27;</span>,<span class="hljs-string">&#x27;456&#x27;</span>,<span class="hljs-string">&#x27;asfd&#x27;</span>]<br><span class="hljs-comment">// console.log(obj.name)</span><br><span class="hljs-comment">// console.log(obj.age)</span><br><span class="hljs-comment">// console.log(obj.sex)</span><br><br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> obj) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(key,obj[key])<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> arr) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(key,arr[key])<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> value <span class="hljs-keyword">of</span> arr) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value)<br>&#125;<br><br><span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> (index != arr.<span class="hljs-property">length</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr[index])<br>    index++<br>&#125;<br><br><span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;按时发大水发打算复读&#x27;</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> valu <span class="hljs-keyword">of</span> str) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(valu)<br>&#125;<br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    深拷贝和浅拷贝</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    浅拷贝只会拷贝对象中的基础数据类型,引用类型的数据拷贝会建立引用关系</span><br><span class="hljs-comment">    深拷贝将对象中的所有类型都进行拷贝,并且切断引用关系</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// let obj1 = &#123;name:1&#125;</span><br><span class="hljs-comment">// let obj2 = obj1</span><br><br><br><span class="hljs-comment">// for (let i = 0; i &lt; 5; i++) &#123; // 5</span><br><span class="hljs-comment">//     for (let k = 0; k &lt; 5; k++) &#123; // 5 5*5  25</span><br><span class="hljs-comment">//       //6  5*5*6</span><br><span class="hljs-comment">//     &#125;</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    var 的特征</span><br><span class="hljs-comment">    1. 不会创建快级作用域</span><br><span class="hljs-comment">    2. 会变量声明提升</span><br><span class="hljs-comment">    3. 变量可以重复命名</span><br><span class="hljs-comment">    4. 变量挂在的位置是window</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    let</span><br><span class="hljs-comment">    1. 会创建快级作用域</span><br><span class="hljs-comment">    2. 不会变量提升</span><br><span class="hljs-comment">    3. 变量不能重复命名</span><br><span class="hljs-comment">    4. 变量存储的位置在全局global标签内部</span><br><span class="hljs-comment">*/</span><br><br>    <span class="hljs-keyword">let</span>  message = <span class="hljs-string">&#x27;123&#x27;</span><br><br><br>    <span class="hljs-comment">/* </span><br><span class="hljs-comment">        作用域</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        本质就是规定变量生效的范围</span><br><span class="hljs-comment">        作用域是一个静态的存在,函数在创建的时候作用域就已经创建好了</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        作用域有3</span><br><span class="hljs-comment">        全局作用域</span><br><span class="hljs-comment">        函数作用域</span><br><span class="hljs-comment">        快级作用域</span><br><span class="hljs-comment">        建立当前作用域与外部作用域的关联</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        作用域可能会有多层的嵌套, 多层嵌套称为作用域链</span><br><span class="hljs-comment">    */</span><br><br><br><br>    <span class="hljs-keyword">let</span> age = <span class="hljs-number">123</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn1</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title function_">fn2</span>()<br>        <span class="hljs-keyword">let</span> age = <span class="hljs-number">19</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(age) <span class="hljs-comment">// 19</span><br>    &#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn2</span>(<span class="hljs-params"></span>)&#123;<br>        age = <span class="hljs-number">456</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(age) <span class="hljs-comment">// 456</span><br>    &#125;<br>    <span class="hljs-title function_">fn1</span>()<br></code></pre></td></tr></table></figure>

<h3 id="case02"><a href="#case02" class="headerlink" title="case02"></a>case02</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    预解析的原理</span><br><span class="hljs-comment">    预解析是代码执行的顺序</span><br><span class="hljs-comment">    1. 语法分析 ,快速的检查你的js代码,有没有语法错误,或者单词拼写错误</span><br><span class="hljs-comment">    2. js预解析, 在这个阶段js 会去创建A0对象和GO对象</span><br><span class="hljs-comment">    3. 解释性执行代码,代码逐条执行</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    js预解析(代码执行前做的一件事)</span><br><span class="hljs-comment">    1. 创建AO对象 指的是活性对象,也叫作执行上下文,也可以说是创建作用域,AO表示创建函数执行的上下文和作用域</span><br><span class="hljs-comment">    2. 找函数形参和函数内部的变量声明,将形参和变量声明作为AO对象的属性名,并且赋值为undefined</span><br><span class="hljs-comment">    3. 将实参形参进行统一,实参赋值给形参</span><br><span class="hljs-comment">    4. 在函数体内找函数声明,值赋值给函数体</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// for (let index = 0; index &lt; 1000000; index++) &#123;</span><br><span class="hljs-comment">//     console.log(index)</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// let message = &#x27;123&#x27;</span><br><span class="hljs-comment">// let message = &#x27;123&#x27;</span><br><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">nice</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">let</span> good = <span class="hljs-number">20</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(good)<br>&#125;<br><span class="hljs-comment">// nice()</span><br><span class="hljs-comment">/* </span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">GO对象 全局执行上下文</span><br><span class="hljs-comment">GO = &#123;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">2. 找参数和变量</span><br><span class="hljs-comment">GO = &#123;</span><br><span class="hljs-comment">    nice = undefined</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">3. 统一参数</span><br><span class="hljs-comment">GO = &#123;</span><br><span class="hljs-comment">    nice = function</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">4. 变量声明</span><br><span class="hljs-comment">5. 执行上下文代码逐条执行</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">1. 创建AO对象</span><br><span class="hljs-comment">AO = &#123;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">2/ 找函数的形参和内部变量赋值为undefined</span><br><span class="hljs-comment">AO = &#123;</span><br><span class="hljs-comment">    good : undefined</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">3. 实参形参统一</span><br><span class="hljs-comment">AO = &#123;</span><br><span class="hljs-comment">    good : 20</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">4. 在函数体内找函数声明</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">5. 执行上下文代码逐条执行</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">a</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a) <span class="hljs-comment">//ƒ a()&#123;&#125;</span><br>    a = <span class="hljs-number">123</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a)<span class="hljs-comment">//123</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">a</span>(<span class="hljs-params"></span>)&#123;&#125; <br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a) <span class="hljs-comment">// 123</span><br>    <span class="hljs-comment">// a()</span><br>    <span class="hljs-keyword">let</span> b = <span class="hljs-keyword">function</span> <span class="hljs-title function_">b</span>(<span class="hljs-params"></span>)&#123;&#125;<br>&#125;<br><span class="hljs-title function_">fn</span>(<span class="hljs-number">1</span>)<br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    1. 创建AO对象</span><br><span class="hljs-comment">    AO = &#123;&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    2. 找函数形参和内部的变量声明赋值undefined</span><br><span class="hljs-comment">    AO = &#123;</span><br><span class="hljs-comment">        a : undefined,</span><br><span class="hljs-comment">        b : undefined</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    3. 实参形参统一</span><br><span class="hljs-comment">    AO = &#123;</span><br><span class="hljs-comment">        a : 1,</span><br><span class="hljs-comment">        b : undefined</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    4. 函数内部的函数声明和赋值</span><br><span class="hljs-comment">    AO = &#123;</span><br><span class="hljs-comment">        a : function,</span><br><span class="hljs-comment">        b : function b()&#123;&#125;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    5. 代码执行, 预解析就是为变量设置初始值</span><br><span class="hljs-comment">    a = 123</span><br><span class="hljs-comment">    console.log(a) // func</span><br><span class="hljs-comment">    a = 123;</span><br><span class="hljs-comment">    console.log(a)//123</span><br><span class="hljs-comment">    function a()&#123;&#125; </span><br><span class="hljs-comment">    console.log(a) // 123</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure>

<h3 id="case03-自执行函数IIFE"><a href="#case03-自执行函数IIFE" class="headerlink" title="case03-自执行函数IIFE"></a>case03-自执行函数IIFE</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br>    <br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    IIFE 叫自执行函数 也就是自己会执行的函数,不需要额外调用, 或者说是自己创建的时候就已经调用的函数</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// function fn()&#123;</span><br><span class="hljs-comment">//     let aa = 1</span><br><span class="hljs-comment">//     console.log(aa)</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// fn()</span><br><br><span class="hljs-comment">//自执行函数</span><br>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">var</span> aa = <span class="hljs-number">1</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(aa)<br>&#125;)();<br><br><span class="hljs-keyword">let</span> cc =  (<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">var</span> aa = <span class="hljs-number">2</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(aa)<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        aa++<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(aa)<br>    &#125;<br>&#125;)();<br><span class="hljs-comment">// cc()</span><br><span class="hljs-comment">// cc()</span><br><br><br><span class="hljs-comment">//iife函数的其他写法</span><br>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;aaa&#x27;</span>)<br>&#125;)();<br><br>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;bbb&#x27;</span>)<br>&#125;());<br><br>!<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;ccc&#x27;</span>)<br>&#125;();<br><br>+<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;ddd&#x27;</span>)<br>&#125;();<br><br>-<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;eee&#x27;</span>)<br>&#125;();<br></code></pre></td></tr></table></figure>

<h3 id="case04-函数的NFE"><a href="#case04-函数的NFE" class="headerlink" title="case04-函数的NFE"></a>case04-函数的NFE</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    函数本身就是一个对象</span><br><span class="hljs-comment">*/</span><br><br>sayHi.<span class="hljs-property">age</span> = <span class="hljs-number">1</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sayHi</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;hi&#x27;</span>,sayHi.<span class="hljs-property">age</span>++)<br>&#125;   <br><br><span class="hljs-comment">//name 属性表示函数的名称</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(sayHi.<span class="hljs-property">name</span>)<span class="hljs-comment">//sayHi</span><br><span class="hljs-title function_">sayHi</span>()<br><span class="hljs-title function_">sayHi</span>()<br><span class="hljs-title function_">sayHi</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(sayHi.<span class="hljs-property">age</span>)<br><br><br><span class="hljs-keyword">let</span> ss = &#123;<br>    sayHi ()&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;hi&#x27;</span>)<br>    &#125;,<br>    sayBye (a,b,c,...rest)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;bye&#x27;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ss.<span class="hljs-property">sayBye</span>.<span class="hljs-property">length</span>)<span class="hljs-comment">//3  函数一共接受多少个参数</span><br></code></pre></td></tr></table></figure>

<h3 id="case05"><a href="#case05" class="headerlink" title="case05"></a>case05</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><br><span class="hljs-comment">//阶乘递归  fn(5) = 5*3*2*1</span><br><br><span class="hljs-comment">// function fn(x)&#123;</span><br><span class="hljs-comment">//     //递归的出口</span><br><span class="hljs-comment">//     if(x === 1)return 1;</span><br><span class="hljs-comment">//     return x * fn(x-1)</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// console.log(fn(5))</span><br><br><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">showYes</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>; index &lt; <span class="hljs-number">5</span>; index++) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我吃了我吃了&#x27;</span>)<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我吃了我吃了&#x27;</span>)<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">showYes2</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>; index &lt; <span class="hljs-number">5</span>; index++) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;睡醒了睡醒了&#x27;</span>)<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;睡醒了睡醒了&#x27;</span>)<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">showNo2</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>; index &lt; <span class="hljs-number">5</span>; index++) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;还没睡醒&#x27;</span>)<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;还没睡醒&#x27;</span>)<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">showNo</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>; index &lt; <span class="hljs-number">5</span>; index++) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;还没吃饱还没吃饱&#x27;</span>)<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;还没吃饱还没吃饱&#x27;</span>)<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">ask</span>(<span class="hljs-params">question,yes,no</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_">confirm</span>(question)) &#123;<br>            <span class="hljs-comment">//选择正确</span><br>            <span class="hljs-title function_">yes</span>()<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//选择错误</span><br>            <span class="hljs-title function_">no</span>()<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// ask(&#x27;你吃了吗&#x27;,showYes,showNo)</span><br>    <span class="hljs-title function_">ask</span>(<span class="hljs-string">&#x27;你睡着了吗&#x27;</span>,showYes2,showNo2)<br></code></pre></td></tr></table></figure>

<h2 id="day16-api"><a href="#day16-api" class="headerlink" title="day16-api"></a>day16-api</h2><h3 id="常用api-数值"><a href="#常用api-数值" class="headerlink" title="常用api-数值"></a>常用api-数值</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    api 就是js 向开发人员提供的一些列处理数据类型的方法(function)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    学习api的时候需要关注三个信息</span><br><span class="hljs-comment">    - api 的作用</span><br><span class="hljs-comment">    - 是否会改变原数据</span><br><span class="hljs-comment">    - api 的返回值是什么</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">let</span> num = <span class="hljs-number">1_000_00_0</span> <span class="hljs-comment">//_可以用在数值让数值可读性更强不影响数值的具体指</span><br><br><span class="hljs-comment">//num.toFixed(index) 作用将数值小数部分超出index位的部分删除,不会改变元数据</span><br><span class="hljs-keyword">let</span> num1 = <span class="hljs-number">123123.345354653657</span><br><br><span class="hljs-comment">// console.log(num1.toFixed(2)) //123123.35</span><br><br><span class="hljs-comment">//自己封装</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">tofixed</span>(<span class="hljs-params">num,index</span>)&#123;<br>    <span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">let</span> numStr = <span class="hljs-title class_">String</span>(num)<br>    <span class="hljs-comment">//检索下标</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">indexOf</span>(<span class="hljs-params">str,ta</span>)&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> k = <span class="hljs-number">0</span>; k &lt; str.<span class="hljs-property">length</span>; k++) &#123;<br>            <span class="hljs-keyword">if</span>(str[k] === ta)&#123;<br>                <span class="hljs-keyword">return</span> k<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>    &#125;<br>    <span class="hljs-comment">//获取到点后面的index位</span><br>    <span class="hljs-keyword">let</span> max = <span class="hljs-title function_">indexOf</span>(numStr,<span class="hljs-string">&#x27;.&#x27;</span>)+index<br>   <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> k = <span class="hljs-number">0</span>; k &lt;= max; k++) &#123;<br>       str += numStr[k]<br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str)<br>&#125;<br><span class="hljs-comment">// tofixed(num1,2)</span><br><br><br><span class="hljs-comment">//num.toString(base) 方法将数值转换为字符串 , base 表示进制,以某种进制进行转换为字符串 , 返回值是字符串</span><br><span class="hljs-comment">// console.log(num.toString(2))//11110100001001000000</span><br><span class="hljs-comment">// console.log(num.toString(10))//1000000</span><br><span class="hljs-comment">// console.log(num.toString(16))//f4240</span><br><br><span class="hljs-comment">//Number.parseInt(str) 方法会将str取整数,抹去小数部分,返回值是一个数值 , 从第一个数值开始转换转换到第一个不是数值的字符串就停止</span><br><span class="hljs-comment">// console.log(Number.parseInt(123.123))</span><br><span class="hljs-comment">// console.log(Number.parseInt(&#x27;123.456&#x27;))</span><br><span class="hljs-comment">// console.log(Number.parseInt(&#x27;adsf&#x27;)) //nan</span><br><span class="hljs-comment">// console.log(Number.parseInt(&#x27;123a&#x27;)) //123</span><br><span class="hljs-comment">// console.log(Number.parseInt(&#x27;123$&#x27;)) //123</span><br><br><br><span class="hljs-comment">//Number.parseFloat(str) 保留小数 逐个转换,保留第一个.以后后续再出现其他的非数值字符串就停止转换</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-built_in">parseFloat</span>(<span class="hljs-string">&#x27;123.456&#x27;</span>)) <span class="hljs-comment">//123.456</span><br><span class="hljs-comment">// console.log(Number.parseFloat(&#x27;123.456a1&#x27;)) //123.456</span><br><span class="hljs-comment">// console.log(Number.parseFloat(&#x27;123.45.6a1&#x27;)) //123.456</span><br><span class="hljs-comment">// console.log(Number.parseFloat(&#x27;123a456a1&#x27;)) //123</span><br><br><br><span class="hljs-comment">//isFinte 和 isNaN 专门用于检测值是不是一个finte或者是一个nan</span><br><span class="hljs-comment">// console.log(isNaN(123))//false</span><br><span class="hljs-comment">// console.log(isNaN(&#x27;a1sfd&#x27;))//true</span><br><span class="hljs-comment">// console.log(isNaN(NaN))//true</span><br><br><span class="hljs-comment">// console.log(isFinite(123.123))//true</span><br><span class="hljs-comment">// console.log(isFinite(&#x27;1asdfa&#x27;))//false</span><br><span class="hljs-comment">// console.log(isFinite(39489083495435)) //true</span><br><span class="hljs-comment">// console.log(isFinite(true)) // treu</span><br><span class="hljs-comment">// console.log(isFinite(Infinity)) // false</span><br><br><br><span class="hljs-comment">// let  arr = [&#x27;123&#x27;,&#x27;465&#x27;,&#x27;78.9&#x27;,NaN,123,Infinity]</span><br><br><span class="hljs-comment">// let sum = 0</span><br><span class="hljs-comment">// for (let i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="hljs-comment">//     if(isFinite(arr[i]))&#123;</span><br><span class="hljs-comment">//         sum += Number(arr[i])</span><br><span class="hljs-comment">//     &#125;   </span><br><span class="hljs-comment">// &#125;</span><br></code></pre></td></tr></table></figure>

<h3 id="常用api-字符串"><a href="#常用api-字符串" class="headerlink" title="常用api-字符串"></a>常用api-字符串</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><br> <span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;asdfasfdAAAA&#x27;</span><br> <span class="hljs-comment">//字符串长度</span><br><span class="hljs-comment">//  console.log(str.length) //字符串长度</span><br><span class="hljs-comment">//  console.log(str[1]) //访问字符串的某个值</span><br><br><br><span class="hljs-comment">//str.charAt(index) 访问字符串中的第几个字符串</span><br><span class="hljs-comment">// console.log(str.charAt(1)) //s</span><br><br><span class="hljs-comment">//str.charCodeAt(index) 返回字符串的第index字符的 unicode 编码</span><br><span class="hljs-comment">// console.log(str.charCodeAt(0)) //97</span><br><span class="hljs-comment">// console.log(str.charCodeAt(1)) //115</span><br><span class="hljs-keyword">let</span> name = <span class="hljs-string">&#x27;徐星&#x27;</span><br><span class="hljs-comment">// console.log(name.charCodeAt(1)) //26143</span><br><br><span class="hljs-comment">//String.fromCharCode(unicode) 将unicode准换为字符串</span><br><span class="hljs-comment">// console.log(String.fromCharCode(26143)) // s</span><br><br><br><span class="hljs-comment">//字符串大小写之间的转换  toLowerCase()字符串全转小写 toUpperCase() 字符串全转大写</span><br><span class="hljs-comment">// console.log(str.toUpperCase())</span><br><span class="hljs-comment">// console.log(str.toLowerCase())</span><br><br><br><span class="hljs-comment">//substring(indexStart,[,indexEnd]) 截取字符串 indexStart开始下标indexEnd结束的下标 , 范围包含起始不包含结束</span><br><span class="hljs-keyword">let</span> stt = <span class="hljs-string">&#x27;徐星真是太可爱了&#x27;</span><br><span class="hljs-comment">// console.log(stt.substring(5,7))//可爱</span><br><span class="hljs-comment">// console.log(stt.substring(0,2))//徐星</span><br><span class="hljs-comment">// console.log(stt.substring(3)) //是太可爱了</span><br><span class="hljs-comment">// console.log(stt.substring(5,3)) //是太</span><br><span class="hljs-comment">// console.log(stt.substring(3,5)) //是太</span><br><span class="hljs-comment">// console.log(stt.substring(-3,5)) //徐星真是太</span><br><span class="hljs-comment">// console.log(stt.substring(-5,3)) //徐星真</span><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    只有start的时候表示从开始截取到结束</span><br><span class="hljs-comment">    参数内部会进行一个调整,如果参数第一个大于第二个,在内部会将参数统一为第一个小于第二个</span><br><span class="hljs-comment">    如果传入的值小于0 或者是NaN会被当做0处理</span><br><span class="hljs-comment">*/</span><br><br><br><span class="hljs-comment">//substr(startIndex,[,length]) 从 startIndex 下标开始,截取 length 位</span><br><span class="hljs-comment">// console.log(stt.substr(0,2)) //徐星</span><br><span class="hljs-comment">// console.log(stt.substr(5,3)) //可爱了</span><br><span class="hljs-comment">// console.log(stt.substr(2)) //真是太可爱了</span><br><br><br><span class="hljs-comment">//slice(startIndex,[,endIndex]) 跟 substing 参数一模一样</span><br><span class="hljs-comment">//参数如果是负数值 ,表示 str.length-Index</span><br><span class="hljs-comment">// let str2 = &#x27;今天真的太开心了&#x27; // 8 - 2 = 6  // 2</span><br><span class="hljs-comment">// console.log(str2.slice(2,4)) // 真</span><br><span class="hljs-comment">// console.log(str2.slice(-3,6)) // 开</span><br><br><br><span class="hljs-comment">// split(string,[,lenght]) 将字符串以为string字符作为切割,切割为一个数组 , length 转换后的数组保留几个</span><br><span class="hljs-keyword">let</span> str3 = <span class="hljs-string">&#x27;张三|男|16|180&#x27;</span><br><span class="hljs-comment">// console.log(str3.split(&#x27;|&#x27;,2))//[&#x27;张三&#x27;, &#x27;男&#x27;, &#x27;16&#x27;, &#x27;180&#x27;]</span><br><span class="hljs-comment">// console.log(str3.split(&#x27;|&#x27;))//[&#x27;张三&#x27;, &#x27;男&#x27;, &#x27;16&#x27;, &#x27;180&#x27;]</span><br><span class="hljs-comment">// console.log(str3.split())//[&#x27;张三|男|16|180&#x27;]</span><br><span class="hljs-comment">// console.log(str3.split(&#x27;&#x27;))//[&#x27;张&#x27;, &#x27;三&#x27;, &#x27;|&#x27;, &#x27;男&#x27;, &#x27;|&#x27;, &#x27;1&#x27;, &#x27;6&#x27;, &#x27;|&#x27;, &#x27;1&#x27;, &#x27;8&#x27;, &#x27;0&#x27;]</span><br><br><br><span class="hljs-comment">//trim() 清除字符串左右两边的空格</span><br><span class="hljs-comment">// let ueerName = prompt(&#x27;你的网名是什么&#x27;,&#x27;张三&#x27;)</span><br><br><span class="hljs-comment">// if(ueerName.trim() === &#x27;张三&#x27;)&#123;</span><br><span class="hljs-comment">//     console.log(&#x27;欢迎张三进入直播间&#x27;)</span><br><span class="hljs-comment">// &#125;</span><br><br><br><span class="hljs-comment">//检索字符串的方法</span><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    str.indexOf(searchEle,[,fromeIndex])</span><br><span class="hljs-comment">    - searchEle 表示需要检索的字符串或者元素</span><br><span class="hljs-comment">    - fromeIndex 从第几个开始检索</span><br><span class="hljs-comment">    返回值找到第一个满足的就返回他的下标位置</span><br><span class="hljs-comment">    如果找不到返回 -1 </span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    str.lastIndexOf(searchEle,[,fromeIndex]) 跟indexof一样不过他是反着回去找</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">let</span> str5 = <span class="hljs-string">&#x27;你好我叫徐星,我今年8岁&#x27;</span><br><span class="hljs-comment">// console.log(str5.indexOf(&#x27;我&#x27;)) //2 默认从下标0开始找,找到第一个满足的就返回他的下标位置</span><br><span class="hljs-comment">// console.log(str5.indexOf(&#x27;我&#x27;,3)) //7</span><br><span class="hljs-comment">// console.log(str5.lastIndexOf(&#x27;我&#x27;)) //7</span><br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    str.includes(ele) 检索字符串中是否存在ele元素 </span><br><span class="hljs-comment">    str.startsWith(ele) 检索字符串中的开头字符换是不是ele</span><br><span class="hljs-comment">    str.endsWith(ele) 检索字符串中的结尾字符换是不是ele</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    返回值为布尔值 有就返回true</span><br><span class="hljs-comment">*/</span><br>   <br><span class="hljs-comment">// console.log(str5.includes(&#x27;徐星&#x27;)) //true</span><br><span class="hljs-comment">// console.log(str5.includes(&#x27;许星&#x27;)) //false</span><br><span class="hljs-comment">// console.log(str5.includes(&#x27;许星&#x27;)) //false</span><br><br><span class="hljs-keyword">let</span> urlStr = <span class="hljs-string">&#x27;https://www.baidu.com&#x27;</span><br><span class="hljs-comment">// console.log(urlStr.startsWith(&#x27;https&#x27;)) // true</span><br><span class="hljs-comment">// console.log(urlStr.startsWith(&#x27;http&#x27;)) // true</span><br><span class="hljs-comment">// console.log(urlStr.endsWith(&#x27;com&#x27;)) // true</span><br><span class="hljs-comment">// console.log(urlStr.endsWith(&#x27;cn&#x27;)) // false</span><br><span class="hljs-comment">// console.log(urlStr.endsWith(&#x27;png&#x27;)) // false</span><br><br><span class="hljs-comment">//str.repeat(index) 将str重复拼接index次 ,返回一个新的字符串</span><br><span class="hljs-comment">// console.log(str5.repeat(10))</span><br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    replace(seStr,newstr) || replaceAll</span><br><span class="hljs-comment">    seStr 需要替换的值</span><br><span class="hljs-comment">    newstr 替换后的值</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    作用 将 seStr 选中的字符串替换为 newstr 字符串</span><br><span class="hljs-comment">    返回值是一个新的字符串</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    replace只能替换满足条件的第一个 , replaceAll替换满足条件的所有</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">let</span> str6 = <span class="hljs-string">&#x27;徐星真可爱,超级可爱&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str6.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;可爱&#x27;</span>,<span class="hljs-string">&#x27;丑陋&#x27;</span>)) <span class="hljs-comment">//只会替换第一个满足条件的选项</span><br><br><span class="hljs-comment">//全部替换</span><br><span class="hljs-keyword">while</span> (str6.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;可爱&#x27;</span>)) &#123;<br>    str6 = str6.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;可爱&#x27;</span>,<span class="hljs-string">&#x27;丑陋&#x27;</span>)   <br>&#125;<br><br><span class="hljs-comment">//全部替换</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str6.<span class="hljs-title function_">replaceAll</span>(<span class="hljs-string">&#x27;丑陋&#x27;</span>,<span class="hljs-string">&#x27;美丽&#x27;</span>)) <br></code></pre></td></tr></table></figure>

<h3 id="常用api-数组类型"><a href="#常用api-数组类型" class="headerlink" title="常用api-数组类型"></a>常用api-数组类型</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><br><span class="hljs-comment">//Array.isArray(ele) 用于判断ele是不是一个数组,如果是返回true</span><br><span class="hljs-comment">// console.log(Array.isArray(&#x27;123&#x27;))// fase</span><br><span class="hljs-comment">// console.log(Array.isArray([]))// fase</span><br><br><span class="hljs-comment">//Array.from(iterEle) 将iterEle数据转换为一个数组 </span><br><span class="hljs-comment">// console.log(Array.from(&#x27;123&#x27;)) //[&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;]</span><br><span class="hljs-comment">// function fn()&#123;</span><br><span class="hljs-comment">//     console.log(arguments)</span><br><span class="hljs-comment">//     console.log(Array.from(arguments))// [&#x27;123&#x27;, 123, 12, 31, 23, 1]</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// fn(&#x27;123&#x27;,123,12,31,23,1)</span><br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    数组增删四件套</span><br><span class="hljs-comment">    push(..data) 为数组最后一项添加一个或者多个data数据,返回值是数组的长度</span><br><span class="hljs-comment">    pop()删除数组中最后一项数据, 返回值是删除的那个值</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    unshift(...date) 头部添加一个或者多个数据,回值是数组的长度</span><br><span class="hljs-comment">    shift() 删除第一个数据返回删除的数据</span><br><span class="hljs-comment">    重点该系列的方法都会改变原数据</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><br><span class="hljs-comment">//push(...data) 为数组的最后一项添加一个data数据</span><br><span class="hljs-comment">// console.log(arr.push(4)) // 4</span><br><span class="hljs-comment">// console.log(arr.push(5,6)) //6</span><br><span class="hljs-comment">// console.log(arr.push(&#x27;7&#x27;)) //7</span><br><br><span class="hljs-comment">//删除最后一项</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-title function_">pop</span>())<br><br>arr.<span class="hljs-title function_">unshift</span>(<span class="hljs-string">&#x27;5&#x27;</span>,<span class="hljs-string">&#x27;6&#x27;</span>,<span class="hljs-string">&#x27;7&#x27;</span>)<br>arr.<span class="hljs-title function_">shift</span>()<br></code></pre></td></tr></table></figure>

<h2 id="day17-api下"><a href="#day17-api下" class="headerlink" title="day17-api下"></a>day17-api下</h2><h3 id="数组api"><a href="#数组api" class="headerlink" title="数组api"></a>数组api</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>   <span class="hljs-string">&#x27;use strict&#x27;</span>;<br>   <span class="hljs-comment">/* </span><br><span class="hljs-comment">       concat(arr1,[,arr2,....]) 数组合并 </span><br><span class="hljs-comment">       作用: 将多个数组合并为一个数组</span><br><span class="hljs-comment">       返回值是合并后的新数组,不会改变原数据</span><br><span class="hljs-comment">   */</span><br>   <span class="hljs-keyword">let</span> arr1 = [<span class="hljs-number">123</span>,<span class="hljs-number">45</span>]<br>   <span class="hljs-keyword">let</span> arr2 = [<span class="hljs-number">65</span>,<span class="hljs-number">77</span>]<br>   <span class="hljs-comment">// let newArr1 = [].concat(arr1,arr2)</span><br>   <span class="hljs-keyword">let</span> newArr2 = arr1.<span class="hljs-title function_">concat</span>(arr2)<span class="hljs-comment">//[123, 45, 65, 77]</span><br><br><br>   <span class="hljs-comment">/* </span><br><span class="hljs-comment">       flat(num) 数组降维</span><br><span class="hljs-comment">       将多维数组降低num维度</span><br><span class="hljs-comment">   */</span><br><br>   <span class="hljs-keyword">let</span> arr3 = [<span class="hljs-number">123</span>,<span class="hljs-number">456</span>] <span class="hljs-comment">//一维数组</span><br>   <span class="hljs-keyword">let</span> arr4 = [<span class="hljs-number">123</span>,<span class="hljs-number">456</span>,[<span class="hljs-number">67</span>,<span class="hljs-number">89</span>]] <span class="hljs-comment">//二维数组</span><br>   <span class="hljs-keyword">let</span> arr5 = [<span class="hljs-number">123</span>,<span class="hljs-number">456</span>,[<span class="hljs-number">67</span>,[<span class="hljs-number">56</span>,<span class="hljs-number">67</span>],<span class="hljs-number">89</span>]] <span class="hljs-comment">//三维数组</span><br>   <span class="hljs-keyword">let</span> arr7 = [<span class="hljs-number">123</span>,<span class="hljs-number">456</span>,[<span class="hljs-number">67</span>,[<span class="hljs-number">56</span>,[<span class="hljs-number">565665</span>,[<span class="hljs-number">123123</span>,[<span class="hljs-number">12313</span>,[<span class="hljs-number">213</span>]]]],<span class="hljs-number">67</span>],<span class="hljs-number">89</span>]] <span class="hljs-comment">//三维数组</span><br>   <span class="hljs-keyword">let</span> arr6 = [[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>],[<span class="hljs-number">9</span>,<span class="hljs-number">9</span>]] <span class="hljs-comment">//二维数组</span><br><br>   <span class="hljs-comment">// console.log(arr4.flat(1))</span><br>   <span class="hljs-comment">// console.log(arr5.flat(2))</span><br>   <span class="hljs-comment">// //降低到一维数组</span><br>   <span class="hljs-comment">// console.log(arr7.flat(Infinity))</span><br><br><br>   <span class="hljs-comment">/* </span><br><span class="hljs-comment">       join(str) 方法</span><br><span class="hljs-comment">       作用:将数组以str作为分隔拼接成为一个字符串</span><br><span class="hljs-comment">       不会改变原数组</span><br><span class="hljs-comment">   */</span><br><br>   <span class="hljs-keyword">let</span> arr8 = [<span class="hljs-string">&#x27;你好&#x27;</span>,<span class="hljs-string">&#x27;我好&#x27;</span>,<span class="hljs-string">&#x27;大家好&#x27;</span>]<br>   <span class="hljs-comment">// console.log(arr8.join(&#x27;&#x27;)) //你好我好大家好</span><br>   <span class="hljs-comment">// console.log(arr8.join(&#x27;-&#x27;)) //你好-我好-大家好</span><br><br><br>   <span class="hljs-comment">/* </span><br><span class="hljs-comment">   slice(beginIndex,[,endIndex])</span><br><span class="hljs-comment">   数组切割 从 beginIndex 开始切割到 endIndex 包含起点不包含终点</span><br><span class="hljs-comment">   不会改变原数组</span><br><span class="hljs-comment">   */</span><br>  <br>   <span class="hljs-comment">// console.log(arr8.slice(0,2))</span><br>   <span class="hljs-comment">// console.log(arr8.slice(1,2))</span><br><br>   <span class="hljs-comment">/* </span><br><span class="hljs-comment">       splice(startIndex,deleteCount,[,item1,...item2n])</span><br><span class="hljs-comment">       既可以截取也可以替换还可以用来新增数据</span><br><span class="hljs-comment">       - startIndex 从什么位置开始截取</span><br><span class="hljs-comment">       - deleteCount 截取几位</span><br><span class="hljs-comment">       - item1-itemn 需要替换的数据</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">       会改变原数据</span><br><span class="hljs-comment">       返回值是截取部分的内容</span><br><span class="hljs-comment">   */</span><br><br>   <span class="hljs-keyword">let</span> numArr = [<span class="hljs-number">7</span>,<span class="hljs-number">56</span>,<span class="hljs-number">234</span>,<span class="hljs-number">54</span>,<span class="hljs-number">875</span>,<span class="hljs-number">9</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">354</span>,<span class="hljs-number">7</span>]<br><br>   <span class="hljs-comment">//截取功能</span><br>   <span class="hljs-comment">// console.log(numArr.splice(2,2)) //[234, 54]</span><br><br>   <span class="hljs-comment">//替换 将截取部分的内容换为你传入的替换内容</span><br>   numArr.<span class="hljs-title function_">splice</span>(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;234&#x27;</span>,<span class="hljs-string">&#x27;54&#x27;</span>,<span class="hljs-string">&#x27;78&#x27;</span>) <span class="hljs-comment">// [7, 56, &#x27;234&#x27;, &#x27;54&#x27;, &#x27;78&#x27;, 875, 9, 0, 2, 354, 7]</span><br><br>   <span class="hljs-comment">//添加</span><br>   numArr.<span class="hljs-title function_">splice</span>(<span class="hljs-number">3</span>,<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;你好&#x27;</span>)<br><br><br>   <span class="hljs-comment">// //pop()</span><br>   numArr.<span class="hljs-title function_">splice</span>(numArr.<span class="hljs-property">length</span>-<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<br><br>   <span class="hljs-comment">//shift()</span><br>   numArr.<span class="hljs-title function_">splice</span>(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)<br><br>   <span class="hljs-comment">//unshift()</span><br>   numArr.<span class="hljs-title function_">splice</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;unshift&#x27;</span>)<br><br>   <span class="hljs-comment">//push()</span><br>   numArr.<span class="hljs-title function_">splice</span>(numArr.<span class="hljs-property">length</span>,<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;push&#x27;</span>)<br><br><br>   <span class="hljs-comment">/* </span><br><span class="hljs-comment">       reverse()</span><br><span class="hljs-comment">       翻转数组</span><br><span class="hljs-comment">       123 =&gt; 321</span><br><span class="hljs-comment">       会改变原数组</span><br><span class="hljs-comment">   */</span><br>   <span class="hljs-comment">// console.log(arr8.reverse())</span><br>       <br>   &lt;/script&gt;<br></code></pre></td></tr></table></figure>

<h3 id="数组api2"><a href="#数组api2" class="headerlink" title="数组api2"></a>数组api2</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&lt;script&gt;<br><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    数组遍历高级方法</span><br><span class="hljs-comment">    arr.forEach(callback,thisArg)</span><br><span class="hljs-comment">    callback(item,index,arr) </span><br><span class="hljs-comment">    - 接受一个回调函数作为参数</span><br><span class="hljs-comment">    - 该回调函数的参数分别为 item 表示当前数组的每一项值,index 当前数组值对应的下标, arr 当前遍历的数组</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    thisArg 手动指定 this</span><br><span class="hljs-comment">    默认 thisArg 是undefined</span><br><span class="hljs-comment">    可以手动指定回调函数内部的this</span><br><span class="hljs-comment">    回调函数是普通函数的时候第二个参数才有用</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    foreach没有返回值</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">6</span>,<span class="hljs-number">4</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">45</span>,<span class="hljs-number">66</span>,<span class="hljs-number">789</span>,<span class="hljs-number">46</span>]<br><span class="hljs-keyword">let</span> arr2 = [<span class="hljs-number">999</span>,<span class="hljs-number">888</span>]<br><br><span class="hljs-keyword">let</span> arr3 = [<span class="hljs-string">&#x27;name&#x27;</span>,<span class="hljs-string">&#x27;age&#x27;</span>,<span class="hljs-string">&#x27;sex&#x27;</span>]<br><span class="hljs-keyword">let</span> arr4 = [<span class="hljs-string">&#x27;程力&#x27;</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&#x27;未知&#x27;</span>]<br><span class="hljs-keyword">let</span> obj = &#123;&#125;<br><br><span class="hljs-comment">// arr.forEach((item,index,arr)=&gt;&#123;</span><br><span class="hljs-comment">//     console.log(item)</span><br><span class="hljs-comment">//     // console.log(index,&#x27;值对应的下标&#x27;)</span><br><span class="hljs-comment">//     // console.log(arr,&#x27;当前遍历的数组&#x27;)</span><br><span class="hljs-comment">// &#125;)</span><br><br>arr3.<span class="hljs-title function_">forEach</span>( <span class="hljs-keyword">function</span>(<span class="hljs-params">item,index,arr</span>)&#123;<br>    obj[item] = <span class="hljs-variable language_">this</span>[index]<br>    <span class="hljs-comment">// console.log(index,&#x27;值对应的下标&#x27;)</span><br>    <span class="hljs-comment">// console.log(arr,&#x27;当前遍历的数组&#x27;)</span><br>&#125;,arr4)<br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    map 参数跟foreach一模一样</span><br><span class="hljs-comment">    map的返回值是每个数据都进行一次回调函数处理后的新数组</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">let</span> ageArr = [<span class="hljs-number">23</span>,<span class="hljs-number">5</span>,<span class="hljs-number">45</span>,<span class="hljs-number">78</span>,<span class="hljs-number">12</span>,<span class="hljs-number">8</span>]<br><br><span class="hljs-comment">//期望值将 agearr = &gt; [&#x27;23岁&#x27;,&#x27;5岁&#x27;...]</span><br><span class="hljs-keyword">let</span> newAgeArr = ageArr.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item,index</span>)=&gt;</span>&#123;<br>    <span class="hljs-comment">// return item+&#x27;岁&#x27;</span><br>    <span class="hljs-keyword">return</span> item+<span class="hljs-string">&#x27;岁&#x27;</span><br>&#125;)<br><br><br><br><span class="hljs-comment">//手写一个map</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">myMap</span>(<span class="hljs-params">arr,callback,thisArg</span>)&#123;<br>    <span class="hljs-keyword">let</span> newArr = []<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;<br>        <span class="hljs-keyword">let</span> newItem =  <span class="hljs-title function_">callback</span>(arr[i],i,arr)<br>        newArr.<span class="hljs-title function_">push</span>(newItem)<br>    &#125;<br>    <span class="hljs-keyword">return</span> newArr<br>&#125;<br><span class="hljs-keyword">let</span> newAge =  <span class="hljs-title function_">myMap</span>(ageArr,<span class="hljs-keyword">function</span>(<span class="hljs-params">item,index,arr</span>)&#123;<br>    <span class="hljs-comment">// console.log(item)</span><br>    <span class="hljs-keyword">return</span> item+<span class="hljs-string">&#x27;岁&#x27;</span><br>&#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<h2 id="day18-api下下"><a href="#day18-api下下" class="headerlink" title="day18-api下下"></a>day18-api下下</h2><h3 id="数组api-1"><a href="#数组api-1" class="headerlink" title="数组api"></a>数组api</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">    &lt;script&gt;<br>    <span class="hljs-string">&#x27;use strict&#x27;</span>;<br>    <span class="hljs-comment">/* </span><br><span class="hljs-comment">        filter()传入的参数和foreach一样</span><br><span class="hljs-comment">        返回值是一个新的数组, 这个数组是满足filter回调函数返回值的所有结果组成的一个新数组</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">let</span> ageArr = [<span class="hljs-number">17</span>,<span class="hljs-number">78</span>,<span class="hljs-number">45</span>,<span class="hljs-number">67</span>,<span class="hljs-number">12</span>,,<span class="hljs-string">&#x27;123&#x27;</span>,<span class="hljs-string">&#x27;465&#x27;</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">69</span>,<span class="hljs-number">55</span>,<span class="hljs-number">8</span>,<span class="hljs-number">0</span>]<br>   <span class="hljs-comment">//删选出小于18岁的用户年龄</span><br><br><br>   <span class="hljs-comment">//原生写法</span><br><span class="hljs-comment">//    let arr = []</span><br><span class="hljs-comment">//    for (let index = 0; index &lt; ageArr.length; index++) &#123;</span><br><span class="hljs-comment">//         const element = ageArr[index];</span><br><span class="hljs-comment">//         if(element &lt; 18)&#123;</span><br><span class="hljs-comment">//             arr.push(element)</span><br><span class="hljs-comment">//         &#125;</span><br><span class="hljs-comment">//    &#125;</span><br><br><br>    <span class="hljs-comment">//高级方法</span><br>    <span class="hljs-keyword">let</span> newArr =  ageArr.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">item</span>=&gt;</span>&#123;<br>        <span class="hljs-comment">//return 一定还要返回一个表达式,如果表达式成立就会将这个值作为新数组的一项返回出去</span><br>        <span class="hljs-comment">// return item &lt; 18 //返回item小于18的值,组成一个新的数组</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">typeof</span> item === <span class="hljs-string">&#x27;string&#x27;</span><br>    &#125;)<br><br><br>    <span class="hljs-comment">//手写一个myFilter</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">myFilter</span>(<span class="hljs-params">arr,callback,thisArg</span>)&#123;<br><br>        <span class="hljs-keyword">let</span> newArr = [] <span class="hljs-comment">//新数组</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;<br><br>            <span class="hljs-keyword">let</span> bol =  <span class="hljs-title function_">callback</span>(arr[i],i,arr)<br><br>            bol &amp;&amp; newArr.<span class="hljs-title function_">push</span>(arr[i]) <span class="hljs-comment">//item满足条件就添加</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> newArr<br>    &#125;<br><br>    <span class="hljs-keyword">let</span> arrNew = <span class="hljs-title function_">myFilter</span>(ageArr,<span class="hljs-function"><span class="hljs-params">item</span>=&gt;</span>&#123;<br>        <span class="hljs-keyword">return</span>  <span class="hljs-keyword">typeof</span> item === <span class="hljs-string">&#x27;string&#x27;</span><br>    &#125;)<br><br><br><br>    <span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;张三|男|李四|女|王五|男|赵六|女|田七|女&quot;</span><br><br>    <span class="hljs-comment">//首先考虑改为数组处理</span><br>    <span class="hljs-comment">//过滤出所有用户名</span><br>    <span class="hljs-keyword">let</span> strArr = str.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;|&#x27;</span>).<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">item,index</span>)=&gt;</span>&#123;<br>        <span class="hljs-comment">// return item.length &gt; 1</span><br>        <span class="hljs-keyword">return</span> index % <span class="hljs-number">2</span> == <span class="hljs-number">0</span><br>    &#125;)<br><br><br>    <span class="hljs-comment">/* </span><br><span class="hljs-comment">        reduce(callback,Initialvalue) 归并</span><br><span class="hljs-comment">        callback(acc,curr,index,arr)</span><br><span class="hljs-comment">        - acc 初始值</span><br><span class="hljs-comment">        - curr 当前值</span><br><span class="hljs-comment">        - index 当前值的下标</span><br><span class="hljs-comment">        - arr 当前遍历的数组</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        Initialvalue 初始值</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        返回值是最终归并后的结果 也就是acc的值</span><br><span class="hljs-comment">    */</span><br><br>    <span class="hljs-keyword">let</span> numArr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br><br>    <span class="hljs-comment">//计算数组中所有数值的和</span><br>    <span class="hljs-comment">//原生的写法</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">renduce</span>(<span class="hljs-params">arr</span>)&#123;<br>        <span class="hljs-keyword">let</span>  result = <span class="hljs-number">0</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> vlaue <span class="hljs-keyword">of</span> arr) &#123;<br>            result += vlaue<br>        &#125;<br>        <span class="hljs-keyword">return</span> result<br>    &#125;<br>    <span class="hljs-title function_">renduce</span>(numArr)<br>    <br><br>    <span class="hljs-comment">//reduce 写法</span><br>    <span class="hljs-keyword">let</span> sum =  numArr.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">acc,curr,indx,arr</span>)=&gt;</span>&#123;<br>        <br>        <span class="hljs-keyword">return</span> acc + curr<br>    &#125;,<span class="hljs-number">0</span>)<br><br><br><br><br><br>    <span class="hljs-comment">//原理</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">myReduce</span>(<span class="hljs-params">aThis,callback,Initialvalue</span>)&#123;<span class="hljs-comment">//1</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; aThis.<span class="hljs-property">length</span>; i++) &#123;<br>            <br>            <span class="hljs-title class_">Initialvalue</span> =  <span class="hljs-title function_">callback</span>(<span class="hljs-title class_">Initialvalue</span>,aThis[i],i)<br><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">let</span> result =  <span class="hljs-title function_">myReduce</span>(numArr,<span class="hljs-function">(<span class="hljs-params">acc,curr,indx,arr</span>)=&gt;</span>&#123;<br><br>        <span class="hljs-keyword">return</span> acc + curr<br>    &#125;,<span class="hljs-number">0</span>)<br><br><br><br>    <span class="hljs-keyword">let</span> url = <span class="hljs-string">&#x27;https://www.baidu.com?name=afei&amp;age=18&amp;sex=nan&#x27;</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">parseUrl</span>(<span class="hljs-params">urlStr</span>)&#123;<br>        <span class="hljs-keyword">return</span> urlStr.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;?&#x27;</span>)[<span class="hljs-number">1</span>].<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&amp;&#x27;</span>).<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">acc,curr</span>)=&gt;</span>&#123;<br>            <span class="hljs-keyword">let</span> paramArr = curr.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;=&#x27;</span>)<br>            acc[paramArr[<span class="hljs-number">0</span>]] = paramArr[<span class="hljs-number">1</span>]<br>            <span class="hljs-keyword">return</span> acc<br>        &#125;,&#123;&#125;)<br>    &#125;<br>    <span class="hljs-comment">// console.log(parseUrl(url))</span><br><br><br>    <span class="hljs-comment">/* </span><br><span class="hljs-comment">        some() 参数和foreach一样</span><br><span class="hljs-comment">        返回值: 数组中至少有一个元素通过some回调函数返回值的测试,就返回true,否则返回false</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        检测数组中有没有满足条件(回调函数的返回值)的值,有一个满足就返回true</span><br><span class="hljs-comment">    */</span><br><br>    <span class="hljs-comment">//检测数组中有没有值大于18</span><br>    <span class="hljs-keyword">let</span> res =  [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">546</span>,<span class="hljs-number">657</span>,<span class="hljs-number">34</span>,<span class="hljs-number">2</span>].<span class="hljs-title function_">some</span>(<span class="hljs-function"><span class="hljs-params">item</span>=&gt;</span>&#123;<br>        <span class="hljs-keyword">return</span> item &gt; <span class="hljs-number">18</span> <span class="hljs-comment">//返回条件,如果有元素满足这个条件就返回true</span><br>    &#125;)<br><br>    <span class="hljs-comment">/* </span><br><span class="hljs-comment">        every() 写法和some一模一样,区别在于some是只要有一个满足条件就返回true</span><br><span class="hljs-comment">        every是必须每个元素都满足条件才会返回ture</span><br><span class="hljs-comment">    */</span><br><br>    <span class="hljs-keyword">let</span> res1 =  [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">546</span>,<span class="hljs-number">657</span>,<span class="hljs-number">34</span>,<span class="hljs-number">2</span>].<span class="hljs-title function_">every</span>(<span class="hljs-function"><span class="hljs-params">item</span>=&gt;</span>&#123;<br>        <span class="hljs-keyword">return</span> item &gt; <span class="hljs-number">0</span> <span class="hljs-comment">//如果每个元素的值都大于0就返回true</span><br>    &#125;)<br><br>    <span class="hljs-comment">/* </span><br><span class="hljs-comment">        find 和 findIndex</span><br><span class="hljs-comment">        find() 跟some 很像,区别在于他返回的值是满足条件的第一个值,没有满足条件的值返回 undefined </span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        findIndex() 跟find功能一样,但是返回的值是满足调价你的第一个值的下标</span><br><span class="hljs-comment">    */</span><br><br><br>    <span class="hljs-keyword">let</span> res2 =  [<span class="hljs-number">34</span>,<span class="hljs-number">456</span>,<span class="hljs-number">456</span>,<span class="hljs-number">34</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>].<span class="hljs-title function_">find</span>(<span class="hljs-function"><span class="hljs-params">item</span>=&gt;</span>&#123;<br>        <span class="hljs-keyword">return</span> item &gt; <span class="hljs-number">300</span><span class="hljs-comment">//返回第一个满足条件的值</span><br>    &#125;)<br><br>    <span class="hljs-keyword">let</span> res3 =  [<span class="hljs-number">34</span>,<span class="hljs-number">456</span>,<span class="hljs-number">456</span>,<span class="hljs-number">34</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>].<span class="hljs-title function_">findIndex</span>(<span class="hljs-function"><span class="hljs-params">item</span>=&gt;</span>&#123;<br>        <span class="hljs-keyword">return</span> item &gt; <span class="hljs-number">300</span><span class="hljs-comment">//返回第一个满足条件的下标</span><br>    &#125;)<br>    &lt;/script&gt;<br></code></pre></td></tr></table></figure>

<h3 id="数组api-2"><a href="#数组api-2" class="headerlink" title="数组api"></a>数组api</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>    <span class="hljs-string">&#x27;use strict&#x27;</span>;<br>    <span class="hljs-comment">/* </span><br><span class="hljs-comment">        [1,2,3,4,5].reverse() 数组翻转</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        会改变原数组</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-comment">// let arr = [1,2,3,4,5]</span><br>    <span class="hljs-comment">// arr.reverse()</span><br><br><br>    <span class="hljs-comment">/* </span><br><span class="hljs-comment">        sort(callback) 数组排序</span><br><span class="hljs-comment">        callback(a,b) </span><br><span class="hljs-comment">        a 表示第一个用于比较的值</span><br><span class="hljs-comment">        b 表示第二个用于比较的值</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        calllback 返回值 为 a - b 那就是升序排列</span><br><span class="hljs-comment">                返回值 b - a 那就是降序排列</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        根据callback 返回值决定第一个比较的值和第二个比较的值是否需要更换位置 如果 小于0不更换位置, 大于0互换位置</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        会改变原数组</span><br><span class="hljs-comment">    */</span><br><br>    <span class="hljs-keyword">let</span> arr = [<span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>]<br><br>    <span class="hljs-comment">// arr.sort((a,b)=&gt;&#123;</span><br>    <span class="hljs-comment">//     // return a - b //升序排列</span><br>    <span class="hljs-comment">//     return b - a //降序排列</span><br>    <span class="hljs-comment">// &#125;)</span><br><br>    <span class="hljs-comment">//冒泡排序</span><br>    <span class="hljs-comment">/* </span><br><span class="hljs-comment">        实现的逻辑</span><br><span class="hljs-comment">        1. 让数组的每一个数据与他的后方一个数据进行比较</span><br><span class="hljs-comment">            - 用循环让他们进行一次对比</span><br><span class="hljs-comment">            - 判断当前项和下一项的大小关系</span><br><span class="hljs-comment">        2. 如果当前数据大于后面的数据那就互换位置</span><br><span class="hljs-comment">            - 如果当前值大于后面的值需要借助中间变量进行值的交换</span><br><span class="hljs-comment">            - 循环为每一个数据进行比较</span><br><span class="hljs-comment">    */</span><br><br>    <span class="hljs-keyword">let</span> temp = <span class="hljs-literal">null</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>; index &lt; arr.<span class="hljs-property">length</span>; index++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span> - index; i++) &#123;<br>            <span class="hljs-keyword">if</span> (arr[i] &gt; arr[i + <span class="hljs-number">1</span>]) &#123;<br>                <span class="hljs-comment">//当前项大于后面的值</span><br>                <span class="hljs-comment">//互换位置</span><br>                <span class="hljs-comment">//借助一个中间变量临时存储一个值</span><br>                temp = arr[i]<br>                arr[i] = arr[i + <span class="hljs-number">1</span>]<br>                arr[i + <span class="hljs-number">1</span>] = temp<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<h2 id="day19-api下下下"><a href="#day19-api下下下" class="headerlink" title="day19-api下下下"></a>day19-api下下下</h2><h3 id="对象api"><a href="#对象api" class="headerlink" title="对象api"></a>对象api</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">    &lt;script&gt;<br>    <span class="hljs-string">&#x27;use strict&#x27;</span>;<br>    <span class="hljs-comment">/* </span><br><span class="hljs-comment">        对象就是一系列无序的属性和方法的集合</span><br><span class="hljs-comment">    */</span><br>    <br>    <span class="hljs-comment">//1. 字面量</span><br>    <span class="hljs-keyword">let</span> myCat = &#123;<br>        <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;无限&#x27;</span>,<br>        <span class="hljs-attr">color</span>:<span class="hljs-string">&#x27;black&#x27;</span>,<br>        <span class="hljs-attr">speak</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;喵喵喵&#x27;</span>)<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//2. 通过原生构造函数创建一个对象</span><br>    <span class="hljs-keyword">let</span> xuxingCat = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>()<br>    xuxingCat.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;嘻嘻&#x27;</span><br>    xuxingCat.<span class="hljs-property">color</span> = <span class="hljs-string">&#x27;red&#x27;</span><br>    xuxingCat.<span class="hljs-property">speak</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;喵喵喵&#x27;</span>)<br>    &#125;<br><br>    <span class="hljs-comment">//3. 工厂函数</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">createCat</span>(<span class="hljs-params">name,color</span>)&#123;<br>        <span class="hljs-keyword">let</span> xuxingCat = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>()<br>        xuxingCat.<span class="hljs-property">name</span> = name<br>        xuxingCat.<span class="hljs-property">color</span> = color<br>        xuxingCat.<span class="hljs-property">speak</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;喵喵喵&#x27;</span>)<br>        &#125;<br>        <span class="hljs-keyword">return</span> xuxingCat<br>    &#125;<br><br>    <span class="hljs-keyword">let</span> jiuweiCat = <span class="hljs-title function_">createCat</span>(<span class="hljs-string">&#x27;jiujiu&#x27;</span>,<span class="hljs-string">&#x27;blue&#x27;</span>)<br><br>    <span class="hljs-comment">//4. 构造函数创建对象</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">Cat</span>(<span class="hljs-params">name,color</span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">color</span> = color<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">speak</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;喵喵喵&#x27;</span>)<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">let</span> zhuqueCat = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>(<span class="hljs-string">&#x27;miaomiao&#x27;</span>,<span class="hljs-string">&#x27;pink&#x27;</span>)<br><br>    <span class="hljs-comment">//instanceof 关键词用于检测该对象是属于哪个构造函数创建的</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(zhuqueCat <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">String</span> ) <span class="hljs-comment">//false</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(zhuqueCat <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Cat</span> ) <span class="hljs-comment">//true</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(zhuqueCat <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span> ) <span class="hljs-comment">//true</span><br><br>    <span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;123&#x27;</span><br>    <span class="hljs-keyword">let</span> ssttrr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&#x27;adsfafds&#x27;</span>)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">String</span>) <span class="hljs-comment">// false</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ssttrr <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">String</span>) <span class="hljs-comment">// false</span><br><br>    <span class="hljs-comment">/* </span><br><span class="hljs-comment">    hasOwnProperty(prop)</span><br><span class="hljs-comment">    obj.hasOwnProperty(prop) 作用是检测属性prop是否在obj对象中</span><br><span class="hljs-comment">    */</span><br><br>    <span class="hljs-keyword">let</span> obj = &#123;<br>        name : <span class="hljs-string">&#x27;xuixing&#x27;</span>,<br>        age : <span class="hljs-number">18</span><br>    &#125;<br>    <br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-property">sex</span>)<br>    <span class="hljs-comment">// console.log(obj.__proto__)</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-title function_">hasOwnProperty</span>(<span class="hljs-string">&#x27;sex&#x27;</span>)) <span class="hljs-comment">//fasle</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-title function_">hasOwnProperty</span>(<span class="hljs-string">&#x27;age&#x27;</span>)) <span class="hljs-comment">//true</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-title function_">hasOwnProperty</span>(<span class="hljs-string">&#x27;__proto__&#x27;</span>)) <span class="hljs-comment">//true</span><br><br><br>    <span class="hljs-comment">/* </span><br><span class="hljs-comment">        in 操作符</span><br><span class="hljs-comment">        语法 prop in obj</span><br><span class="hljs-comment">        检测prop属性(包含原型上看不到的属性)是否存在于obj对象中</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;__proto__&#x27;</span> <span class="hljs-keyword">in</span> obj) <span class="hljs-comment">//true</span><br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;toLocaleString&#x27;</span> <span class="hljs-keyword">in</span> obj) <span class="hljs-comment">// true</span><br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;hasOwnProperty&#x27;</span> <span class="hljs-keyword">in</span> obj) <span class="hljs-comment">// true</span><br><br><br>   <span class="hljs-comment">/* </span><br><span class="hljs-comment">        assgin(obj1,obj2,obj3) 方法 </span><br><span class="hljs-comment">        作用将 多个对象合并到第一个参数的对象身上</span><br><span class="hljs-comment">   */</span><br><br>   <span class="hljs-keyword">let</span> a = &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;a&#x27;</span>&#125;<br>   <span class="hljs-keyword">let</span> b = &#123;<span class="hljs-attr">age</span>:<span class="hljs-string">&#x27;12&#x27;</span>&#125;<br>   <span class="hljs-keyword">let</span> c = &#123;<span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;nan&#x27;</span>&#125;<br><br><span class="hljs-comment">//    console.log(Object.assign(a,b,c))//&#123;name: &#x27;a&#x27;, age: &#x27;12&#x27;, sex: &#x27;nan&#x27;&#125; a对象也被修改了</span><br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(&#123;&#125;,a,b,c))<span class="hljs-comment">//&#123;name: &#x27;a&#x27;, age: &#x27;12&#x27;, sex: &#x27;nan&#x27;&#125; a对象也被修改了</span><br>        <br>    &lt;/script&gt;<br></code></pre></td></tr></table></figure>

<h3 id="对象api-1"><a href="#对象api-1" class="headerlink" title="对象api"></a>对象api</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&lt;script&gt;<br><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    Object.is(value1,value2)</span><br><span class="hljs-comment">    作用 : 用于做值的比较,比较value1和value2是不是同一个值</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// console.log(&#x27;123&#x27; == 123)</span><br><span class="hljs-comment">// console.log(Object.is(&#x27;123&#x27;,123))//false</span><br><span class="hljs-comment">// console.log(Object.is(0,false))//false</span><br><br><span class="hljs-comment">// console.log(Object.is(NaN,NaN))//true</span><br><span class="hljs-comment">// console.log(Object.is(NaN,123-&#x27;asdf&#x27;))//true</span><br><br><span class="hljs-comment">// console.log(undefined == null)//true</span><br><span class="hljs-comment">// console.log(Object.is(undefined,null))//false</span><br><br><span class="hljs-comment">// console.log(-0 == +0)//true</span><br><span class="hljs-comment">// console.log(-0 === +0) //true</span><br><span class="hljs-comment">// console.log(Object.is(-0,+0)) //false</span><br><br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    Object.keys(obj)</span><br><span class="hljs-comment">    作用将对象中的所有属性名抽离出来返回一个数组</span><br><span class="hljs-comment">*/</span><br>   <br><span class="hljs-keyword">let</span> obj = &#123;<br>    name : <span class="hljs-string">&#x27;xuxing&#x27;</span>,<br>    age : <span class="hljs-number">19</span>,<br>    sex : <span class="hljs-string">&#x27;男&#x27;</span>,<br>    like : [<span class="hljs-string">&#x27;唱歌&#x27;</span>,<span class="hljs-string">&#x27;跳舞&#x27;</span>,<span class="hljs-string">&#x27;rap&#x27;</span>,<span class="hljs-string">&#x27;打篮球&#x27;</span>]<br>&#125;<br><br><span class="hljs-keyword">let</span> objKeyArr = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(obj)<br><br>objKeyArr.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">item</span>=&gt;</span>&#123;<br>    <span class="hljs-comment">// console.log(obj[item])</span><br>&#125;)<br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    Object.values()</span><br><span class="hljs-comment">    作用将对象中的所有属性值抽离出来返回一个数组</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">let</span> objValueArr = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">values</span>(obj)<br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    Object.entries(obj)</span><br><span class="hljs-comment">    作用:将obj对象的属性名和属性值组合成一个数组,最终返回一个二维数组</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">let</span> entries = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(obj)<br><br>entries.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">item</span>=&gt;</span>&#123;<br>    <span class="hljs-comment">// console.log(item[0],item[1])</span><br>&#125;)<br><br><br><br><br><span class="hljs-keyword">let</span> data = &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;afei&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-string">&quot;18&quot;</span>,<span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;nan&#x27;</span>&#125;<br><br><span class="hljs-comment">//地址栏优化</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">disUrl</span>(<span class="hljs-params">data</span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(data).<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">item</span>=&gt;</span>item.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;=&#x27;</span>)).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&amp;&#x27;</span>)<br>&#125;<br><br><span class="hljs-title function_">disUrl</span>(data)<br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    Object.freeze(obj)</span><br><span class="hljs-comment">    作用:用于将obj对象进行冻结,冻结以后的对象不可以再进行任何的修改</span><br><span class="hljs-comment">    返回值就是冻结后的对象</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">freeze</span>(data)<br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    Object.isFrozen(obj)</span><br><span class="hljs-comment">    检测对象是否是冻结的对象</span><br><span class="hljs-comment">    返回值布尔值,true表示已经被冻结</span><br><span class="hljs-comment">*/</span><br>   <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">isFrozen</span>(data)) <span class="hljs-comment">// treu</span><br><br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    obj.valueOf()</span><br><span class="hljs-comment">    方法会返回指定对象的原始值</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-literal">false</span>]<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-title function_">valueOf</span>()) <span class="hljs-comment">// [1, &#x27;2&#x27;, false]</span><br><br><span class="hljs-keyword">let</span> date = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">2013</span>,<span class="hljs-number">10</span>,<span class="hljs-number">1</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(date.<span class="hljs-title function_">valueOf</span>()) <span class="hljs-comment">// 1383235200000</span><br>    <br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<h3 id="json对象"><a href="#json对象" class="headerlink" title="json对象"></a>json对象</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>    <span class="hljs-string">&#x27;use strict&#x27;</span>;<br>    <span class="hljs-comment">/* </span><br><span class="hljs-comment">        JSON 对象,表示对象的通用格式,(对象的标准写法)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        总结, JSON 就是对象的标准版写法,用于不同语言的数据传输</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        josn对象的写法</span><br><span class="hljs-comment">        对象的属性名必须是一个字符串</span><br><span class="hljs-comment">        例如 &quot;name&quot; : &quot;xuxing&quot;</span><br><span class="hljs-comment">        每个数据之间必须有逗号隔开</span><br><span class="hljs-comment">        使用大括号保存对象,对象可以包含若干数据</span><br><span class="hljs-comment">        使用方括号保存数组, 数组用,进行分割</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        JONS的方法</span><br><span class="hljs-comment">        JSON.stringfy()将对象转换为 JSON 字符串</span><br><span class="hljs-comment">        JSON.pares() 将JSON格式的字符串转换为普通对象</span><br><span class="hljs-comment">        </span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        JSON格式支持的数据类型</span><br><span class="hljs-comment">        - Object &#123;&#125;</span><br><span class="hljs-comment">        - Arrays []</span><br><span class="hljs-comment">        - 原始类型</span><br><span class="hljs-comment">            string</span><br><span class="hljs-comment">            number</span><br><span class="hljs-comment">            boolean</span><br><span class="hljs-comment">            null</span><br><span class="hljs-comment">    */</span><br><br>    <span class="hljs-keyword">let</span> data = &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;afei&quot;</span>, <br>        <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>, <br>        <span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;nan&#x27;</span>, <br>        eat : &#123;<br>            xixi : <span class="hljs-string">&#x27;苹果&#x27;</span><br>        &#125;,<br>        marry : <span class="hljs-literal">undefined</span>,<br>        <span class="hljs-title function_">say</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;xixixi&#x27;</span>)<br>        &#125;, <br>        <span class="hljs-attr">like</span>: [<span class="hljs-string">&#x27;唱歌&#x27;</span>,<span class="hljs-string">&#x27;跳&#x27;</span>],<br>        <span class="hljs-title class_">Symbol</span> : <span class="hljs-title class_">Symbol</span>()<br>    &#125;<br><br>    <span class="hljs-keyword">let</span> dataJSON = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data)<br><br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(dataJSON))<br><br>    <span class="hljs-comment">//循环引用无法转换JOSN格式</span><br>    <span class="hljs-keyword">let</span> user = &#123;<br>        name : <span class="hljs-string">&#x27;afei&#x27;</span><br>    &#125;<br><br>    <span class="hljs-keyword">let</span> admin = &#123;<br>        jiuwei : &#123;<br>            name : <span class="hljs-string">&#x27;jiuwei&#x27;</span><br>            ,age : <span class="hljs-number">19</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//建立循环引用</span><br>    admin.<span class="hljs-property">afei</span> = user<br>    user.<span class="hljs-property">jiuwei</span> = admin<br><br>    <span class="hljs-comment">// console.log(JSON.stringify(admin)) //报错</span><br><br><br>    <span class="hljs-comment">//数组去重</span><br>    <span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,,<span class="hljs-title class_">NaN</span>,<span class="hljs-number">3</span>,<span class="hljs-title class_">NaN</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,&#123;<span class="hljs-attr">a</span>:<span class="hljs-number">1</span>&#125;,&#123;<span class="hljs-attr">a</span>:<span class="hljs-number">1</span>&#125;]<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">unique</span>(<span class="hljs-params">arr</span>)&#123;<br>        <span class="hljs-keyword">let</span> newArr = []<br>        <span class="hljs-keyword">let</span> tempARr = []<span class="hljs-comment">//存储json格式的数据</span><br>        arr.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">element</span> =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span>(!newArr.<span class="hljs-title function_">includes</span>(element))&#123;<br>                <span class="hljs-keyword">if</span>(!tempARr.<span class="hljs-title function_">includes</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(element)))&#123;<br>                    newArr.<span class="hljs-title function_">push</span>(element)<span class="hljs-comment">//真实数据添加到newArr</span><br>                    tempARr.<span class="hljs-title function_">push</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(element))<span class="hljs-comment">//存储json字符串格式的数据</span><br>                &#125;<br>            &#125;<br>        &#125;);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newArr)<br>    &#125;<br><br>    <span class="hljs-title function_">unique</span>(arr)<br><br><br><br>    <span class="hljs-comment">//数组去重</span><br>    <span class="hljs-keyword">let</span> newARr = arr.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">item,index</span>)=&gt;</span>&#123;<br>        <span class="hljs-keyword">return</span> arr.<span class="hljs-title function_">indexOf</span>(item) === index<span class="hljs-comment">// 当前遍历的下标和他在数组中第一次出现的下标相同,我就保留</span><br>    &#125;)<br><br><br>    <span class="hljs-comment">//去重2</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">uniq</span>(<span class="hljs-params">arr</span>)&#123;<br>        <span class="hljs-keyword">return</span> arr.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">acc,curr</span>)=&gt;</span>&#123;<br>            acc.<span class="hljs-title function_">some</span>(<span class="hljs-function"><span class="hljs-params">item</span>=&gt;</span><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">is</span>(item,curr))?<span class="hljs-attr">acc</span>:acc.<span class="hljs-title function_">push</span>(curr)<br>            <span class="hljs-keyword">return</span> acc<span class="hljs-comment">//[]</span><br>        &#125;,[])<br>    &#125;<br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">uniq</span>(arr))<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<h2 id="day20-内置对象"><a href="#day20-内置对象" class="headerlink" title="day20-内置对象"></a>day20-内置对象</h2><h3 id="数学对象"><a href="#数学对象" class="headerlink" title="数学对象"></a>数学对象</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&lt;script&gt;<br><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br>    <span class="hljs-comment">/* </span><br><span class="hljs-comment">        Math 数学对象</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        Math 对象下存储了一些列处理数学计算的一些方法和一些常用的数学特殊值</span><br><span class="hljs-comment">    */</span><br><br>    <span class="hljs-comment">//静态方法</span><br>    <span class="hljs-title class_">Math</span>.<span class="hljs-property">E</span>  <span class="hljs-comment">//属性表示自然对数的底数（或称为基数），e，约等于 2.718。</span><br>    <span class="hljs-title class_">Math</span>.<span class="hljs-property">LN10</span> <span class="hljs-comment">//属性表示 10 的自然对数，约为 2.302：</span><br>    <span class="hljs-title class_">Math</span>.<span class="hljs-property">LN2</span> <span class="hljs-comment">// 属性表示 2 的自然对数，约为 0.693：</span><br>    <span class="hljs-title class_">Math</span>.<span class="hljs-property">LOG10E</span> <span class="hljs-comment">//属性表示以 10 为底数，e 的对数，约为 0.434：</span><br>    <span class="hljs-title class_">Math</span>.<span class="hljs-property">LOG2E</span> <span class="hljs-comment">//属性表示以 2 为底数，e 的对数，约为 1.442：</span><br>    <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> <span class="hljs-comment">//表示一个圆的周长与直径的比例，约为 3.14159：</span><br>    <span class="hljs-title class_">Math</span>.<span class="hljs-property">SQRT1_2</span> <span class="hljs-comment">// 属性表示 1/2 的平方根，约为 0.707：</span><br>    <span class="hljs-title class_">Math</span>.<span class="hljs-property">SQRT2</span> <span class="hljs-comment">//属性表示 2 的平方根，约为 1.414：</span><br><br>    <span class="hljs-comment">//数学方法</span><br>    <span class="hljs-comment">//Math.abs(num) 用于取一个数值的绝对值</span><br>    <span class="hljs-comment">// console.log(Math.abs(1)) //1</span><br>    <span class="hljs-comment">// console.log(Math.abs(-10)) // 10</span><br>    <span class="hljs-comment">// console.log(Math.abs(null))//0</span><br>    <span class="hljs-comment">// console.log(Math.abs(&#x27;abc&#x27;))//NaN</span><br>    <span class="hljs-comment">// console.log(Math.abs(&#x27;-123&#x27;))//123</span><br>    <span class="hljs-comment">// console.log(Math.abs(&#x27;-123abc&#x27;))//NaN</span><br><br>    <span class="hljs-comment">/* </span><br><span class="hljs-comment">        Math.cos(x) 余弦值</span><br><span class="hljs-comment">        Math.sin(x) 正弦值</span><br><span class="hljs-comment">        Math.tan(x) 正切值</span><br><span class="hljs-comment">        </span><br><span class="hljs-comment">        x 参数需要传入一个弧度值</span><br><span class="hljs-comment">        返回值就是 -1 - 1 之间的数值 ,单位弧度</span><br><span class="hljs-comment">    */</span><br><br>    <span class="hljs-comment">// console.log(Math.cos(1)) //0.5403023058681398</span><br>    <span class="hljs-comment">// console.log(Math.sin(1)) //0.8414709848078965</span><br>    <span class="hljs-comment">// console.log(Math.tan(0.5)) //0.5463024898437905</span><br><br><br>    <span class="hljs-comment">/* </span><br><span class="hljs-comment">        Math.pow(base,exp)</span><br><span class="hljs-comment">        函数返回bae的exp次幂的结果</span><br><span class="hljs-comment">    */</span><br><br>    <span class="hljs-comment">// console.log(Math.pow(2,3))//8</span><br>    <span class="hljs-comment">// console.log(Math.pow(10,3))//1000\</span><br><br><br>    <span class="hljs-comment">/* </span><br><span class="hljs-comment">        Math.sqrt(x) 平方根 开方</span><br><span class="hljs-comment">        函数返回一个数的平方根的结果 ,  a*a + b*b = Math.sqrt(a*a + b*b ) </span><br><span class="hljs-comment">    */</span><br><br>    <span class="hljs-comment">// console.log(Math.sqrt(9)) //3</span><br>    <span class="hljs-comment">// console.log(Math.sqrt(1)) //1</span><br><br><br>    <span class="hljs-comment">//勾股定理</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">calcGouGu</span>(<span class="hljs-params">a,b</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sqrt</span>((a*a)+(b*b))<br>    &#125;<br><br>    <span class="hljs-comment">// console.log(calcGouGu(5,12)) //13</span><br>    <span class="hljs-comment">// console.log(calcGouGu(5,5)) //7.0710678118654755</span><br><br><br>    <span class="hljs-comment">/* </span><br><span class="hljs-comment">        Math.floor() 向下取整数</span><br><span class="hljs-comment">        Math.ceil() 向上取整</span><br><span class="hljs-comment">        Math.round() 四舍五入</span><br><span class="hljs-comment">    */</span><br><br>    <span class="hljs-comment">// console.log(Math.floor(3.5))//3</span><br>    <span class="hljs-comment">// console.log(Math.floor(3.6))//3</span><br>    <span class="hljs-comment">// console.log(Math.floor(-3.5))//-4</span><br>    <span class="hljs-comment">// console.log(Math.ceil(2.4))//3</span><br>    <span class="hljs-comment">// console.log(Math.ceil(-2.9))//-2</span><br><br>    <span class="hljs-comment">// console.log(Math.round(3.5))//4</span><br>    <span class="hljs-comment">// console.log(Math.round(3.3))//3</span><br>    <span class="hljs-comment">// console.log(Math.round(3.4))//3</span><br>    <span class="hljs-comment">// console.log(Math.round(-3.4))//-3</span><br>    <span class="hljs-comment">// console.log(Math.round(-3.6))//-4</span><br><br><br><br>    <span class="hljs-comment">/* </span><br><span class="hljs-comment">        Math.max(p1,p2....pn)</span><br><span class="hljs-comment">        Math.min(p1,p2....pn)</span><br><span class="hljs-comment">        获取最大值和最小值</span><br><span class="hljs-comment">        返回值是传入的所有值里面的最大值或者最小值</span><br><span class="hljs-comment">    */</span><br><br>    <span class="hljs-comment">// console.log(Math.max(1,2,3,46,65,2))</span><br>    <span class="hljs-comment">// console.log(Math.min(1,2,3,46,65,2))</span><br>    <span class="hljs-comment">// let xxx = 100</span><br>    <span class="hljs-comment">// console.log(Math.min(xxx,200))</span><br><br><br>    <span class="hljs-comment">// let age = [12,45,34,78,3,5,67]</span><br>    <span class="hljs-comment">// console.log(Math.max(age[0],age[1]))</span><br>    <span class="hljs-comment">// console.log(Math.max(...age))//78</span><br><br><br>    <span class="hljs-comment">/* </span><br><span class="hljs-comment">        Math.random() 随机数</span><br><span class="hljs-comment">        方法会返回一个小数,该小数产生的范围是0-1之间随机产生一个小数值,</span><br><span class="hljs-comment">        包含0 但是不包含1</span><br><span class="hljs-comment">    */</span><br><br>    <span class="hljs-keyword">let</span> nameArr = [<span class="hljs-string">&#x27;林晨曦&#x27;</span>,<span class="hljs-string">&#x27;缇按&#x27;</span>,<span class="hljs-string">&#x27;汤子星&#x27;</span>,<span class="hljs-string">&#x27;王旭&#x27;</span>,<span class="hljs-string">&#x27;刘学云&#x27;</span>,<span class="hljs-string">&#x27;张辉&#x27;</span>,<span class="hljs-string">&#x27;快乐的小数&#x27;</span>,<span class="hljs-string">&#x27;徐星&#x27;</span>]<br><br>    <span class="hljs-comment">//需要随机生成一个 0 - 6之间的整数</span><br>    <span class="hljs-comment">// let  index =  parseInt(Math.random()*7)</span><br>    <span class="hljs-comment">// let  index =  parseInt(Math.random()*nameArr.length)</span><br>    <span class="hljs-comment">// console.log(nameArr[index])</span><br><br><br>    <span class="hljs-comment">//生成一个范围的随机值  5-10 之间的随机值  (10 - 5+1)</span><br>    <span class="hljs-keyword">let</span>  index =  <span class="hljs-built_in">parseInt</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()*<span class="hljs-number">6</span>+<span class="hljs-number">5</span>)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(index)<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">getRandomInt</span>(<span class="hljs-params">min,max</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">parseInt</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()*(max-min+<span class="hljs-number">1</span>)+min)<br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">getRandomInt</span>(<span class="hljs-number">200</span>,<span class="hljs-number">205</span>))<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(nameArr[<span class="hljs-title function_">getRandomInt</span>(<span class="hljs-number">3</span>,<span class="hljs-number">7</span>)])<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<h3 id="日期对象"><a href="#日期对象" class="headerlink" title="日期对象"></a>日期对象</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&lt;script&gt;<br><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    Date对象</span><br><span class="hljs-comment">    创建一个日期时间, Date对象获取到的时间是基于1970年1月1日到至今的毫秒数,又称为世界标准时间,协调世界时间</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//创建和获取时间</span><br><span class="hljs-keyword">let</span> dateNow = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()<span class="hljs-comment">//获取当前计算机时间</span><br><br><span class="hljs-comment">//手动设置一个时间</span><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    设置时间的参数</span><br><span class="hljs-comment">    - new Date(年,月,日,时,分,秒) 不传递的参数默认是0 </span><br><span class="hljs-comment">    通过参数设置的月份会比原来更大1 ,因为时间的月份是从0开始计算的</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    - 通过日期对象能识别的字符串格式传递 </span><br><span class="hljs-comment">        - 年-月-日</span><br><span class="hljs-comment">        - 年/月/日</span><br><span class="hljs-comment">        - 通过字符串形式设置的日期月份不会+1</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">let</span> oldDay = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">2022</span>,<span class="hljs-number">7</span>,<span class="hljs-number">25</span>)<br><span class="hljs-keyword">let</span> oldDay2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-string">&#x27;2022/8/25&#x27;</span>)<br><span class="hljs-keyword">let</span> oldDay4 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-string">&#x27;1970/1/2&#x27;</span>)<br><span class="hljs-keyword">let</span> oldDay3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-string">&#x27;2022-8-25&#x27;</span>)<span class="hljs-comment">//Thu Aug 25 2022 00:00:00 GMT+0800 (中国标准时间)</span><br><br><span class="hljs-comment">//Date.parse() 解析时间日期字符串并且返回毫秒数</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Date</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-string">&#x27;2022-1-1&#x27;</span>)) <span class="hljs-comment">//1640966400000</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Date</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-string">&#x27;Thu Aug 25 2022 21:39:30 GMT+0800 (中国标准时间)&#x27;</span>)) <span class="hljs-comment">//1640966400000</span><br><br><span class="hljs-comment">//Date.now() 获取当前的时间戳</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>())<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(oldDay4.<span class="hljs-title function_">valueOf</span>())<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(dateNow)<br><br><span class="hljs-comment">//访问时间</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(dateNow.<span class="hljs-title function_">getTime</span>(),<span class="hljs-string">&#x27;将日期转换为毫秒数&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(dateNow.<span class="hljs-title function_">getFullYear</span>(),<span class="hljs-string">&#x27;日期的年&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(dateNow.<span class="hljs-title function_">getMonth</span>()+<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;日期的月&#x27;</span>) <span class="hljs-comment">//获取到的月份是从0开始计算需要+1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(dateNow.<span class="hljs-title function_">getDate</span>(),<span class="hljs-string">&#x27;日期的日&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(dateNow.<span class="hljs-title function_">getDay</span>(),<span class="hljs-string">&#x27;星期几&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(dateNow.<span class="hljs-title function_">getHours</span>(),<span class="hljs-string">&#x27;小时&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(dateNow.<span class="hljs-title function_">getMinutes</span>(),<span class="hljs-string">&#x27;分钟&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(dateNow.<span class="hljs-title function_">getSeconds</span>(),<span class="hljs-string">&#x27;秒钟&#x27;</span>)<br><br><br><span class="hljs-comment">//设置日期 方法跟 get系列一模一样, 但是换成了 set系列</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(dateNow.<span class="hljs-title function_">setFullYear</span>(<span class="hljs-number">2023</span>),<span class="hljs-string">&#x27;将日期转换为毫秒数&#x27;</span>)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<h3 id="日期对象-1"><a href="#日期对象-1" class="headerlink" title="日期对象"></a>日期对象</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&lt;script&gt;<br><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    日期对象的运算</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    data获取到的时间都是可以转换为时间戳进行运算的,</span><br><span class="hljs-comment">    时间对象在做运算的时候会默认调用valueOf转换为时间戳数值进行计算</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">let</span> now = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()<span class="hljs-comment">//获取当前时间</span><br><span class="hljs-keyword">let</span> guoqing = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-string">&#x27;2022-10-1&#x27;</span>)<br><br><span class="hljs-comment">// now.valueOf()</span><br><span class="hljs-comment">// now.getTime()</span><br><span class="hljs-comment">// console.log(+now) //1661435643079</span><br><span class="hljs-keyword">let</span> timeG = guoqing - now<br><span class="hljs-comment">//将毫秒值转换为年月日</span><br><span class="hljs-comment">// console.log(timeG / 1000 / 60 / 60 / 24) //天</span><br><span class="hljs-comment">// console.log(timeG / 1000 / 60 / 60 % 24 ) //小时</span><br><span class="hljs-comment">// console.log(timeG / 1000 / 60 % 60 ) //分钟</span><br><span class="hljs-comment">// console.log(timeG / 1000 % 60 ) //分钟</span><br><br><br><span class="hljs-comment">//时间格式化</span><br><span class="hljs-comment">//1. toDateString() 返回的是星期,月,日,年</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(now.<span class="hljs-title function_">toDateString</span>())<br><span class="hljs-comment">//2 toTimerString() 返回时分秒时区</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(now.<span class="hljs-title function_">toTimeString</span>())<br><span class="hljs-comment">//3, toLocaleDateString() 返回年月日</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(now.<span class="hljs-title function_">toLocaleDateString</span>())<span class="hljs-comment">//2022/8/25</span><br><br><span class="hljs-comment">//5, toLocaleTimerString() 时分秒</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(now.<span class="hljs-title function_">toLocaleTimeString</span>())<span class="hljs-comment">//22:01:53</span><br><br><span class="hljs-comment">//6 toUTCString() 返回对应的utc时间,也就是国际标准时间</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(now.<span class="hljs-title function_">toUTCString</span>())<br><br><span class="hljs-comment">//tolocalesting() 格式化本地时间</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(now.<span class="hljs-title function_">toLocaleString</span>())<span class="hljs-comment">//2022/8/25 22:04:37</span><br><br><span class="hljs-comment">//时间戳可以进行比较运算</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(now &gt; guoqing)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<h3 id="map集合"><a href="#map集合" class="headerlink" title="map集合"></a>map集合</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&lt;script&gt;<br><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    对象 存储无序结合通过键值对</span><br><span class="hljs-comment">    数组 存储有序结合, 直接存储具体的值</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    map数据结构</span><br><span class="hljs-comment">    对象属性名只能存在字符串,map集合可以允许在数据结构中以 任意类型的数据作为键名进行存储</span><br><span class="hljs-comment">    mpa就是一个带键值对存储数据的集合,  和object 一样,但是他可以用任意数据类型作为属性名进行存储,并且每个属性名只能存在一个</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    自带的方法</span><br><span class="hljs-comment">    - 创建map  new Map()</span><br><span class="hljs-comment">    - map.set(key,value) 新增数据</span><br><span class="hljs-comment">    - map.get(key) 获取数据</span><br><span class="hljs-comment">    - map.delete(key) 删除数据</span><br><span class="hljs-comment">    - map.has(key) 检索数据是否存在</span><br><span class="hljs-comment">    - map.ckear() 清空集合</span><br><span class="hljs-comment">    - map.size  当前集合一共有多少条数据</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">let</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>()<br><span class="hljs-comment">//新增数据</span><br>map.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;113&#x27;</span>)<br>map.<span class="hljs-title function_">set</span>(<span class="hljs-literal">true</span>,<span class="hljs-string">&#x27;adf&#x27;</span>)<br><span class="hljs-keyword">let</span> fn = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;<br>map.<span class="hljs-title function_">set</span>(fn,<span class="hljs-string">&#x27;baffd&#x27;</span>)<br>map.<span class="hljs-title function_">set</span>([<span class="hljs-number">1</span>,<span class="hljs-number">23</span>,<span class="hljs-number">4</span>],<span class="hljs-string">&#x27;arrr&#x27;</span>)<br><br><br><span class="hljs-comment">//取值</span><br><span class="hljs-comment">// console.log(map.get(&#x27;a&#x27;))</span><br><span class="hljs-comment">// console.log(map.get(true))</span><br><span class="hljs-comment">// console.log(map.get(fn)) //baffd</span><br><br><span class="hljs-comment">//检索值是否存在</span><br><span class="hljs-comment">// console.log(map.has(fn))//true</span><br><br><span class="hljs-comment">//删除一个值</span><br>map.<span class="hljs-title function_">delete</span>(<span class="hljs-literal">true</span>)<br><br><span class="hljs-comment">//删除所有值</span><br><span class="hljs-comment">// map.clear()</span><br><br><span class="hljs-comment">//检查数据长度</span><br><span class="hljs-comment">// console.log(map.size)</span><br><br><br><br><span class="hljs-comment">//创建并且存储值</span><br><span class="hljs-keyword">let</span> map1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>([<br>    [<span class="hljs-string">&#x27;key&#x27;</span>,<span class="hljs-string">&#x27;vlaue&#x27;</span>],<br>    [<span class="hljs-literal">false</span>,<span class="hljs-string">&#x27;boolean&#x27;</span>],<br>    [<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;,<span class="hljs-string">&#x27;function&#x27;</span>],<br>])<br><br><br><span class="hljs-keyword">let</span> obj  = &#123;<br>    name : <span class="hljs-string">&#x27;徐星&#x27;</span>,<br>    age : <span class="hljs-number">19</span>,<br>    sex : <span class="hljs-string">&#x27;男&#x27;</span><br>&#125;<br><span class="hljs-comment">//将对象转换为map集合</span><br><span class="hljs-keyword">let</span> map2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(obj))<br><br>map2.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;name&#x27;</span>,<span class="hljs-string">&#x27;afei&#x27;</span>)<br><br><span class="hljs-comment">//遍历map集合</span><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    keys() 遍历所有的键名</span><br><span class="hljs-comment">    values() 遍历所以逇值</span><br><span class="hljs-comment">    entries() </span><br><span class="hljs-comment">    返回值是一个可迭代对象, 可以用forof来进行遍历</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// for (const item of map2.keys()) &#123;</span><br><span class="hljs-comment">//     console.log(item)</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-comment">// for (const item of map2.values()) &#123;</span><br><span class="hljs-comment">//     console.log(item)</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-comment">// for (const item of map2.entries()) &#123;</span><br><span class="hljs-comment">//     console.log(item)//[&#x27;name&#x27;, &#x27;afei&#x27;]</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-comment">// for (const item of map2) &#123;</span><br><span class="hljs-comment">//     console.log(item)//[&#x27;name&#x27;, &#x27;afei&#x27;]</span><br><span class="hljs-comment">// &#125;</span><br><br><br><span class="hljs-comment">// map2.forEach(item=&gt;&#123;</span><br><span class="hljs-comment">//     console.log(item)//只能获取到属性值</span><br><span class="hljs-comment">// &#125;)</span><br><br><br><br><span class="hljs-comment">//利用map进行数组去重</span><br><span class="hljs-keyword">let</span> arrr = [<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,&#123;<span class="hljs-attr">a</span>:<span class="hljs-number">1</span>&#125;,&#123;<span class="hljs-attr">a</span>:<span class="hljs-number">2</span>&#125;,&#123;<span class="hljs-attr">a</span>:<span class="hljs-number">1</span>&#125;,<span class="hljs-title class_">NaN</span>,<span class="hljs-title class_">NaN</span>,<span class="hljs-literal">undefined</span>,<span class="hljs-literal">undefined</span>,<span class="hljs-keyword">function</span> <span class="hljs-title function_">a</span>(<span class="hljs-params"></span>)&#123;&#125;,<span class="hljs-keyword">function</span> <span class="hljs-title function_">a</span>(<span class="hljs-params"></span>)&#123;&#125;,<span class="hljs-keyword">function</span> <span class="hljs-title function_">b</span>(<span class="hljs-params"></span>)&#123;&#125;]<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">uniqu</span>(<span class="hljs-params">arr</span>)&#123;<br>    <span class="hljs-comment">//新数组和map集合</span><br>    <span class="hljs-keyword">let</span> newArr = [],map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>()<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> arr[i] === <span class="hljs-string">&#x27;object&#x27;</span>)&#123;<br>            <span class="hljs-comment">///是一个对象\</span><br>            <span class="hljs-keyword">let</span> deep = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(arr[i])<br>            <span class="hljs-comment">//将数据存储到map集合中</span><br>            map.<span class="hljs-title function_">set</span>(deep,arr[i])<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">//不是引用类型</span><br>            map.<span class="hljs-title function_">set</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;arr[i]&#125;</span>`</span>,arr[i])<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//把map中的所有值添加到数组</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> item <span class="hljs-keyword">of</span> map.<span class="hljs-title function_">values</span>()) &#123;<br>        newArr.<span class="hljs-title function_">push</span>(item)<br>    &#125;<br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newArr)<br>&#125;<br><span class="hljs-title function_">uniqu</span>(arrr)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<h2 id="day21-map-set解构赋值"><a href="#day21-map-set解构赋值" class="headerlink" title="day21-map-set解构赋值"></a>day21-map-set解构赋值</h2><h3 id="set集合"><a href="#set集合" class="headerlink" title="set集合"></a>set集合</h3><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-cn&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">          *&#123;<span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;&#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-meta"></span></span><br><span class="hljs-meta"><span class="language-javascript">    &#x27;use strict&#x27;</span>;</span><br><span class="language-javascript">    <span class="hljs-comment">/* </span></span><br><span class="hljs-comment"><span class="language-javascript">        set 也是一个特殊的集合 , 这个集合跟map类型但是他没有key值 , 存储的方式类似于数组, set集合中的值永远只能出现一次, 可以理解为set集合就是一个自带去重效果的类数组</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">        方法集合</span></span><br><span class="hljs-comment"><span class="language-javascript">        - new Set() 创建set集合</span></span><br><span class="hljs-comment"><span class="language-javascript">        - set.add(value) 添加一个value值, value值可以是任意类型的值</span></span><br><span class="hljs-comment"><span class="language-javascript">        - set.delete(value) 删除value值</span></span><br><span class="hljs-comment"><span class="language-javascript">        - set.has(value) 检测value是否存在</span></span><br><span class="hljs-comment"><span class="language-javascript">        - set.clear() 清空集合</span></span><br><span class="hljs-comment"><span class="language-javascript">        - set.size  返回元素个数</span></span><br><span class="hljs-comment"><span class="language-javascript">    */</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>()</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//创建的同时添加数据</span></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> set1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>])</span><br><span class="language-javascript">    </span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//遍历set集合</span></span><br><span class="language-javascript">    <span class="hljs-comment">/* </span></span><br><span class="hljs-comment"><span class="language-javascript">        keys()</span></span><br><span class="hljs-comment"><span class="language-javascript">        values()</span></span><br><span class="hljs-comment"><span class="language-javascript">        entries()</span></span><br><span class="hljs-comment"><span class="language-javascript">    */</span></span><br><span class="language-javascript">    </span><br><span class="language-javascript">   </span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//存储值</span></span><br><span class="language-javascript">    set.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;xuxing&#x27;</span>)</span><br><span class="language-javascript">    set.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;jiuwei&#x27;</span>)</span><br><span class="language-javascript">    set.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;wuxian&#x27;</span>)</span><br><span class="language-javascript">    set.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;wuxian&#x27;</span>) <span class="hljs-comment">//重复添加没有效果</span></span><br><span class="language-javascript">    set.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;qixi&#x27;</span>)</span><br><span class="language-javascript">    set.<span class="hljs-title function_">add</span>(&#123;<span class="hljs-attr">a</span>:<span class="hljs-number">1</span>&#125;) </span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> arr = []</span><br><span class="language-javascript">    arr.<span class="hljs-title function_">push</span>(<span class="hljs-number">1</span>)</span><br><span class="language-javascript">    arr.<span class="hljs-title function_">push</span>(<span class="hljs-number">1</span>) <span class="hljs-comment">// [1,1]</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//删除值</span></span><br><span class="language-javascript">    set.<span class="hljs-title function_">delete</span>(<span class="hljs-string">&#x27;jiuwei&#x27;</span>)</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//检测</span></span><br><span class="language-javascript">    set.<span class="hljs-title function_">has</span>(<span class="hljs-string">&#x27;jiuwei&#x27;</span>) <span class="hljs-comment">//fasle</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    </span><br><span class="language-javascript">    <span class="hljs-comment">//数组去重</span></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> oob = &#123;<span class="hljs-attr">a</span>:<span class="hljs-number">1</span>&#125;</span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> arrr = [<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,oob,oob,&#123;<span class="hljs-attr">a</span>:<span class="hljs-number">1</span>&#125;,<span class="hljs-title class_">NaN</span>,<span class="hljs-title class_">NaN</span>,<span class="hljs-literal">undefined</span>,<span class="hljs-literal">undefined</span>,<span class="hljs-keyword">function</span> <span class="hljs-title function_">a</span>(<span class="hljs-params"></span>)&#123;&#125;,<span class="hljs-keyword">function</span> <span class="hljs-title function_">a</span>(<span class="hljs-params"></span>)&#123;&#125;,<span class="hljs-keyword">function</span> <span class="hljs-title function_">b</span>(<span class="hljs-params"></span>)&#123;&#125;]</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//利用set进行数组去重方案一</span></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> set2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(arrr)</span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> newArr = []</span><br><span class="language-javascript">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> item <span class="hljs-keyword">of</span> set2) &#123;</span><br><span class="language-javascript">        newArr.<span class="hljs-title function_">push</span>(item)</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//数组去重方案二</span></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> newArr2 = [...<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(arrr)]</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// console.log([...&#x27;asdfsafd&#x27;])</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h3 id="weakMap"><a href="#weakMap" class="headerlink" title="weakMap"></a>weakMap</h3><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-cn&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">          *&#123;<span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;&#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-meta"></span></span><br><span class="hljs-meta"><span class="language-javascript">    &#x27;use strict&#x27;</span>;</span><br><span class="language-javascript">    <span class="hljs-comment">/* </span></span><br><span class="hljs-comment"><span class="language-javascript">        set 也是一个特殊的集合 , 这个集合跟map类型但是他没有key值 , 存储的方式类似于数组, set集合中的值永远只能出现一次, 可以理解为set集合就是一个自带去重效果的类数组</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">        方法集合</span></span><br><span class="hljs-comment"><span class="language-javascript">        - new Set() 创建set集合</span></span><br><span class="hljs-comment"><span class="language-javascript">        - set.add(value) 添加一个value值, value值可以是任意类型的值</span></span><br><span class="hljs-comment"><span class="language-javascript">        - set.delete(value) 删除value值</span></span><br><span class="hljs-comment"><span class="language-javascript">        - set.has(value) 检测value是否存在</span></span><br><span class="hljs-comment"><span class="language-javascript">        - set.clear() 清空集合</span></span><br><span class="hljs-comment"><span class="language-javascript">        - set.size  返回元素个数</span></span><br><span class="hljs-comment"><span class="language-javascript">    */</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>()</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//创建的同时添加数据</span></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> set1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>])</span><br><span class="language-javascript">    </span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//遍历set集合</span></span><br><span class="language-javascript">    <span class="hljs-comment">/* </span></span><br><span class="hljs-comment"><span class="language-javascript">        keys()</span></span><br><span class="hljs-comment"><span class="language-javascript">        values()</span></span><br><span class="hljs-comment"><span class="language-javascript">        entries()</span></span><br><span class="hljs-comment"><span class="language-javascript">    */</span></span><br><span class="language-javascript">    </span><br><span class="language-javascript">   </span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//存储值</span></span><br><span class="language-javascript">    set.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;xuxing&#x27;</span>)</span><br><span class="language-javascript">    set.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;jiuwei&#x27;</span>)</span><br><span class="language-javascript">    set.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;wuxian&#x27;</span>)</span><br><span class="language-javascript">    set.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;wuxian&#x27;</span>) <span class="hljs-comment">//重复添加没有效果</span></span><br><span class="language-javascript">    set.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;qixi&#x27;</span>)</span><br><span class="language-javascript">    set.<span class="hljs-title function_">add</span>(&#123;<span class="hljs-attr">a</span>:<span class="hljs-number">1</span>&#125;) </span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> arr = []</span><br><span class="language-javascript">    arr.<span class="hljs-title function_">push</span>(<span class="hljs-number">1</span>)</span><br><span class="language-javascript">    arr.<span class="hljs-title function_">push</span>(<span class="hljs-number">1</span>) <span class="hljs-comment">// [1,1]</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//删除值</span></span><br><span class="language-javascript">    set.<span class="hljs-title function_">delete</span>(<span class="hljs-string">&#x27;jiuwei&#x27;</span>)</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//检测</span></span><br><span class="language-javascript">    set.<span class="hljs-title function_">has</span>(<span class="hljs-string">&#x27;jiuwei&#x27;</span>) <span class="hljs-comment">//fasle</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    </span><br><span class="language-javascript">    <span class="hljs-comment">//数组去重</span></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> oob = &#123;<span class="hljs-attr">a</span>:<span class="hljs-number">1</span>&#125;</span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> arrr = [<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,oob,oob,&#123;<span class="hljs-attr">a</span>:<span class="hljs-number">1</span>&#125;,<span class="hljs-title class_">NaN</span>,<span class="hljs-title class_">NaN</span>,<span class="hljs-literal">undefined</span>,<span class="hljs-literal">undefined</span>,<span class="hljs-keyword">function</span> <span class="hljs-title function_">a</span>(<span class="hljs-params"></span>)&#123;&#125;,<span class="hljs-keyword">function</span> <span class="hljs-title function_">a</span>(<span class="hljs-params"></span>)&#123;&#125;,<span class="hljs-keyword">function</span> <span class="hljs-title function_">b</span>(<span class="hljs-params"></span>)&#123;&#125;]</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//利用set进行数组去重方案一</span></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> set2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(arrr)</span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> newArr = []</span><br><span class="language-javascript">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> item <span class="hljs-keyword">of</span> set2) &#123;</span><br><span class="language-javascript">        newArr.<span class="hljs-title function_">push</span>(item)</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//数组去重方案二</span></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> newArr2 = [...<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(arrr)]</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// console.log([...&#x27;asdfsafd&#x27;])</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h3 id="weakMap练习"><a href="#weakMap练习" class="headerlink" title="weakMap练习"></a>weakMap练习</h3><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-cn&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">          *&#123;<span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;&#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-meta"></span></span><br><span class="hljs-meta"><span class="language-javascript">    &#x27;use strict&#x27;</span>;</span><br><span class="language-javascript">    <span class="hljs-comment">/* /</span></span><br><span class="hljs-comment"><span class="language-javascript">        记录用户访问次数的函数</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">        创建一个集合 用于存储用户的信息, 和用户访问的次数</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">        当用户访问的时候记录用户访问了几次</span></span><br><span class="hljs-comment"><span class="language-javascript">        用户重复访问的时候更新用户访问的次数</span></span><br><span class="hljs-comment"><span class="language-javascript">        用户注销了账号,清空用户的所有访问记录</span></span><br><span class="hljs-comment"><span class="language-javascript">    */</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> userCountMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeakMap</span>()</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> tangzixing = &#123;name : <span class="hljs-string">&#x27;汤子星&#x27;</span>&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//记录和更新用户放的次数</span></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">countSet</span>(<span class="hljs-params">user</span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-comment">//检测用户是否访问过,如果访问过就增加一次访问次数,没有访问过就设置默认1</span></span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> count =  userCountMap.<span class="hljs-title function_">get</span>(user) || <span class="hljs-number">0</span></span><br><span class="language-javascript">        userCountMap.<span class="hljs-title function_">set</span>(user,count+<span class="hljs-number">1</span>)</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title function_">countSet</span>(tangzixing)</span><br><span class="language-javascript">    <span class="hljs-title function_">countSet</span>(tangzixing)</span><br><span class="language-javascript">    <span class="hljs-title function_">countSet</span>(tangzixing)</span><br><span class="language-javascript">    <span class="hljs-title function_">countSet</span>(tangzixing)</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//tangzixing注销了账号</span></span><br><span class="language-javascript">    tangzixing = <span class="hljs-literal">null</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//WeakSet 存储方式跟 set 一模一样, 区别就是 弱映射和强映射, 存储的值也必须是对象</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> xx = &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;xx&#x27;</span>&#125;</span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> yy = &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;yy&#x27;</span>&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> weakSet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeakSet</span>()</span><br><span class="language-javascript">    weakSet.<span class="hljs-title function_">add</span>(xx)</span><br><span class="language-javascript">    weakSet.<span class="hljs-title function_">add</span>(yy)</span><br><span class="language-javascript"></span><br><span class="language-javascript">    yy = <span class="hljs-literal">null</span></span><br><span class="language-javascript">        </span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h3 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h3><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-cn&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">          *&#123;<span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;&#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-meta"></span></span><br><span class="hljs-meta"><span class="language-javascript">    &#x27;use strict&#x27;</span>;</span><br><span class="language-javascript">    <span class="hljs-comment">/* </span></span><br><span class="hljs-comment"><span class="language-javascript">        解构赋值</span></span><br><span class="hljs-comment"><span class="language-javascript">        解构赋值是一种特殊语法, 可以方便快速的对数组或者对象进行取值的一种方式,</span></span><br><span class="hljs-comment"><span class="language-javascript">        也可以为对象数组设置初始值</span></span><br><span class="hljs-comment"><span class="language-javascript">    */</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> userListLoginArr = [<span class="hljs-string">&#x27;徐星&#x27;</span>,<span class="hljs-string">&#x27;久违&#x27;</span>]</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//将数组中的两个值分别取出来方便后续使用</span></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> xuxing1 = userListLoginArr[<span class="hljs-number">0</span>]</span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> jiuwei1 = userListLoginArr[<span class="hljs-number">1</span>]</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//解构取值 解构的顺序必须一一对应</span></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> [xuxing2,jiuwei2] = userListLoginArr<span class="hljs-comment">//解构出来的值就是一个变量</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//解构出来的结果不会影响原数据</span></span><br><span class="language-javascript">    xuxing2 = <span class="hljs-literal">null</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//如果我只想拿到久违,不想解构徐星 </span></span><br><span class="language-javascript">    <span class="hljs-comment">// , 作为站位符跳过某个数据</span></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> [,jiuwe3] = userListLoginArr</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//可以解构的对象非常多, set 集合也可以结构</span></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-string">&#x27;aaa&#x27;</span>,<span class="hljs-string">&#x27;bbb&#x27;</span>])</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> [aaa] = set;</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//先声明变量再进行结构</span></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> jiu,xu;</span><br><span class="language-javascript">    [xu,jiu] = userListLoginArr</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//解构的过程中设置默认值</span></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> arr1 = [<span class="hljs-string">&#x27;xuxing&#x27;</span>,<span class="hljs-string">&#x27;18&#x27;</span>] <span class="hljs-comment">//用户信息</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//当解构的值不存在 可以使用 = 赋值一个默认值</span></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> [name,age,sex=<span class="hljs-string">&#x27;nan&#x27;</span>] = arr1</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//参数过多也可以使用 rest 参数进行接受</span></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> [praName,...rest] = [<span class="hljs-string">&#x27;奥特曼&#x27;</span>,<span class="hljs-string">&#x27;199&#x27;</span>,<span class="hljs-string">&#x27;180cm&#x27;</span>,<span class="hljs-string">&#x27;60kg&#x27;</span>,<span class="hljs-string">&#x27;balck&#x27;</span>]</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//对象遍历</span></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> user = &#123;</span><br><span class="language-javascript">        name : <span class="hljs-string">&#x27;xxx&#x27;</span>,</span><br><span class="language-javascript">        age : <span class="hljs-number">11</span>,</span><br><span class="language-javascript">        sex : <span class="hljs-string">&#x27;anan&#x27;</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//应用场景1</span></span><br><span class="language-javascript">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> [key,value] <span class="hljs-keyword">of</span> <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(user)) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(key,value)<span class="hljs-comment">//name xxx</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//应用场景2 user转换为地址栏拼接格式</span></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> pareUrl = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(user).<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">[key,value]</span>)=&gt;</span>&#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> key+<span class="hljs-string">&#x27;=&#x27;</span>+value</span><br><span class="language-javascript">    &#125;).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&amp;&#x27;</span>)</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//变量位置交换</span></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span>;</span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> b = <span class="hljs-number">2</span>;</span><br><span class="language-javascript">    <span class="hljs-comment">//中间变量的写法</span></span><br><span class="language-javascript">    <span class="hljs-comment">// let temp = a;</span></span><br><span class="language-javascript">    <span class="hljs-comment">// a = b</span></span><br><span class="language-javascript">    <span class="hljs-comment">// b = temp</span></span><br><span class="language-javascript">    <span class="hljs-comment">//应用场景3 解构交换位置</span></span><br><span class="language-javascript">    [a,b] = [b,a]</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> arrList = [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,[<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,[<span class="hljs-number">5</span>]]]</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//嵌套结构</span></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> [,,[,,[five]]] = arrList</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">        </span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h3 id="对象类型结构"><a href="#对象类型结构" class="headerlink" title="对象类型结构"></a>对象类型结构</h3><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-cn&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">          *&#123;<span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;&#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-meta"></span></span><br><span class="hljs-meta"><span class="language-javascript">    &#x27;use strict&#x27;</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">/* </span></span><br><span class="hljs-comment"><span class="language-javascript">    对象解构赋值 语法  let &#123;val1,val2&#125; = &#123;val2,val1&#125;</span></span><br><span class="hljs-comment"><span class="language-javascript">    解释 创建一个变量val1 和 val2 赋值为对象 中的 属性叫 val1的值和 val2的值</span></span><br><span class="hljs-comment"><span class="language-javascript">    */</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> option = &#123;</span><br><span class="language-javascript">        title : <span class="hljs-string">&#x27;Menu&#x27;</span>,</span><br><span class="language-javascript">        width : <span class="hljs-number">100</span>,</span><br><span class="language-javascript">        height : <span class="hljs-number">200</span>,</span><br><span class="language-javascript">        color : <span class="hljs-literal">undefined</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//解构取值</span></span><br><span class="language-javascript">    <span class="hljs-comment">// let &#123;height,width,title&#125; = option</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//重命名</span></span><br><span class="language-javascript">    <span class="hljs-comment">// let &#123;height:h,width:w,title:t&#125; = option</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//设置默认值</span></span><br><span class="language-javascript">    <span class="hljs-comment">// let &#123;height:h,width:w,title:t,color=&#x27;black&#x27;&#125; = option</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//设置剩余参数</span></span><br><span class="language-javascript">    <span class="hljs-comment">// let &#123;title,...rest&#125; = option //rest 就是剩余所有值组成的一个对象</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//对象申明解构需要加括号</span></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> title,height;</span><br><span class="language-javascript">    (&#123;title,height&#125; = option)</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//函数参数结构</span></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">showMenu</span>(<span class="hljs-params">&#123;w,h=<span class="hljs-number">1</span>&#125;</span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// obj.h = obj.h || 1</span></span><br><span class="language-javascript">        <span class="hljs-comment">// console.log(obj.w * obj.h)</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(w * h)</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title function_">showMenu</span>(&#123;</span><br><span class="language-javascript">        w : <span class="hljs-number">100</span>,</span><br><span class="language-javascript">        h : <span class="hljs-literal">undefined</span></span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript">        </span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="day22-面向对象"><a href="#day22-面向对象" class="headerlink" title="day22-面向对象"></a>day22-面向对象</h2><h3 id="什么是面向对象"><a href="#什么是面向对象" class="headerlink" title="什么是面向对象"></a>什么是面向对象</h3><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-cn&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">          *&#123;<span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;&#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-meta"></span></span><br><span class="hljs-meta"><span class="language-javascript">    &#x27;use strict&#x27;</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">/* </span></span><br><span class="hljs-comment"><span class="language-javascript">        js 中 任务事物都可以抽象成为一个对象, 行为, 特征</span></span><br><span class="hljs-comment"><span class="language-javascript">        行为 : 用function表示</span></span><br><span class="hljs-comment"><span class="language-javascript">        特征 : 对象的属性名和属性值</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">        编程模式</span></span><br><span class="hljs-comment"><span class="language-javascript">        1. 面向对象 OOP</span></span><br><span class="hljs-comment"><span class="language-javascript">        2. 面向过程 POP</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">        区分面向对象和面向过程</span></span><br><span class="hljs-comment"><span class="language-javascript">        大象 装 冰箱 (业务需求)</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">        代码实现大象装冰箱的过程</span></span><br><span class="hljs-comment"><span class="language-javascript">        1. 面向过程的形式来实现 将需求分析出几个步骤,按照函数一步一步的实现, 最终有条有序的执行完成效果</span></span><br><span class="hljs-comment"><span class="language-javascript">            1.1 打开冰箱门(代码实现)</span></span><br><span class="hljs-comment"><span class="language-javascript">            1.2 把大象放进去</span></span><br><span class="hljs-comment"><span class="language-javascript">            1.3 冰箱门关闭</span></span><br><span class="hljs-comment"><span class="language-javascript">            </span></span><br><span class="hljs-comment"><span class="language-javascript">        2. 面向对象 面向对象首先要将需要处理事物抽象成为一个对象, 然后对象之间分工明确合作完成效果</span></span><br><span class="hljs-comment"><span class="language-javascript">            2.1 抽象出大象的对象</span></span><br><span class="hljs-comment"><span class="language-javascript">                - 大象有体貌特征的属性</span></span><br><span class="hljs-comment"><span class="language-javascript">                - 大象要有一个移动的行为</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">            2.2 抽象出冰箱的对象</span></span><br><span class="hljs-comment"><span class="language-javascript">                - 冰箱有尺寸大小的属性</span></span><br><span class="hljs-comment"><span class="language-javascript">                - 冰箱有打开冰箱门的行为</span></span><br><span class="hljs-comment"><span class="language-javascript">                - 关闭冰箱门的行为</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">            执行大象装冰箱的行为 , 执行冰箱打开门的行为 - 执行大象移动的行为 - 执行冰箱关闭门的行为</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">            面向对象是以功能进行划分,而不是步骤进行划分</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">        面向对象的特征</span></span><br><span class="hljs-comment"><span class="language-javascript">        1. 抽象对象的公共属性和行为封装成为一个类</span></span><br><span class="hljs-comment"><span class="language-javascript">        2. 对象的实例化 获取类的实例化对象</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">        面向对象的特征</span></span><br><span class="hljs-comment"><span class="language-javascript">        - 封装性</span></span><br><span class="hljs-comment"><span class="language-javascript">        - 继承性</span></span><br><span class="hljs-comment"><span class="language-javascript">        - 多态性  同一个对象在不同的状态下有不同的效果</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">        面向对象和面向过程对比</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">        面向过程: </span></span><br><span class="hljs-comment"><span class="language-javascript">        优点:性能高,适合跟硬件相关的程序,单片机</span></span><br><span class="hljs-comment"><span class="language-javascript">        缺点:不容易维护,不方便扩展和复用</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">        </span></span><br><span class="hljs-comment"><span class="language-javascript">        面向对象</span></span><br><span class="hljs-comment"><span class="language-javascript">        优点:方便复用和维护,方便扩展 </span></span><br><span class="hljs-comment"><span class="language-javascript">        缺点:性能比较低</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">        创建一个空调a</span></span><br><span class="hljs-comment"><span class="language-javascript">        新增空调a温度控制的功能()&#123;&#125;</span></span><br><span class="hljs-comment"><span class="language-javascript">        创建一个遥控</span></span><br><span class="hljs-comment"><span class="language-javascript">        打开空调a()&#123;&#125;</span></span><br><span class="hljs-comment"><span class="language-javascript">        关闭空调a的函数()&#123;&#125;</span></span><br><span class="hljs-comment"><span class="language-javascript">        新增为空调a增加温度的功能()&#123;&#125;</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">        空调 = &#123;</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">        &#125;</span></span><br><span class="hljs-comment"><span class="language-javascript">        </span></span><br><span class="hljs-comment"><span class="language-javascript">        遥控器 = &#123;</span></span><br><span class="hljs-comment"><span class="language-javascript">            打开空调()&#123;&#125;</span></span><br><span class="hljs-comment"><span class="language-javascript">            关闭空调()&#123;&#125;</span></span><br><span class="hljs-comment"><span class="language-javascript">            温度增加()&#123;&#125;</span></span><br><span class="hljs-comment"><span class="language-javascript">            温度减少()&#123;&#125;</span></span><br><span class="hljs-comment"><span class="language-javascript">        &#125;</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">    */</span></span><br><span class="language-javascript">        </span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span> <br></code></pre></td></tr></table></figure>

<h3 id="面向对象es5"><a href="#面向对象es5" class="headerlink" title="面向对象es5"></a>面向对象es5</h3><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-cn&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">          *&#123;<span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;&#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-meta"></span></span><br><span class="hljs-meta"><span class="language-javascript">    &#x27;use strict&#x27;</span>;</span><br><span class="language-javascript">    <span class="hljs-comment">/* </span></span><br><span class="hljs-comment"><span class="language-javascript">        方式一 let obj = &#123;&#125;</span></span><br><span class="hljs-comment"><span class="language-javascript">        方式二 let obj = new Object()</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">        需要大量创建对象的时候</span></span><br><span class="hljs-comment"><span class="language-javascript">        方式一 工厂函数创建对象</span></span><br><span class="hljs-comment"><span class="language-javascript">        方式二 new关键词配合构造函数创建对象</span></span><br><span class="hljs-comment"><span class="language-javascript">    */</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//创建一个学生类</span></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">Student</span>(<span class="hljs-params">name,age</span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-comment">//学员共有特征</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age</span><br><span class="language-javascript">        <span class="hljs-comment">//共有的行为</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">say</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`我是<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span>,我今年<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.age&#125;</span>岁`</span>)</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    </span><br><span class="language-javascript">    <span class="hljs-comment">//创建类的实例化对象</span></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> xuxing = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&#x27;xuxing&#x27;</span>,<span class="hljs-number">19</span>)</span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> wuxian = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&#x27;wuxian&#x27;</span>,<span class="hljs-number">18</span>)</span><br><span class="language-javascript">    xuxing.<span class="hljs-title function_">say</span>()</span><br><span class="language-javascript">    wuxian.<span class="hljs-title function_">say</span>()</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(xuxing.<span class="hljs-property">name</span> === wuxian.<span class="hljs-property">name</span>)<span class="hljs-comment">//false</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(xuxing.<span class="hljs-property">say</span> === wuxian.<span class="hljs-property">say</span>) <span class="hljs-comment">//fase</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        </span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h3 id="静态成员实例成员es5"><a href="#静态成员实例成员es5" class="headerlink" title="静态成员实例成员es5"></a>静态成员实例成员es5</h3><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-cn&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">          *&#123;<span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;&#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-meta"></span></span><br><span class="hljs-meta"><span class="language-javascript">    &#x27;use strict&#x27;</span>;</span><br><span class="language-javascript">    <span class="hljs-comment">/* </span></span><br><span class="hljs-comment"><span class="language-javascript">        类的成员分为两类</span></span><br><span class="hljs-comment"><span class="language-javascript">        - 静态成员</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">        - 动态成员(实例成员)</span></span><br><span class="hljs-comment"><span class="language-javascript">            1. 类中挂载到this上的所有属性和方法</span></span><br><span class="hljs-comment"><span class="language-javascript">            2. 实例成员只能通过实例化出来的对象才能访问</span></span><br><span class="hljs-comment"><span class="language-javascript">    */</span></span><br><span class="language-javascript">    <span class="hljs-comment">//创建一个学生类</span></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">Student</span>(<span class="hljs-params">name,age</span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-comment">//实例成员(动态成员)</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age</span><br><span class="language-javascript">        <span class="hljs-comment">//共有的行为</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">say</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`我是<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span>,我今年<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.age&#125;</span>岁`</span>)</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//在构造函数下直接挂载属性</span></span><br><span class="language-javascript">    <span class="hljs-comment">//类的静态成员</span></span><br><span class="language-javascript">    <span class="hljs-title class_">Student</span>.<span class="hljs-property">height</span> = <span class="hljs-string">&#x27;180cm&#x27;</span></span><br><span class="language-javascript">    </span><br><span class="language-javascript">    <span class="hljs-comment">//创建类的实例化对象</span></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> xuxing = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&#x27;xuxing&#x27;</span>,<span class="hljs-number">19</span>)</span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> wuxian = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&#x27;wuxian&#x27;</span>,<span class="hljs-number">18</span>)</span><br><span class="language-javascript">    xuxing.<span class="hljs-title function_">say</span>()</span><br><span class="language-javascript">    wuxian.<span class="hljs-title function_">say</span>()</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Student</span>.<span class="hljs-property">name</span>)<span class="hljs-comment">//Student</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Student</span>.<span class="hljs-property">age</span>)<span class="hljs-comment">//undefined</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Student</span>.<span class="hljs-property">height</span>)<span class="hljs-comment">//180cm</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        </span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h3 id="原型对象和对象原形"><a href="#原型对象和对象原形" class="headerlink" title="原型对象和对象原形"></a>原型对象和对象原形</h3><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-cn&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">          *&#123;<span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;&#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-meta"></span></span><br><span class="hljs-meta"><span class="language-javascript">    &#x27;use strict&#x27;</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">     <span class="hljs-comment">//函数每次实例化出来得都是一个全新的函数, 但是每个函数的功能都是一模一样的, 存在一个浪费空间的问题, 希望函数是同一个函数</span></span><br><span class="language-javascript">    <span class="hljs-comment">//全局创建了一个函数</span></span><br><span class="language-javascript">    <span class="hljs-comment">// function sayInfo()&#123;</span></span><br><span class="language-javascript">    <span class="hljs-comment">//     console.log(`我是$&#123;this.name&#125;,我今年$&#123;this.age&#125;岁`)</span></span><br><span class="language-javascript">    <span class="hljs-comment">// &#125;</span></span><br><span class="language-javascript">    </span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//创建一个学生类</span></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">Student</span>(<span class="hljs-params">name,age</span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age</span><br><span class="language-javascript">        <span class="hljs-comment">//共有的行为</span></span><br><span class="language-javascript">        <span class="hljs-comment">// this.sayHi = Student.sayHi  //每次实例化都添加的同一个函数</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">say</span> = <span class="hljs-title class_">Student</span>.<span class="hljs-property">fnObj</span>.<span class="hljs-property">sayInfo</span>  <span class="hljs-comment">//每次实例化都添加的同一个函数</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">sayHi</span> = <span class="hljs-title class_">Student</span>.<span class="hljs-property">fnObj</span>.<span class="hljs-property">sayHi</span>  <span class="hljs-comment">//每次实例化都添加的同一个函数</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">sayLength</span> = <span class="hljs-title class_">Student</span>.<span class="hljs-property">fnObj</span>.<span class="hljs-property">length</span>  <span class="hljs-comment">//每次实例化都添加的同一个函数</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//添加静态属性</span></span><br><span class="language-javascript">    <span class="hljs-comment">/*   Student.sayInfo =  function sayInfo()&#123;</span></span><br><span class="hljs-comment"><span class="language-javascript">            console.log(`我是$&#123;this.name&#125;,我今年$&#123;this.age&#125;岁`)</span></span><br><span class="hljs-comment"><span class="language-javascript">        &#125;</span></span><br><span class="hljs-comment"><span class="language-javascript">        Student.sayHi =  function()&#123;</span></span><br><span class="hljs-comment"><span class="language-javascript">            console.log(`Hi我是$&#123;this.name&#125;`)</span></span><br><span class="hljs-comment"><span class="language-javascript">        &#125; */</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//共有方法</span></span><br><span class="language-javascript">    <span class="hljs-title class_">Student</span>.<span class="hljs-property">fnObj</span> = &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">sayInfo</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`我是<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span>,我今年<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.age&#125;</span>岁`</span>)</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-title function_">length</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我是length&#x27;</span>)</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        sayHi : <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Hi我是<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span>`</span>)</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//为学生类添加共有方法 在原型对象下 prototype</span></span><br><span class="language-javascript">    <span class="hljs-title class_">Student</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">sayName</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>)</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    </span><br><span class="language-javascript">    <span class="hljs-comment">//创建类的实例化对象</span></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> xuxing = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&#x27;xuxing&#x27;</span>,<span class="hljs-number">19</span>)</span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> wuxian = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&#x27;wuxian&#x27;</span>,<span class="hljs-number">18</span>)</span><br><span class="language-javascript">    xuxing.<span class="hljs-title function_">say</span>()</span><br><span class="language-javascript">    wuxian.<span class="hljs-title function_">say</span>()</span><br><span class="language-javascript">    wuxian.<span class="hljs-title function_">sayHi</span>()</span><br><span class="language-javascript">    wuxian.<span class="hljs-title function_">sayLength</span>()</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(xuxing.<span class="hljs-property">say</span> === wuxian.<span class="hljs-property">say</span>)</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//原型对象, 和 对象原型</span></span><br><span class="language-javascript">    <span class="hljs-comment">//原型对象是 每个构造函数(函数) 内都有的一个对象 叫做 prototype</span></span><br><span class="language-javascript">    <span class="hljs-comment">/* </span></span><br><span class="hljs-comment"><span class="language-javascript">    constructor 构造器 存储一个指针,指向原型对象的创建者</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">    挂载到原型对象下的方法是所有实例化出来的对象都能访问到的</span></span><br><span class="hljs-comment"><span class="language-javascript">    */</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> arr1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr1.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;-&#x27;</span>))</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Student</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>)</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>)</span><br><span class="language-javascript"></span><br><span class="language-javascript">        </span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h3 id="原型对象和对象原形2"><a href="#原型对象和对象原形2" class="headerlink" title="原型对象和对象原形2"></a>原型对象和对象原形2</h3><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-cn&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">          *&#123;<span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;&#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-meta"></span></span><br><span class="hljs-meta"><span class="language-javascript">    &#x27;use strict&#x27;</span>;</span><br><span class="language-javascript">    </span><br><span class="language-javascript">    <span class="hljs-comment">//原型对象, 和 对象原型</span></span><br><span class="language-javascript">    <span class="hljs-comment">/* </span></span><br><span class="hljs-comment"><span class="language-javascript">    原型对象是 每个构造函数(函数) 内都有的一个对象 叫做 prototype</span></span><br><span class="hljs-comment"><span class="language-javascript">    -  constructor 构造器 存储一个指针,指向原型对象的创建者</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">    对象原型 每个对象下都有的一个对象(实例化对象)__proto__就叫做对象原型</span></span><br><span class="hljs-comment"><span class="language-javascript">    - 对象原型存储的就是原型对象</span></span><br><span class="hljs-comment"><span class="language-javascript">    - constructor 属性指向创建该对象的构造函数\</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">    原型链</span></span><br><span class="hljs-comment"><span class="language-javascript">    规定原型和对象原型下的查找规则</span></span><br><span class="hljs-comment"><span class="language-javascript">    1. 自身对象下有没有这个方法,有就用没有就继续往下查找</span></span><br><span class="hljs-comment"><span class="language-javascript">    2. 自身对象的对象原型下有没有这个方法,没有就根据对象原型下的constructor 找到创建他的构造函数身上的原型对象继续查找</span></span><br><span class="hljs-comment"><span class="language-javascript">    3. 如果自身有那就用自己身上的</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">    挂载到原型对象下的方法是所有实例化出来的对象都能访问到的</span></span><br><span class="hljs-comment"><span class="language-javascript">    */</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//创建一个学生类</span></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">Student</span>(<span class="hljs-params">name,age</span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-comment">//为学生类添加共有方法 在原型对象下 prototype</span></span><br><span class="language-javascript">    <span class="hljs-comment">// Student.prototype.sayName = function()&#123;</span></span><br><span class="language-javascript">    <span class="hljs-comment">//     console.log(this.name) //指向实例化出来的对象</span></span><br><span class="language-javascript">    <span class="hljs-comment">// &#125;</span></span><br><span class="language-javascript">    <span class="hljs-comment">//多个共有方法的添加 方式一 继续使用.操作添加</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//方式二利用对象覆盖批量添加</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">/* </span></span><br><span class="hljs-comment"><span class="language-javascript">        批量添加会存在一个问题就是会丢失constructor属性</span></span><br><span class="hljs-comment"><span class="language-javascript">    */</span></span><br><span class="language-javascript">    <span class="hljs-title class_">Student</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">//手动添加回constructor</span></span><br><span class="language-javascript">        constructor : <span class="hljs-title class_">Student</span>,</span><br><span class="language-javascript">        <span class="hljs-title function_">sayName</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>) <span class="hljs-comment">//指向实例化出来的对象</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-title function_">sayAge</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>) <span class="hljs-comment">//指向实例化出来的对象</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//创建类的实例化对象</span></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> xuxing = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&#x27;xuxing&#x27;</span>,<span class="hljs-number">19</span>)</span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> wuxian = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&#x27;wuxian&#x27;</span>,<span class="hljs-number">18</span>)</span><br><span class="language-javascript"></span><br><span class="language-javascript">    xuxing.<span class="hljs-property">__proto__</span>.<span class="hljs-property">aaa</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;aaa&#x27;</span>)</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    xuxing.<span class="hljs-title function_">aaa</span>()</span><br><span class="language-javascript">    wuxian.<span class="hljs-title function_">aaa</span>()</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//当你访问的方法或者属性是自身实例化没有的,那他就会根据原型链往上一次进行查找</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(wuxian.<span class="hljs-title function_">toString</span>())<span class="hljs-comment">//[object Object]</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//调用共有方法</span></span><br><span class="language-javascript">    xuxing.<span class="hljs-title function_">sayName</span>()</span><br><span class="language-javascript">    xuxing.<span class="hljs-title function_">sayAge</span>()</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> arr = []</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// console.log(xuxing.say === wuxian.say)</span></span><br><span class="language-javascript">    <span class="hljs-comment">// console.log(xuxing.sayName === wuxian.sayName)</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(xuxing.<span class="hljs-property">__proto__</span> === <span class="hljs-title class_">Student</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>) <span class="hljs-comment">//true</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">__proto__</span>) <span class="hljs-comment">//null 原型链的尽头</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">  </span><br><span class="language-javascript"></span><br><span class="language-javascript">        </span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-cn&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">          *&#123;<span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;&#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-meta"></span></span><br><span class="hljs-meta"><span class="language-javascript">    &#x27;use strict&#x27;</span>;</span><br><span class="language-javascript">    <span class="hljs-comment">/* </span></span><br><span class="hljs-comment"><span class="language-javascript">        对象的继承 就是将父类的属性和方法继承给子类</span></span><br><span class="hljs-comment"><span class="language-javascript">    */</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//父类</span></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">Father</span>(<span class="hljs-params">name,age,money</span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">money</span> = money</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-comment">//父类的方法</span></span><br><span class="language-javascript">    <span class="hljs-title class_">Father</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">say</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>,<span class="hljs-string">&#x27;我是父类的方法&#x27;</span>)</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//子类</span></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">Son</span>(<span class="hljs-params">name,age,sex</span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-comment">//继承父类的属性</span></span><br><span class="language-javascript">        <span class="hljs-title class_">Father</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>,name,age) <span class="hljs-comment">//属性继承</span></span><br><span class="language-javascript">        <span class="hljs-comment">//子类独有的属性</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">sex</span> = sex</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-comment">//方法继承 方式一 , 缺点就是建立了引用关系,子类更新会影响到父类</span></span><br><span class="language-javascript">    <span class="hljs-comment">// Son.prototype = Father.prototype</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//方式二 利用__proto__继承 缺点就是会把属性也给继承到自身的原型上</span></span><br><span class="language-javascript">    <span class="hljs-comment">// Son.prototype = new Father()</span></span><br><span class="language-javascript">    <span class="hljs-comment">// Son.prototype.constructor = Son</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//方式三 创建一个新的类,类专门用来继承</span></span><br><span class="language-javascript">    <span class="hljs-comment">// function Fn()&#123;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// &#125;</span></span><br><span class="language-javascript">    <span class="hljs-comment">// Fn.prototype = Father.prototype //自身原型的值设置为父类的值</span></span><br><span class="language-javascript">    <span class="hljs-comment">// Son.prototype = new Fn()</span></span><br><span class="language-javascript">    <span class="hljs-comment">// Son.prototype.constructor = Fn</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//方式四 Object.assgin()对象合并</span></span><br><span class="language-javascript">    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(<span class="hljs-title class_">Son</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>,<span class="hljs-title class_">Father</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>)</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//希望子类能继承父类的属性</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span>  f = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Father</span>(<span class="hljs-string">&#x27;路遥&#x27;</span>)</span><br><span class="language-javascript">    <span class="hljs-keyword">let</span>  s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>(<span class="hljs-string">&#x27;徐星&#x27;</span>,<span class="hljs-number">19</span>,<span class="hljs-string">&#x27;nan&#x27;</span>)</span><br><span class="language-javascript">    f.<span class="hljs-title function_">say</span>()</span><br><span class="language-javascript">    s.<span class="hljs-title function_">say</span>()</span><br><span class="language-javascript">        </span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h3 id="es6类"><a href="#es6类" class="headerlink" title="es6类"></a>es6类</h3><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-cn&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">          *&#123;<span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;&#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-meta"></span></span><br><span class="hljs-meta"><span class="language-javascript">    &#x27;use strict&#x27;</span>;</span><br><span class="language-javascript">    <span class="hljs-comment">/* </span></span><br><span class="hljs-comment"><span class="language-javascript">        es6 新增了一个关键词叫做class 作用就是创建一个类</span></span><br><span class="hljs-comment"><span class="language-javascript">        class 运用的不是一个新的技术他就是es5原型方式的一个简写方案(语法糖)</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">    */</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//创建类</span></span><br><span class="language-javascript">    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>&#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">static</span> sex = <span class="hljs-string">&#x27;nan&#x27;</span></span><br><span class="language-javascript">        <span class="hljs-comment">//书写代码的方式就是正常书写,不要把它当做对象来书写</span></span><br><span class="language-javascript">        <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name,age</span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-comment">//构造器 存储的就是类的动态成员</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name</span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-comment">//类的行为</span></span><br><span class="language-javascript">        <span class="hljs-title function_">say</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`may name is <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span>`</span>)</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//创建类的实例化</span></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> dog = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>(<span class="hljs-string">&#x27;徐星&#x27;</span>,<span class="hljs-number">2</span>)</span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> cat = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>(<span class="hljs-string">&#x27;无限&#x27;</span>,<span class="hljs-number">1</span>)</span><br><span class="language-javascript">    dog.<span class="hljs-title function_">say</span>()</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//es6类的继承只需要借助 extends 关键词就可以了</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Animal</span>&#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name,age,color</span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-comment">//super关键词等价于拿到父类方法,可以执行表示拿到父类的const,也可以当做对象访问父类的方法</span></span><br><span class="language-javascript">            <span class="hljs-comment">//super关键词继承属性的时候必须写到私有属性之前</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">super</span>(name,age)<span class="hljs-comment">//继承父类的属性</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">color</span> = color <span class="hljs-comment">//私有属性</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-variable language_">super</span>.<span class="hljs-title function_">say</span>()</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-comment">//方法是默认继承的</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// console.log(dog.__proto__)</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> wuxian = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&#x27;无限&#x27;</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;black&#x27;</span>)</span><br><span class="language-javascript">    wuxian.<span class="hljs-title function_">say</span>()</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(dog.<span class="hljs-property">say</span> === cat.<span class="hljs-property">say</span>)<span class="hljs-comment">//true</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//访问静态属性</span></span><br><span class="language-javascript">    <span class="hljs-comment">// console.log(Animal.sex)</span></span><br><span class="language-javascript">      </span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>WebFrontend</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML5笔记</title>
    <url>/2022/07/30/WebFrontend/UI/HTML5%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>复习以下HTML和CSS基础知识，参考书籍：《HTML&amp;CSS设计与构造网站》</p>
<h1 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h1><h2 id="HTML描述页面的结构"><a href="#HTML描述页面的结构" class="headerlink" title="HTML描述页面的结构"></a>HTML描述页面的结构</h2><p>HTML代码由包括含在尖括号种的字符构成，这些代码称为HTML元素。元素通常由两个标签构成：一个起始标签和一个结束标签（结束标签要多一个斜杠）。每个HTML元素都会向浏览器传达起始标签和结束标签之间的内容的结构信息。</p>
<p>标签的作用就像是容器。它们告诉你起始标签和结束标签之间的内容的结构信息。</p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220727205551238.png" alt="image-20220727205551238"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220727205655417.png" alt="image-20220727205655417"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220727205704320.png" alt="image-20220727205704320"></p>
<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><p>特性提供有关元素中内容的附加信息。它们出现在元素起始标签中，并由特性<strong>名称</strong>和特性<strong>值</strong>组成，中间由等号隔开。</p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220727210210558.png" alt="image-20220727210210558"></p>
<h1 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h1><ul>
<li>结构化标记：用来描述标题和段落的元素。</li>
<li>语义化标记：表达特定含义的标记。</li>
</ul>
<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>~<br><span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="粗体斜体"><a href="#粗体斜体" class="headerlink" title="粗体斜体"></a>粗体斜体</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span> //粗体<br><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>	//斜体<br></code></pre></td></tr></table></figure>

<h2 id="上标和下标"><a href="#上标和下标" class="headerlink" title="上标和下标"></a>上标和下标</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">sup</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">sup</span>&gt;</span>//如2²<br><span class="hljs-tag">&lt;<span class="hljs-name">sub</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">sub</span>&gt;</span>//如H₂O<br></code></pre></td></tr></table></figure>

<h2 id="空白"><a href="#空白" class="headerlink" title="空白"></a>空白</h2><p>当浏览器遇到两个或两个以上的连续空格时，只将其显示为一个空格。这一特性称为<strong>白色空间折叠</strong>.</p>
<h2 id="换行和水平线"><a href="#换行和水平线" class="headerlink" title="换行和水平线"></a>换行和水平线</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span>//换行符<br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span>//上下文章分割线<br></code></pre></td></tr></table></figure>

<h2 id="语义化标记"><a href="#语义化标记" class="headerlink" title="语义化标记"></a>语义化标记</h2><p>有一些元素，它们不不影响网页结构，却为所在的页面添加了格外信息——这些元素称为语义化标记。</p>
<p>如em和blockquote这些标签</p>
<h2 id="加粗和强调"><a href="#加粗和强调" class="headerlink" title="加粗和强调"></a>加粗和强调</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>元素的作用是表示其中的内容十分重要。默认情况显示为粗体<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>元素其强调作用，能够细微改变语句的含义<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span> <br></code></pre></td></tr></table></figure>

<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>这两个元素都可以用cite特性来表面引用的来源。cite</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">blockquote</span> <span class="hljs-attr">cite</span>=<span class="hljs-string">&quot;www.wrxinyue.cn&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">blockquote</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">q</span>&gt;</span>标记段落较短引用<span class="hljs-tag">&lt;/<span class="hljs-name">q</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="缩写词和首字母缩写词"><a href="#缩写词和首字母缩写词" class="headerlink" title="缩写词和首字母缩写词"></a>缩写词和首字母缩写词</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">abbr</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Professor&quot;</span>&gt;</span>Prof<span class="hljs-tag">&lt;/<span class="hljs-name">abbr</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">acronym</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Professor&quot;</span>&gt;</span>Prof<span class="hljs-tag">&lt;/<span class="hljs-name">acronym</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="引文和定义"><a href="#引文和定义" class="headerlink" title="引文和定义"></a>引文和定义</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">cite</span>&gt;</span>元素可以用来表明引用的来源<span class="hljs-tag">&lt;/<span class="hljs-name">cite</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dfn</span>&gt;</span>元素用来表示一个新术语定义<span class="hljs-tag">&lt;/<span class="hljs-name">dfn</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="设计者详细信息"><a href="#设计者详细信息" class="headerlink" title="设计者详细信息"></a>设计者详细信息</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">address</span>&gt;</span>元素有一个非常特殊的用途：包含页面设计者的联系详情<span class="hljs-tag">&lt;/<span class="hljs-name">address</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="内容的修改"><a href="#内容的修改" class="headerlink" title="内容的修改"></a>内容的修改</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ins</span>&gt;</span>下划线<span class="hljs-tag">&lt;/<span class="hljs-name">ins</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">del</span>&gt;</span>删除线<span class="hljs-tag">&lt;/<span class="hljs-name">del</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">s</span>&gt;</span>元素表示不准确或不相关却不应当予以删除的内容<span class="hljs-tag">&lt;/<span class="hljs-name">s</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span>//使用由该元素来创建有序列表<br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>有序列表1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>有序列表2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>有序列表3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>有序列表4<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>无序列表<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>无序列表<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>无序列表<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>无序列表<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="定义列表"><a href="#定义列表" class="headerlink" title="定义列表"></a>定义列表</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span>	//定义列表由该元素创建，并通常包含一系列术语及其定义<br>	<span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>元素用来包含被定义的术语<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>元素用来包含定义<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="嵌套列表"><a href="#嵌套列表" class="headerlink" title="嵌套列表"></a>嵌套列表</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>一级嵌套<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>一级嵌套<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>二级嵌套<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>二级嵌套<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>一级嵌套<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><h2 id="编写链接"><a href="#编写链接" class="headerlink" title="编写链接"></a>编写链接</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">链接是由&lt;a&gt;元素建立的。用户可以单击位于起始标签&lt;a&gt;和结束标签&lt;/a&gt;之间的任何内容。使用href特性来指定要链接到的页面。<br><br>如:<br>&lt;1 href=&quot;www.wrxinyue.cn&quot;&gt;我的博客地址&lt;/a&gt;<br></code></pre></td></tr></table></figure>

<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>对于规模较大的网站而言，在管理代码时，更合理的方式是将不同类别的别的页面保存在不同的文件夹中。网站的文件夹有时也称为目录。</p>
<h2 id="相对URL"><a href="#相对URL" class="headerlink" title="相对URL"></a>相对URL</h2><p>相对URL可用于为网站内部的页面之间建立链接。它用一种简短的方式告诉浏览器去何处查找文件。</p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220727222749598.png" alt="image-20220727222749598"></p>
<h2 id="EMAIL链接"><a href="#EMAIL链接" class="headerlink" title="EMAIL链接"></a>EMAIL链接</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">可以用&lt;a&gt;元素建立email链接<br><br>mailto：<br>&lt;a href=&quot;mailto&quot;:wrxinyue@formax.com&gt;给我发邮件&lt;/a&gt;<br></code></pre></td></tr></table></figure>

<h2 id="在新窗口打开链接"><a href="#在新窗口打开链接" class="headerlink" title="在新窗口打开链接"></a>在新窗口打开链接</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">target:<br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.wrxinyue.cn&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>新的窗口打开链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="链接到当前页面的某个特定位置"><a href="#链接到当前页面的某个特定位置" class="headerlink" title="链接到当前页面的某个特定位置"></a>链接到当前页面的某个特定位置</h2><p>只需要使用id特性就可以实现链接达到目标位置目的。</p>
<p>id特性值必须以字母或者下划线开头，同一页面不能出现两个相同id的值。</p>
<p>要连接到一个使用id特性的元素，还需要用到&lt; a&gt;元素，不同的是它的href特性值以#开头，后面跟着你所要链接元素的id特性值。实例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;top&quot;</span>&gt;</span>需要到达的地方<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#top&quot;</span>&gt;</span>点我开始到达<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="链接到其他页面的某个特定位置"><a href="#链接到其他页面的某个特定位置" class="headerlink" title="链接到其他页面的某个特定位置"></a>链接到其他页面的某个特定位置</h2><p>方法和上面类型，添加绝对或者相对链接即可，实列：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span> = <span class="hljs-string">&quot;http://www,htmalandcssbook.com/#bottom&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h1 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h1><h2 id="网站上存储图像"><a href="#网站上存储图像" class="headerlink" title="网站上存储图像"></a>网站上存储图像</h2><p>一般网站图片会存在images文件夹中，但是我会选择使用图床给服务器减少负担</p>
<h2 id="添加图像"><a href="#添加图像" class="headerlink" title="添加图像"></a>添加图像</h2><p>&lt; img&gt;图像的参数必须包含src和alt参数：</p>
<blockquote>
<ul>
<li>src：图片地址</li>
<li>alt：图片无法显示出现的描述</li>
<li>title：添加图片的附加信息</li>
<li>height：以像素为单位来指定图像的高度</li>
<li>width：以像素为单位来指定图像的宽度</li>
</ul>
</blockquote>
<p>实列：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;images/quokka.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;quokka&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;......&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;images/quokka.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;quokka&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;600&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;450&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure>

<h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><p>表格以网络形式表示数据。网络中每个块称为表格的一个单元格。</p>
<h2 id="基本的表格结构"><a href="#基本的表格结构" class="headerlink" title="基本的表格结构"></a>基本的表格结构</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span>元素用来创建表格<br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>table row表示每行的开始<br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>wable data，表示表格中的每个单元格<br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>table heading，表示类或行的标题<br>scope特性来表面此元素是列标题还是行标题。col表示列标题，row表示行标题<br></code></pre></td></tr></table></figure>

<p>实例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">scope</span> = <span class="hljs-string">&quot;col&quot;</span>&gt;</span>Saturday<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">scope</span> = <span class="hljs-string">&quot;col&quot;</span>&gt;</span>Sunday<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span> =<span class="hljs-string">scope</span> = <span class="hljs-string">&quot;row&quot;</span>&gt;</span>Tickets sold:<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>120<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>130<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">scope</span> = <span class="hljs-string">&quot;row&quot;</span>&gt;</span>Total sales：<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$600<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$675<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="跨列"><a href="#跨列" class="headerlink" title="跨列"></a>跨列</h2><p>可以在&lt; th&gt;或者&lt; td&gt;元素中用colspan特性来表明单元格所要跨越的列数。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>9am<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>10am<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>11am<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>12am<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Monday<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span> = <span class="hljs-string">&quot;2&quot;</span>&gt;</span>Geography<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Math<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Art<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Tuesday<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span> = <span class="hljs-string">&quot;30&quot;</span>&gt;</span>Gym<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Home Ec<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220728111027574.png" alt="image-20220728111027574"></p>
<h2 id="跨行"><a href="#跨行" class="headerlink" title="跨行"></a>跨行</h2><p>和跨列差不多在&lt; th&gt;或者&lt; td&gt;元素中用rowspan特性来表明单元格所要跨越的行数</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>ABC<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>BBC<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>CNN<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>6pm * 7pm<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">rowspan</span> = <span class="hljs-string">&quot;2&quot;</span>&gt;</span>Movie<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Comedy<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>News<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>7pm * 8pm<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Sport<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Current Affairs<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220728111700007.png" alt="image-20220728111700007"></p>
<h2 id="长表格"><a href="#长表格" class="headerlink" title="长表格"></a>长表格</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span>//表格标题<br><span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span>//表格主体<br><span class="hljs-tag">&lt;<span class="hljs-name">tfoot</span>&gt;</span>//表格脚注<br></code></pre></td></tr></table></figure>

<p>实列：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Date<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Income<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Expenditure<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>1st January<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>250<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>36<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>2nd January<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>285<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>48<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- additional rows as above --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>31st January<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>129<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>64<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tfoot</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>7824<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1241<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tfoot</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220728113037759.png" alt="image-20220728113037759"></p>
<h1 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h1><h2 id="表单概述"><a href="#表单概述" class="headerlink" title="表单概述"></a>表单概述</h2><p>网络最知名的表单大概就要术语Google主页中的搜索框了。除了可以让用户进行搜索。表单还可以让用户在线完成其他功能</p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220728113619686.png" alt="image-20220728113619686"></p>
<h2 id="表单控件"><a href="#表单控件" class="headerlink" title="表单控件"></a>表单控件</h2><p>添加文本：</p>
<blockquote>
<ul>
<li>单行文本框Texi input：用于单行文本</li>
<li>密码框Password input：类似于单行文本框，但它会掩盖输入其中的字符</li>
<li>文本域Text area：用于较长的文本，例如消息和评论</li>
</ul>
</blockquote>
<p>进行选择：</p>
<blockquote>
<ul>
<li>单选按钮Radio buttons：用户必须选择多个选项中的一个使用</li>
<li>复选框Checkboxes：用户可以选择一个或多个选项时使用</li>
<li>下拉列表Drop-down boxes：用户必须从一个选项列表中挑选其中之一时使用</li>
</ul>
</blockquote>
<p>提交表单：</p>
<blockquote>
<ul>
<li>提交按钮Submit buttons：从当前表单向另一个网页提交数据</li>
<li>图像按钮Image buttons：类似于提交按钮，但只能提交图片</li>
</ul>
</blockquote>
<p>上传文件：</p>
<blockquote>
<ul>
<li>允许用户把文件（例如图片）上传到网站。</li>
</ul>
</blockquote>
<h2 id="表单结构"><a href="#表单结构" class="headerlink" title="表单结构"></a>表单结构</h2><p><code>&lt;form&gt;</code>每个表单都位于<code>&lt;form&gt;</code>元素中。每个<code>&lt;form&gt;</code>元素都要设置action特性，通常还有要设置method特性和id特性。</p>
<ul>
<li><p>action：其特性值时服务器上一个页面的URL，这个页面用来在用户提交表单时接受表单的信息</p>
</li>
<li><p>method：提交表单可以采用get或者post方法。</p>
<ul>
<li><p>get方法：表单中的值附加在由action特性所指定的URL末尾。get方法适用以下情形</p>
<ul>
<li>短表单（例如搜索框）</li>
<li>只从Web服务器上检索数据的情形（不发送那些要在数据库中添加或删除的数据）</li>
</ul>
</li>
<li><p>post方法：表单的值被放在HTTP头信息进行发送，如果出现以下情形就用post方法</p>
<ul>
<li>允许用户上传文件</li>
<li>非常长</li>
<li>包含敏感信息（例如密码等）</li>
<li>向数据库中添加或删除信息</li>
</ul>
</li>
</ul>
</li>
<li><p>id：它的值是用来在页面上众多元素中对表单进行唯一性的标识（也常用在脚本中-例如检查你是否在那些需要信息的区域中填写了信息）</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://www.example.com/subscribe.php&quot;</span> <span class="hljs-attr">mothod</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>        This is where the from controls will appear<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="单行文本框"><a href="#单行文本框" class="headerlink" title="单行文本框"></a>单行文本框</h2><p><code>&lt;input&gt;</code>元素用来创建多种不同的表单控件，其type特性的值决定了他将要创建哪种控件</p>
<ul>
<li>type &#x3D; “text”：当type特性的值为text时，&lt; input&gt;元素会创建一个单行文本框。</li>
<li>name：这个特性的值对表单控件进行标识并与输入的信息一同传送到服务器</li>
<li>maxlength：这个特性可以用来限制用户在文本区域输入字符的数量，它的值为用户可以输入字符的最大数量</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span> = <span class="hljs-string">&quot;http://www.example.com/login.php&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span> &quot;<span class="hljs-attr">username</span>&quot; <span class="hljs-attr">size</span> = <span class="hljs-string">&quot;15&quot;</span> <span class="hljs-attr">maxlength</span> = <span class="hljs-string">&quot;30&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure>



<h2 id="密码框"><a href="#密码框" class="headerlink" title="密码框"></a>密码框</h2><p>为了保证绝对的安全，就要设置服务器通过安全套接层（SSL）与用户的浏览器进行连接。</p>
<ul>
<li>type &#x3D; “password”：当type特性的值为password时，&lt; input&gt;</li>
<li>name ：这个特性表明密码框的名称，它将与用户输入的代码一同发送到服务器</li>
<li>size，maxlength ：密码框也会可以像单行文本框一样设置size特性和maxlength特性</li>
</ul>
<h2 id="文本域（多行文本框）"><a href="#文本域（多行文本框）" class="headerlink" title="文本域（多行文本框）"></a>文本域（多行文本框）</h2><p>&lt; textarea&gt;元素用来创建多行文本框。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span> = <span class="hljs-string">&quot;http://www.example.com/comments.php&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">P</span>&gt;</span><br>        What did you think of this gig<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">P</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;comments&quot;</span> <span class="hljs-attr">cols</span> = <span class="hljs-string">&quot;20&quot;</span> <span class="hljs-attr">rows</span> = <span class="hljs-string">&quot;4&quot;</span>&gt;</span>Enter your comments .....<span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="单选按钮"><a href="#单选按钮" class="headerlink" title="单选按钮"></a>单选按钮</h2><p><code>&lt;input&gt;</code></p>
<ul>
<li>type &#x3D; “radio”：单选按钮只让用户从一个选项中选择其中一个</li>
<li>name：将用户所选择选项的值一同发送到服务器中</li>
<li>value：为选项指定了被选中时要发送到服务器的值</li>
<li>cheacked：用来指定当页面加载时哪个值</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span> = <span class="hljs-string">&quot;httpL//www.example.com/profile.php&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>        Please select your favorite genre:<br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;genre&quot;</span> <span class="hljs-attr">value</span> = <span class="hljs-string">&quot;rock&quot;</span> <span class="hljs-attr">checked</span> = <span class="hljs-string">&quot;checked&quot;</span> /&gt;</span> Rpck<br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;genre&quot;</span> <span class="hljs-attr">value</span> = <span class="hljs-string">&quot;pop&quot;</span> /&gt;</span> Pop<br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;genre&quot;</span> <span class="hljs-attr">value</span> = <span class="hljs-string">&quot;jazz&quot;</span> /&gt;</span> Jazz<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220728163318275.png" alt="image-20220728163318275"></p>
<h2 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h2><p>&lt; input&gt;</p>
<ul>
<li>type &#x3D; “checkbox”复选框允许用户在回答一个问题时选择（和取消选择）一个或多个选项。</li>
<li>name：将用户所选择选项的值一同发送到服务器中</li>
<li>value：为选项指定了被选中时要发送到服务器的值</li>
<li>checked：用来指定当页面加载时哪个值</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span> = <span class="hljs-string">&quot;http://www.example.com/profile.php&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">P</span>&gt;</span><br>        Please select your favorite music service(s);<br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;service&quot;</span> <span class="hljs-attr">value</span> = <span class="hljs-string">&quot;itunes&quot;</span> <span class="hljs-attr">checked</span> = <span class="hljs-string">&quot;checked&quot;</span> /&gt;</span> iTunes<br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;service&quot;</span> <span class="hljs-attr">value</span> = <span class="hljs-string">&quot;lastfm&quot;</span> /&gt;</span> Last.fm<br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;service&quot;</span> <span class="hljs-attr">value</span> = <span class="hljs-string">&quot;spotify&quot;</span> /&gt;</span> Spotify <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">P</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="下拉列表框"><a href="#下拉列表框" class="headerlink" title="下拉列表框"></a>下拉列表框</h2><p><code>&lt;slect&gt;</code></p>
<p>该元素用来创建下拉列表框，它包含两个或者两个以上的<code>&lt;option&gt;</code>元素</p>
<ul>
<li>name：指定这个表单控件名称，此名称与用户选项值一并发送到服务器。</li>
</ul>
<p><code>&lt;option&gt;</code></p>
<p>该元素用于指定用户可以选择的选项。</p>
<ul>
<li>value：<code>option</code>元素使用value特性来指定选项的值，如果该选项被选中，那么这个值将与控件的名称一并发送到服务器</li>
<li>selected特性可以用来指定当前页面加载时被选中的选项。selected特性的值应该时selected。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span> = <span class="hljs-string">&quot;http://www.example.com/profile.php&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>        What device do you listen to music on<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;devices&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span> = <span class="hljs-string">&quot;ipod&quot;</span>&gt;</span>iPod<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span> = <span class="hljs-string">&quot;radio&quot;</span>&gt;</span>Radio<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span> = <span class="hljs-string">&quot;computer&quot;</span><span class="hljs-attr">Computer</span>&lt;/<span class="hljs-attr">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure>



<h2 id="多选框"><a href="#多选框" class="headerlink" title="多选框"></a>多选框</h2><p><code>&lt;select&gt;</code></p>
<ul>
<li>size：可以通过增加size特性的值来将一个下拉列表框变成一个能显示多个选项的列表框</li>
<li>multiple：该特性的值设置为multiple，允许用户从这一列表中选择多个选项</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span> = <span class="hljs-string">&quot;http://www.example.com/profile.php&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>        Do you paly any ......<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;instruments&quot;</span> <span class="hljs-attr">size</span> = <span class="hljs-string">&quot;3&quot;</span> <span class="hljs-attr">multiple</span> = <span class="hljs-string">&quot;multiple&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span> = <span class="hljs-string">&quot;guitar&quot;</span> <span class="hljs-attr">selected</span> = <span class="hljs-string">&quot;selected&quot;</span>&gt;</span>Guitar<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span> = <span class="hljs-string">&quot;drums&quot;</span> <span class="hljs-attr">Drums</span>&gt;</span>Drums<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span> = <span class="hljs-string">&quot;keyboard&quot;</span> <span class="hljs-attr">selected</span> = <span class="hljs-string">&quot;selected&quot;</span>&gt;</span>Keyboard<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span> = <span class="hljs-string">&quot;bass&quot;</span>&gt;</span>Bass<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure>



<h2 id="文件上传域"><a href="#文件上传域" class="headerlink" title="文件上传域"></a>文件上传域</h2><p><code>&lt;input&gt;</code></p>
<p>如果你希望让用户上传文件（例如图像、视频、mp3或者PDF），就需要文件域</p>
<ul>
<li><p>type &#x3D; ”file“：这个类型的input会创建一个后面附有Browse按钮的类似文本框的控件。当用户点击Browse按钮时，会打开一个新窗口来让用户从它们的计算机上选择一个文件上传到网站。</p>
<p>如果允许用户上传文件，必须将<code>&lt;form&gt;</code>元素上的method特性值设置为post（HTTP get方式是不能发送文件的）。</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span> = <span class="hljs-string">&quot;http://example.com/upload.php&quot;</span> <span class="hljs-attr">method</span> = <span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>        Upload your song in MP3 format:<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;user song&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span> = <span class="hljs-string">&quot;Upload&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure>



<h2 id="提交按钮"><a href="#提交按钮" class="headerlink" title="提交按钮"></a>提交按钮</h2><p><code>&lt;input&gt;</code></p>
<ul>
<li>type &#x3D; “submit”：提交按钮用来将表单发送到服务器。</li>
<li>name：可以用name特性但不是必须的</li>
<li>value：用于控制在按钮上显示的文本</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span> = <span class="hljs-string">&quot;http://www.example.com/subscribe.php&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>        Subscribe to our email list:<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;email&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;subscribe&quot;</span> <span class="hljs-attr">value</span> = <span class="hljs-string">&quot;Subscribe&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="按钮和隐藏控件"><a href="#按钮和隐藏控件" class="headerlink" title="按钮和隐藏控件"></a>按钮和隐藏控件</h2><p><code>&lt;button&gt;</code></p>
<p>引入<code>&lt;button&gt;</code>元素的目的是让用户更好地控制按钮的显示方式，并且允许其他元素出现在<code>&lt;button&gt;</code>元素内</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span> = <span class="hljs-string">&quot;http://www.example.com/add.php&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">scr</span> = <span class="hljs-string">&quot;images/add.gif&quot;</span> <span class="hljs-attr">alt</span> = <span class="hljs-string">&quot;add&quot;</span> <span class="hljs-attr">width</span> = <span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">height</span> = <span class="hljs-string">&quot;10&quot;</span> /&gt;</span><br>        Add<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;bookmark&quot;</span> <span class="hljs-attr">value</span> = <span class="hljs-string">&quot;lyrics&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure>



<h2 id="标签表单控制"><a href="#标签表单控制" class="headerlink" title="标签表单控制"></a>标签表单控制</h2><p><code>&lt;lable&gt;</code></p>
<p>在使用表单控件时，可以直接通过表单控件旁边的文本说明它的作用并以此保持代码的简洁。</p>
<ul>
<li>for特性用来声明标签控件标注的是哪个表单控件。</li>
</ul>
<h2 id="组合表单元素"><a href="#组合表单元素" class="headerlink" title="组合表单元素"></a>组合表单元素</h2><p><code>&lt;fieldset&gt;</code></p>
<p>可以将相关表单控件置于<code>&lt;fieldset&gt;</code>元素中分成一组。常常会带有分界线</p>
<p><code>&lt;legend&gt;</code></p>
<p>在表单控件上的标题</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">fieldset</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">legend</span>&gt;</span><br>        Contact details<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">legend</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Email:<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;email&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Mobile:<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;moblie&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Telephon:<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;telephone&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">fieldset</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220728212900976.png" alt="image-20220728212900976"></p>
<h2 id="HTML：表单验证"><a href="#HTML：表单验证" class="headerlink" title="HTML：表单验证"></a>HTML：表单验证</h2><p>网络中的表单在用户错误地填写表单控件控件后会弹出错误提示消息，这个过程称为<strong>表单验证</strong>。</p>
<p>通常情况下，表单验证是通过JavaScript实现的。但HTML5引入了验证机制并将这一工作交由浏览器完成。</p>
<p>验证过程可以确保在表单提交后服务器能够理解用户在表单中所填写的信息。在表单发送到服务器之前对表单的内容进行验证有助于：</p>
<ul>
<li>减少服务器的工作量</li>
<li>让用户认识到表单是否存在问题时要比服务器完成验证要快</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span> = <span class="hljs-string">&quot;http://www.example.com/login&quot;</span><span class="hljs-attr">method</span> = <span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span> = <span class="hljs-string">&quot;username&quot;</span>&gt;</span>Username:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">required</span> = <span class="hljs-string">&quot;required&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span> = <span class="hljs-string">&quot;password&quot;</span>&gt;</span>Password:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">required</span> = <span class="hljs-string">&quot;required&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span> = <span class="hljs-string">&quot;Submit&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220728220232319.png" alt="image-20220728220232319"></p>
<h2 id="HTML5：日期控件"><a href="#HTML5：日期控件" class="headerlink" title="HTML5：日期控件"></a>HTML5：日期控件</h2><p><code>&lt;input&gt;</code></p>
<p>许多表单都需要收集日期、电子邮件地址和URL等信息。传统上，使用单行文本框来完成这些工作。</p>
<p>HTML5引入了新的表单控件并将某些信息的收集方式标准化，而那些不识别此类控件的旧浏览器会将它们作为单行文本框来处理。</p>
<ul>
<li>type &#x3D; “date”：要求用户提供日期，可以使用<code>&lt;input&gt;</code>元素并将其type特性的值设为date。这会在支持HTML5新输入类型的浏览器上创建一个日期输入控件。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span> = <span class="hljs-string">&quot;http://www.example.com/bookings/&quot;</span> <span class="hljs-attr">method</span> = <span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span> = <span class="hljs-string">&quot;username&quot;</span>&gt;</span>Departure date:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;date&quot;</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;depart&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span> = <span class="hljs-string">&quot;Submit&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="HTML：电子邮件和URL输入控件"><a href="#HTML：电子邮件和URL输入控件" class="headerlink" title="HTML：电子邮件和URL输入控件"></a>HTML：电子邮件和URL输入控件</h2><p><code>&lt;input&gt;</code></p>
<p>HTML5还引用了让用户输电子邮件地址和URL的输入控件。那些不支持这类输入控件的浏览器会把它们当成普通文本框来处理。</p>
<ul>
<li>type &#x3D; “email” ：如果需要用户提供电子邮件地址，你可以使用电子邮件输入控件。那些支持HTML5验证机制的浏览器将检查用户提供的信息是不是一个格式正确的电子邮件地址。有些智能手机输入电子邮件地址时还会对其键盘布局进行优化，使得键盘可以显示最有可能用到的按键（比如@符号）</li>
<li>type &#x3D; “url”：在你需要用户提供网页地址时，可以使用URL输入控件。那些支持HTML5验证机制的浏览器将检查用户所提供的信息是否符合URL的格式。有些智能收集在你输入URL时还会对其键盘布局进行优化。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span> = <span class="hljs-string">&quot;http://www.example.org/profile.php&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>        Please enter your website address:<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;website&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span> = <span class="hljs-string">&quot;Submit&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220729020716256.png" alt="image-20220729020716256"></p>
<h2 id="HTML5：搜索输入控件"><a href="#HTML5：搜索输入控件" class="headerlink" title="HTML5：搜索输入控件"></a>HTML5：搜索输入控件</h2><p><code>&lt;input&gt;</code></p>
<p>如果你想为搜索查询创建一个单行文本框，可使用HTML5为此提供一个专用输入控件。</p>
<ul>
<li>type &#x3D; “search”：创建HTML5的搜索框，应将<code>&lt;input&gt;</code>元素的type特性值设置为search，旧浏览器会显示文本框。</li>
<li>placeholder：在任何文本输入控件上，好可以使用一个名为placeholder的特性，在用户单击文本输入区域之前，文本框内显示的文本就是placeholder特性的值。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span> = <span class="hljs-string">&quot;http://www.example.org/search.php&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>        Search：<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;search&quot;</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;search&quot;</span> <span class="hljs-attr">placeholder</span> = <span class="hljs-string">&quot;Enter keyword&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span> = <span class="hljs-string">&quot;Search&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220729025948421.png" alt="image-20220729025948421"></p>
<h1 id="其他标记"><a href="#其他标记" class="headerlink" title="其他标记"></a>其他标记</h1><h2 id="DOCTYPE（文档类型）"><a href="#DOCTYPE（文档类型）" class="headerlink" title="DOCTYPE（文档类型）"></a>DOCTYPE（文档类型）</h2><p>由于HTML存在多个版本，因此每个页面的开头都应该用一个DOCTYPE声明来告诉浏览器此页面是用来HTML的哪个版本。</p>
<p>由于XHTML是采用XML编写的，因此有时你会看到使用了严格版XHTML DOCTYPE 的页面以一个可选的XML声明开头</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">HTML5<br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><br>XML声明<br><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> ?&gt;</span><br></code></pre></td></tr></table></figure>

<p>HTML中注释</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- comment goes here --&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="id特性"><a href="#id特性" class="headerlink" title="id特性"></a>id特性</h2><p>每个HTML元素都可以附带id特性。id特性用来从页面上的其他元素中对一个元素进行唯一标识，它的值应该以字母或下划线开头。</p>
<h2 id="class特性"><a href="#class特性" class="headerlink" title="class特性"></a>class特性</h2><p>每个HTML元素都可以附带一个class特性，有时候，你希望有一种方法可以指定多个元素并将这些元素和页面上的其他元素区分出来，而不是单独指定文档中的某个元素。</p>
<h2 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h2><p>有些元素在浏览器窗口中显示时总是另起一行。这些元素被称为<strong>块级</strong>元素如<code>&lt;h1&gt;、&lt;p&gt;、&lt;li&gt;等</code></p>
<h2 id="内联元素"><a href="#内联元素" class="headerlink" title="内联元素"></a>内联元素</h2><p>有些元素在显示时总是与它的邻近元素出现在同一行内。这些元素被称为<strong>内联</strong>元素如<code>&lt;a&gt;、&lt;b&gt;、&lt;em&gt;、&lt;img&gt;等</code></p>
<h2 id="将文本和元素集中在一个块级元素中"><a href="#将文本和元素集中在一个块级元素中" class="headerlink" title="将文本和元素集中在一个块级元素中"></a>将文本和元素集中在一个块级元素中</h2><p><code>&lt;div&gt;</code></p>
<p><code>&lt;div&gt;</code>元素允许你将一组元素集中到一个块级元素内。</p>
<p>如果在<code>&lt;div&gt;</code>元素上使用id特性或者class特性，就意味着你可以通过创建CSS规则来指定<code>&lt;div&gt;</code>元素会在屏幕上占据多少空间，还可以改变其内部所有元素的外观。</p>
<h2 id="将文本和元素集中在一个内联元素中"><a href="#将文本和元素集中在一个内联元素中" class="headerlink" title="将文本和元素集中在一个内联元素中"></a>将文本和元素集中在一个内联元素中</h2><p><code>&lt;span&gt;</code></p>
<p><code>&lt;span&gt;</code>元素就像是<code>&lt;div&gt;</code>元素的内联版本。它用来：</p>
<ul>
<li>在没有其他合适元素的情况下包含一段文本并将其与周围的文本区别开</li>
<li>包含若干个内联元素</li>
</ul>
<p>人们使用<code>&lt;span&gt;</code>元素最常见的原因就是可以利用CSS来控制<code>&lt;span&gt;</code>元素中的内容的外观。</p>
<p>你经常会看到<code>&lt;class&gt;</code>特性或id特性用于<code>&lt;span&gt;</code>元素.</p>
<ul>
<li>解释这个<code>&lt;span&gt;</code>元素的作用</li>
<li>这样就可以在这些具有特定class或id特性值的元素上应用CSS样式</li>
</ul>
<h2 id="内联框架"><a href="#内联框架" class="headerlink" title="内联框架"></a>内联框架</h2><p><code>&lt;iframe&gt;</code></p>
<p>内联框架就像在你的网页里分隔的小窗口——你可以在这个小窗口中看到另一个网页。<code>&lt;iframe&gt;</code>这一术语是inline frame（内联框架的缩写）。</p>
<p>内联框架是由<code>&lt;iframe&gt;</code>元素创建的。你有必要知道如何使用它的几个特性：</p>
<ul>
<li>src：特性指定要在框架中显示页面的URL。</li>
<li>height：特性指定的内联框架高度的像素值</li>
<li>width：特性指定的内联框架宽度的像素值</li>
<li>seamless：在HTML5中，一个称为seamless的新特性可以应用在不希望出现滚动条的地方</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span></span><br><span class="hljs-tag">    <span class="hljs-attr">width</span> = <span class="hljs-string">&quot;450&quot;</span><span class="hljs-attr">:</span></span><br><span class="hljs-tag">    <span class="hljs-attr">height</span> = <span class="hljs-string">&quot;350&quot;</span><span class="hljs-attr">:</span></span><br><span class="hljs-tag">    <span class="hljs-attr">src</span> = <span class="hljs-string">&quot;http://www.wrxinyue.cn&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 写在一行比较方便 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span> = <span class="hljs-string">&quot;http://www.wrxinyue.cn&quot;</span> <span class="hljs-attr">width</span> = <span class="hljs-string">&quot;450&quot;</span> <span class="hljs-attr">height</span> = <span class="hljs-string">&quot;350&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220729180846171.png" alt="image-20220729180846171"></p>
<h2 id="页面信息"><a href="#页面信息" class="headerlink" title="页面信息"></a>页面信息</h2><p><code>&lt;meta&gt;</code></p>
<p><code>&lt;meta&gt;</code>元素位于<code>&lt;head&gt;</code>元素中并包含着所在页面的相关信息。</p>
<p><code>&lt;meta&gt;</code>元素是空元素，所以它没有结束标签。它通过特性来携带信息。</p>
<p>最常用的特性是name特性和content特性，它们还经常同时出现。这些特性用来指定页面的某些特性。name特性的值就是你要设定的属性，而content特性的值就是你想给这个属性的值。</p>
<p>第一个<code>&lt;meta&gt;</code>元素的name特性表明此元素要为该页面指定一段描述信息。<strong>content</strong>特性是指定这段描述信息的位置。</p>
<p>name特性的值可以任意指定，该特性的一些常用的值有：</p>
<ul>
<li>description：用于包含一段关于页面的描述信息。</li>
<li>keywords：用于包含一组以逗号分隔的关键词列表，用户可以通过这些关键词来找到这个页面。</li>
<li>robots：用于指定搜索引擎是否可以将这个页面加入到它们的搜索结果中。如果不希望页面加入搜索结果，可以使用值noindex。如果希望搜索引擎将该页面加入搜索结果，但不要收录页面上的链接的其他页面，可以使用值nofollow</li>
</ul>
<p><code>&lt;meta&gt;</code>元素还会成对使用http-equiv特性和content特性。在下面的示例中，可以看到http-equiv特性的三个实例。每个实例都有各自的用途：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Information About Your Pages<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;description&quot;</span> <span class="hljs-attr">content</span> = <span class="hljs-string">&quot;WRXinYue’s blog&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;keywords&quot;</span> <span class="hljs-attr">content</span> = <span class="hljs-string">&quot;blog,wrxinyue,web,unity&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;robots&quot;</span> <span class="hljs-attr">content</span> = <span class="hljs-string">&quot;nofollow&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span> = <span class="hljs-string">&quot;author&quot;</span> <span class="hljs-attr">content</span> = <span class="hljs-string">&quot;WRXinYue&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span> = <span class="hljs-string">&quot;pragma&quot;</span> <span class="hljs-attr">content</span> = <span class="hljs-string">&quot;no-cache&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span> = <span class="hljs-string">&quot;expires&quot;</span> <span class="hljs-attr">content</span> = <span class="hljs-string">&quot;Fri, 04 Apr 2022 00:00:00 GMT&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<ul>
<li>author ：用于定义网页的设计者</li>
<li>pragma：用于防止浏览器对页面的缓存</li>
<li>expires：由于浏览器经常缓存页面的内容，expires选项可以用来指定页面的过期时间（以及缓存的有效期）</li>
</ul>
<h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><p>有一些字符用于编写HTML代码并作为HTML的保留字符（例如，左尖括号和右尖括号）</p>
<p>参考表：<a href="https://tool.oschina.net/commons?type=2">https://tool.oschina.net/commons?type=2</a></p>
<h1 id="视频和音频"><a href="#视频和音频" class="headerlink" title="视频和音频"></a>视频和音频</h1><h2 id="HTML5：向网页添加视频"><a href="#HTML5：向网页添加视频" class="headerlink" title="HTML5：向网页添加视频"></a>HTML5：向网页添加视频</h2><p><code>&lt;vodeo&gt;</code></p>
<p><code>&lt;vodeo&gt;</code>元素有很多特性用于控制视频的播放：</p>
<ul>
<li>src：该特性指定视频的路径。</li>
<li>poster：在视频加载时或在视频播放之前，该特性用于指定在播放器中显示一个图像。</li>
<li>width，height：这两个特性用像素值指定播放器的大小。</li>
<li>controls：如果使用该特性，就表示浏览器需要提供默认的播放控件。</li>
<li>autoplay：如果使用了该特性，就表示视频文件应该自动播放。</li>
<li>loop：如果使用该特性，就表示在视频结束之后重新播放。</li>
<li>preload：该特性告诉浏览器在页面加载时需要做什么。它可以选用以下三个值：<ul>
<li>none：该值表示在用户按下播按钮之前，浏览器不必加载视频。</li>
<li>auto：该值表示浏览器应该在页面加载时载入视频。</li>
<li>metadata：该值表示浏览器只需收集少量视频信息，比如大小、首帧图像、播放列表和持续时间。</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Adding HTML5 Video<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">src</span> = <span class="hljs-string">&quot;video/puppy.mp4&quot;</span></span><br><span class="hljs-tag">               <span class="hljs-attr">poster</span> = <span class="hljs-string">&quot;images/puppy.jpg&quot;</span></span><br><span class="hljs-tag">               <span class="hljs-attr">width</span> = <span class="hljs-string">&quot;400&quot;</span> <span class="hljs-attr">height</span> = <span class="hljs-string">&quot;300&quot;</span></span><br><span class="hljs-tag">               <span class="hljs-attr">preload</span></span><br><span class="hljs-tag">               <span class="hljs-attr">controls</span></span><br><span class="hljs-tag">               <span class="hljs-attr">loop</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>                A video of a puppy playing in the snow<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220730001457178.png" alt="image-20220730001457178"></p>
<h2 id="HTML5：多个视频源"><a href="#HTML5：多个视频源" class="headerlink" title="HTML5：多个视频源"></a>HTML5：多个视频源</h2><p><code>&lt;source&gt;</code></p>
<p>要指定播放文件的路径，可以在<code>&lt;video&gt;</code>元素中使用<code>&lt;source&gt;</code>元素可以代替起始标签<code>&lt;video&gt;</code>中的src特性</p>
<p>可以使用多个<code>&lt;source&gt;</code>元素来指定不同格式的视频。</p>
<ul>
<li>src &#x3D; 该特性用于指定视频的路径。</li>
<li>type &#x3D; 需要使用该特性来告诉浏览器视频的格式，不然它会加载一些视频，看看是否可以播放该文件（这会耗费时间并占用宽带）</li>
<li>codece &#x3D; 用来对视频进行编码的编码器也在type特性中指出。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Multiple video Sources<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">poster</span> = <span class="hljs-string">&quot;images/1.jpg&quot;</span> <span class="hljs-attr">width</span> = <span class="hljs-string">&quot;400&quot;</span> <span class="hljs-attr">height</span> = <span class="hljs-string">&quot;320&quot;</span> <span class="hljs-attr">preload</span> <span class="hljs-attr">controls</span> <span class="hljs-attr">loop</span> &gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span> = <span class="hljs-string">&quot;video/1.mp4&quot;</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&#x27;video/mp4;codecs = &quot;avcl.42E01E, mp4a.40.2&quot;&#x27;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span> = <span class="hljs-string">&quot;video/1.webm&quot;</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&#x27;video/webm;codecs = &quot;vp8, vorbis&quot;&#x27;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>                A voideo of a puppy palying in the snow<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="HTML5：向网页中添加HTML5音频"><a href="#HTML5：向网页中添加HTML5音频" class="headerlink" title="HTML5：向网页中添加HTML5音频"></a>HTML5：向网页中添加HTML5音频</h2><p>使用托管服务：</p>
<p>有些网站允许上传音频，它们还会提供一个可以嵌入到网页的播放器。比如SoundCloud.com和MySpace.com</p>
<p>使用HTML5：</p>
<p>HTML5引入了一个新元素<code>&lt;audio&gt;</code>。支持该元素的浏览器会提供默认的控件，和上面以及一样</p>
<blockquote>
<p>当访问者从网站中的一个网页跳转到另一个网页时，需要如AJAX的技术来加载页面的内容，也正因为如此，有些网站将音频播放器在新窗口中打开，这样听众在页面跳转时音乐就不会中断。</p>
</blockquote>
<p><code>&lt;audio&gt;</code></p>
<p><code>&lt;audio&gt;</code>元素包含许多可以用来控制音频播放的特性：</p>
<blockquote>
<p>src：该特性用于指定音频文件路径。</p>
<p>controls：该特性表明播放器是否显示播放控件。如果没有使用该特性，播放控件就会默认隐藏。可以利用JavaScript来指定个性化控件。</p>
<p>autopplay：该特性的出现表示音频应该自动开始播放。</p>
<p>preload：该特性在播放器没有设置autoplay时告诉浏览器应该做什么。</p>
<p>loop：该特性表示在音频播放结束后进行重新播放。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Adding HTMLs Audio<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">src</span> = <span class="hljs-string">&quot;audio/test=audio.ogg&quot;</span> <span class="hljs-attr">controls</span> <span class="hljs-attr">autoplay</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>                This browser does not suppory our audio format.<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="HTML5：多个音频源"><a href="#HTML5：多个音频源" class="headerlink" title="HTML5：多个音频源"></a>HTML5：多个音频源</h2><p><code>&lt;source&gt;</code></p>
<p>在起始标签<code>&lt;audio&gt;</code>和结束标签<code>&lt;/audio&gt;</code>之间使用<code>&lt;source&gt;</code>元素可以指定多个音频文件(<code>&lt;source&gt;</code>元素可以替代起始标签<code>&lt;audio&gt;</code>中的src特性)。</p>
<blockquote>
<ul>
<li>src：<code>&lt;source&gt;</code>元素使用src特性来表示音频文件位于何处。</li>
<li>type：type特性还有像在<code>&lt;video&gt;</code>元素中那样被广泛用在<code>&lt;source&gt;</code>元素中.</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>WebFrontend</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>关于如何HTML嵌入CSS样式（四种方法）</title>
    <url>/2021/11/21/WebFrontend/UI/%E5%85%B3%E4%BA%8E%E5%A6%82%E4%BD%95HTML%E5%B5%8C%E5%85%A5CSS%E6%A0%B7%E5%BC%8F%EF%BC%88%E5%9B%9B%E7%A7%8D%E6%96%B9%E6%B3%95%EF%BC%89/</url>
    <content><![CDATA[<h2>前言</h2>
<p>在写网页时，明明自己会学css，但是不会使用，我在网上整理了一些关于HTML嵌入CSS样式的学习资料，该资料仅供自己和大家作为参考。</p>
<p>HTML嵌入CSS样式大致有四种方法；</p>
<ul>
<li>
<p>行内样式：使用 HTML 标签的 style 属性定义 CSS 样式；</p>
</li>
<li>
<p>内嵌样式：使用 <code>&lt;style&gt;</code> 标签在 HTML 文档头部（<code>&lt;head&gt;</code> 和 <code>&lt;head&gt;</code> 之间）定义 CSS 样式；</p>
</li>
<li>
<p>链接式：使用 <code>&lt;link&gt;</code> 标签引入外部 CSS 样式表文件。</p>
</li>
<li>
<p>导入式：使用 <code>@import</code> 命令导入外部 CSS 样式表文件。</p>
</li>
</ul>
<p>第1种和第2种方法都是将 CSS 样式写到当前 HTML 文档里面，而第3种和第4种方法都是将 CSS 样式放在外部文件，然后再导入到当前 HTML 文档中。</p>
<h2>行内样式（内联样式）</h2>
<p>行内样式就是把 CSS 样式直接放在代码行内的标签中，一般都是放入标签的style属性中，由于行内样式直接插入标签中，故是最直接的一种方式，同时也是修改最不方便的样式。</p>
<p>【示例】针对段落、<code>&lt;h2&gt;</code> 标签、<code>&lt;em&gt;</code> 标签、<code>&lt;strong&gt;</code>标签以及 <code>&lt;div&gt;</code> 标签，分别应用 CSS 行内样式。</p>
<pre><code>&lt;!doctype html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;UTF-8&quot;&gt;
&lt;title&gt;行内样式&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;p style=&quot;background-color: #999900&quot;&gt;行内元素，控制段落-1&lt;/p&gt;
    &lt;h2 style=&quot;background-color: #FF6633&quot;&gt;行内元素，h2 标题元素&lt;/h2&gt;
    &lt;p style=&quot;background-color: #999900&quot;&gt;行内元素，控制段落-2&lt;/p&gt;
    &lt;strong style=&quot;font-size:30px;&quot;&gt;行内元素，strong 比 em 效果要强&lt;/strong&gt;
    &lt;div style=&quot;background-color:#66CC99; color:#993300; height:30px; line-height:30px;&quot;&gt;行内元素，div 块级元素&lt;/div&gt;
    &lt;em style=&quot;font-size:2em;&quot;&gt;行内元素，em 强调&lt;/em&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>
<blockquote>
<p>在上面示例中，行内样式由 HTML 元素的 style 属性嵌入，即将 CSS 代码放入style=&quot;&quot;引号内即可，多个 CSS 属性值则通过分号;间隔。例如示例中的 <code>&lt;div&gt;</code> 标签：</p>
<pre><code></code></pre>
</blockquote>
<div style="background-color:#66CC99; color:#993300; height:30px; line-height:30px;">行内元素，div 块级元素 </div>
<pre><code>>段落 `&lt;p&gt;` 标签设置背景色为褐色（background-color: #999900），标题 `&lt;h2&gt;` 标签设置背景色为红色（background-color: #FF6633）。
`&lt;strong&gt;` 标签设置字体为 30 像素（font-size:30px;），`&lt;div&gt;` 标签设置高度和行高为 30 像素以及进行背景色、颜色的设置（background-color:#66CC99; color:#993300; height:30px; line-height:30px;），`&lt;em&gt;` 标签设置字体大小为相对单位（font-size: 2em;）。
两个段落 `&lt;p&gt;` 标签，虽内容不同，但使用一样的背景色设置，却添加两次 CSS 行内属性设置背景色 background-color: #999900。

<p>缺点：</p>
<ul>
<li>每一个标签要设置样式都需要添加 style 属性。</li>
<li>与过去网页制作者将 HTML 的标签和样式糅杂在一起的效果不同的是，现在是通过 CSS 编写行内样式，过去釆用的是 HTML 标签属性实现的样式效果。虽方式不同，但导致的后果是一样的：后期维护成本高，即当修改页面时需要逐个打开网站每个页面一一修改，根本看不到 CSS 所起到的作用。</li>
<li>添加如此多的行内样式，页面体积大，门户网站若釆用这种方式编写，那将浪费服务器带宽和流量。</li>
</ul>
<p>网络上有些网页通过查看源文件可以看到这种编写方式，虽然一个网页只有一部分是如此做的， 但需要分情况：</p>
<ul>
<li>若网页制作者编写这样的行内样式，可以快速更改当前样式，不必考虑以前编写的样式冲突问题；</li>
<li>网页中若存在这种情况则是后台编辑时，通过编辑器生成的样式，或后台未开发完整，需为编辑人员开发可选择样式的选项而非通过编辑器直接改变颜色、粗细、背景色、倾斜等效果。</li>
</ul>
<h2 id="内嵌样式"><a href="#内嵌样式" class="headerlink" title="内嵌样式"></a>内嵌样式</h2><p>内嵌样式通过将 CSS 写在网页源文件的头部，即在 <code>&amp;lt;head&amp;gt;</code> 和 <code>&amp;lt;head&amp;gt;</code> 之间，通过使用 HTML 标签中的 <code>&amp;lt;style&amp;gt;</code> 标签将其包围，其特点是该样式只能在此页使用，解决行内样式多次书写的弊端。</p>
<p>【示例】为段落设置内嵌式样式书写方法，减少代码量。<br></code></pre></p>
<p>&lt;!doctype html&gt;</p>
<html>
<head>
<meta charset="utf-8">
<title>内嵌式</title>
<style type="text/css">
p{
    text-align: left;  /*文本左对齐*/
    font-size: 18px;  /*字体大小 18 像素*/
    line-height: 25px;  /*行高 25 像素*/
    text-indent: 2em;  /*首行缩进2个文字大小空间*/
    width: 500px;  /*段落宽度 500 像素*/
    margin: 0 auto;  /*浏览器下居中*/
    margin-bottom: 20px;  /*段落下边距 20 像素*/
}
</style>
</head>
<body>
    <p>“百度”这一公司名称便来自宋词“众里寻他千百度”。（百度公司会议室名为青玉案，即是这首词的词牌）。而“熊掌”图标的想法来源于“猎人巡迹熊爪”的刺激，与李博士的“分析搜索技术”非常相似，从而构成百度的搜索概念，也最终成为了百度的图标形象。在这之后，由于在搜索引擎中，大都有动物形象来形象，如 SOHU 的狐，如 GOOGLE 的狗，而百度也便顺理成章称作了熊。百度熊也便成了百度公司的形象物。</p>
    <p>在百度那次更换 LOGO 的计划中，百度给出的 3 个新 LOGO 设计方案在网民的投票下，全部被否决，更多的网民将选票投给了原有的熊掌标志。</p>
    <p>此次更换 LOGO 的行动共进行了 3 轮投票，直到第 2 轮投票结束，新的笑脸 LOGO 都占据了绝对优势。但到最后一轮投票时，原有的熊掌标志却戏剧性地获得了最多的网民选票，从而把 3 个新 LOGO 方案彻底否决。</p>
</body>
</html>
<pre><code>
## 链接式

<p>链接式通过 HTML 的 <code>&amp;lt;link&amp;gt;</code> 标签，将外部样式表文件链接到 HTML 文档中，这也是网络上网站应用最多的方式，同时也是最实用的方式。这种方法将 HTML 文档和 CSS 文件完全分离，实现结构层和表示层的彻底分离，增强网页结构的扩展性和 CSS 样式的可维护性。</p>
<p>【示例】<br></code></pre></p>
<p>&lt;!doctype html&gt;</p>
<html>
<head>
<meta charset="utf-8">
<title></title>
<link href="lianjie.css" type="text/css" rel="stylesheet" />
<link href="lianjie-2.css" type="text/css" rel="stylesheet" />
</head>
<body>
    <p>我是被 lianjie-2.css 文件控制的，楼下的你呢？？</p>
    <h3>楼上的，<span>lianjie.css</span> 文件给我穿的花衣服。</h3>
</body>
</html>
<pre><code>
>在上面示例中，通过 link 链接两个 CSS 文件，且都有效，这也是网站制作者将公共部分放入一个 CSS 文件，当前页面样式编写新的样式文件。

<p>lianjie.css 文件代码：<br></code></pre></p>
<p>h3{
font-weight: normal;  /<em>取消标题默认加粗效果</em>/
background-color: #66CC99;  /<em> 设置背景色 </em>/
height: 50px;  /<em>设置标签的高度</em>/
line-height:50px;  /<em> 设置标签的行高 </em>/
}
span{
color: #FFOOOO;  /<em> 字体颜色 </em>/
font-weight:bold;  /<em> 字体加粗 </em>/
}</p>
<pre><code>
lianjie-2.css 文件代码：
</code></pre>
<p>p{
color: #FF3333;  /<em>字体颜色设置</em>/
font-weight: bold;  /<em> 字体加粗 </em>/
border-bottom: 3px dashed #009933;  /<em> 设置下边框线 </em>/
line-height: 30px;  /<em> 设置行高 </em>/
}</p>
<pre><code>
>链接式样式使 CSS 代码和 HTML 代码完全分离，达到结构与样式的分开，使 HTML 代码专门构建页面结构，而美化工作由 CSS 完成。

<blockquote>
<p>链接式导入 CSS 样式的好处：</p>
<ul>
<li>CSS 文件可以放在不同的 HTML 文件中，使网站所有页面样式统一；</li>
<li>再者将 CSS 代码放入一个 CSS 文件中便于管理、减少代码以及维护时间；</li>
<li>当修改 CSS 文件时，所有应用此 CSS 文件的 HTML 文件都将更新，而不必从服务器上将所有的页面取回再修改完毕后上传。</li>
</ul>
</blockquote>
<h2 id="导入样式"><a href="#导入样式" class="headerlink" title="导入样式"></a>导入样式</h2><p>导入样式使用 @import 命令导入外部样式表。导入样式有 6 种书写方式：</p>
<blockquote>
<ol>
<li>@import daoru.css;</li>
</ol>
</blockquote>
<ol start="2">
<li>@import &amp;#039;daomxss&amp;#039;;</li>
<li>@import &quot;daoru.css&quot;;</li>
<li>@import url(daoru.css);</li>
<li>@import url(&amp;#039;daoru.css&amp;#039;);</li>
<li>@import url(&quot;daoru.css&quot;);</li>
</ol>
<p>【示例】导入样式表 lianjie.css 和 daoru.css 以及书写<code> &amp;lt;body&amp;gt;</code> 标签的背景色，注意导入样式表和 <code>&amp;lt;body&amp;gt;</code> 标签样式的前后不可颠倒。<br></code></pre></p>
<html>
<head>
<meta charset="utf-8">
<title></title>
<style type="text/css">
    @import url(lianjie.css);
    @import url(daoru.css);
    body { background-color: #e4e929; }
</style>
</head>
<body>
    <div>
        <p>我是被 lianjie-2.css 文件控制的，楼下的你呢？？</p>
        <h3>褛上的，<span>lianjie.css</span>文件给我穿的花衣服。</h3>
    </div>
</body>
</html>
<pre><code>
>在上面示例中，必须是`@import url(&quot;lianjie-2.css&quot;); p&#123;text-indent: 3em;&#125;`，而不能是`p&#123;text-indent:3em;&#125; @import url(&quot;lianjie-2.css&quot;)`;，否则将导入效果无效。在 CSS 文件中也需要将 @import 放在前面，后面加入 CSS 样式，否则也是无效。
>lianjie.css 文件代码，同上一个示例即链接式。
>daoru.css 文件代码：
>
><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">&gt;@import url(&amp;quot;lianjie-2.css&amp;quot;);<br>&gt;p &#123; text-indent: 3em; &#125;<br></code></pre></td></tr></table></figure>
</code></pre>
<pre><code></code></pre>]]></content>
      <categories>
        <category>WebFrontend</category>
      </categories>
  </entry>
  <entry>
    <title>我使用Vite的坑</title>
    <url>/2023/04/18/WebFrontend/tools/%E6%88%91%E4%BD%BF%E7%94%A8Vite%E7%9A%84%E5%9D%91/</url>
    <content><![CDATA[<h3 id="部分热重载失效问题"><a href="#部分热重载失效问题" class="headerlink" title="部分热重载失效问题"></a>部分热重载失效问题</h3><p>如果您修改了一个组件的模板代码，但是在修改后，浏览器没有自动更新，这可能是因为该模板代码包含了组件实例状态（例如 <code>v-model</code> 绑定或者 <code>ref</code> 引用），导致组件无法被热更新。这种情况下，您可以尝试在组件模板外面添加一个包装元素，以将状态提取到外层组件，从而使得内层组件可以被热更新。</p>
<p>例如，在以下示例中，我们将 <code>v-model</code> 绑定添加到一个名为 <code>value</code> 的属性上：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;input :value=&quot;value&quot; @input=&quot;$emit(&#x27;update:value&#x27;, $event.target.value)&quot;&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure>

<p>在这种情况下，如果您想要热更新组件，您可以尝试在组件模板外面添加一个 <code>&lt;div&gt;</code> 元素，从而将 <code>value</code> 提取到外层组件中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;input :value=&quot;value&quot; @input=&quot;$emit(&#x27;update:value&#x27;, $event.target.value)&quot;&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure>
<p>这将使得组件可以被热更新，并且您可以在修改代码后立即看到效果。</p>
<p>请注意，这种情况只适用于修改了组件模板的情况。如果您修改了组件的 JavaScript 代码，那么您需要确保修改的代码可以被正确编译和加载，并且没有错误或运行时异常。</p>
]]></content>
      <categories>
        <category>/</category>
      </categories>
  </entry>
  <entry>
    <title>1.C#与.NET框架</title>
    <url>/2022/07/22/WebBackend/C#/1C#%E4%B8%8ENET%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<p>由于某种原因又重新从.NET开始学，加强记忆，并重新整理优化笔记</p>
<h2>概念：.Net与C</h2>
<ul>
<li>.net（dotnet）:一般指.Net Framework框架.一种平台，一种技术</li>
<li>C#（sharp）：一种编程语言，可以开发基于.net平台的应用。</li>
<li>(*）Java既是一种平台又是一种编程语言</li>
</ul>
<blockquote>
<p>.Net FrameWork框架是包含.Net平台,.Net FrameWork框架是.NET平台中不可缺少的一部分，它提供了一个稳定的运行环境来保证我们基于.NET平台开发的各种应用能够正常的运转</p>
</blockquote>
<h3>.NET dotnet</h3>
<ul>
<li>
<p>Microsoft 新一代多语言的开发平台，用于构建和运行应用程序。</p>
</li>
<li>
<p>C# （C Sharp）</p>
<ul>
<li>Microsoft 专为.NET推出的高级编程语言。</li>
<li>从语言技术、风格、严谨性等特点上来说，C#可称为诸多编程语言中最为优秀的一款，甚至由它引发出计算机界中的多种新规范和新特征。</li>
</ul>
<h3>Mono</h3>
<ul>
<li>Novell公司支持在其他操作系统下开发.NET程序的框架。</li>
<li>Unity借助Mono实现跨平台，核心是.NET Framework 框架。</li>
</ul>
</li>
</ul>
<h2>.NET框架（.Net FrameWork）由两部分组成：</h2>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220722200821697.png" alt="image-20220722200821697" /></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220722201347762.png" alt="image-20220722201347762" /></p>
<ul>
<li>CLR（Common Language Runtime，公共语言运行库）：在运行时管理程序的执行，包括内存管理和垃圾收集、代码安全验证、代码执行线程管理及异常处理等</li>
<li>BCL（Base Class Library，基类库）：包括通用基础类（文件操作、字符串操作等相关的类）、集合类（列表、字典、散列表）、线程和同步类、XML类。</li>
</ul>
<h3>面向对象的开发环境</h3>
<p>CLR、BCL和C#完全是面向对象的，并形成了良好的集成环境。
系统为本地程序和分布式系统都提供了一致的、面向对象的编程模型。为桌面应用程式、移动应用程序和Web开发提供了软件开发接口，涉及的目标范围很广，从桌面服务器到手机。</p>
<p>.Net都能干什么:</p>
<ul>
<li>桌面应用程序</li>
<li>Internet应用程序 ASP.NET</li>
<li>手机开发 Wp8</li>
<li>Unity3D游戏开发或者虚拟现实</li>
</ul>
<p>.Net两种交互模式:</p>
<ul>
<li>C/S：客户机（Client）/服务器模式（Server）如：QQ</li>
<li>B/S：浏览器（Browser）/服务器模式（Server）</li>
</ul>
<h3>自动垃圾收集</h3>
<p>CLR有一项服务叫GC（garbage collector，垃圾收集器），他能自动管理内存。GC自动从内存中删除程序不在访问的对象。</p>
<h3>互操作性</h3>
<p>.NET框架专门考虑了不同的.NET语言、操作系统或WIn32 DLL 和COM之间的互操作性。</p>
<h3>不需要COM</h3>
<p>.NET框架使程序员摆脱了COM的束缚</p>
<h3>简化的部署</h3>
<p>.NET程序不需要使用注册表注册
.NET提供一种称为并行执行的特性，允许一个DLL的不同版本在同一台机械上存在。</p>
<h3>类型安全性</h3>
<p>CLR检查并确保参数及其他数据对象的类型安全，不同编程语言编写的组件之间也没有问题。</p>
<h3>基类库</h3>
<p>.NET框架提供了一个庞大的基础类库，很自然地，它被称为基类库（Base Class Library，BCL）或框架类库（Framework Class Librart，FCL）再写程序时可以使用其中的类：</p>
<blockquote>
<p>通用基础类     这些类提供了一组极为强大的工具，可以应用到许多编程任务中，比如文件操作、字符串操作、安全和加密。</p>
<p>集合类   这类实现列表、字典、散列表以及位数据。</p>
<p>线程和同步类    这些类用于创建多线程应用程序</p>
<p>XML类  这些类用于创建、读取以及操作XML文档</p>
</blockquote>
<h2>编译成CIL</h2>
<p>.NET语言的编译器接受源代码文件，并生成名为程序集的输出文件</p>
<ul>
<li>
<p>程序集要么是可执行的，要么是DLL</p>
</li>
<li>
<p>程序集里的代码并不是本机代码，而是一种名为CIL（Common Intermediate Language，公共中间语言）的中间语言</p>
</li>
<li>
<p>程序集包含的信息中，包含下列项目：</p>
</li>
</ul>
<blockquote>
<p>程序的CIL；</p>
<p>程序中使用的类型元数据；</p>
<p>对其他程序引用的元数据</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220722221335864.png" alt="image-20220722221335864" /></p>
<h3>编译成本机代码并执行</h3>
<p>程序的CIL直到被调用运行时才会被编译成本机代码。在运行时，CLR执行下面的步骤</p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220722222159720.png" alt="image-20220722222159720" /></p>
<p>无论原始源文件的语言是什么，都执行同样的编译和执行的过程</p>
<p>以下图片说明了3个用不同语言编写的程序的完整编译时和运行的过程</p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220722222758307.png" alt="image-20220722222758307" /></p>
<h2>什么是CLI</h2>
<p>CLI（Common Language Infrastructure，公共语言基础结构），它发.NET框架的所有组件链接成一个内聚的、一致的系统。它展示了系统的感念和架构，并详细说明了所有软件都必须遵守的规则和约定。CLI和C#被Ecmna International批准为开放的国际标准规范。</p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220722224150667.png" alt="image-20220722224150667" /></p>
<h3>CLI的重要组成部分</h3>
<ol>
<li>
<p>公共类型系统（Common Type System,CTS）</p>
<blockquote>
<ul>
<li>CTS定义了一组丰富的内置类型，以及每种类型固有的、独特的特性</li>
<li>.NET兼容编程语言提供的类型通常映射到CTS中已定义的内置类型集的某一个特殊子集</li>
<li>CTS最重要的特征之一是所有类型都继承自公共的基类-object</li>
<li>使用CTS可以确保系统类型和用户定义类型能够被任何.NET兼容的语言所使用</li>
</ul>
</blockquote>
</li>
<li>
<p>公共语言规范（Common Language Specification，CLS）</p>
<blockquote>
<p>详细说明了一个.NET兼容编程语言的规则、属性和行为，其主题包括数据类型、类结构和参数传递</p>
</blockquote>
</li>
</ol>
<h2>什么是CLR</h2>
<p>.NET框架的核心组件时CLR，它在操作系统的顶层，负责管理和程序的执行，CLR还提供下列服务：</p>
<blockquote>
<p>自动垃圾收集；</p>
<p>安全和认证；</p>
<p>通过访问BCL得到广泛的编程功能，包括如Web服务和数据服务之类的功能。</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220722223526145.png" alt="image-20220722223526145" /></p>
<h2>各种缩写</h2>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220722230731151.png" alt="image-20220722230731151" /></p>
<h2>C#的演化</h2>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220722230915228.png" alt="image-20220722230915228" /></p>]]></content>
      <categories>
        <category>Unity开发日志</category>
      </categories>
      <tags>
        <tag>c#</tag>
        <tag>./net</tag>
      </tags>
  </entry>
  <entry>
    <title>C#学前入门</title>
    <url>/2022/07/22/WebBackend/C#/1.C#%E5%AD%A6%E5%89%8D%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="2-C-编程概述"><a href="#2-C-编程概述" class="headerlink" title="2. C#编程概述"></a>2. C#编程概述</h1><p>一个简单的C#程序，这段程序会输出“Hi there！”</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">//告诉编译器这个程序使用了System命名空间的类型</span><br><span class="hljs-keyword">using</span> System;<br><span class="hljs-comment">//声明一个新命名空间，名称为Simple</span><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">Simple</span>&#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>()</span>&#123;<br>            Console.WriteLine(<span class="hljs-string">&quot;Hi there!&quot;</span>)<br>        &#125;<br>    &#125;<br>&#125;<br>Copy<br></code></pre></td></tr></table></figure>

<p>在C#中，WirteLine相当于java中的println，Write相当于java中的print</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#">Console.WriteLine(<span class="hljs-string">&quot;Three integers are &#123;1&#125;, &#123;0&#125; and &#123;1&#125;.&quot;</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>);<br>Copy<br></code></pre></td></tr></table></figure>

<p>以上语句将在屏幕上显示：<br>Three integers are 6, 3 and 6.</p>
<h2 id="类型存储和变量"><a href="#类型存储和变量" class="headerlink" title="类型存储和变量"></a>类型存储和变量</h2><p>命名空间是一种把相关的类型声明分组并命名的方法。既然程序是一组相关的类型声明，那么通常会把程序声明在你创建的命名空间内部。</p>
<h2 id="预定义类型"><a href="#预定义类型" class="headerlink" title="预定义类型"></a>预定义类型</h2><p>C#提供了16种预定义类型，包括13种简单类型和3种非简单类型</p>
<p>简单类型：<br>| 名称 | 含义 |<br>| ———– | ———– |<br>| int | 32位有符号整数 |<br>| uint | 32位无符号整数 |<br>| long | 64位有符号整数 |<br>| ulong | 62位无符号整数 |<br>| short | 16位有符号整数 |<br>| ushort | 16位无符号整数 |<br>| byte | 8位有符号整数 |<br>| sbyte | 8位无符号整数 |<br>| float | 单精度浮点数 |<br>| double | 双精度浮点数 |<br>|decimal|高精度小数类型|<br>| bool | 布尔型 |<br>| char | Unicode字符串 |</p>
<p>非简单类型：</p>
<ul>
<li>object：所有其他类的基类</li>
<li>string：多个Unicode字符组成的序列</li>
<li>dynamic：在使用动态语言编写的程序集时使用</li>
</ul>
<p>C#语言是静态的，但基于.NET的一些其他语言却是动态的，也就是说变量的类型直到运行时才会被解析。由于它们是.NET语言，所以C#程序需要使用这些语言编写的程序集。问题是程序集中的类型直到运行时才会被解析，而C#又要引用这样的类型并且需要在编译的时候解析类型。为了解决这个问题，有了dynamic关键字。</p>
<p>在编译时，编译器不会对dynamic类型的变量进行类型检查。相反，它将与该变量及该变量的操作有关的所有信息打包。在运行时会对这些信息进行检查，以确保它与变量所代表的实际类型保持一致性，否则将在运行时抛出异常。</p>
<h2 id="用户定义类型"><a href="#用户定义类型" class="headerlink" title="用户定义类型"></a>用户定义类型</h2><p>C#中有6种用户自定义类型</p>
<ul>
<li>类类型class</li>
<li>结构类型struct</li>
<li>数组类型array</li>
<li>枚举类型enum</li>
<li>委托类型delegate</li>
<li>接口类型interface</li>
</ul>
<h1 id="3-方法"><a href="#3-方法" class="headerlink" title="3. 方法"></a>3. 方法</h1><h2 id="类型推断和var关键字"><a href="#类型推断和var关键字" class="headerlink" title="类型推断和var关键字"></a>类型推断和var关键字</h2><p>var关键字不是特定类型变量的符号，它是从等号右边推断出的实际类型的速记。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">//在下面的第一个声明中，var是int的速记</span><br><span class="hljs-comment">//第二个声明中，var是MyExcellentClass的速记</span><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>()</span>&#123;<br>    <span class="hljs-keyword">var</span> total = <span class="hljs-number">15</span>;  <br>    <span class="hljs-keyword">var</span> mec = <span class="hljs-keyword">new</span> MyExcellentClass();<br>&#125;<br>Copy<br></code></pre></td></tr></table></figure>

<p>使用var关键字有一些重要的条件：</p>
<ul>
<li>只能用于本地变量，不能用于字段</li>
<li>只能在变量声明中包含初始化的时候使用</li>
<li>一旦编译器推断出变量的类型，它就是固定且不能更改的</li>
</ul>
<h2 id="本地常量"><a href="#本地常量" class="headerlink" title="本地常量"></a>本地常量</h2><p>用const修饰符来修饰（类似于java中的final）</p>
<p>常量和变量的语法除了以下两点外都相同：</p>
<ul>
<li>常量在类型之前增加关键字const</li>
<li>常量必须有初始化语句，也就是说初始值不能在编译期确定。因此，它不能是某个对象的引用（但可以是null的引用），因为对象的引用是在运行时决定的。</li>
</ul>
<h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>首先区分下<strong>形参</strong>和<strong>实参</strong>的概念：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">//以下函数的参数声明中，x和y均为形参</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">PrintSum</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> x, <span class="hljs-built_in">float</span> y</span>)</span>&#123;<br><br>&#125;<br>Copy<br><span class="hljs-comment">//以下函数的调用中，5和someInt均为实参,实参的值用于初始化形参</span><br>PrintSum(<span class="hljs-number">5</span>, someInt)&#123;<br><br>&#125;<br>Copy<br></code></pre></td></tr></table></figure>

<h3 id="1-值参数"><a href="#1-值参数" class="headerlink" title="1.值参数"></a>1.值参数</h3><p>Java中的参数传递类型（值传递），即：值参数是把实参的值复制给形参，二者在栈中的不同位置。</p>
<ul>
<li>在方法被调用前，用作实参的变量a2已经在栈中了</li>
<li>在方法开始时，系统在栈中为形参分配空间，并从实参复制值<ul>
<li>因为a1是引用类型，所以a1的值（即指向对象的地址）被复制，形参和实参都指向堆中的同一个对象</li>
<li>因为a2是值类型的，所以值被复制，产生了一个独立的数据项</li>
</ul>
</li>
<li>在方法中，f2和对象f1的字段都被加上了5</li>
<li>方法结束后，形参从栈中弹出</li>
</ul>
<p><a href="https://wyh317.github.io/img/%E5%80%BC%E5%8F%82%E6%95%B0.jpg"><img src="https://wyh317.github.io/img/%E5%80%BC%E5%8F%82%E6%95%B0.jpg" alt="值参数"></a></p>
<p><a href="https://wyh317.github.io/img/%E5%80%BC%E5%8F%82%E6%95%B0.jpg">值参数</a></p>
<h3 id="2-引用参数"><a href="#2-引用参数" class="headerlink" title="2.引用参数"></a>2.引用参数</h3><p>对于引用参数，系统不会在栈中为形参分配新的空间，形参的参数名将作为实参的别名，指向相同的内存位置</p>
<ul>
<li>使用引用参数时，必须在方法的声明和调用中都使用ref修饰符</li>
<li>实参必须是变量，在用作实参前必须被赋值</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">//方法声明中要使用ref修饰符<br>void MyMethod(ref int val)&#123;<br><br>&#125;<br><br>int y = 1;<br>MyMethod(ref y)   //使用y前必须赋值<br>MyMethod(ref 3 + 5)   //会报错，因为引用参数作为实参必须是变量，不能是表达式<br>Copy<br></code></pre></td></tr></table></figure>

<ul>
<li>在方法调用前，将要被用作实参的变量a1和a2已经在栈里了</li>
<li>在方法的开始，形参名被设置为实参的别名。引用相同的内存位置</li>
<li>在方法结束后，f2和f1的对象的字段都被加上了5</li>
</ul>
<p><a href="https://wyh317.github.io/img/%E5%BC%95%E7%94%A8%E5%8F%82%E6%95%B0.jpg"><img src="https://wyh317.github.io/img/%E5%BC%95%E7%94%A8%E5%8F%82%E6%95%B0.jpg" alt="引用参数"></a></p>
<p><a href="https://wyh317.github.io/img/%E5%BC%95%E7%94%A8%E5%8F%82%E6%95%B0.jpg">引用参数</a></p>
<p>对比将引用类型对象作为值参数和引用参数传递的两种情况：</p>
<ul>
<li>将引用类型对象作为值参数传递：如果在方法内创建一个对象并赋值给形参，将切断形参和实参之间的关联，并且在方法调用结束后，新对象将不复存在</li>
<li>将引用类型对象作为引用参数传递：如果在方法内创建一个新对象并赋值给形参，会让实参也引用该新对象，并且在方法结束后该对象仍然存在。</li>
</ul>
<h2 id="3-输出参数"><a href="#3-输出参数" class="headerlink" title="3.输出参数"></a>3.输出参数</h2><p>输出参数用于从方法体内把数据传出到调用代码，修饰符为out。和引用参数非常类似</p>
<p>和引用参数一样，输出参数的形参担当实参的别名，方法内对形参的任何改变在方法完成后通过实参变量都是可见的。</p>
<p>唯一和引用参数不同的是：<strong>方法内的代码在读取输出参数之前必须先对其写入</strong></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Add</span>(<span class="hljs-params"><span class="hljs-keyword">out</span> <span class="hljs-built_in">int</span> outValue</span>)</span>&#123;<br>    <span class="hljs-comment">//以下这句会报错，因为输出参数outValue在方法中被读取前没有被赋值</span><br>    <span class="hljs-built_in">int</span> var1 = outValue + <span class="hljs-number">2</span>;<br>&#125;<br>Copy<br></code></pre></td></tr></table></figure>

<h2 id="4-参数数组"><a href="#4-参数数组" class="headerlink" title="4.参数数组"></a>4.参数数组</h2><p>参数数组允许0个或多个实参对应一个特殊的形参,修饰符为params</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">//形参inVals可以代表0个或多个实参</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ListInts</span>(<span class="hljs-params"><span class="hljs-keyword">params</span> <span class="hljs-built_in">int</span>[] inVals</span>)</span>&#123;<br><br>&#125;<br>Copy<br></code></pre></td></tr></table></figure>

<ul>
<li>在参数列表中只能有一个参数数组，并且是列表中的最后一个</li>
<li>由参数数组表示的所有参数必须具有相同的类型</li>
</ul>
<p>参数数组在方法声明中需要params修饰符，而在调用时不需要（不同于引用参数和输出参数，它们在以上两个地方都需要修饰符）</p>
<p>可以有如下两种方式为参数数组提供实参：</p>
<ol>
<li><p>用一个逗号分隔的该数据类型元素的列表,使用这种方法时，编译器做如下的事：</p>
<ul>
<li><p>接收实参列表，用它们在堆中创建并初始化一个数组</p>
</li>
<li><p>把数组的引用作为形参保存在栈中</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#">ListInts(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>)<br>Copy<br></code></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>用数组作为实参</p>
<p>在这种情况下，编译器会直接使用传入的数组，也就是说栈中的形参指向内存中intArray的位置</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">int</span>[] intArray = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br>ListInts(intArray);<br>Copy<br></code></pre></td></tr></table></figure>

<h2 id="5-命名参数"><a href="#5-命名参数" class="headerlink" title="5.命名参数"></a>5.命名参数</h2><p>在使用命名参数时，需要在方法调用中包含参数名。而方法的声明无需任何改变</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">class</span> <span class="hljs-title">MyClass</span>&#123;<br>    <span class="hljs-comment">//方法中的参数声明一如平常</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">Calc</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> a, <span class="hljs-built_in">int</span> b, <span class="hljs-built_in">int</span> c</span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> a + b + c;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>()</span>&#123;<br>        MyClass mc = <span class="hljs-keyword">new</span> MyClass();<br>        <span class="hljs-built_in">int</span> result = mc.Calc(c: <span class="hljs-number">2</span>, a: <span class="hljs-number">4</span>, b: <span class="hljs-number">3</span>);<br>    &#125;<br>&#125;<br>Copy<br></code></pre></td></tr></table></figure>

<h3 id="6-可选参数"><a href="#6-可选参数" class="headerlink" title="6.可选参数"></a>6.可选参数</h3><p>所谓可选参数就是在调用方法的时候可以包含这个参数，也可以忽略它。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">class</span> <span class="hljs-title">MyClass</span>&#123;<br>    <span class="hljs-comment">//b为可选参数，默认值为3</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">Calc</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> a, <span class="hljs-built_in">int</span> b = <span class="hljs-number">3</span></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> a + b;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>()</span>&#123;<br>        MyClass mc = <span class="hljs-keyword">new</span> MyClass();<br>        <span class="hljs-built_in">int</span> ro = mc.Calc(<span class="hljs-number">5</span>, <span class="hljs-number">6</span>);<br>        <span class="hljs-built_in">int</span> r1 = mc.Calc(<span class="hljs-number">5</span>);<br>        Console.WriteLine(<span class="hljs-string">&quot;&#123;0&#125;, &#123;1&#125;&quot;</span>, ro, r1);<br>    &#125;<br>&#125;<br>Copy<br></code></pre></td></tr></table></figure>

<p>上述代码会输出11，8</p>
</li>
</ol>
<p>只要值类型的默认值在编译的时候可以确定，就可以使用值参数作为可选参数。而只有在默认值为null的时候，引用参数才可以作为可选参数。</p>
<p>总结下来，一个方法的声明中，参数要按照必填参数、可选参数、params参数的先后顺序声明。</p>
<p>可以忽略最后一个可选参数，或者最后n个可选参数，但是不可以随机选择省略任意的可选参数，省略必须从最后开始。</p>
<p><strong>参数类型总结：</strong></p>
<table>
<thead>
<tr>
<th>参数类型</th>
<th>修饰符</th>
<th>是否在声明时使用</th>
<th>是否在调用是使用</th>
<th>执行</th>
</tr>
</thead>
<tbody><tr>
<td>值参数</td>
<td>无</td>
<td></td>
<td></td>
<td>系统把实参的值复制给形参，二者在栈中位置不同</td>
</tr>
<tr>
<td>引用参数</td>
<td>ref</td>
<td>是</td>
<td>是</td>
<td>形参是实参的别名，二者在栈中位置相同</td>
</tr>
<tr>
<td>输出参数</td>
<td>out</td>
<td>是</td>
<td>是</td>
<td>在读取输出参数前必须对其写入，除此之外和引用参数类似</td>
</tr>
<tr>
<td>参数数组</td>
<td>params</td>
<td>是</td>
<td>否</td>
<td>允许传递可变数目的实参到方法</td>
</tr>
</tbody></table>
<h2 id="栈帧"><a href="#栈帧" class="headerlink" title="栈帧"></a>栈帧</h2><p>在调用方法的时候，内存从栈的顶部开始分配，保存和方法关联的一些数据项。这块内存叫做方法的栈帧</p>
<p>栈帧保存如下的内容：</p>
<ul>
<li><p>返回地址</p>
</li>
<li><p>为参数分配的内存</p>
</li>
<li><p>各种和方法调用相关的其他管理数据项</p>
<p>在方法调用的时候，整个栈帧都会压入栈。在方法退出的时候，整个栈帧都会从栈上弹出。</p>
</li>
</ul>
<p><a href="https://wyh317.github.io/img/%E6%A0%88%E5%B8%A7.jpg"><img src="https://wyh317.github.io/img/%E6%A0%88%E5%B8%A7.jpg" alt="栈帧"></a></p>
<p><a href="https://wyh317.github.io/img/%E6%A0%88%E5%B8%A7.jpg">栈帧</a></p>
<h1 id="4-类"><a href="#4-类" class="headerlink" title="4.类"></a>4.类</h1><p>类成员包括数据成员（保存数据）和函数成员（执行代码）<br>其中数据成员包括：</p>
<ul>
<li>字段</li>
<li>常量（用const修饰，包括本地常量和成员常量，本地常量声明在方法内，成员常量声明在类中）</li>
</ul>
<h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>成员常量表现的和静态量相似，但唯一不同的是，成员常量没有自己的存储位置，而是在编译时被编译器替换。此外，不能将成员常量声明为static。与const有着相同作用的是readonly，不同的是，const字段只能在字段的声明语句中初始化，而readonly也可以在构造函数中初始化。因此const字段的值必须在编译时确定，而randonly字段的值可以在运行时决定。</p>
<p>函数成员包括：</p>
<ul>
<li>方法</li>
<li>属性</li>
<li>构造函数、析构函数</li>
<li>运算符</li>
<li>索引</li>
<li>事件</li>
</ul>
<h2 id="数据基本运算"><a href="#数据基本运算" class="headerlink" title="数据基本运算"></a>数据基本运算</h2><ol>
<li><p>算数运算符 ： 对数字做算数运算</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">int</span> n1 =<span class="hljs-number">29</span>，n2 = <span class="hljs-number">2</span>;<br><span class="hljs-built_in">int</span> r1 = n1 / n2; <span class="hljs-comment">//5 /2 ==&gt; 2.5 截断删除 2</span><br><span class="hljs-built_in">int</span> r2 = n1 %n2；<span class="hljs-comment">//取模（余数）</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>比较运算符 &gt;     &lt;     &gt;&#x3D;     &lt;&#x3D;     等于&#x3D;&#x3D;     不等于!&#x3D;</p>
</li>
<li><p>逻辑运算符 &amp;&amp;      ||     ！</p>
</li>
<li><p>快捷运算符 +&#x3D;     *&#x3D; </p>
</li>
<li><p>一元运算符      ++     –</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">int</span> number03 = <span class="hljs-number">1</span>;<br>Console.WriteLine(number03++) <span class="hljs-comment">//结果：自增以前</span><br><br><span class="hljs-built_in">int</span> number04 = <span class="hljs-number">1</span>；<br>Console.WriteLine(++number04); <span class="hljs-comment">//结果，自增以后的</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>三元   数据类型 变量名 &#x3D; 条件 ？ 结果：结果</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">string</span> <span class="hljs-number">1</span>&gt;<span class="hljs-number">2</span>?<span class="hljs-string">&quot;ok&quot;</span>:<span class="hljs-string">&quot;no&quot;</span><br><span class="hljs-built_in">float</span> r11 = <span class="hljs-number">1</span> == <span class="hljs-number">1</span>? <span class="hljs-number">1.2f</span> :<span class="hljs-number">1.5f</span>;<br></code></pre></td></tr></table></figure>
</li>
<li><p>优先级</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">int</span> r12 = <span class="hljs-number">1</span> + <span class="hljs-number">2</span> * <span class="hljs-number">4</span>;<br><span class="hljs-built_in">int</span> r12 = (<span class="hljs-number">1</span> + <span class="hljs-number">2</span>) * <span class="hljs-number">4</span>;<br></code></pre></td></tr></table></figure>



<p>数据类型转换</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">int</span> number = <span class="hljs-number">18</span>;<br><span class="hljs-built_in">string</span> str = number.ToString();<br></code></pre></td></tr></table></figure></li>
</ol>
<h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>属性是一组称为访问器的方法（set访问器为属性赋值，get访问器从属性中获取值）。它是类中的函数成员，因此不需为属性分配内存。</p>
<p>写入和读取属性的代码和访问字段一样。属性会根据是写入还是读取，来隐式地调用适当的访问器</p>
<p>属性通常和字段关联，一种常见的方式是在类中将字段声明为private以封装字段，并声明一个public属性用get和set访问器来控制对该字段的访问。和属性关联的字段成为后备字段</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">class</span> <span class="hljs-title">C1</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> TheRealValue = <span class="hljs-number">10</span>;   <span class="hljs-comment">//后备字段：分配内存</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> MyValue&#123;              <span class="hljs-comment">//属性：不分配内存</span><br>        <span class="hljs-keyword">set</span>&#123;<br>            TheRealValue = <span class="hljs-keyword">value</span>;    <span class="hljs-comment">//设置字段的值</span><br>        &#125; <br>        <span class="hljs-keyword">get</span>&#123;<br>            <span class="hljs-keyword">return</span> TheRealValue;     <span class="hljs-comment">//获取字段的值</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title">Program</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>()</span>&#123;<br>        <span class="hljs-comment">//对属性的读和写如同对字段的读和写</span><br>        C1 c = <span class="hljs-keyword">new</span> C1();<br>        Console.WriteLine(<span class="hljs-string">&quot;MyValue: &#123;0&#125;&quot;</span>, c.MyValue);<br><br>        c.MyValue = <span class="hljs-number">20</span>;<br>        Console.WriteLine(<span class="hljs-string">&quot;MyValue: &#123;0&#125;&quot;</span>, c.MyValue);<br>    &#125;<br>&#125;<br>Copy<br></code></pre></td></tr></table></figure>

<p>此外，属性也可以只有get访问器（只读属性），或者只有set访问器（只写属性）</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">class</span> <span class="hljs-title">RightTriangle</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">double</span> A = <span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">double</span> B = <span class="hljs-number">4</span>;<br>    <span class="hljs-comment">//只读属性，计算直角三角形的第三边</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">double</span> Hypotenuse&#123;<br>        <span class="hljs-keyword">get</span>&#123;<br>            <span class="hljs-keyword">return</span> Math.Sqrt((A * A) + (B * B));<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title">Program</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>()</span>&#123;<br>        RightTriangle c = <span class="hljs-keyword">new</span> RightTriangle();<br>        Console.WriteLine(<span class="hljs-string">&quot;Hypotenuse: &#123;0&#125;&quot;</span>, c.Hypotenuse);<br>    &#125;<br>&#125;<br><br>上述代码将输出<span class="hljs-number">5</span><br>Copy<br></code></pre></td></tr></table></figure>

<h2 id="索引器"><a href="#索引器" class="headerlink" title="索引器"></a>索引器</h2><p>可以认为索引器是为类的多个数据成员提供get和set访问器的属性。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">class</span> <span class="hljs-title">Class1</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> Temp0;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> Temp1;<br>    <span class="hljs-comment">//和属性不同的是，索引器有参数（索引参数），并且使用this而不是名称</span><br>    <span class="hljs-comment">//索引器声明</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-keyword">this</span> [<span class="hljs-built_in">int</span> index]&#123;    <br>        <span class="hljs-keyword">get</span>&#123;<br>            <span class="hljs-keyword">return</span> (index == <span class="hljs-number">0</span>) ? Temp0 : Temp1;<br>        &#125;<br>        <span class="hljs-keyword">set</span>&#123;<br>            <span class="hljs-keyword">if</span>(index == <span class="hljs-number">0</span>)<br>                Temp0 = <span class="hljs-keyword">value</span>;   <span class="hljs-comment">//value为set访问器的隐式变量</span><br>            <span class="hljs-keyword">else</span><br>                Temp1 = <span class="hljs-keyword">value</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title">Example</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>()</span>&#123;<br>        Class1 a = <span class="hljs-keyword">new</span> Class1();<br>        <span class="hljs-comment">//使用索引参数0或1读取数据成员</span><br>        Console.WriteLine(<span class="hljs-string">&quot;T0: &#123;0&#125;, T1 : &#123;1&#125;&quot;</span>, a[<span class="hljs-number">0</span>], a[<span class="hljs-number">1</span>]);<br>        <span class="hljs-comment">//使用索引参数0或1对数据成员进行写入</span><br>        a[<span class="hljs-number">0</span>] = <span class="hljs-number">15</span>;<br>        a[<span class="hljs-number">1</span>] = <span class="hljs-number">20</span>;<br>        Console.WriteLine(<span class="hljs-string">&quot;T0: &#123;0&#125;, T1 : &#123;1&#125;&quot;</span>, a[<span class="hljs-number">0</span>], a[<span class="hljs-number">1</span>]);<br>    &#125;<br>&#125;<br><br>以上代码会输出：<br>T0: <span class="hljs-number">0</span>, T1: <span class="hljs-number">0</span><br>T0: <span class="hljs-number">15</span>, T1: <span class="hljs-number">20</span><br>Copy<br></code></pre></td></tr></table></figure>

<h1 id="5-继承"><a href="#5-继承" class="headerlink" title="5.继承"></a>5.继承</h1><p>如果类OtherClass继承自SomeClass，则应按如下表示</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">class</span> <span class="hljs-title">OtherClass</span> : <span class="hljs-title">SomeClass</span>&#123;<br>&#125;<br>Copy<br></code></pre></td></tr></table></figure>

<p>一个类只能继承自一个基类，所有的类都是Object类的派生类</p>
<h2 id="屏蔽基类的成员"><a href="#屏蔽基类的成员" class="headerlink" title="屏蔽基类的成员"></a>屏蔽基类的成员</h2><p>虽然派生类不能删除它继承的任何成员，但可以用与基类成员名称相同的成员来屏蔽基类成员（如果是函数成员，则要求签名相同，签名指名称和参数列表，不包括返回类型）。此外还要使用new修饰符来告诉编译器我正在故意屏蔽继承的成员。</p>
<p>另外，即使派生类屏蔽了基类的成员，也可以使用基类访问表达式访问隐藏的继承成员。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">class</span> <span class="hljs-title">SomeClass</span>&#123;    <span class="hljs-comment">//基类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Field1 = <span class="hljs-string">&quot;Field1--In the base class&quot;</span>;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title">OtherClass</span> : <span class="hljs-title">SomeClass</span>&#123;    <span class="hljs-comment">//派生类</span><br>    <span class="hljs-comment">//使用new修饰符隐藏基类中的Field1字段</span><br>    <span class="hljs-keyword">new</span> <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Field1 = <span class="hljs-string">&quot;Field1--In the derived class&quot;</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">PrintField1</span>()</span>&#123;<br>        <span class="hljs-comment">//访问派生类中的Field1，会输出&quot;Field1--In the derived class&quot;</span><br>        Console.WriteLine(Field1);   <br>        <span class="hljs-comment">//使用基类访问来访问基类中的Field1，会输出&quot;Field1--In the base class&quot; </span><br>        Console.WriteLine(<span class="hljs-keyword">base</span>.Field1); <br>    &#125;<br>&#125;<br>Copy<br></code></pre></td></tr></table></figure>

<h2 id="使用基类的引用"><a href="#使用基类的引用" class="headerlink" title="使用基类的引用"></a>使用基类的引用</h2><figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#">MyDerivedClass derived = <span class="hljs-keyword">new</span> MyDerivedClass();   <span class="hljs-comment">//创建一个派生类对象</span><br>MyBaseClass mybc = (MyBaseClass)derived;        <span class="hljs-comment">//让基类引用指向派生类对象</span><br>Copy<br></code></pre></td></tr></table></figure>

<p>对于如上代码，派生类的引用derived可以看到完整的MyDerivedClass对象，而基类引用mybc只能看到对象的MyBaseClass部分（只能看到基类成员）<br><a href="https://wyh317.github.io/img/%E4%BD%BF%E7%94%A8%E5%9F%BA%E7%B1%BB%E7%9A%84%E5%BC%95%E7%94%A8.jpg"><img src="https://wyh317.github.io/img/%E4%BD%BF%E7%94%A8%E5%9F%BA%E7%B1%BB%E7%9A%84%E5%BC%95%E7%94%A8.jpg" alt="使用基类的引用"></a></p>
<p><a href="https://wyh317.github.io/img/%E4%BD%BF%E7%94%A8%E5%9F%BA%E7%B1%BB%E7%9A%84%E5%BC%95%E7%94%A8.jpg">使用基类的引用</a></p>
<p>另外，也可以使用基类引用调用派生类的方法，但要满足如下条件：</p>
<ul>
<li>派生类的方法和基类方法有着相同的签名和返回类型</li>
<li>基类的方法用virtual标注</li>
<li>派生类的方法用override标注<br>在这种情况下，当使用基类引用（mybc）调用方法时，方法会被传递到派生类执行</li>
</ul>
<p>注意：</p>
<ul>
<li>覆写（override）和被覆写的方法应该有相同的访问性</li>
<li>不能覆写static方法和非虚（virtual）方法</li>
</ul>
<p>当使用对象的基类引用调用一个覆写的方法时，方法的调用被沿着派生层次上溯执行，一直到标记为override的方法的最高派生版本。<br>如果在更高派生级别有该方法的其他声明，但没有被标记为override，那么它们不会被调用。</p>
<h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><h3 id="构造函数初始化语句"><a href="#构造函数初始化语句" class="headerlink" title="构造函数初始化语句"></a>构造函数初始化语句</h3><p>两种形式：</p>
<ul>
<li>关键字base：指明使用哪一个基类的构造函数</li>
<li>关键字this：指明使用哪一个当前类的构造函数<br>以下构造函数使用了构造函数初始化语句，构造函数初始化语句指明了要使用第一个参数是string，第二个参数是int型的那个基类构造函数</li>
</ul>
<p>当声明一个不带构造函数初始化语句的构造函数时，它实际上是使用了无参数的基类构造函数。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyDerivedClass</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> x, <span class="hljs-built_in">string</span> s</span>) : <span class="hljs-title">base</span>(<span class="hljs-params">s, x</span>)</span>&#123;<br><br>&#125;<br>Copy<br></code></pre></td></tr></table></figure>

<p>如下代码中的MyClass类包含一个有一个int型参数的构造函数，这个构造函数使用了同一个类中具有两个参数的构造函数，并为第二个参数提供了一个默认值</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyClass</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> x</span>) : <span class="hljs-title">this</span>(<span class="hljs-params">x, <span class="hljs-string">&quot;Using Default String&quot;</span></span>)</span>&#123;<br><br>&#125;<br>Copy<br></code></pre></td></tr></table></figure>

<p>如果一个类有好几个构造函数，并且它们都需要在构造对象的过程中执行一些公共代码。这时可以把公共代码提取出来作为一个构造函数，被其他所有的构造函数作为构造函数初始化语句使用。</p>
<h2 id="访问级别"><a href="#访问级别" class="headerlink" title="访问级别"></a>访问级别</h2><p>类有两种访问级别：</p>
<ul>
<li>public：可以被任何程序集中的代码访问</li>
<li>internal：默认的访问级别，仅可以被自己所在的程序集中的类看到</li>
</ul>
<p>类中的成员有5种访问级别：</p>
<ul>
<li>私有的（private）：只能被自己类中的成员访问，不能被其他的类访问，即使是继承自它的类也不行</li>
<li>公有的（public）：所有的类都可以自由访问</li>
<li>受保护的（protected）：和private类似，唯一不同的是，它允许该类的派生类来访问</li>
<li>内部的（internal）：对程序集内部的所有类可见，对程序集外部的所有类不可见</li>
<li>受保护内部的（protected internal）：相当于internal与protected的并集，即对程序集内部的类可见，也对继承自该类的类可见。</li>
</ul>
<h2 id="抽象成员"><a href="#抽象成员" class="headerlink" title="抽象成员"></a>抽象成员</h2><p>类似于Java中的抽象方法。它使用abstract标记，并且必须是函数成员（方法、属性、事件、索引）。不能有实现代码块，抽象成员的实现用分号表示。即每一个抽象成员的声明后都要带一个分号</p>
<p>如：以下声明了两个抽象成员，一个名为PrintStuff的抽象方法和一个名为MyProperty的抽象属性</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">PrintStuff</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> s</span>)</span>;<br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> MyProperty&#123;<br>    <span class="hljs-keyword">get</span>;    <span class="hljs-comment">//分号代替实现</span><br>    <span class="hljs-keyword">set</span>;<br>&#125;<br>Copy<br></code></pre></td></tr></table></figure>

<ul>
<li>抽象类：只能被继承，不能用来创建实例，用abstract修饰符标注</li>
<li>密封类：与抽象类相反，只能被用来创建实例，不能被继承。用sealed修饰符标注</li>
</ul>
<h1 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h1><h2 id="操作符重载"><a href="#操作符重载" class="headerlink" title="操作符重载"></a>操作符重载</h2><p>如果面对一个用户自定义的类或结构，运算符就会不知道如何取处理它。运算符重载允许用户自己定义C#运算符来操作自定义类型的操作数。</p>
<ul>
<li>为类或结构重载一个运算符x，可以声明一个名称为<code>operator x</code>的方法并实现它的行为（如<code>operator +</code>和<code>operator -</code>等）。一元运算符的重载方法带有一个单独的class或struct类型的参数，二元运算符重载的方法带有两个参数，其中至少有一个是class或struct类型。</li>
<li>声明必须同时使用static和public的修饰符</li>
<li>运算符必须要是要操作的类或结构的成员</li>
</ul>
<p>如下代码声明了LimitedInt类的两个重载的运算符：一个是加运算符，另一个是取负运算符</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">class</span> <span class="hljs-title">LimitedInt</span> <span class="hljs-title">Return</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> LimitedInt <span class="hljs-keyword">operator</span> + (LimitedInt x, <span class="hljs-built_in">double</span> y)&#123;<br>        LimitedInt li = <span class="hljs-keyword">new</span> LimitedInt();<br>        li.TheValue = x.TheValue + (<span class="hljs-built_in">int</span>)y;<br>        <span class="hljs-keyword">return</span> li;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> LimitedInt <span class="hljs-keyword">operator</span> - (LimitedInt x)&#123;<br>        LimitedInt li = <span class="hljs-keyword">new</span> LimitedInt();<br>        li.TheValue = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> li;<br>    &#125;<br>&#125;<br>Copy<br></code></pre></td></tr></table></figure>

<h2 id="标签语句"><a href="#标签语句" class="headerlink" title="标签语句"></a>标签语句</h2><p>标签语句由一个标识符后面跟着一个冒号再跟着一条语句组成，它有如下的形式：<code>Identifier: Statement</code>。这条语句在执行时与只有Statement的语句相同，加一个标签的目的只是为了允许程序从其他位置跳转到这个标签所在的位置。</p>
<ul>
<li>因为标签有自己的声明空间，所以标签语句中的标识符可以是任意有效的标识符（可以与本地变量名相同）。</li>
<li>标签的作用域仅在块内部</li>
</ul>
<p>goto语句可以跳到它本身所在的块中的任何标签语句，或跳出到任何它被嵌套的块内的标签语句。<code>goto Indentifier</code></p>
<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="一维数组和矩形数组"><a href="#一维数组和矩形数组" class="headerlink" title="一维数组和矩形数组"></a>一维数组和矩形数组</h2><figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">int</span>[] intArr1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[<span class="hljs-number">15</span>];   <span class="hljs-comment">//声明一维数组</span><br><span class="hljs-built_in">int</span>[,] intArr2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[<span class="hljs-number">5</span>, <span class="hljs-number">10</span>];  <span class="hljs-comment">//声明二维数组</span><br><span class="hljs-built_in">int</span> var2 = intArr[<span class="hljs-number">2</span>, <span class="hljs-number">3</span>];      <span class="hljs-comment">//从二维数组中读值</span><br><br><span class="hljs-built_in">int</span>[] intArr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[]&#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>&#125;;   <span class="hljs-comment">//初始化一维数组</span><br><span class="hljs-built_in">int</span>[,] intArr2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[,]&#123;&#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;, &#123;<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>&#125;&#125;; <span class="hljs-comment">//初始化二维数组</span><br>Copy<br></code></pre></td></tr></table></figure>

<h2 id="交错数组"><a href="#交错数组" class="headerlink" title="交错数组"></a>交错数组</h2><p>交错数组是<strong>数组的数组</strong>，与矩阵数组不同，交错数组的子数组的元素个数可以不同</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">//实例化顶层数组，不能在声明语句中初始化顶层数组之外的数组长度</span><br><span class="hljs-built_in">int</span>[][] Arr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[<span class="hljs-number">3</span>][];  <br><span class="hljs-comment">//实例化子数组</span><br>Arr[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<br>Arr[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[]&#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;;<br>Arr[<span class="hljs-number">2</span>] = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[]&#123;<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>&#125;;<br>Copy<br></code></pre></td></tr></table></figure>

<h2 id="foreach语句"><a href="#foreach语句" class="headerlink" title="foreach语句"></a>foreach语句</h2><p>注意：迭代变量item是只读的，不能修改。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">int</span>[] arr1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<br><span class="hljs-keyword">foreach</span>(<span class="hljs-built_in">int</span> item <span class="hljs-keyword">in</span> arr1)<br>    Console.WriteLine(<span class="hljs-string">&quot;Item Value: &#123;0&#125;, item&quot;</span>);<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Unity开发日志</category>
      </categories>
      <tags>
        <tag>c#</tag>
        <tag>./net</tag>
      </tags>
  </entry>
  <entry>
    <title>3.C#编程概述</title>
    <url>/2022/07/23/WebBackend/C#/3.C#%E7%BC%96%E7%A8%8B%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<h2 id="一个简单的C-程序"><a href="#一个简单的C-程序" class="headerlink" title="一个简单的C#程序"></a>一个简单的C#程序</h2><p>windows按下W+R，在运行窗口输入devenv调出VS，然后新建一个项目</p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220723171156852.png" alt="image-20220723171156852"></p>
<p>选择C#-Windows-控制台应用模板，名称改为SimpleProgram</p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220723171448502.png" alt="image-20220723171448502"></p>
<p>右键项目文件夹我们在新建一个SimpleProgram的C#脚本</p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220723171731579.png" alt="image-20220723171731579"></p>
<p>输入代码如下：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System;	<span class="hljs-comment">//诉编译器这个应用程序使用System命名空间的类型</span><br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">Simple</span>  <span class="hljs-comment">//声明一个新命名空间，名称为Simple</span><br>&#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span>   <span class="hljs-comment">//声明一个新的类类型，名称为Program</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>()	<span class="hljs-comment">//声明一个名称为Main的方法作为类Program的成员</span></span><br>        &#123;<br>            Console.WriteLine(<span class="hljs-string">&quot;Hello World&quot;</span>);	<span class="hljs-comment">//只包含一条单独的、简单的语句，这一行组成了Main的方法体</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><p>标识符是一种字符串，用来命名变量、方法、参数和许多后面将要闸述的其他程序结构。</p>
<p>实例：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">//语法上有效，但非常混乱</span><br><span class="hljs-built_in">int</span> totalCycleCount;<br><span class="hljs-built_in">int</span> TotalCycleCount;<br><span class="hljs-built_in">int</span> TotalcycleCount;<br></code></pre></td></tr></table></figure>

<p>命名字符规则：</p>
<blockquote>
<ul>
<li>字母和下划线可以用在任何位置</li>
<li>数字不能放在首位</li>
<li>@字符只能放在标识符首位，但不推荐使用</li>
</ul>
</blockquote>
<p>命名规则最好为驼峰式命名法或者下划线命名法，在团队合作中一个命名是很重要的！！！</p>
<p>什么是驼峰命名法？</p>
<blockquote>
<p>驼峰命名法有大驼峰和小驼峰，函数、变量一般用小驼峰法，除第一个单词外，其他单词首字母大写，大驼峰法（即帕斯卡命名法），全部单词首字母大写。常用于类名，属性，命名空间等，实例如下：</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DataBaseUser</span>;</span>	<span class="hljs-comment">//大驼峰，类名，属性，命名空间等</span><br><span class="hljs-type">int</span> myStudentCount;		<span class="hljs-comment">//小驼峰，函数、变量</span><br></code></pre></td></tr></table></figure>

<h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><ul>
<li>关键字不能被用作变量名或者其他形式的标识符，除非以@字符开始。</li>
<li>所有C#关键字全部都是小写</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220723174734662.png" alt="image-20220723174734662"></p>
<p>上下文关键字是仅在特定的语言结构中充当关键字的标识符。</p>
<p>关键字和上下文关键字的区别：</p>
<blockquote>
<p>关键字不能被用作标识符，而上下位关键字可以在代码的其他部分被用作标识符</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220723175213250.png" alt="image-20220723175213250"></p>
<h2 id="Main函数：程序的起始点"><a href="#Main函数：程序的起始点" class="headerlink" title="Main函数：程序的起始点"></a>Main函数：程序的起始点</h2><p>每个C#程序都必须有一个类带有Main方法（函数）。在先前所示的SimpleRrogram程序中，它被声明在Program类中。</p>
<p>最简单的Main方法：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>()</span><br>&#123;<br>    更多语句<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="空白"><a href="#空白" class="headerlink" title="空白"></a>空白</h2><p>程序中的空白指的是没有可视化输出的字符。空白字符包括：</p>
<blockquote>
<ul>
<li>空格（Space）；</li>
<li>制表符（Tab）；</li>
<li>换行符：</li>
<li>回车符。</li>
</ul>
</blockquote>
<p>例如，下面代码段虽然看起来不一样，但是在编译器的眼里都是一样的…</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">//我心目中的完美的格式（强迫症福音）</span><br>Main()<br>&#123;<br>    Console.WriteLine(<span class="hljs-string">&quot;Hello Word&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//老程序员的代码段，这看起来好难受:(</span><br>Main()&#123;<br>    Console.WriteLine(<span class="hljs-string">&quot;Hello Word&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//没有空格回车的代码段</span><br>Main()&#123;Console.WriteLine(<span class="hljs-string">&quot;Hello Word&quot;</span>);&#125;<br></code></pre></td></tr></table></figure>

<h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h2><p>语句是描述一个类型或告诉程序去执行某个动作的一条源代码指令，语句有简单语句（simple statement）和复杂语句（compound statement）</p>
<blockquote>
<h3 id="简单语句（simple-statement"><a href="#简单语句（simple-statement" class="headerlink" title="简单语句（simple statement"></a>简单语句（simple statement</h3><ul>
<li><p>指定(赋值)</p>
</li>
<li><p>调用</p>
</li>
<li><p><a href="https://zh.wikipedia.org/w/index.php?title=%E5%9B%9E%E5%82%B3_(%E9%9B%BB%E8%85%A6%E7%A7%91%E5%AD%B8)&action=edit&redlink=1">回传</a></p>
</li>
<li><p>goto</p>
</li>
<li><p>断言</p>
</li>
</ul>
<h3 id="复合语句（compound-statement）"><a href="#复合语句（compound-statement）" class="headerlink" title="复合语句（compound statement）"></a>复合语句（compound statement）</h3><ul>
<li><strong><a href="https://zh.wikipedia.org/w/index.php?title=Block_(%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88)&action=edit&redlink=1">block</a></strong></li>
<li><strong><a href="https://zh.wikipedia.org/wiki/%E6%A2%9D%E4%BB%B6%E8%AA%9E%E5%8F%A5">if语句</a></strong></li>
<li><strong><a href="https://zh.wikipedia.org/w/index.php?title=Switch%E6%95%98%E8%BF%B0&action=edit&redlink=1">Switch语句</a></strong></li>
<li><strong><a href="https://zh.wikipedia.org/wiki/While%E8%BF%B4%E5%9C%88">While循环</a></strong></li>
<li><strong><a href="https://zh.wikipedia.org/wiki/Do-while%E5%BE%AA%E7%8E%AF">Do-while循环</a></strong></li>
<li><strong><a href="https://zh.wikipedia.org/wiki/For%E8%BF%B4%E5%9C%88">For循环</a></strong></li>
</ul>
</blockquote>
<p>实例：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs C#"><span class="hljs-built_in">int</span> combatRating = <span class="hljs-number">5</span>; <span class="hljs-comment">//定义一个初始指为5，ombatRating的整数型变量</span><br>System.Console.WriteLine(<span class="hljs-string">&quot;This is a scum with a combatRating of &#123;0&#125;&quot;</span>,ombatRating);<br></code></pre></td></tr></table></figure>

<p>代码块：</p>
<blockquote>
<p>块可以是一个由成对大括号包围的0条或者N条语句的序列，它在语法相当于一条语句。</p>
</blockquote>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#">&#123;<br>    <span class="hljs-built_in">int</span> combatRating = <span class="hljs-number">5</span>; <span class="hljs-comment">//定义一个初始指为5，ombatRating的整数型变量</span><br>	System.Console.WriteLine(<span class="hljs-string">&quot;This is a scum with a combatRating of &#123;0&#125;&quot;</span>,ombatRating);<br>&#125;<br></code></pre></td></tr></table></figure>

<p>关于代码块一些重要的内容：</p>
<blockquote>
<ul>
<li>语法上只需要一条语句，而你需要执行的动作无法用一条简单的语句表达的情况下，考虑使用代码快。</li>
<li>有些特定的程序结构只能使用块。在这些结构中，不能使用简单语句替换块。</li>
<li>虽然简单语句以分号结束，但块后面不跟分号。</li>
</ul>
</blockquote>
<h2 id="从程序中输出文本"><a href="#从程序中输出文本" class="headerlink" title="从程序中输出文本"></a>从程序中输出文本</h2><p>BLC提供一个名为Console的类（在System命名空间中），该类包含了将数据输入和输出到控制台窗口的方法。</p>
<h3 id="Write"><a href="#Write" class="headerlink" title="Write"></a>Write</h3><p>Write是Console类的成员，它把一个文本字符串发送到程序的控制台窗口</p>
<p>实列：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs C#">Console.Write(<span class="hljs-string">&quot;This is trivial text&quot;</span>);<br></code></pre></td></tr></table></figure>

<h3 id="WriteLine"><a href="#WriteLine" class="headerlink" title="WriteLine"></a>WriteLine</h3><p>WriteLine是Console的另一个成员，它和Write实现相同的功能，但是在每个输出字符串的结尾添加一个换行字符。</p>
<h3 id="格式字符串"><a href="#格式字符串" class="headerlink" title="格式字符串"></a>格式字符串</h3><p>Write语句和WriteLine语句的常规形式中可以由一个以上的参数。</p>
<ul>
<li>如果不止一个参数，参数间用逗号分隔。</li>
<li>第一个参数必须是字符串，称为<strong>格式字符串</strong>。格式字符串可以包含<strong>替代标记</strong>。<ul>
<li>替代标记在格式字符串中标出位置，在输出字符串中该位置将用一个值来替代。</li>
<li>替代标记由一个整数及括住它的一对大括号组成，其中整数就是替换值的数字位置。跟着格式字符串的参数称为替换值，这些替换值从0开始编号</li>
</ul>
</li>
</ul>
<p>语法：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#">Console.WriteLine(格式字符串 (含替代标记) ，替换值<span class="hljs-number">0</span>，替换值<span class="hljs-number">1</span>， 替换值<span class="hljs-number">2</span>，......);<br></code></pre></td></tr></table></figure>

<p>实例：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#">Console.WriteLine(<span class="hljs-string">&quot;Two saple integers are &#123;0&#125; and &#123;1&#125;.&quot;</span> <span class="hljs-number">3</span>，<span class="hljs-number">6</span>)；<br></code></pre></td></tr></table></figure>

<p>C# 6.0引入了更简单易懂的的方式表述参数化字符串的语法，称为<strong>字符串插值</strong>，他是通过直接在替代标记内插入变量名实现的。实际上，替代标记告诉编辑器这个变量名将被视作为一个变量，而不是字符串字面量——前提是在字符串前面加上了$符号。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">int</span> var1 = <span class="hljs-number">3</span>;<br><span class="hljs-built_in">int</span> var2 = <span class="hljs-number">6</span>;<br>Console.WriteLine(<span class="hljs-string">$&quot;Two sample integers are <span class="hljs-subst">&#123;var1&#125;</span> and <span class="hljs-subst">&#123;var2&#125;</span>.&quot;</span>)<br></code></pre></td></tr></table></figure>

<h3 id="多重标记和值"><a href="#多重标记和值" class="headerlink" title="多重标记和值"></a>多重标记和值</h3><p>在C#中，可以使用任意数量的替代标记和任意数量的值。</p>
<ul>
<li>值可以以任何顺序使用</li>
<li>值可以在格式字符串中替换任意次</li>
</ul>
<p>例如，下面的语句使用了3个标记但只有两个值。注意：值1被用在了值0之前，而且被用了两次。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs C#">Console.WriteLine(<span class="hljs-string">&quot;Three integers are &#123;1&#125;, &#123;0&#125; and &#123;1&#125;.&quot;</span>,<span class="hljs-number">3</span>,<span class="hljs-number">6</span>)<br></code></pre></td></tr></table></figure>

<h3 id="格式化数字字符串"><a href="#格式化数字字符串" class="headerlink" title="格式化数字字符串"></a>格式化数字字符串</h3><figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#">Console.WriteLine(<span class="hljs-string">&quot;The value: &#123;0&#125;.&quot;</span> , <span class="hljs-number">500</span>);		<span class="hljs-comment">//输出数字</span><br>Console.WriteLine(<span class="hljs-string">&quot;The value: &#123;0:C&#125;.&quot;</span> , <span class="hljs-number">500</span>);	<span class="hljs-comment">//格式化为货币</span><br></code></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220723210332696.png" alt="image-20220723210332696"></p>
<ol>
<li><p>对齐说明符</p>
<p>对齐说明符表示字段中字符的最小宽度。对齐说明符有以下特性：</p>
<ol>
<li>对齐说明符是可选的，而且使用逗号来和索引号分离。</li>
<li>符号表示右对齐或左对齐。正数表示右对齐，负数表示左对齐。</li>
</ol>
</li>
<li><p>格式字段</p>
<p>格式字段表示指定了数字应该以哪种形式表示。例如：应该表示为货币、十进制数字、十六进制数字还是定点符号？</p>
<ol>
<li><p>冒号后必须紧跟着格式说明符，中间不能有空格。</p>
</li>
<li><p><strong>格式说明符</strong>是一个字母字符，是9个内置字符格式之一。某些字符形式不分大小写</p>
</li>
<li><p><strong>精度说明符</strong>是可选的，由1~2位数字组成。它的实际意义取决于格式说明符。实例：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#">Console.WriteLine(<span class="hljs-string">&quot;&#123;0:F4&#125;, 12.345678&quot;</span>);<br><span class="hljs-comment">//F4：格式组件——4位小数的定点数</span><br></code></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>标准数字格式说明符<br> <img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220723212252685.png" alt="image-20220723212252685"><br> <img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220723212330265.png" alt="image-20220723212330265"></p>
</li>
</ol>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ul>
<li>不能嵌套带有分隔符的注释</li>
<li>注释类型的范围如下：<ul>
<li>对于单行注释&#x2F;&#x2F;，一直到行结束都有效。</li>
<li>对于带分隔符的注释，直至遇到第一个结束分隔符都有效。</li>
</ul>
</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#">	带分割符的注释由两个字符的开始标记（<span class="hljs-comment">/*）和两个字符的结束标记（*/</span>）<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">	注释的文本不会被编译器执行</span><br><span class="hljs-comment">	带分隔符的注释可以跨任意多行</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure>

<h3 id="文档注释"><a href="#文档注释" class="headerlink" title="文档注释"></a>文档注释</h3><p>文档注释只包含XML文本，可以用于产生程序文档，实例：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-comment"><span class="hljs-doctag">///</span><span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span>This class does...</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span><span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>&#123;<br>    ......<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C#/.NET</category>
      </categories>
      <tags>
        <tag>c#</tag>
      </tags>
  </entry>
  <entry>
    <title>4.类型、存储量和变量</title>
    <url>/2022/07/24/WebBackend/C#/4.%E7%B1%BB%E5%9E%8B%E3%80%81%E5%AD%98%E5%82%A8%E9%87%8F%E5%92%8C%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<h2 id="C-程序是一组类型声明"><a href="#C-程序是一组类型声明" class="headerlink" title="C#程序是一组类型声明"></a>C#程序是一组类型声明</h2><p>C程序可以说是一组函数和数据类型，C++程序是一组函数和类，而C#程序是一组类型声明。</p>
<ul>
<li>C#程序或DLL的源代码是一组类型声明。</li>
<li>对于可执行程序，类型声明中必须有一个包含Main方法的类</li>
<li>命名空间是一种将相关的类型声明分组并命名的方法。因为程序是一组相关的类型声明，所以通常在你创建的命名空间内部声明程序类型。</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">namespace</span> <span class="hljs-title">MyProgram</span>		<span class="hljs-comment">//创建新的命名空间</span><br>&#123;<br>    DeclarationOfTypeA		<span class="hljs-comment">//声明类型</span><br>    DeclarationOfTypeB<br>        <br>    <span class="hljs-keyword">class</span> <span class="hljs-title">C</span>				<span class="hljs-comment">//声明类型</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Mian</span>()</span><br>        &#123;<br>            ...<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="类型（数据类型）是一种模板"><a href="#类型（数据类型）是一种模板" class="headerlink" title="类型（数据类型）是一种模板"></a>类型（数据类型）是一种模板</h2><p>既然C#程序是一组类型声明，那么学习C#就是学习如何创建和使用类型。</p>
<p>类型由下面的元素定义：</p>
<ul>
<li>名称；</li>
<li>用于保存数据成员的数据结构；</li>
<li>一些行为及约束条件。</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220724204941396.png" alt="image-20220724204941396"></p>
<h2 id="实例化类型"><a href="#实例化类型" class="headerlink" title="实例化类型"></a>实例化类型</h2><p>从某个类型模板创建实际的对象，称为实例化该类型。</p>
<ul>
<li>通过实例化类型而创建的对象被称为类型的<strong>对象</strong>或者类型的<strong>实例</strong></li>
<li>在C#程序中，每个数据项都是某种类型的实例。这些类型可以是语言自带的，可以是BCL或者其他库提供的，也可以是程序与定义的。</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220724205821339.png" alt="image-20220724205821339"></p>
<h2 id="数据成员和函数成员"><a href="#数据成员和函数成员" class="headerlink" title="数据成员和函数成员"></a>数据成员和函数成员</h2><p>像short、int和long这样的类型称为<strong>简单类型</strong>。这种类型只能存储一个数据项。</p>
<p>其他的类型可以存储多个数据项。比如<strong>数组(array)<strong>类型就可以存储多个同类型的数据项。这些数据项称为</strong>数组</strong>元素。可以通过数字来引用这些元素，这些数字被称为<strong>索引</strong>。</p>
<h3 id="成员的类别"><a href="#成员的类别" class="headerlink" title="成员的类别"></a>成员的类别</h3><p>包含多个不同的数据类型的数据项，这些类型中的数据项个体称为<strong>成员</strong>，和数组不同，这些成员有独特的名称：</p>
<ul>
<li>数据成员	保存了这个类的对象或整个类相关的数据。</li>
<li>函数成员    执行代码。函数成员定义类型的行为。</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220724210808664.png" alt="image-20220724210808664"></p>
<h2 id="预定义类型"><a href="#预定义类型" class="headerlink" title="预定义类型"></a>预定义类型</h2><p>C#提供了16种预定义类型，其中包括13种简单类型和3种非简单类型。</p>
<p>简单类型：</p>
<blockquote>
<ul>
<li>11种数值类型（数据类型属于数值类型的超类）<ul>
<li>不同长度的有符号和无符号整数类型。</li>
<li>浮点数类型float和double。</li>
<li>decimal高精度小数类型，常用于货币计算。</li>
</ul>
</li>
<li>Unicode字符类型char。</li>
<li>布尔类型bool。</li>
</ul>
</blockquote>
<p>非简单类型：</p>
<blockquote>
<ul>
<li>string，Unicode字符数组。</li>
<li>object，其他类型的基类。</li>
<li>dynamic，使用动态语言编写的程序集时使用。</li>
</ul>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220724212150360.png" alt="image-20220724212150360"></p>
<h3 id="预定类型的补充"><a href="#预定类型的补充" class="headerlink" title="预定类型的补充"></a>预定类型的补充</h3><p>所有预定类型都直接映射到底层的.NET类型。C#类型名称就是.NET类型的别名，所以使用.NET的类型名称也符合C#语法。</p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220724212526509.png" alt="image-20220724212526509"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220724212540755.png" alt="image-20220724212540755"></p>
<h2 id="用户定义类型"><a href="#用户定义类型" class="headerlink" title="用户定义类型"></a>用户定义类型</h2><p>有6种类型可以由用户自己创建：</p>
<blockquote>
<ul>
<li>类类型（calss）；</li>
<li>结构类型（struct）；</li>
<li>数组类型（array）；</li>
<li>枚举类型（enum）；</li>
<li>委托类型（delegate）；</li>
<li>接口类型（interface）；</li>
</ul>
</blockquote>
<p>类型通过类型声明创建，类型声明包含以下信息：</p>
<blockquote>
<ul>
<li>要创建的类型的种类；</li>
<li>新类型的名称；</li>
<li>对类型中每个成员的声明（名称和规格），array和delegate类型除外，它们不含有命名成员。</li>
</ul>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220724213342909.png" alt="image-20220724213342909"></p>
<h2 id="栈和堆"><a href="#栈和堆" class="headerlink" title="栈和堆"></a>栈和堆</h2><p>程序运行时，它的数据必须存储在内存中。一个数据项需要多大的内存、存储在什么地方，以及如何存储都依赖于该数据项的类型。</p>
<p>运行中的程序使用两个内存区域来存储数据：栈和堆</p>
<h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><p>栈是一个内存数组，是一个LIFO（Last-In First-Out，后进先出）的数据结构。栈存储几种类型的数据：</p>
<blockquote>
<ul>
<li>某些类型变量的值；</li>
<li>程序当前的执行环境；</li>
<li>传递给方法的参数。</li>
</ul>
</blockquote>
<p>栈的特性：</p>
<blockquote>
<ul>
<li>数据只能从栈的顶端插入和删除。</li>
<li>把数据放到栈顶称为<strong>入栈</strong>（push）。</li>
<li>从栈顶删除数据称为出栈（pop）。</li>
</ul>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220724214439691.png" alt="image-20220724214439691"></p>
<h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><p>堆是一块内存区域，在堆里可以分配大块的内存用于存储某种类型的数据对象。与栈不同，堆的内存能够以任意顺序存入和移除。</p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220724215301619.png" alt="image-20220724215301619"></p>
<p>堆里面的数据不能显式删除。CLR的自动垃圾收集器在判断出程序的代码将不会再访问某数据项时，会自动清除无主的堆对象。</p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220724215639141.png" alt="image-20220724215639141"></p>
<h2 id="值类型和引用类型"><a href="#值类型和引用类型" class="headerlink" title="值类型和引用类型"></a>值类型和引用类型</h2><p>数据项的类型定义了存储数据需要的内存大小及组成该类型的数据成员。类型还决定了对象在内存中的存储位置——栈或堆。</p>
<p>类型被分为两种：值类型和引用类型，这两种类型在内存中的存储方式不同：</p>
<blockquote>
<ul>
<li>值类型只需要一段单独的内存，用于存储实际的数据。</li>
<li>引用类型需要两端内存。<ul>
<li>第一段存储实际的数据，它总是位于堆中。</li>
<li>第二段是引用，指向数据在堆中的存放位置。</li>
</ul>
</li>
</ul>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220724220552136.png" alt="image-20220724220552136"></p>
<h3 id="存储引用类型对象的成员"><a href="#存储引用类型对象的成员" class="headerlink" title="存储引用类型对象的成员"></a>存储引用类型对象的成员</h3><p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220724221100783.png" alt="image-20220724221100783"></p>
<h3 id="C-类型的分类"><a href="#C-类型的分类" class="headerlink" title="C#类型的分类"></a>C#类型的分类</h3><p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220724221306178.png" alt="image-20220724221306178"></p>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量是一个名称，表示程序执行时存储在内存中的数据</p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220724221647942.png" alt="image-20220724221647942"></p>
<h3 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h3><p>变量使用前必须声明：</p>
<blockquote>
<ul>
<li>给变量命名，并为它关联一种类型；</li>
<li>让编译器为它分配一块内存。</li>
</ul>
</blockquote>
<p>实例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> var1;<br><span class="hljs-comment">//int为数据类型，var2为类型的值</span><br></code></pre></td></tr></table></figure>

<p>4个变量的声明以及它们在栈中的位置</p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220724222035940.png" alt="image-20220724222035940"></p>
<p>1.变量初始化语句</p>
<p>除声明变量的名称和类型以外，声明还能把它的内存初始化为一个明确的值。</p>
<p><strong>变量初始化语句（variablie initializer）</strong>由一个等号后面跟一个初始值组成，如：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">int</span> var2 = <span class="hljs-number">17</span>;<br></code></pre></td></tr></table></figure>

<p>有些程序变量不初始化赋值会报错</p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220724222632442.png" alt="image-20220724222632442"></p>
<p>2.自动初始化</p>
<p>有些程序会自动初始化，没有自动初始化为默认值的变量在程序为它赋值之前包含未定义值。</p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220724222902859.png" alt="image-20220724222902859"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220724222919753.png" alt="image-20220724222919753"></p>
<h3 id="多变量声明"><a href="#多变量声明" class="headerlink" title="多变量声明"></a>多变量声明</h3><p>可以在单个声明语句中声明多个变量：</p>
<blockquote>
<ul>
<li>多变量声明中的变量必须类型相同。</li>
<li>变量名必须用逗号分隔，可以在变量名后包含初始化语句。</li>
</ul>
</blockquote>
<p>实例：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">//声明一些变量，有的被初始化，优点未被初始化</span><br><span class="hljs-built_in">int</span> var3 = <span class="hljs-number">7</span>, var4, var5 = <span class="hljs-number">3</span>;<br><span class="hljs-built_in">double</span> var6, var7 = <span class="hljs-number">6.53</span>;<br><br><span class="hljs-built_in">int</span> var8, <span class="hljs-built_in">float</span> var9;	<span class="hljs-comment">//错误！多变量声明的变量类型必须相同</span><br></code></pre></td></tr></table></figure>

<h3 id="使用变量的值"><a href="#使用变量的值" class="headerlink" title="使用变量的值"></a>使用变量的值</h3><p>变量名代表该变量保存的值，可以通过使用变量名来使用值。例如：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#">Console.WriteLine(<span class="hljs-string">&quot;&#123;0&#125;&quot;</span>, var2);<br>Console.WriteLine(<span class="hljs-string">&quot;&#123;var2&#125;&quot;</span>);<br></code></pre></td></tr></table></figure>

<h2 id="静态类型和dynamic关键字"><a href="#静态类型和dynamic关键字" class="headerlink" title="静态类型和dynamic关键字"></a>静态类型和dynamic关键字</h2><p>每一个变量都包括变量类型。这样编译器在运行时可以确定需要的内存总量以及那些部分应该存在栈上，哪些部分应该在堆上。变量的类型在编译运行的时候不能被修改。这叫做<strong>静态类型</strong>。</p>
<p>不是所有的语言都是静态类型的，诸如InronPython和IronRuby之类的脚本语言时<strong>动态类型</strong>的。也就是说，变量的类型直到运行时才会被解析。由于它们是.NET语言，所以C#程序需要能够使用这些语言编写的程序集。问题是，程序集中的类型到运行时才会被解析，而C#又要引用这样的类型并且需要在编译的时候解析类型。</p>
<p>针对这个问题，C#语言设计者增加了dynamic关键字，代表一个特定的C#类型，它知道如何在运行时解析自身。</p>
<p>在编译时，编译器不会对dynamic类型的变量做类型检查。相反，他将与该变量及该变量的操作有关的所有信息打包。在运行时，会对这些信息进行检查，以确保它与变量所代表的实际类型一致。否则，将在运行时抛出异常。</p>
<h2 id="可空类型"><a href="#可空类型" class="headerlink" title="可空类型"></a>可空类型</h2><p>在某些情况下，特别是使用数据库的时候，你希望表示变量目前为保存有效的值。对于引用类型把变量设置为null即可。但定义值类型的变量时，不管它的内容是否含有有效的意义，其内存都会进行分配。</p>
<p><strong>可空类型</strong>允许创建可以标记为有效或无效的值类型变量，这样就可以在使用它之前确定值的有效性。普通的值类型称作<strong>非可空类型</strong>。</p>
]]></content>
      <categories>
        <category>C#/.NET</category>
      </categories>
      <tags>
        <tag>c#</tag>
        <tag>./net</tag>
      </tags>
  </entry>
  <entry>
    <title>5.类的基本概念</title>
    <url>/2022/07/25/WebBackend/C#/5.%E7%B1%BB%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<h2 id="类的概述"><a href="#类的概述" class="headerlink" title="类的概述"></a>类的概述</h2><h3 id="类是一种活动的数据结构"><a href="#类是一种活动的数据结构" class="headerlink" title="类是一种活动的数据结构"></a>类是一种活动的数据结构</h3><p>程序的数据和功能被组织为逻辑上相关的数据项和函数的封装集合，并成为类。</p>
<p>类是一个能存储数据并执行代码的数据结构。它包含数据成员和函数成员：</p>
<blockquote>
<ul>
<li>数据成员	它存储与类或类的实例相关的数据。</li>
<li>函数成员    代码执行</li>
</ul>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220725211627290.png" alt="image-20220725211627290"></p>
<h2 id="声明类"><a href="#声明类" class="headerlink" title="声明类"></a>声明类</h2><p>类型int、double和char由C#定义。但像Dealer和Player这样的类不是由语言定义，如果使用它们就必须通过<strong>编写类的声明</strong>来定义它们：</p>
<blockquote>
<ul>
<li>类的名称；</li>
<li>类的成员；</li>
<li>类的特征。</li>
</ul>
</blockquote>
<p>实例：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#">关键字	类名<br>&#123;<br>    成员声明<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title">MyExcellentClss</span><br>&#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="类成员"><a href="#类成员" class="headerlink" title="类成员"></a>类成员</h2><p>字段和方式是最重要的类成员类型。字段是数据成员，方法是函数成员。</p>
<p>C#在类型的外部<strong>不能声明全局变量</strong>（也就是变量或字段）。所有的字段都属于类型，而且必须在类型声明内部声明。</p>
<h3 id="字段"><a href="#字段" class="headerlink" title="字段"></a>字段</h3><p>字段是隶属于类的变量：</p>
<blockquote>
<ul>
<li>它可以是任意类型，无论是预定义类型还是用户定义类型。</li>
<li>和所有变量一样，字段用来保存数据，并具有如下特征：<ul>
<li>可以被写入；</li>
<li>可以被读取。</li>
</ul>
</li>
</ul>
</blockquote>
<p>实例：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#">类型	字段名称;<br>Type  Identifier;<br><span class="hljs-comment">//例如，下面的类包含字段MyField的声明，它可以保存int值：</span><br><span class="hljs-keyword">class</span> <span class="hljs-title">MyClass</span><br>&#123;<br>    <span class="hljs-built_in">int</span> MyField;<span class="hljs-comment">//类型  字段名称</span><br>&#125;<br><br></code></pre></td></tr></table></figure>

<ol>
<li><p>显式和隐式字段初始化</p>
<p>因为字段是一种变量所以和变量初始化语句相同：</p>
<blockquote>
<ul>
<li><p><strong>字段初始化语句</strong>是字段声明的一部分，由一个等号后面跟着一个求值表达式构成。</p>
</li>
<li><p>初始化值必须是编译时可确定的：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">class</span> <span class="hljs-title">MyClass</span><br>&#123;<br>    <span class="hljs-built_in">int</span> F1 = <span class="hljs-number">17</span>;<span class="hljs-comment">//类型  字段名称  字段初始化值</span><br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p>如果没有初始化语句，字段的值会被编译器设为默认值，默认值由字段的类型决定。如int初始化值为0，bool为false，string为null。</p>
</li>
</ul>
</blockquote>
</li>
<li><p>声明多个字段</p>
<p>方法与前一章相同，实例：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">int</span> F1,F3 = <span class="hljs-number">25</span>;<br><span class="hljs-built_in">string</span> F2,F4 = <span class="hljs-string">&quot;abcd&quot;</span>;<br></code></pre></td></tr></table></figure></li>
</ol>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>方法是具有名称的可执行代码块，可以从程序的很多不同地方执行，甚至从其他程序执行。</p>
<p>当方法被<strong>调用</strong>（call&#x2F;invoke）时，它执行自己所含的代码，然后返回到调用它的代码并继续执行调用代码。有些方法返回一个值到它们被调用的位置。方法相当于C++中的<strong>成员函数</strong>。</p>
<p>C#<strong>没有全局函数</strong>（方法）声明在类型声明的外部。C#方法没有默认的返回类型，所有方法必须包含返回类型或void</p>
<p>声明方法最简语法包括以下组成部分。</p>
<blockquote>
<ul>
<li>返回类型	方法返回值的类型，如果方法不返回值，那么返回类型被指定void</li>
<li>名称	方法的名称</li>
<li>参数列表	至少有一对空的圆括号组成</li>
<li>方法体	由一对大括号组成，大括号包含执行的代码</li>
</ul>
</blockquote>
<p>例如：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">class</span> <span class="hljs-title">SimpleClass</span><br>&#123;<br>    <span class="hljs-comment">//返回类型	方法名称  参数列表</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PrintNums</span>()</span><br>    &#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;1&quot;</span>);<br>        Console.WriteLine(<span class="hljs-string">&quot;2&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="创建变量和类的实例"><a href="#创建变量和类的实例" class="headerlink" title="创建变量和类的实例"></a>创建变量和类的实例</h2><p>一旦类被声明，就可以创建类的实例：</p>
<blockquote>
<ul>
<li>类是引用类型</li>
<li>数据的引用保存在一个类类型的变量中</li>
</ul>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220725220705021.png" alt="image-20220725220705021"></p>
<h2 id="为数据分配内存"><a href="#为数据分配内存" class="headerlink" title="为数据分配内存"></a>为数据分配内存</h2><p>声明类类型的变量所分配的内存是用来保存引用的，而不是用来保存类对象实际数据的。需要使用new运算符为实际数据分配内存：</p>
<blockquote>
<ul>
<li><p>new运算符为任意指定类型的实例分配并初始化内存。他依据类型的不同从栈或堆里分配。</p>
</li>
<li><p>使用new运算符组成一个<strong>对象创建表达式</strong>，他的组成如下：</p>
<ul>
<li><p>关键字 new；</p>
</li>
<li><p>需要分配的内存实例的类型名称；</p>
</li>
<li><p>成对的圆括号，可以是空值</p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220725221305453.png" alt="image-20220725221305453"></p>
</li>
</ul>
</li>
<li><p>如果将内存分配一个引用类型（变量），则对象创建表达式返回一个引用，指向在堆中被分配并初始化的对象实例。</p>
</li>
</ul>
</blockquote>
<p>实例：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs C#">Dealer theDealer;	<span class="hljs-comment">//声明引用对象</span><br>theDealer = <span class="hljs-keyword">new</span> Dealer();	<span class="hljs-comment">//为类对象分配内存并赋值给变量</span><br><span class="hljs-comment">//合并</span><br>Dealer theDealer = <span class="hljs-keyword">new</span> Dealer();	<span class="hljs-comment">//声明并初始化</span><br></code></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220725223853260.png" alt="image-20220725223853260"></p>
<h2 id="实例成员"><a href="#实例成员" class="headerlink" title="实例成员"></a>实例成员</h2><p>类声明相当于蓝图，通过这个蓝图创建多少个类的实例都可以。</p>
<blockquote>
<ul>
<li>实例成员	类的每个实例都是不同的实体，它们有自己的一组数据成员，因为这些数据成员都和类的实例相关，所以被称为<strong>实例成员</strong>。</li>
<li>静态成员	实例成员是默认类型，但也可以声明与类而不是实例相关的成员，称为静态成员。</li>
</ul>
</blockquote>
<p>实例：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">class</span> <span class="hljs-title">Dealer</span> &#123; ... &#125;	<span class="hljs-comment">//声明类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title">Player</span>			<span class="hljs-comment">//声明类</span><br>&#123;<br>    <span class="hljs-built_in">string</span> Name;		<span class="hljs-comment">//字段</span><br>    ...<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>()</span><br>    &#123;<br>        Dealer theDealer = <span class="hljs-keyword">new</span> Dealer();<br>        Player player1 = <span class="hljs-keyword">new</span> Player();<br>        Player player2 = <span class="hljs-keyword">new</span> Player();<br>        Player player3 = <span class="hljs-keyword">new</span> Player();<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220725230028473.png" alt="image-20220725230028473"></p>
<h2 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h2><p>从类的内部，任何函数成员都可以使用成员的名称访问类中任意的其他成员。</p>
<p>访问修饰符成员声明的可选部分。下面是字段和方法声明的语法：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#">字段<br>    访问修饰符 类型 标识符;<br>方法<br>    访问修饰符 返回类型 方法名()<br>&#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure>

<p>5种成员访问控制如下：</p>
<blockquote>
<ul>
<li>私有的（private）</li>
<li>公有的（public）</li>
<li>受保护的（protected）</li>
<li>内部的（internal）</li>
<li>受保护内部的（protected internal）</li>
</ul>
</blockquote>
<h3 id="私有访问和公有访问"><a href="#私有访问和公有访问" class="headerlink" title="私有访问和公有访问"></a>私有访问和公有访问</h3><p>私有成员只能从声明它的类的内部访问，其他的类看不见或者无法访问它们。</p>
<blockquote>
<ul>
<li><p>私有访问是默认访问级别</p>
</li>
<li><p>可以将private访问修饰符显式地将一个成员声明为私有。例如：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#">	   <span class="hljs-built_in">int</span> MyInt1;		<span class="hljs-comment">//隐式声明为私有</span><br><span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> MyInt2;		<span class="hljs-comment">//显式声明为私有</span><br></code></pre></td></tr></table></figure></li>
</ul>
</blockquote>
<ol>
<li><p>公有访问和私有访问图示</p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220725231724122.png" alt="image-20220725231724122"></p>
</li>
<li><p>成员访问示例</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">class</span> <span class="hljs-title">C1</span><br>&#123;<br>    <span class="hljs-built_in">int</span>   F1;				<span class="hljs-comment">//隐式私有字段</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> F2;			<span class="hljs-comment">//显式私有字段</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> F3;			<span class="hljs-comment">//公有字段</span><br>    <br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DoCalc</span>()			<span class="hljs-comment">//隐式私有方法</span></span><br>    &#123;<br>        ...<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">GetVal</span>()		<span class="hljs-comment">//公有方法</span></span><br>    &#123;<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220725232134734.png" alt="image-20220725232134734"></p>
</li>
</ol>
<h2 id="从类的内部访问成员"><a href="#从类的内部访问成员" class="headerlink" title="从类的内部访问成员"></a>从类的内部访问成员</h2><p>即使字段和两个方法被声明为private，类的所有成员还是可以被类的任何方法（或任何函数成员）访问。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">class</span> <span class="hljs-title">DaysTemp</span><br>&#123;<br>    <span class="hljs-comment">//字段</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> High = <span class="hljs-number">75</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> Low = <span class="hljs-number">45</span>;<br>    <br>    <span class="hljs-comment">//方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> <span class="hljs-title">GetHigh</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> High;		<span class="hljs-comment">//访问私有字段</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> <span class="hljs-title">GetLow</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> Low;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> <span class="hljs-title">Average</span>()</span><br>    &#123;<br>        returm(GetHigh() + GetLow()) /<span class="hljs-number">2</span>;   <span class="hljs-comment">//访问自由方法</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="从类的外部访问成员"><a href="#从类的外部访问成员" class="headerlink" title="从类的外部访问成员"></a>从类的外部访问成员</h2><p>要从类的外部访问实例成员，必须包括变量名称和成员名称，中间用句点（.）分隔。这称为<strong>点运算符</strong>（dot-syntax notation）。实例：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#">DaysTemp myDt = <span class="hljs-keyword">new</span> DaysTemp();		<span class="hljs-comment">//创建类的对象</span><br><span class="hljs-built_in">float</span> fValue = myDt.Average();		<span class="hljs-comment">//从外部访问,myDt变量名称，Average成员名称</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title">DaysTemp</span>		<span class="hljs-comment">//声明类DaysTemp</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> High = <span class="hljs-number">75</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Low = <span class="hljs-number">45</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title">Program</span>		<span class="hljs-comment">//声明类Program</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>()</span><br>    &#123;<br>        DaysTemp temp = <span class="hljs-keyword">new</span> DaysTemp();		<span class="hljs-comment">//创建对象</span><br>        temp.High = <span class="hljs-number">85</span>;			<span class="hljs-comment">//tmp.high字段名称和字段，字段赋值</span><br>        temp.Low = <span class="hljs-number">60</span>;<br>        <br>        Console.WriteLine(<span class="hljs-string">&quot;High &#123;0&#125;&quot;</span>,temp.High);		<span class="hljs-comment">//读取字段值</span><br>        Console.WriteLine(<span class="hljs-string">$&quot;Low: <span class="hljs-subst">&#123;temp.Low&#125;</span>&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="综合应用"><a href="#综合应用" class="headerlink" title="综合应用"></a>综合应用</h2><figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">class</span> <span class="hljs-title">DaysTemp</span>	<span class="hljs-comment">//声明类</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> High, Low;	<span class="hljs-comment">//声明实例字段</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">Average</span>()</span><br>    &#123;<br>        returm (High + Low) / <span class="hljs-number">2</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>()</span><br>        &#123;<br>            <span class="hljs-comment">//创建两个DaysTemp实例</span><br>            DaysTemp t1 = <span class="hljs-keyword">new</span> DaysTemp();<br>            DaysTemp t2 = <span class="hljs-keyword">new</span> DaysTemp();<br>            <br>          	<span class="hljs-comment">//给字段赋值</span><br>            t1.High = <span class="hljs-number">76</span>;	t1.Low = <span class="hljs-number">57</span>;<br>            t2.High = <span class="hljs-number">75</span>;	t2.Low = <span class="hljs-number">53</span>;<br>            <br>            <span class="hljs-comment">//读取字段值</span><br>            <span class="hljs-comment">//调用实例方法</span><br>            Console.WriteLine(<span class="hljs-string">&quot;t1: &#123;0&#125; &#123;1&#125; &#123;2&#125;&quot;</span>, t1.High, t1.Low, t1.Average() );<br>            console.WriteLine(<span class="hljs-string">&quot;t2: &#123;0&#125; &#123;1&#125; &#123;2&#125;&quot;</span>, t2.High, t2.Low, t2.Average() );<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220725235419052.png" alt="image-20220725235419052"></p>
]]></content>
      <categories>
        <category>C#/.NET</category>
      </categories>
      <tags>
        <tag>c#</tag>
      </tags>
  </entry>
  <entry>
    <title>C#</title>
    <url>/2022/07/13/WebBackend/C#/C#/</url>
    <content><![CDATA[<h1>1 .NET框架</h1>
<p>.NET框架由三部分组成：</p>
<ul>
<li>编程工具：包括Visual Studio集成开发环境，调试器，.NET兼容的编译器等</li>
<li>CLR（Common Language Runtime，公共语言运行库）：在运行时管理程序的执行，包括内存管理和垃圾收集、代码安全验证、代码执行线程管理及异常处理等</li>
<li>BCL（Base Class Library，基类库）：包括通用基础类（文件操作、字符串操作等相关的类）、集合类（列表、字典、散列表）、线程和同步类、XML类。</li>
</ul>
<p>以下图片说明了3个用不同语言编写的程序的完整编译时和运行的过程</p>
<p><a href="https://wyh317.github.io/img/1.5.jpg"><img src="https://wyh317.github.io/img/1.5.jpg" alt="NET框架" /></a></p>
<p><a href="https://wyh317.github.io/img/1.5.jpg">NET框架</a></p>
<h1>2. C#编程概述</h1>
<p>一个简单的C#程序，这段程序会输出“Hi there！”</p>
<pre><code class="language-c#">//告诉编译器这个程序使用了System命名空间的类型
using System;
//声明一个新命名空间，名称为Simple
namespace Simple&#123;
    class Program&#123;
        static void Main()&#123;
            Console.WriteLine(&quot;Hi there!&quot;)
        &#125;
    &#125;
&#125;
Copy</code></pre>
<p>在C#中，WirteLine相当于java中的println，Write相当于java中的print</p>
<pre><code class="language-c#">Console.WriteLine(&quot;Three integers are &#123;1&#125;, &#123;0&#125; and &#123;1&#125;.&quot;, 3, 6);
Copy</code></pre>
<p>以上语句将在屏幕上显示：
Three integers are 6, 3 and 6.</p>
<h2>类型存储和变量</h2>
<p>命名空间是一种把相关的类型声明分组并命名的方法。既然程序是一组相关的类型声明，那么通常会把程序声明在你创建的命名空间内部。</p>
<h2>预定义类型</h2>
<p>C#提供了16种预定义类型，包括13种简单类型和3种非简单类型</p>
<p>简单类型：
| 名称 | 含义 |
| ———– | ———– |
| int | 32位有符号整数 |
| uint | 32位无符号整数 |
| long | 64位有符号整数 |
| ulong | 62位无符号整数 |
| short | 16位有符号整数 |
| ushort | 16位无符号整数 |
| byte | 8位有符号整数 |
| sbyte | 8位无符号整数 |
| float | 单精度浮点数 |
| double | 双精度浮点数 |
|decimal|高精度小数类型|
| bool | 布尔型 |
| char | Unicode字符串 |</p>
<p>非简单类型：</p>
<ul>
<li>object：所有其他类的基类</li>
<li>string：多个Unicode字符组成的序列</li>
<li>dynamic：在使用动态语言编写的程序集时使用</li>
</ul>
<p>C#语言是静态的，但基于.NET的一些其他语言却是动态的，也就是说变量的类型直到运行时才会被解析。由于它们是.NET语言，所以C#程序需要使用这些语言编写的程序集。问题是程序集中的类型直到运行时才会被解析，而C#又要引用这样的类型并且需要在编译的时候解析类型。为了解决这个问题，有了dynamic关键字。</p>
<p>在编译时，编译器不会对dynamic类型的变量进行类型检查。相反，它将与该变量及该变量的操作有关的所有信息打包。在运行时会对这些信息进行检查，以确保它与变量所代表的实际类型保持一致性，否则将在运行时抛出异常。</p>
<h2>用户定义类型</h2>
<p>C#中有6种用户自定义类型</p>
<ul>
<li>类类型class</li>
<li>结构类型struct</li>
<li>数组类型array</li>
<li>枚举类型enum</li>
<li>委托类型delegate</li>
<li>接口类型interface</li>
</ul>
<h1>3. 方法</h1>
<h2>类型推断和var关键字</h2>
<p>var关键字不是特定类型变量的符号，它是从等号右边推断出的实际类型的速记。</p>
<pre><code class="language-c#">//在下面的第一个声明中，var是int的速记
//第二个声明中，var是MyExcellentClass的速记
static void Main()&#123;
    var total = 15;  
    var mec = new MyExcellentClass();
&#125;
Copy</code></pre>
<p>使用var关键字有一些重要的条件：</p>
<ul>
<li>只能用于本地变量，不能用于字段</li>
<li>只能在变量声明中包含初始化的时候使用</li>
<li>一旦编译器推断出变量的类型，它就是固定且不能更改的</li>
</ul>
<h2>本地常量</h2>
<p>用const修饰符来修饰（类似于java中的final）</p>
<p>常量和变量的语法除了以下两点外都相同：</p>
<ul>
<li>常量在类型之前增加关键字const</li>
<li>常量必须有初始化语句，也就是说初始值不能在编译期确定。因此，它不能是某个对象的引用（但可以是null的引用），因为对象的引用是在运行时决定的。</li>
</ul>
<h2>参数</h2>
<p>首先区分下<strong>形参</strong>和<strong>实参</strong>的概念：</p>
<pre><code class="language-c#">//以下函数的参数声明中，x和y均为形参
public void PrintSum(int x, float y)&#123;

<p>&#125;<br>Copy<br>&#x2F;&#x2F;以下函数的调用中，5和someInt均为实参,实参的值用于初始化形参<br>PrintSum(5, someInt)&#123;</p>
<p>&#125;<br>Copy</code></pre></p>
<h3>1.值参数</h3>
<p>Java中的参数传递类型（值传递），即：值参数是把实参的值复制给形参，二者在栈中的不同位置。</p>
<ul>
<li>在方法被调用前，用作实参的变量a2已经在栈中了</li>
<li>在方法开始时，系统在栈中为形参分配空间，并从实参复制值
<ul>
<li>因为a1是引用类型，所以a1的值（即指向对象的地址）被复制，形参和实参都指向堆中的同一个对象</li>
<li>因为a2是值类型的，所以值被复制，产生了一个独立的数据项</li>
</ul></li>
<li>在方法中，f2和对象f1的字段都被加上了5</li>
<li>方法结束后，形参从栈中弹出</li>
</ul>
<p><a href="https://wyh317.github.io/img/值参数.jpg"><img src="https://wyh317.github.io/img/%E5%80%BC%E5%8F%82%E6%95%B0.jpg" alt="值参数" /></a></p>
<p><a href="https://wyh317.github.io/img/值参数.jpg">值参数</a></p>
<h3>2.引用参数</h3>
<p>对于引用参数，系统不会在栈中为形参分配新的空间，形参的参数名将作为实参的别名，指向相同的内存位置</p>
<ul>
<li>使用引用参数时，必须在方法的声明和调用中都使用ref修饰符</li>
<li>实参必须是变量，在用作实参前必须被赋值</li>
</ul>
<pre><code>//方法声明中要使用ref修饰符
void MyMethod(ref int val)&#123;

<p>&#125;</p>
<p>int y &#x3D; 1;<br>MyMethod(ref y)   &#x2F;&#x2F;使用y前必须赋值<br>MyMethod(ref 3 + 5)   &#x2F;&#x2F;会报错，因为引用参数作为实参必须是变量，不能是表达式<br>Copy</code></pre></p>
<ul>
<li>在方法调用前，将要被用作实参的变量a1和a2已经在栈里了</li>
<li>在方法的开始，形参名被设置为实参的别名。引用相同的内存位置</li>
<li>在方法结束后，f2和f1的对象的字段都被加上了5</li>
</ul>
<p><a href="https://wyh317.github.io/img/引用参数.jpg"><img src="https://wyh317.github.io/img/%E5%BC%95%E7%94%A8%E5%8F%82%E6%95%B0.jpg" alt="引用参数" /></a></p>
<p><a href="https://wyh317.github.io/img/引用参数.jpg">引用参数</a></p>
<p>对比将引用类型对象作为值参数和引用参数传递的两种情况：</p>
<ul>
<li>将引用类型对象作为值参数传递：如果在方法内创建一个对象并赋值给形参，将切断形参和实参之间的关联，并且在方法调用结束后，新对象将不复存在</li>
<li>将引用类型对象作为引用参数传递：如果在方法内创建一个新对象并赋值给形参，会让实参也引用该新对象，并且在方法结束后该对象仍然存在。</li>
</ul>
<h2>3.输出参数</h2>
<p>输出参数用于从方法体内把数据传出到调用代码，修饰符为out。和引用参数非常类似</p>
<p>和引用参数一样，输出参数的形参担当实参的别名，方法内对形参的任何改变在方法完成后通过实参变量都是可见的。</p>
<p>唯一和引用参数不同的是：<strong>方法内的代码在读取输出参数之前必须先对其写入</strong></p>
<pre><code class="language-c#">public void Add(out int outValue)&#123;
    //以下这句会报错，因为输出参数outValue在方法中被读取前没有被赋值
    int var1 = outValue + 2;
&#125;
Copy</code></pre>
<h2>4.参数数组</h2>
<p>参数数组允许0个或多个实参对应一个特殊的形参,修饰符为params</p>
<pre><code class="language-c#">//形参inVals可以代表0个或多个实参
void ListInts(params int[] inVals)&#123;

<p>&#125;<br>Copy</code></pre></p>
<ul>
<li>在参数列表中只能有一个参数数组，并且是列表中的最后一个</li>
<li>由参数数组表示的所有参数必须具有相同的类型</li>
</ul>
<p>参数数组在方法声明中需要params修饰符，而在调用时不需要（不同于引用参数和输出参数，它们在以上两个地方都需要修饰符）</p>
<p>可以有如下两种方式为参数数组提供实参：</p>
<ol>
<li>
<p>用一个逗号分隔的该数据类型元素的列表,使用这种方法时，编译器做如下的事：</p>
<ul>
<li>
<p>接收实参列表，用它们在堆中创建并初始化一个数组</p>
</li>
<li>
<p>把数组的引用作为形参保存在栈中</p>
<pre><code class="language-c#">ListInts(10, 20, 30)
Copy</code></pre>
</li>
</ul>
</li>
<li>
<p>用数组作为实参</p>
<p>在这种情况下，编译器会直接使用传入的数组，也就是说栈中的形参指向内存中intArray的位置</p>
<pre><code class="language-c#">int[] intArray = &#123;1, 2, 3&#125;;
ListInts(intArray);
Copy</code></pre>
<h2>5.命名参数</h2>
<p>在使用命名参数时，需要在方法调用中包含参数名。而方法的声明无需任何改变</p>
<pre><code class="language-c#">class MyClass&#123;
   //方法中的参数声明一如平常
   public int Calc(int a, int b, int c)&#123;
       return a + b + c;
   &#125;
   static void Main()&#123;
       MyClass mc = new MyClass();
       int result = mc.Calc(c: 2, a: 4, b: 3);
   &#125;
&#125;
Copy</code></pre>
<h3>6.可选参数</h3>
<p>所谓可选参数就是在调用方法的时候可以包含这个参数，也可以忽略它。</p>
<pre><code class="language-c#">class MyClass&#123;
   //b为可选参数，默认值为3
   public int Calc(int a, int b = 3)&#123;
       return a + b;
   &#125;
   static void Main()&#123;
       MyClass mc = new MyClass();
       int ro = mc.Calc(5, 6);
       int r1 = mc.Calc(5);
       Console.WriteLine("&#123;0&#125;, &#123;1&#125;", ro, r1);
   &#125;
&#125;
Copy</code></pre>
<p>上述代码会输出11，8</p>
</li>
</ol>
<p>只要值类型的默认值在编译的时候可以确定，就可以使用值参数作为可选参数。而只有在默认值为null的时候，引用参数才可以作为可选参数。</p>
<p>总结下来，一个方法的声明中，参数要按照必填参数、可选参数、params参数的先后顺序声明。</p>
<p>可以忽略最后一个可选参数，或者最后n个可选参数，但是不可以随机选择省略任意的可选参数，省略必须从最后开始。</p>
<p><strong>参数类型总结：</strong></p>
<table>
<thead>
<tr>
<th>参数类型</th>
<th>修饰符</th>
<th>是否在声明时使用</th>
<th>是否在调用是使用</th>
<th>执行</th>
</tr>
</thead>
<tbody>
<tr>
<td>值参数</td>
<td>无</td>
<td></td>
<td></td>
<td>系统把实参的值复制给形参，二者在栈中位置不同</td>
</tr>
<tr>
<td>引用参数</td>
<td>ref</td>
<td>是</td>
<td>是</td>
<td>形参是实参的别名，二者在栈中位置相同</td>
</tr>
<tr>
<td>输出参数</td>
<td>out</td>
<td>是</td>
<td>是</td>
<td>在读取输出参数前必须对其写入，除此之外和引用参数类似</td>
</tr>
<tr>
<td>参数数组</td>
<td>params</td>
<td>是</td>
<td>否</td>
<td>允许传递可变数目的实参到方法</td>
</tr>
</tbody>
</table>
<h2>栈帧</h2>
<p>在调用方法的时候，内存从栈的顶部开始分配，保存和方法关联的一些数据项。这块内存叫做方法的栈帧</p>
<p>栈帧保存如下的内容：</p>
<ul>
<li>
<p>返回地址</p>
</li>
<li>
<p>为参数分配的内存</p>
</li>
<li>
<p>各种和方法调用相关的其他管理数据项</p>
<p>在方法调用的时候，整个栈帧都会压入栈。在方法退出的时候，整个栈帧都会从栈上弹出。</p>
</li>
</ul>
<p><a href="https://wyh317.github.io/img/栈帧.jpg"><img src="https://wyh317.github.io/img/%E6%A0%88%E5%B8%A7.jpg" alt="栈帧" /></a></p>
<p><a href="https://wyh317.github.io/img/栈帧.jpg">栈帧</a></p>
<h1>4.类</h1>
<p>类成员包括数据成员（保存数据）和函数成员（执行代码）
其中数据成员包括：</p>
<ul>
<li>字段</li>
<li>常量（用const修饰，包括本地常量和成员常量，本地常量声明在方法内，成员常量声明在类中）</li>
</ul>
<h2>常量</h2>
<p>成员常量表现的和静态量相似，但唯一不同的是，成员常量没有自己的存储位置，而是在编译时被编译器替换。此外，不能将成员常量声明为static。与const有着相同作用的是readonly，不同的是，const字段只能在字段的声明语句中初始化，而readonly也可以在构造函数中初始化。因此const字段的值必须在编译时确定，而randonly字段的值可以在运行时决定。</p>
<p>函数成员包括：</p>
<ul>
<li>方法</li>
<li>属性</li>
<li>构造函数、析构函数</li>
<li>运算符</li>
<li>索引</li>
<li>事件</li>
</ul>
<h2>属性</h2>
<p>属性是一组称为访问器的方法（set访问器为属性赋值，get访问器从属性中获取值）。它是类中的函数成员，因此不需为属性分配内存。</p>
<p>写入和读取属性的代码和访问字段一样。属性会根据是写入还是读取，来隐式地调用适当的访问器</p>
<p>属性通常和字段关联，一种常见的方式是在类中将字段声明为private以封装字段，并声明一个public属性用get和set访问器来控制对该字段的访问。和属性关联的字段成为后备字段</p>
<pre><code class="language-c#">class C1&#123;
    private int TheRealValue = 10;   //后备字段：分配内存
    public int MyValue&#123;              //属性：不分配内存
        set&#123;
            TheRealValue = value;    //设置字段的值
        &#125; 
        get&#123;
            return TheRealValue;     //获取字段的值
        &#125;
    &#125;
&#125;

<p>class Program&#123;<br>    static void Main()&#123;<br>        &#x2F;&#x2F;对属性的读和写如同对字段的读和写<br>        C1 c &#x3D; new C1();<br>        Console.WriteLine(&quot;MyValue: &#123;0&#125;&quot;, c.MyValue);</p>
<pre><code>    c.MyValue = 20;
    Console.WriteLine(&amp;quot;MyValue: &#123;0&#125;&amp;quot;, c.MyValue);
&#125;
</code></pre>
<p>}<br>Copy</code></pre></p>
<p>此外，属性也可以只有get访问器（只读属性），或者只有set访问器（只写属性）</p>
<pre><code class="language-c#">class RightTriangle&#123;
    public double A = 3;
    public double B = 4;
    //只读属性，计算直角三角形的第三边
    public double Hypotenuse&#123;
        get&#123;
            return Math.Sqrt((A * A) + (B * B));
        &#125;
    &#125;
&#125;

<p>class Program&#123;<br>    static void Main()&#123;<br>        RightTriangle c &#x3D; new RightTriangle();<br>        Console.WriteLine(&quot;Hypotenuse: &#123;0&#125;&quot;, c.Hypotenuse);<br>    &#125;<br>&#125;</p>
<p>上述代码将输出5<br>Copy</code></pre></p>
<h2>索引器</h2>
<p>可以认为索引器是为类的多个数据成员提供get和set访问器的属性。</p>
<pre><code class="language-c#">class Class1&#123;
    private int Temp0;
    private int Temp1;
    //和属性不同的是，索引器有参数（索引参数），并且使用this而不是名称
    //索引器声明
    public int this [int index]&#123;    
        get&#123;
            return (index == 0) ? Temp0 : Temp1;
        &#125;
        set&#123;
            if(index == 0)
                Temp0 = value;   //value为set访问器的隐式变量
            else
                Temp1 = value;
        &#125;
    &#125;
&#125;

<p>class Example&#123;<br>    static void Main()&#123;<br>        Class1 a &#x3D; new Class1();<br>        &#x2F;&#x2F;使用索引参数0或1读取数据成员<br>        Console.WriteLine(&quot;T0: &#123;0&#125;, T1 : &#123;1&#125;&quot;, a[0], a[1]);<br>        &#x2F;&#x2F;使用索引参数0或1对数据成员进行写入<br>        a[0] &#x3D; 15;<br>        a[1] &#x3D; 20;<br>        Console.WriteLine(&quot;T0: &#123;0&#125;, T1 : &#123;1&#125;&quot;, a[0], a[1]);<br>    &#125;<br>&#125;</p>
<p>以上代码会输出：<br>T0: 0, T1: 0<br>T0: 15, T1: 20<br>Copy</code></pre></p>
<h1>5.继承</h1>
<p>如果类OtherClass继承自SomeClass，则应按如下表示</p>
<pre><code class="language-c#">class OtherClass : SomeClass&#123;
&#125;
Copy</code></pre>
<p>一个类只能继承自一个基类，所有的类都是Object类的派生类</p>
<h2>屏蔽基类的成员</h2>
<p>虽然派生类不能删除它继承的任何成员，但可以用与基类成员名称相同的成员来屏蔽基类成员（如果是函数成员，则要求签名相同，签名指名称和参数列表，不包括返回类型）。此外还要使用new修饰符来告诉编译器我正在故意屏蔽继承的成员。</p>
<p>另外，即使派生类屏蔽了基类的成员，也可以使用基类访问表达式访问隐藏的继承成员。</p>
<pre><code class="language-c#">class SomeClass&#123;    //基类
    public string Field1 = &quot;Field1--In the base class&quot;;
&#125;
class OtherClass : SomeClass&#123;    //派生类
    //使用new修饰符隐藏基类中的Field1字段
    new public string Field1 = &quot;Field1--In the derived class&quot;;
    public void PrintField1()&#123;
        //访问派生类中的Field1，会输出&quot;Field1--In the derived class&quot;
        Console.WriteLine(Field1);   
        //使用基类访问来访问基类中的Field1，会输出&quot;Field1--In the base class&quot; 
        Console.WriteLine(base.Field1); 
    &#125;
&#125;
Copy</code></pre>
<h2>使用基类的引用</h2>
<pre><code class="language-c#">MyDerivedClass derived = new MyDerivedClass();   //创建一个派生类对象
MyBaseClass mybc = (MyBaseClass)derived;        //让基类引用指向派生类对象
Copy</code></pre>
<p>对于如上代码，派生类的引用derived可以看到完整的MyDerivedClass对象，而基类引用mybc只能看到对象的MyBaseClass部分（只能看到基类成员）
<a href="https://wyh317.github.io/img/使用基类的引用.jpg"><img src="https://wyh317.github.io/img/%E4%BD%BF%E7%94%A8%E5%9F%BA%E7%B1%BB%E7%9A%84%E5%BC%95%E7%94%A8.jpg" alt="使用基类的引用" /></a></p>
<p><a href="https://wyh317.github.io/img/使用基类的引用.jpg">使用基类的引用</a></p>
<p>另外，也可以使用基类引用调用派生类的方法，但要满足如下条件：</p>
<ul>
<li>派生类的方法和基类方法有着相同的签名和返回类型</li>
<li>基类的方法用virtual标注</li>
<li>派生类的方法用override标注
在这种情况下，当使用基类引用（mybc）调用方法时，方法会被传递到派生类执行</li>
</ul>
<p>注意：</p>
<ul>
<li>覆写（override）和被覆写的方法应该有相同的访问性</li>
<li>不能覆写static方法和非虚（virtual）方法</li>
</ul>
<p>当使用对象的基类引用调用一个覆写的方法时，方法的调用被沿着派生层次上溯执行，一直到标记为override的方法的最高派生版本。
如果在更高派生级别有该方法的其他声明，但没有被标记为override，那么它们不会被调用。</p>
<h2>构造函数</h2>
<h3>构造函数初始化语句</h3>
<p>两种形式：</p>
<ul>
<li>关键字base：指明使用哪一个基类的构造函数</li>
<li>关键字this：指明使用哪一个当前类的构造函数
以下构造函数使用了构造函数初始化语句，构造函数初始化语句指明了要使用第一个参数是string，第二个参数是int型的那个基类构造函数</li>
</ul>
<p>当声明一个不带构造函数初始化语句的构造函数时，它实际上是使用了无参数的基类构造函数。</p>
<pre><code class="language-c#">public MyDerivedClass(int x, string s) : base(s, x)&#123;

<p>&#125;<br>Copy</code></pre></p>
<p>如下代码中的MyClass类包含一个有一个int型参数的构造函数，这个构造函数使用了同一个类中具有两个参数的构造函数，并为第二个参数提供了一个默认值</p>
<pre><code class="language-c#">public MyClass(int x) : this(x, &quot;Using Default String&quot;)&#123;

<p>&#125;<br>Copy</code></pre></p>
<p>如果一个类有好几个构造函数，并且它们都需要在构造对象的过程中执行一些公共代码。这时可以把公共代码提取出来作为一个构造函数，被其他所有的构造函数作为构造函数初始化语句使用。</p>
<h2>访问级别</h2>
<p>类有两种访问级别：</p>
<ul>
<li>public：可以被任何程序集中的代码访问</li>
<li>internal：默认的访问级别，仅可以被自己所在的程序集中的类看到</li>
</ul>
<p>类中的成员有5种访问级别：</p>
<ul>
<li>私有的（private）：只能被自己类中的成员访问，不能被其他的类访问，即使是继承自它的类也不行</li>
<li>公有的（public）：所有的类都可以自由访问</li>
<li>受保护的（protected）：和private类似，唯一不同的是，它允许该类的派生类来访问</li>
<li>内部的（internal）：对程序集内部的所有类可见，对程序集外部的所有类不可见</li>
<li>受保护内部的（protected internal）：相当于internal与protected的并集，即对程序集内部的类可见，也对继承自该类的类可见。</li>
</ul>
<h2>抽象成员</h2>
<p>类似于Java中的抽象方法。它使用abstract标记，并且必须是函数成员（方法、属性、事件、索引）。不能有实现代码块，抽象成员的实现用分号表示。即每一个抽象成员的声明后都要带一个分号</p>
<p>如：以下声明了两个抽象成员，一个名为PrintStuff的抽象方法和一个名为MyProperty的抽象属性</p>
<pre><code class="language-c#">abstract public void PrintStuff(string s);
abstract public int MyProperty&#123;
    get;    //分号代替实现
    set;
&#125;
Copy</code></pre>
<ul>
<li>抽象类：只能被继承，不能用来创建实例，用abstract修饰符标注</li>
<li>密封类：与抽象类相反，只能被用来创建实例，不能被继承。用sealed修饰符标注</li>
</ul>
<h1>语句</h1>
<h2>操作符重载</h2>
<p>如果面对一个用户自定义的类或结构，运算符就会不知道如何取处理它。运算符重载允许用户自己定义C#运算符来操作自定义类型的操作数。</p>
<ul>
<li>为类或结构重载一个运算符x，可以声明一个名称为<code>operator x</code>的方法并实现它的行为（如<code>operator +</code>和<code>operator -</code>等）。一元运算符的重载方法带有一个单独的class或struct类型的参数，二元运算符重载的方法带有两个参数，其中至少有一个是class或struct类型。</li>
<li>声明必须同时使用static和public的修饰符</li>
<li>运算符必须要是要操作的类或结构的成员</li>
</ul>
<p>如下代码声明了LimitedInt类的两个重载的运算符：一个是加运算符，另一个是取负运算符</p>
<pre><code class="language-c#">class LimitedInt Return&#123;
    public static LimitedInt operator + (LimitedInt x, double y)&#123;
        LimitedInt li = new LimitedInt();
        li.TheValue = x.TheValue + (int)y;
        return li;
    &#125;

<pre><code>public static LimitedInt operator - (LimitedInt x)&#123;
    LimitedInt li = new LimitedInt();
    li.TheValue = 0;
    return li;
&#125;
</code></pre>
<p>}<br>Copy</code></pre></p>
<h2>标签语句</h2>
<p>标签语句由一个标识符后面跟着一个冒号再跟着一条语句组成，它有如下的形式：<code>Identifier: Statement</code>。这条语句在执行时与只有Statement的语句相同，加一个标签的目的只是为了允许程序从其他位置跳转到这个标签所在的位置。</p>
<ul>
<li>因为标签有自己的声明空间，所以标签语句中的标识符可以是任意有效的标识符（可以与本地变量名相同）。</li>
<li>标签的作用域仅在块内部</li>
</ul>
<p>goto语句可以跳到它本身所在的块中的任何标签语句，或跳出到任何它被嵌套的块内的标签语句。<code>goto Indentifier</code></p>
<h1>数组</h1>
<h2>一维数组和矩形数组</h2>
<pre><code class="language-c#">int[] intArr1 = new int[15];   //声明一维数组
int[,] intArr2 = new int[5, 10];  //声明二维数组
int var2 = intArr[2, 3];      //从二维数组中读值

<p>int[] intArr &#x3D; new int[]&#123;10, 20, 30, 40&#125;;   &#x2F;&#x2F;初始化一维数组<br>int[,] intArr2 &#x3D; new int[,]&#123;&#123;0, 1, 2&#125;, &#123;10, 11, 12&#125;&#125;; &#x2F;&#x2F;初始化二维数组<br>Copy</code></pre></p>
<h2>交错数组</h2>
<p>交错数组是<strong>数组的数组</strong>，与矩阵数组不同，交错数组的子数组的元素个数可以不同</p>
<pre><code class="language-c#">//实例化顶层数组，不能在声明语句中初始化顶层数组之外的数组长度
int[][] Arr = new int[3][];  
//实例化子数组
Arr[0] = new int[]&#123;1,2,3&#125;;
Arr[1] = new int[]&#123;4,5,6&#125;;
Arr[2] = new int[]&#123;7,8,9&#125;;
Copy</code></pre>
<h2>foreach语句</h2>
<p>注意：迭代变量item是只读的，不能修改。</p>
<pre><code class="language-c#">int[] arr1 = new int[]&#123;1,2,3&#125;;
foreach(int item in arr1)
    Console.WriteLine(&quot;Item Value: &#123;0&#125;, item&quot;);</code></pre>]]></content>
      <categories>
        <category>C#/.NET</category>
      </categories>
      <tags>
        <tag>c#</tag>
      </tags>
  </entry>
  <entry>
    <title>C#高级</title>
    <url>/2022/02/19/WebBackend/C#/C#%E9%AB%98%E7%BA%A7/</url>
    <content><![CDATA[<h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>把一个，或者多个项目，封闭在一个物理，或者逻辑的包中。</p>
<p>C#封装 ，可以设置访问权限，通过访问修饰符来实现。</p>
<p>访问修饰符，定义一个类成员的范围和可见性。</p>
<p>C#支持的访问修饰符：</p>
<ul>
<li>public : 所有对象都可以访问</li>
<li>private ：对象本身在内部可以访问</li>
<li>protected : 这类，及其子类可以访问。</li>
<li>internal : 同一程序集的对象可以访问。</li>
<li>protected internal : 当前程序集，或派生自包括类的类型。</li>
</ul>
<p><img src="C:\Users\33225\AppData\Roaming\Typora\typora-user-images\image-20220625100647126.png" alt="image-20220625100647126"></p>
<h2 id="结构体（Struct）"><a href="#结构体（Struct）" class="headerlink" title="结构体（Struct）"></a>结构体（Struct）</h2><p>在 C# 中，结构体是值类型数据结构。它使得一个单一变量可以存储各种数据类型的相关数据。<strong>struct</strong> 关键字用于创建结构体。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.Text;<br><br><span class="hljs-keyword">struct</span> Books<br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> title;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> author;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> subject;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> book_id;<br>&#125;;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">testStructure</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>    &#123;<br>      Books Book1;        <span class="hljs-comment">/* 声明 Book1，类型为 Books */</span><br>      Books Book2;        <span class="hljs-comment">/* 声明 Book2，类型为 Books */</span><br>      <span class="hljs-comment">/* book 1 详述 */</span><br>      Book1.title = <span class="hljs-string">&quot;C Programming&quot;</span>;<br>      Book1.author = <span class="hljs-string">&quot;Nuha Ali&quot;</span>;<br>      Book1.subject = <span class="hljs-string">&quot;C Programming Tutorial&quot;</span>;<br>      Book1.book_id = <span class="hljs-number">6495407</span>;<br><br>      <span class="hljs-comment">/* book 2 详述 */</span><br>      Book2.title = <span class="hljs-string">&quot;Telecom Billing&quot;</span>;<br>      Book2.author = <span class="hljs-string">&quot;Zara Ali&quot;</span>;<br>      Book2.subject =  <span class="hljs-string">&quot;Telecom Billing Tutorial&quot;</span>;<br>      Book2.book_id = <span class="hljs-number">6495700</span>;<br><br>      <span class="hljs-comment">/* 打印 Book1 信息 */</span><br>      Console.WriteLine(<span class="hljs-string">&quot;Book 1 title : &#123;0&#125;&quot;</span>, Book1.title); <span class="hljs-comment">//&#123;0&#125;是占位符 用于格式化输出字符串</span><br>      Console.WriteLine(<span class="hljs-string">&quot;Book 1 author : &#123;0&#125;&quot;</span>, Book1.author);<br>      Console.WriteLine(<span class="hljs-string">&quot;Book 1 subject : &#123;0&#125;&quot;</span>, Book1.subject);<br>      Console.WriteLine(<span class="hljs-string">&quot;Book 1 book_id :&#123;0&#125;&quot;</span>, Book1.book_id);<br><br>      <span class="hljs-comment">/* 打印 Book2 信息 */</span><br>      Console.WriteLine(<span class="hljs-string">&quot;Book 2 title : &#123;0&#125;&quot;</span>, Book2.title);<br>      Console.WriteLine(<span class="hljs-string">&quot;Book 2 author : &#123;0&#125;&quot;</span>, Book2.author);<br>      Console.WriteLine(<span class="hljs-string">&quot;Book 2 subject : &#123;0&#125;&quot;</span>, Book2.subject);<br>      Console.WriteLine(<span class="hljs-string">&quot;Book 2 book_id : &#123;0&#125;&quot;</span>, Book2.book_id);      <br><br>      Console.ReadKey();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<p><strong>结构和类的区别：</strong></p>
<ul>
<li>1、结构是值类型，它在栈中分配空间；而类是引用类型，它在堆中分配空间，栈中保存的只是引用。</li>
<li>2、结构类型直接存储成员数据，让其他类的数据位于堆中，位于栈中的变量保存的是指向堆中数据对象的引用。</li>
</ul>
<p>C# 中的简单类型，如int、double、bool等都是结构类型。如果需要的话，甚至可以使用结构类型结合运算符运算重载，再为 C# 语言创建出一种新的值类型来。</p>
<p>由于结构是值类型，并且直接存储数据，因此在一个对象的主要成员为数据且数据量不大的情况下，使用结构会带来更好的性能。</p>
<p>因为结构是值类型，因此在为结构分配内存，或者当结构超出了作用域被删除时，性能会非常好，因为他们将内联或者保存在堆栈中。当把一个结构类型的变量赋值给另一个结构时，对性能的影响取决于结构的大小，如果结构的数据成员非常多而且复杂，就会造成损失，接下来使用一段代码来说明这个问题。</p>
<p>结构和类的适用场合分析：</p>
<ul>
<li>1、当堆栈的空间很有限，且有大量的逻辑对象时，创建类要比创建结构好一些；</li>
<li>2、对于点、矩形和颜色这样的轻量对象，假如要声明一个含有许多个颜色对象的数组，则CLR需要为每个对象分配内存，在这种情况下，使用结构的成本较低；</li>
<li>3、在表现抽象和多级别的对象层次时，类是最好的选择，因为结构不支持继承。</li>
<li>4、大多数情况下，目标类型只是含有一些数据，或者以数据为主。</li>
</ul>
<h2 id="枚举（Enum）"><a href="#枚举（Enum）" class="headerlink" title="枚举（Enum）"></a>枚举（Enum）</h2><p>枚举是一组命名整型常量。枚举类型是使用 <strong>enum</strong> 关键字声明的。<br>C# 枚举是值类型。换句话说，枚举包含自己的值，且不能继承或传递继承。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">EnumTest</span><br>&#123;<br>    <span class="hljs-built_in">enum</span> Day &#123; Sun, Mon, Tue, Wed, Thu, Fri, Sat &#125;;<br><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>()</span><br>    &#123;<br>        <span class="hljs-built_in">int</span> x = (<span class="hljs-built_in">int</span>)Day.Sun;<br>        <span class="hljs-built_in">int</span> y = (<span class="hljs-built_in">int</span>)Day.Fri;<br>        Console.WriteLine(<span class="hljs-string">&quot;Sun = &#123;0&#125;&quot;</span>, x);<br>        Console.WriteLine(<span class="hljs-string">&quot;Fri = &#123;0&#125;&quot;</span>, y);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>继承允许我们根据一个类来定义另一个类，这使得创建和维护应用变得更容易，利于重用代码和节省开发时间。</p>
<p>已有的类被称为 基类 ，这个新的类被称为 派生类。</p>
<p>继承的思想实现了 属于 （IS-A）关系。例如，哺乳动物属于 （IS-A） 动物，狗属于 （IS-A）哺乳动物，因此狗 属于 （IS-A）动物。</p>
<h3 id="一、基类和派生类"><a href="#一、基类和派生类" class="headerlink" title="一、基类和派生类"></a>一、基类和派生类</h3><p>一个类可以派生自多个类或接口。</p>
<p>语法：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#">&lt;访问修饰符&gt; <span class="hljs-keyword">class</span> &lt;基类/父类&gt;<br>&#123;<br>    ...<br>&#125;<br><span class="hljs-keyword">class</span> &lt;派生类/子类&gt; ; &lt;基类/父类&gt;<br>&#123;<br>    ...<br></code></pre></td></tr></table></figure>

<h3 id="二、基类的初始化"><a href="#二、基类的初始化" class="headerlink" title="二、基类的初始化"></a>二、基类的初始化</h3><p>派生类继承了基类成员变量和成员方法，因此父亲对象应在子类对象创建之前创建。</p>
<p>可以在 成员初始化列表 中进行父类的初始化。99</p>
<h3 id="三、C-多重继承"><a href="#三、C-多重继承" class="headerlink" title="三、C#多重继承"></a>三、C#多重继承</h3><p>多重继承指的是一个类别可以同时从多于一个父类继承行为与特征的功能。与单一继承相对，单一继承指一个类别只可以继承自一个父类。C# 不支持多重继承。但是可以使用接口实现多重继承。</p>
<h2 id="C-多态性"><a href="#C-多态性" class="headerlink" title="C# 多态性"></a>C# 多态性</h2><p><strong>多态：</strong>一个接口多个功能。</p>
<p><strong>静态多态性：</strong>编译时发生函数响应（调用）；</p>
<p><strong>动态多态性：</strong>运行时发生函数响应。</p>
<p><strong>静态绑定（早期绑定）：</strong>编译时函数和对象的连接机制。 两种技术实现静态多态性：函数重载&#x2F;运算符重载。</p>
<p><strong>函数重载：</strong>在同一范围内对相同函数名有多个定义，可以是参数类型或参数个数的不同，但不许只有返回值类型不同。</p>
<p><strong>运算符重载：</strong></p>
<p>关键字 abstract 声明抽象类：用于接口部分类的实现（派生类继承抽象类时，实现完成）。抽象类包含抽象方法，抽象方法可被派生类实现。</p>
<p>抽象类规则：</p>
<ul>
<li>1.不能创建抽象类的实例</li>
<li>2.不能在抽象类外定义抽象方法</li>
<li>3.不能把抽象类声明为sealed（类前带关键字sealed代表该类是密封类，不能被继承）</li>
</ul>
<p>关键字virtual声明虚方法:用于方法在继承类中的实现（在不同的继承类中有不同的实现）。</p>
<p>抽象类和虚方法共同实现动态多态性。</p>
<p>注：继承类中的重写虚函数需要声明关键字 override，在方法参数传入中写（类名 形参名）例如 public void CallArea(Shape sh)，意思是传入一个 shape 类型的类。</p>
]]></content>
      <categories>
        <category>C#/.NET</category>
      </categories>
      <tags>
        <tag>c#</tag>
      </tags>
  </entry>
  <entry>
    <title>C#委托</title>
    <url>/2022/02/19/WebBackend/C#/%E5%A7%94%E6%89%98/</url>
    <content><![CDATA[<h2 id="什么是委托"><a href="#什么是委托" class="headerlink" title="什么是委托"></a>什么是委托</h2><p>C# 中的委托（Delegate）类似于C或C++中函数的指针。委托（Delegate）是存在对某个方法的引用的一种引用类型变量。引用可在运行时被改变。</p>
<p>委托（Delegate）特别用于现实事件和回调方法。所有的委托（Delegate）都派生自Sysetem.Delegate类。</p>
<h2 id="声明委托-（Delegate）"><a href="#声明委托-（Delegate）" class="headerlink" title="声明委托 （Delegate）"></a>声明委托 （Delegate）</h2><p>委托声明决定了可由该委托引用的方法。委托可只想一个与其具有相同标签的方法。</p>
<p>例如，假设有一个委托：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">delegate</span> <span class="hljs-built_in">int</span> <span class="hljs-title">MyDelegate</span> (<span class="hljs-params"><span class="hljs-built_in">string</span> s</span>)</span>;<br></code></pre></td></tr></table></figure>

<p>上面的委托可被用于引用任何一个带有一个单一的string参数的方法，并返回一个int类型变量。</p>
<p>声明委托的语法如下：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">delegate</span> &lt;<span class="hljs-keyword">return</span> type&gt; &lt;<span class="hljs-built_in">delegate</span>-name&gt; &lt;parameter list&gt;<br></code></pre></td></tr></table></figure>

<h2 id="实例化委托（Delegate）"><a href="#实例化委托（Delegate）" class="headerlink" title="实例化委托（Delegate）"></a>实例化委托（Delegate）</h2><p>一旦声明了委托类型，委托对象必须使用new关键字来创建，且与一个特定的方法有关。当创建委托时，传递到new语句的参数就像方法调用一样书写，但是不带有参数。例如：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">delegate</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printString</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> s</span>)</span>;<br>...<br>printString ps1 = <span class="hljs-keyword">new</span> printString(WriteToScreen);<br>printString ps2 = <span class="hljs-keyword">new</span> printString(WriteToFile);<br></code></pre></td></tr></table></figure>

<p>下面的实例演示了委托的声明、实例化和使用，该委托可用于引用带有一个整型参数的方法，并返回一个整型值。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System;<br><br><span class="hljs-function"><span class="hljs-built_in">delegate</span> <span class="hljs-built_in">int</span> <span class="hljs-title">NumberChanger</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> n</span>)</span>;<br><span class="hljs-keyword">namespace</span> <span class="hljs-title">DelegateAppl</span><br>&#123;<br>   <span class="hljs-keyword">class</span> <span class="hljs-title">TestDelegate</span><br>   &#123;<br>      <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> num = <span class="hljs-number">10</span>;<br>      <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> <span class="hljs-title">AddNum</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> p</span>)</span><br>      &#123;<br>         num += p;<br>         <span class="hljs-keyword">return</span> num;<br>      &#125;<br><br>      <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> <span class="hljs-title">MultNum</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> q</span>)</span><br>      &#123;<br>         num *= q;<br>         <span class="hljs-keyword">return</span> num;<br>      &#125;<br>      <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> <span class="hljs-title">getNum</span>()</span><br>      &#123;<br>         <span class="hljs-keyword">return</span> num;<br>      &#125;<br><br>      <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>      &#123;<br>         <span class="hljs-comment">// 创建委托实例</span><br>         NumberChanger nc1 = <span class="hljs-keyword">new</span> NumberChanger(AddNum);<br>         NumberChanger nc2 = <span class="hljs-keyword">new</span> NumberChanger(MultNum);<br>         <span class="hljs-comment">// 使用委托对象调用方法</span><br>         nc1(<span class="hljs-number">25</span>);<br>         Console.WriteLine(<span class="hljs-string">&quot;Value of Num: &#123;0&#125;&quot;</span>, getNum());<br>         nc2(<span class="hljs-number">5</span>);<br>         Console.WriteLine(<span class="hljs-string">&quot;Value of Num: &#123;0&#125;&quot;</span>, getNum());<br>         Console.ReadKey();<br>      &#125;<br>   &#125;<br>&#125;<br>当上面的代码被编译和执行时，它会产生下列结果：<br><br>Value of Num: <span class="hljs-number">35</span><br>Value of Num: <span class="hljs-number">175</span><br>委托的多播（Multicasting of a Delegate）<br>委托对象可使用 <span class="hljs-string">&quot;+&quot;</span> 运算符进行合并。一个合并委托调用它所合并的两个委托。只有相同类型的委托可被合并。<span class="hljs-string">&quot;-&quot;</span> 运算符可用于从合并的委托中移除组件委托。<br><br>使用委托的这个有用的特点，您可以创建一个委托被调用时要调用的方法的调用列表。这被称为委托的 多播（multicasting），也叫组播。下面的程序演示了委托的多播：<br><br>实例<br><span class="hljs-keyword">using</span> System;<br><br><span class="hljs-function"><span class="hljs-built_in">delegate</span> <span class="hljs-built_in">int</span> <span class="hljs-title">NumberChanger</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> n</span>)</span>;<br><span class="hljs-keyword">namespace</span> <span class="hljs-title">DelegateAppl</span><br>&#123;<br>   <span class="hljs-keyword">class</span> <span class="hljs-title">TestDelegate</span><br>   &#123;<br>      <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> num = <span class="hljs-number">10</span>;<br>      <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> <span class="hljs-title">AddNum</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> p</span>)</span><br>      &#123;<br>         num += p;<br>         <span class="hljs-keyword">return</span> num;<br>      &#125;<br><br>      <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> <span class="hljs-title">MultNum</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> q</span>)</span><br>      &#123;<br>         num *= q;<br>         <span class="hljs-keyword">return</span> num;<br>      &#125;<br>      <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> <span class="hljs-title">getNum</span>()</span><br>      &#123;<br>         <span class="hljs-keyword">return</span> num;<br>      &#125;<br><br>      <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>      &#123;<br>         <span class="hljs-comment">// 创建委托实例</span><br>         NumberChanger nc;<br>         NumberChanger nc1 = <span class="hljs-keyword">new</span> NumberChanger(AddNum);<br>         NumberChanger nc2 = <span class="hljs-keyword">new</span> NumberChanger(MultNum);<br>         nc = nc1;<br>         nc += nc2;<br>         <span class="hljs-comment">// 调用多播</span><br>         nc(<span class="hljs-number">5</span>);<br>         Console.WriteLine(<span class="hljs-string">&quot;Value of Num: &#123;0&#125;&quot;</span>, getNum());<br>         Console.ReadKey();<br>      &#125;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="委托（Delegate）的用途"><a href="#委托（Delegate）的用途" class="headerlink" title="委托（Delegate）的用途"></a>委托（Delegate）的用途</h2><p>下面的实例演示了委托的用法。委托 <em>printString</em> 可用于引用带有一个字符串作为输入的方法，并不返回任何东西。</p>
<p>我们使用这个委托来调用两个方法，第一个把字符串打印到控制台，第二个把字符串打印到文件：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.IO;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">DelegateAppl</span><br>&#123;<br>   <span class="hljs-keyword">class</span> <span class="hljs-title">PrintString</span><br>   &#123;<br>      <span class="hljs-keyword">static</span> FileStream fs;<br>      <span class="hljs-keyword">static</span> StreamWriter sw;<br>      <span class="hljs-comment">// 委托声明</span><br>      <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">delegate</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printString</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> s</span>)</span>;<br><br>      <span class="hljs-comment">// 该方法打印到控制台</span><br>      <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">WriteToScreen</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> str</span>)</span><br>      &#123;<br>         Console.WriteLine(<span class="hljs-string">&quot;The String is: &#123;0&#125;&quot;</span>, str);<br>      &#125;<br>      <span class="hljs-comment">// 该方法打印到文件</span><br>      <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">WriteToFile</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> s</span>)</span><br>      &#123;<br>         fs = <span class="hljs-keyword">new</span> FileStream(<span class="hljs-string">&quot;c:\\message.txt&quot;</span>, FileMode.Append, FileAccess.Write);<br>         sw = <span class="hljs-keyword">new</span> StreamWriter(fs);<br>         sw.WriteLine(s);<br>         sw.Flush();<br>         sw.Close();<br>         fs.Close();<br>      &#125;<br>      <span class="hljs-comment">// 该方法把委托作为参数，并使用它调用方法</span><br>      <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendString</span>(<span class="hljs-params">printString ps</span>)</span><br>      &#123;<br>         ps(<span class="hljs-string">&quot;Hello World&quot;</span>);<br>      &#125;<br>      <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>      &#123;<br>         printString ps1 = <span class="hljs-keyword">new</span> printString(WriteToScreen);<br>         printString ps2 = <span class="hljs-keyword">new</span> printString(WriteToFile);<br>         sendString(ps1);<br>         sendString(ps2);<br>         Console.ReadKey();<br>      &#125;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C#/.NET</category>
      </categories>
      <tags>
        <tag>c#</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序技术</title>
    <url>/2023/03/11/WebFrontend/%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8/APP%20%E5%B8%B8%E7%94%A8%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>小程序本质来说是前端，都是开发页面交互，以及数据请求业务逻辑</p>
<h3 id="如何学习"><a href="#如何学习" class="headerlink" title="如何学习"></a>如何学习</h3><p>看开发文档是最好且最快的学习方式，其次就是官方的视频教程，生动有趣</p>
<h3 id="APP常用开发模式"><a href="#APP常用开发模式" class="headerlink" title="APP常用开发模式"></a>APP常用开发模式</h3><ul>
<li>Native App – 原生开发</li>
<li>WebApp – H5应用</li>
<li>Hyriid App – 混合开发</li>
<li></li>
</ul>
<h3 id="微信小程序技术栈"><a href="#微信小程序技术栈" class="headerlink" title="微信小程序技术栈"></a>微信小程序技术栈</h3><ul>
<li>ui库：WeUI，有赞的vantUI</li>
<li>Vue框架：腾讯<strong>Wepy</strong>，<strong>Uniapp</strong>，美团<strong>MpVue</strong>(停止维护)</li>
<li>react框架(多端支持)：阿里<strong>Remax</strong>，京东<strong>Taro</strong></li>
<li>跨端开发：<strong>Uniapp</strong>，<strong>Chameleon</strong></li>
<li>其它：低代码、云开发</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@GetMapping(&quot;/getSrmAreaTemplateByProjectId&quot;)</span>  <br><span class="hljs-meta">@ApiOperation(&quot;获得SRM区域数据映射列表&quot;)</span>  <br><span class="hljs-meta">@PreAuthorize(&quot;@ss.hasPermission(&#x27;biz:srm-area:query&#x27;)&quot;)</span>  <br><span class="hljs-keyword">public</span> CommonResult&lt;List&lt;SrmAreaRespVO&gt;&gt; <span class="hljs-title function_">getSrmAreaTemplateByProjectId</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;projectId&quot;)</span> Long projectId)</span> &#123;<br>	<span class="hljs-comment">/** 根据项目 ID 获取 SRM 区域数据映射列表 */</span><br>    List&lt;SrmAreaDO&gt; list = srmAreaService.getSrmAreaTemplateByProjectId(projectId);  <br>    <span class="hljs-comment">/** 将 `SrmAreaDO` 列表转换为 `SrmAreaRespVO` 列表。 */</span><br>    List&lt;SrmAreaRespVO&gt; resp = SrmAreaConvert.INSTANCE.convertList(list);  <br>    <span class="hljs-keyword">for</span> (SrmAreaRespVO vo: resp) &#123;  <br>        vo.setFlag(<span class="hljs-literal">true</span>);  <br>        vo.setTriggerFlag(<span class="hljs-literal">false</span>);  <br>    &#125;  <br>    <span class="hljs-keyword">return</span> success(bulidTree(resp));  <br>&#125;  <br>  <br>  <br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> List&lt;SrmAreaRespVO&gt; <span class="hljs-title function_">buildTree</span><span class="hljs-params">(List&lt;SrmAreaRespVO&gt; treeList)</span> &#123;<br>    Map&lt;Long, SrmAreaRespVO&gt; idToNodeMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-comment">// 将所有节点放入 idToNodeMap 中，方便后面查找父子关系</span><br>    <span class="hljs-keyword">for</span> (SrmAreaRespVO node : treeList) &#123;<br>        idToNodeMap.put(node.getId(), node);<br>    &#125;<br>    List&lt;SrmAreaRespVO&gt; resultList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (SrmAreaRespVO node : treeList) &#123;<br>        <span class="hljs-keyword">if</span> (node.getParentId() == <span class="hljs-number">0L</span>) &#123;<br>            resultList.add(node);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">SrmAreaRespVO</span> <span class="hljs-variable">parentNode</span> <span class="hljs-operator">=</span> idToNodeMap.get(node.getParentId());<br>            <span class="hljs-keyword">if</span> (parentNode != <span class="hljs-literal">null</span>) &#123;<br>                parentNode.getChildren().add(node);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> resultList;<br>&#125;<br><br><br><br></code></pre></td></tr></table></figure>


<p>首先要确认，我们要循环什么，</p>
]]></content>
      <categories>
        <category>WEBbackend</category>
      </categories>
      <tags>
        <tag>移动应用</tag>
      </tags>
  </entry>
  <entry>
    <title>Hybrid技术-Flutter介绍</title>
    <url>/2022/08/13/WebFrontend/%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8/Hybrid%E6%8A%80%E6%9C%AF-Flutter%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h1 id="Hybrid技术"><a href="#Hybrid技术" class="headerlink" title="Hybrid技术"></a>Hybrid技术</h1><blockquote>
<p>hybrid译为中文是“混合”的意思，是一种原生APP和<a href="https://so.csdn.net/so/search?q=HTML5&spm=1001.2101.3001.7020">HTML5</a>混合开发的技术。</p>
</blockquote>
<p> 在前端移动端开发中，到现在阶段主要有三大潮流</p>
<ol>
<li>原生APP开发(以Android和iOS为主导)</li>
<li>HTML5 WebAPP开发</li>
<li>原生APP和HTML5混合开发，也就是hybrid技术</li>
</ol>
<p>Hybrid主要分为三类：</p>
<blockquote>
<p>H5 + 原生：Cordova，lonic，微信小程序</p>
<p>JavaScript开发+原生渲染：React Native、Wex、快应用</p>
<p>自绘UI + 原生：QT for mobile，Flutter</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220813205022119.png" alt="image-20220813205022119"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WRXinYue/PictureCDN/img/image-20220813205116298.png" alt="image-20220813205116298"></p>
<h2 id="什么是原生开发"><a href="#什么是原生开发" class="headerlink" title="什么是原生开发?"></a>什么是原生开发?</h2><p>原生应用程序是指某一个移动平台（比如iOS或者Android）所特有的应用，使用相应平台支持的开发工具和语言，并直接调用系统提供的SDK API。比如Android原生应用是指使用Java或者Kotlin语言直接调用Android SDK开发的应用程序；而iOS原生应用就是指通过Objective-C或Swift语言直接调用iOS SDK开发的应用程序</p>
<h1 id="Flutter介绍"><a href="#Flutter介绍" class="headerlink" title="Flutter介绍"></a>Flutter介绍</h1><p>Flutter是Google推出并开源的移动应用开发UI框架，主打跨平台、高保真、高性能。开发者可以通过Dart语言开发App，一套代码同时运行在多个平台。Flutter提供了丰富的组件、接口，开发者可以很快地为Flutter添加Native扩展</p>
<h1 id="JIT和AOT"><a href="#JIT和AOT" class="headerlink" title="JIT和AOT"></a>JIT和AOT</h1><p>JIT既Just-in-time，动态（即时）编译，边运行边编译。</p>
<p>优点：</p>
<blockquote>
<ul>
<li>可以根据当前硬件情况实时编译生成最优机器指令</li>
<li>可以根据当前程序的运行情况生成最优的机器指令序列</li>
<li>当程序需要支持支持动态链接时，只能使用JIT</li>
<li>可以根据进程中内存的实际情况调整代码，使内存能够更充分的利用</li>
</ul>
</blockquote>
<p>缺点：</p>
<blockquote>
<ul>
<li>编译需要占用运行时资源，会导致进程卡顿</li>
<li>由于编译时间需要占用运行时间，对于某些代码的编译优化不能完全支持，需要在程序流畅和编译时间之间做权衡</li>
<li>在编译准备和识别频繁使用的方法需要占用时间，使得初始编译不能达到最高性能</li>
</ul>
</blockquote>
<p>AOT即Ahead Of Time，指运行前编译。</p>
<p>优点：</p>
<blockquote>
<ul>
<li>在程序运行前编译，可以避免在运行时的编译性能消耗和内存消耗</li>
<li>可以在程序运行初期就达到最高性能</li>
<li>可以显著的加快程序的启动</li>
</ul>
</blockquote>
<p>缺点：</p>
<blockquote>
<ul>
<li>在程序运行前编译会使程序安装的时间增加</li>
<li>牺牲Java的一致性</li>
<li>将提前编译的内容保存会占用更多的外</li>
</ul>
</blockquote>
<h1 id="关于Dart"><a href="#关于Dart" class="headerlink" title="关于Dart"></a>关于Dart</h1><p>Dart是由谷歌开发的计算机编程语言，可以用于web、服务器、移动程序和物联网领域的开发。</p>
<p>Dart诞生于2011年，号称要取代JavaScript。但是过去几年中一直不温不火。直到Flutter的出现被人们重新重视起来，要学Flutter必须的会Dart</p>
<h2 id="开发效率高"><a href="#开发效率高" class="headerlink" title="开发效率高"></a>开发效率高</h2><p>Dart运行时和编译器支持Flutter的两个关键特性的组合：</p>
<ul>
<li>基于JIT的快速开发周期；</li>
<li>基于AOT的发布包</li>
</ul>
<h2 id="高性能"><a href="#高性能" class="headerlink" title="高性能"></a>高性能</h2><p>Flutter提供流畅、高保真的UI体验。</p>
<h2 id="快速内存分配"><a href="#快速内存分配" class="headerlink" title="快速内存分配"></a>快速内存分配</h2><p>Flutter框架使用函数式流，这使得它在很大程度上依赖于低层的内存分配器。</p>
<h2 id="类型安全和空安全"><a href="#类型安全和空安全" class="headerlink" title="类型安全和空安全"></a>类型安全和空安全</h2><p>由于Dart是类型安全的语言，且2.12版本后也支持了空安全特性，所以Dart支持静态类型检测，可以在编译前发现一些类型的错误，并排除潜在问题。</p>
]]></content>
      <categories>
        <category>WebFrontend</category>
      </categories>
      <tags>
        <tag>hybrid</tag>
      </tags>
  </entry>
  <entry>
    <title>Druid案例</title>
    <url>/2022/12/06/WebBackend/Java/Druid%E6%A1%88%E4%BE%8B/</url>
    <content><![CDATA[<p>Druid（德鲁伊）是由阿里巴巴开发，集合了c3p0、dbcp、proxool等连接池的优点，加入了日志监控，有效的监控DB池连接和SQL的执行情况</p>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># druid.properties文件的配置</span><br><span class="hljs-attr">driverClassName</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-attr">url</span>=<span class="hljs-string">jdbc:mysql://127.0.0.1:3306/mysql</span><br><span class="hljs-attr">username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">password</span>=<span class="hljs-string"></span><br><span class="hljs-comment"># 初始化连接数量</span><br><span class="hljs-attr">initialSize</span>=<span class="hljs-string">5</span><br><span class="hljs-comment"># 最大连接数</span><br><span class="hljs-attr">maxActive</span>=<span class="hljs-string">10</span><br><span class="hljs-comment"># 最大超时时间</span><br><span class="hljs-attr">maxWait</span>=<span class="hljs-string">3000</span><br></code></pre></td></tr></table></figure>

<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">USE sql2_wyg;<br>DROP TABLE IF EXISTS tb_brand;<br><br>CREATE TABLE tb_brand (<br>  -- id 主键<br>  id INT PRIMARY KEY AUTO_INCREMENT,<br>  -- 品牌名称<br>  brand_name VARCHAR(20),<br>  -- 企业名称<br>  company_name VARCHAR(20),<br>  -- 排序字段<br>  ordered INT,<br>	-- 描述信息<br>  description varchar(100),<br>  -- 状态:0 禁用，1 启用<br>  status int<br>);<br><br>INSERT INTO tb_brand (<br>	brand_name,<br>	company_name,<br>	ordered,<br>	description,<br>	`status`)<br>VALUES<br>	(&#x27;三只松鼠&#x27;, &#x27;三只松鼠股份有限公司&#x27;, 5, &#x27;好吃不上火&#x27;, 0),<br>	(&#x27;华为&#x27;, &#x27;华为技术有限公司&#x27;, 100, &#x27;华为致力于把数字世界带入每个人、每个家庭、每个组织，构建万物互联的智能世界&#x27;, 1),<br>	(&#x27;小米&#x27;, &#x27;小米科技有限公司&#x27;, 50, &#x27;are you ok&#x27;, 1);<br>	<br>SELECT * FROM tb_brand;<br></code></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.example;<br><br><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;<br><span class="hljs-keyword">import</span> com.itheima.pojo.Brand;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BrandTest</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSelectAll</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span>  Exception&#123;<br>        <span class="hljs-comment">//1. 获取Connection</span><br>        <span class="hljs-comment">// 加载配置文件</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">prop</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        prop.load(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(System.getProperty(<span class="hljs-string">&quot;user.dir&quot;</span>) + <span class="hljs-string">&quot;/src/druid.properties&quot;</span>));<br>        <span class="hljs-comment">// 获取连接池对象</span><br>        <span class="hljs-type">DataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> DruidDataSourceFactory.createDataSource(prop);<br>        <span class="hljs-comment">// 获取数据库连接 Connection</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> dataSource.getConnection();<br>        <span class="hljs-comment">// 定义SQL</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SELECT * FROM tb_brand&quot;</span>;<br>        <span class="hljs-comment">// 获取pstmt对象，使用prepareStatement，防止sql注入</span><br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">pstmt</span> <span class="hljs-operator">=</span> conn.prepareStatement(sql);<br>        <span class="hljs-comment">// 设置参数</span><br>        <span class="hljs-comment">// 执行SQL</span><br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> pstmt.executeQuery();<br>        <span class="hljs-comment">// 处理结果 List&lt;Brand&gt; 封装Brand对象,装载List集合</span><br>        <span class="hljs-type">Brand</span> <span class="hljs-variable">brand</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        List&lt;Brand&gt; brands = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">while</span> (rs.next())&#123;<br>            <span class="hljs-comment">// 获取数据</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> rs.getInt(<span class="hljs-string">&quot;id&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">brandName</span> <span class="hljs-operator">=</span> rs.getString(<span class="hljs-string">&quot;brand_name&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">companyName</span> <span class="hljs-operator">=</span> rs.getString(<span class="hljs-string">&quot;company_name&quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">ordered</span> <span class="hljs-operator">=</span> rs.getInt(<span class="hljs-string">&quot;ordered&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">description</span> <span class="hljs-operator">=</span> rs.getString(<span class="hljs-string">&quot;description&quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">status</span> <span class="hljs-operator">=</span> rs.getInt(<span class="hljs-string">&quot;status&quot;</span>);<br>            <span class="hljs-comment">// 封装Brand对象</span><br>            brand = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Brand</span>();<br>            brand.setId(id);<br>            brand.setBrandName(brandName);<br>            brand.setCompanyName(companyName);<br>            brand.setOrdered(ordered);<br>            brand.setDescription(description);<br>            brand.setStatus(status);<br>            <span class="hljs-comment">// 装载集合</span><br>            brands.add(brand);<br>        &#125;<br>        System.out.println(brands);<br>        <span class="hljs-comment">// 资源释放</span><br>        rs.close();<br>        pstmt.close();<br>        conn.close();<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAdd</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span>  Exception &#123;<br>        <span class="hljs-comment">// 接收页面提交的参数</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">brandName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;香飘飘&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">companyName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;香飘飘&quot;</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">ordered</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">description</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;绕地球一圈&quot;</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">status</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">//1. 获取Connection</span><br>        <span class="hljs-comment">// 加载配置文件</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">prop</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        prop.load(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(System.getProperty(<span class="hljs-string">&quot;user.dir&quot;</span>) + <span class="hljs-string">&quot;/src/druid.properties&quot;</span>));<br>        <span class="hljs-comment">// 获取连接池对象</span><br>        <span class="hljs-type">DataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> DruidDataSourceFactory.createDataSource(prop);<br>        <span class="hljs-comment">// 获取数据库连接 Connection</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> dataSource.getConnection();<br>        <span class="hljs-comment">// 定义SQL</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;INSERT INTO tb_brand(brand_name, company_name, ordered, description, status) VALUES(?,?,?,?,?)&quot;</span>;<br>        <span class="hljs-comment">// 获取pstmt对象，使用prepareStatement，防止sql注入</span><br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">pstmt</span> <span class="hljs-operator">=</span> conn.prepareStatement(sql);<br>        <span class="hljs-comment">// 设置参数</span><br>        pstmt.setString(<span class="hljs-number">1</span>, brandName);<br>        pstmt.setString(<span class="hljs-number">2</span>, companyName);<br>        pstmt.setInt(<span class="hljs-number">3</span>, ordered);<br>        pstmt.setString(<span class="hljs-number">4</span>, description);<br>        pstmt.setInt(<span class="hljs-number">5</span>, status);<br>        <span class="hljs-comment">// 执行SQL</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> pstmt.executeUpdate();<span class="hljs-comment">//影响的行数</span><br>        <span class="hljs-comment">// 处理结果</span><br>        System.out.println(count &gt; <span class="hljs-number">0</span>);<br>        <span class="hljs-comment">// 资源释放</span><br>        pstmt.close();<br>        conn.close();<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testUpdate</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span>  Exception &#123;<br>        <span class="hljs-comment">// 接收页面提交的参数</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">brandName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;香飘飘&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">companyName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;香飘飘&quot;</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">ordered</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">description</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;绕地球三圈&quot;</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">status</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>;<br>        <span class="hljs-comment">//1. 获取Connection</span><br>        <span class="hljs-comment">// 加载配置文件</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">prop</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        prop.load(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(System.getProperty(<span class="hljs-string">&quot;user.dir&quot;</span>) + <span class="hljs-string">&quot;/src/druid.properties&quot;</span>));<br>        <span class="hljs-comment">// 获取连接池对象</span><br>        <span class="hljs-type">DataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> DruidDataSourceFactory.createDataSource(prop);<br>        <span class="hljs-comment">// 获取数据库连接 Connection</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> dataSource.getConnection();<br>        <span class="hljs-comment">// 定义SQL</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;UPDATE tb_brand\n&quot;</span> +<br>                <span class="hljs-string">&quot;SET\n&quot;</span> +<br>                <span class="hljs-string">&quot;\tbrand_name = ?,\n&quot;</span> +<br>                <span class="hljs-string">&quot;\tcompany_name = ?,\n&quot;</span> +<br>                <span class="hljs-string">&quot;\tordered = ?,\n&quot;</span> +<br>                <span class="hljs-string">&quot;\tdescription = ?, \n&quot;</span> +<br>                <span class="hljs-string">&quot;\t`status` = ?\n&quot;</span> +<br>                <span class="hljs-string">&quot;WHERE id = ?;&quot;</span>;<br>        <span class="hljs-comment">// 获取pstmt对象，使用prepareStatement，防止sql注入</span><br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">pstmt</span> <span class="hljs-operator">=</span> conn.prepareStatement(sql);<br>        <span class="hljs-comment">// 设置参数</span><br>        pstmt.setString(<span class="hljs-number">1</span>, brandName);<br>        pstmt.setString(<span class="hljs-number">2</span>, companyName);<br>        pstmt.setInt(<span class="hljs-number">3</span>, ordered);<br>        pstmt.setString(<span class="hljs-number">4</span>, description);<br>        pstmt.setInt(<span class="hljs-number">5</span>, status);<br>        pstmt.setInt(<span class="hljs-number">4</span>, id);<br>        <span class="hljs-comment">// 执行SQL</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> pstmt.executeUpdate();<span class="hljs-comment">//影响的行数</span><br>        <span class="hljs-comment">// 处理结果</span><br>        System.out.println(count &gt; <span class="hljs-number">0</span>);<br>        <span class="hljs-comment">// 资源释放</span><br>        pstmt.close();<br>        conn.close();<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDeleteById</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span>  Exception &#123;<br>        <span class="hljs-comment">// 接收页面提交的参数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>;<br>        <span class="hljs-comment">//1. 获取Connection</span><br>        <span class="hljs-comment">// 加载配置文件</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">prop</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        prop.load(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(System.getProperty(<span class="hljs-string">&quot;user.dir&quot;</span>) + <span class="hljs-string">&quot;/src/druid.properties&quot;</span>));<br>        <span class="hljs-comment">// 获取连接池对象</span><br>        <span class="hljs-type">DataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> DruidDataSourceFactory.createDataSource(prop);<br>        <span class="hljs-comment">// 获取数据库连接 Connection</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> dataSource.getConnection();<br>        <span class="hljs-comment">// 定义SQL</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;DELETE FROM tb_brand WHERE id = ?&quot;</span>;<br>        <span class="hljs-comment">// 获取pstmt对象，使用prepareStatement，防止sql注入</span><br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">pstmt</span> <span class="hljs-operator">=</span> conn.prepareStatement(sql);<br>        <span class="hljs-comment">// 设置参数</span><br>        pstmt.setInt(<span class="hljs-number">1</span>, id);<br>        <span class="hljs-comment">// 执行SQL</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> pstmt.executeUpdate();<span class="hljs-comment">//影响的行数</span><br>        <span class="hljs-comment">// 处理结果</span><br>        System.out.println(count &gt; <span class="hljs-number">0</span>);<br>        <span class="hljs-comment">// 资源释放</span><br>        pstmt.close();<br>        conn.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>WEBbackend</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序Uni-app笔记</title>
    <url>/2023/04/18/WebFrontend/%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8FUni-app%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h2><h3 id="pages-json"><a href="#pages-json" class="headerlink" title="pages.json"></a>pages.json</h3><p>pages.josn 文件用来对uni-app进行全局配置，决定页面文件的路径、窗口表现、设置多tab等。</p>
<ul>
<li><code>globalStyle</code>设置默认页面的窗口表现。</li>
<li><code>pages</code> 设置页面路径及窗口表现。</li>
<li><code>tabBar</code> 设置底部 tab 的表现</li>
</ul>
<h3 id="获取元素节点"><a href="#获取元素节点" class="headerlink" title="获取元素节点"></a>获取元素节点</h3><figure class="highlight ts"><table><tr><td class="code"><pre><code class="hljs ts">    <span class="hljs-keyword">const</span> query = uni.<span class="hljs-title function_">createSelectorQuery</span>()<br><br>    query.<span class="hljs-title function_">select</span>(<span class="hljs-string">&#x27;#ion-heade&#x27;</span>).<span class="hljs-title function_">boundingClientRect</span>()<br><br>    query.<span class="hljs-title function_">exec</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br><br>        headerOffsetH.<span class="hljs-property">value</span> = res[<span class="hljs-number">0</span>].<span class="hljs-property">height</span><br><br>    &#125;)<br></code></pre></td></tr></table></figure>

<h4 id="Toast"><a href="#Toast" class="headerlink" title="Toast"></a>Toast</h4><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">        <span class="hljs-title class_">Toast</span>(<span class="hljs-string">&#x27;获取项目列表失败!&#x27;</span>)<br></code></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">        uni.<span class="hljs-title function_">showLoading</span>(&#123;<br><br>            <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;请选择期望职位&#x27;</span>,<br><br>        &#125;)<br></code></pre></td></tr></table></figure>

<h3 id="获取元素节点-1"><a href="#获取元素节点-1" class="headerlink" title="获取元素节点"></a>获取元素节点</h3><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ion-heade&quot;</span>&gt;</span>1234<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> query = uni.<span class="hljs-title function_">createSelectorQuery</span>()<br>query.<span class="hljs-title function_">select</span>(<span class="hljs-string">&#x27;#ion-heade&#x27;</span>).<span class="hljs-title function_">boundingClientRect</span>()<br>query.<span class="hljs-title function_">exec</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>	<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;元素信息：&#x27;</span>, res[<span class="hljs-number">0</span>])<br>&#125;)<br></code></pre></td></tr></table></figure>

<blockquote>
<p>注意事项：要在页面加载之后进行获取</p>
</blockquote>
<h4 id="组件传参"><a href="#组件传参" class="headerlink" title="组件传参"></a>组件传参</h4><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><br>&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;setMessage&quot;</span>&gt;</span>Change Message<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; useMyStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/store/myStore&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> store = <span class="hljs-title function_">useMyStore</span>()</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> message = <span class="hljs-title function_">computed</span>(<span class="hljs-function">() =&gt;</span> store.<span class="hljs-title function_">getMessage</span>())</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">setMessage</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      store.<span class="hljs-title function_">setMessage</span>(<span class="hljs-string">&#x27;New message from component!&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      message,</span></span><br><span class="language-javascript"><span class="language-xml">      setMessage</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;setMessage&quot;</span>&gt;</span>Change Message<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; useMyStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/store/myStore&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; defineComponent, computed &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">useMyStore</span>()</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> message = <span class="hljs-title function_">computed</span>(<span class="hljs-function">() =&gt;</span> store.<span class="hljs-title function_">getMessage</span>())</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">function</span> <span class="hljs-title function_">setMessage</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  store.<span class="hljs-title function_">setMessage</span>(<span class="hljs-string">&#x27;New message from component!&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure>

<h3 id="小程序双向数据绑定"><a href="#小程序双向数据绑定" class="headerlink" title="小程序双向数据绑定"></a>小程序双向数据绑定</h3><blockquote>
<p>最好不要使用v-model，使用v-bind 和 v-on</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;input :value=&quot;textValue&quot; @input=&quot;inputChange&quot; maxlength=&quot;500&quot; placeholder=&quot;请用一段简短的文字描述一下自己吧&quot; /&gt;<br>&lt;view&gt;&#123;&#123; description &#125;&#125;/500 字&lt;/view&gt;<br></code></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> description = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure>


<h3 id="多行文本"><a href="#多行文本" class="headerlink" title="多行文本"></a>多行文本</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;textarea :value=&quot;textValue&quot; @input=&quot;inputChange&quot; maxlength=&quot;500&quot; placeholder=&quot;请用一段简短的文字描述一下自己吧&quot; /&gt;<br>&lt;view&gt;&#123;&#123; description &#125;&#125;/500 字&lt;/view&gt;<br></code></pre></td></tr></table></figure>

<figure class="highlight ts"><table><tr><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> textValue = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-keyword">let</span> description = <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>)<br><span class="hljs-keyword">const</span> _ParameterPassingService = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ParameterPassingService</span>()<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">inputChange</span> = (<span class="hljs-params">event: <span class="hljs-built_in">any</span></span>) =&gt; &#123;<br>    description.<span class="hljs-property">value</span> = event.<span class="hljs-property">detail</span>.<span class="hljs-property">cursor</span><br>&#125;<br></code></pre></td></tr></table></figure>

<blockquote>
<p>在 UniApp 中，<code>v-model</code> 指令不能直接应用于 <code>textarea</code> 组件，因为 UniApp 会对 Vue.js 的语法进行编译，生成多端应用代码，而不同平台对于表单组件的处理方式可能有所不同。例如，在微信小程序中，<code>textarea</code> 组件的双向数据绑定需要使用 <code>value</code> 属性和 <code>bindinput</code> 事件，而在其他平台上，可能需要使用不同的属性和事件来实现相同的功能。<br>因此，为了确保跨平台的兼容性，UniApp 建议使用 <code>v-bind</code> 和 <code>v-on</code> 指令来实现 <code>textarea</code> 组件的双向数据绑定，而不是直接使用 <code>v-model</code> 指令。<br>如果组件无法输入：尝试添加高度</p>
</blockquote>
<h3 id="uniapp-css-修改"><a href="#uniapp-css-修改" class="headerlink" title="uniapp css 修改"></a>uniapp css 修改</h3><figure class="highlight scss"><table><tr><td class="code"><pre><code class="hljs scss">::v-deep .uni-select &#123;<br><br>    <span class="hljs-attribute">border</span>: none;<br><br>    <span class="hljs-attribute">text-align</span>: right;<br><br>    <span class="hljs-attribute">right</span>: <span class="hljs-number">0px</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure>


<h3 id="弹窗显示"><a href="#弹窗显示" class="headerlink" title="弹窗显示"></a>弹窗显示</h3><figure class="highlight ts"><table><tr><td class="code"><pre><code class="hljs ts">uni.<span class="hljs-title function_">showToast</span>(&#123;<br>	<span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>&#125;)<br></code></pre></td></tr></table></figure>


<h3 id="下拉菜单"><a href="#下拉菜单" class="headerlink" title="下拉菜单"></a>下拉菜单</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;picker @change=&quot;bindPickerChange&quot; :value=&quot;selectedSalary&quot; :range=&quot;salariesOptions&quot; range-key=&quot;ItemName&quot;&gt;<br>	&lt;view class=&quot;uni-input&quot;&gt;&#123;&#123; salariesOptions[selectedSalary]?.ItemName &#125;&#125;&lt;/view&gt;<br>&lt;/picker&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>const selectedSalary: any = ref(0)<br>const salariesOptions: Ref&lt;any[]&gt; = ref([])<br><br>	const bindPickerChange = (e: any) =&gt; &#123;<br>		selectedSalary.value = e.detail.value<br>	&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>


<h3 id="页面传参"><a href="#页面传参" class="headerlink" title="页面传参"></a>页面传参</h3><p><strong>跳转页面：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><code class="hljs ts">uni.<span class="hljs-title function_">navigateTo</span>(&#123;<br>	<span class="hljs-attr">url</span>: <span class="hljs-string">`/pages/boss/interview-worker/interview-worker?id=<span class="hljs-subst">$&#123;offerId&#125;</span>&amp;title=<span class="hljs-subst">$&#123;title&#125;</span>&amp;flag=<span class="hljs-subst">$&#123;flag&#125;</span>`</span>,<br>&#125;)<br></code></pre></td></tr></table></figure>

<p><strong>被跳转的页面：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><code class="hljs ts"><span class="hljs-title function_">onLoad</span>(<span class="hljs-function"><span class="hljs-params">query</span> =&gt;</span> &#123;<br>	reqId.<span class="hljs-property">value</span> = query?.<span class="hljs-property">id</span> || <span class="hljs-string">&#x27;&#x27;</span><br>	title.<span class="hljs-property">value</span> = query?.<span class="hljs-property">title</span> || <span class="hljs-string">&#x27;&#x27;</span><br>	flag.<span class="hljs-property">value</span> = query?.<span class="hljs-property">flag</span> || <span class="hljs-string">&#x27;&#x27;</span><br>&#125;)<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>WebFrontend/移动应用</category>
      </categories>
  </entry>
  <entry>
    <title>File类</title>
    <url>/2022/11/03/WebBackend/Java/File%E7%B1%BB/</url>
    <content><![CDATA[<h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//方式1 new File(String pathname)	//根据文件路径名</span><br><span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\Demo\\new.txt&quot;</span>;<br><span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(path); <br><br><span class="hljs-comment">//方式2 new File(String parent, String child) //根据父目录+子路径构建</span><br><span class="hljs-type">String</span> <span class="hljs-variable">parentPath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\Demo&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;new.txt&quot;</span>;<br><span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(parentPath, fileName);<br><br><span class="hljs-comment">//方式3 new File(File parent,String child) //根据父目录文件+子路径构造</span><br><span class="hljs-type">File</span> <span class="hljs-variable">parentFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\Demo&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;new.txt&quot;</span>;<br><span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(parentFile, fileName);<br></code></pre></td></tr></table></figure>

<h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//创建文件对象</span><br><span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(D:\\Demo\\new.txt);<br><br><span class="hljs-comment">//调用相应的方法，得到对应信息</span><br>System.out.println(<span class="hljs-string">&quot;文件名：&quot;</span> + file.getName());<br>System.out.println(<span class="hljs-string">&quot;文件绝对路径：&quot;</span> + file.getAbsolutePath());<br>System.out.println(<span class="hljs-string">&quot;文件父级目录：&quot;</span> + file.getParent());<br>System.out.println(<span class="hljs-string">&quot;文件大小(字节)：&quot;</span> + file.length());<br>System.out.println(<span class="hljs-string">&quot;文件是否存在：&quot;</span> + file.exists());<br>System.out.println(<span class="hljs-string">&quot;是不是一个文件：&quot;</span> + file.isFile());<br>System.out.println(<span class="hljs-string">&quot;是不是一个目录：&quot;</span> + file.isDirectory());<br></code></pre></td></tr></table></figure>

<h3 id="创建删除功能的方法"><a href="#创建删除功能的方法" class="headerlink" title="创建删除功能的方法"></a>创建删除功能的方法</h3><ul>
<li><code>public boolean createNewFile()</code> ：文件不存在，创建一个新的空文件并返回<code>true</code>，文件存在，不创建文件并返回<code>false</code>。</li>
<li><code>public boolean delete()</code> ：删除由此File表示的文件或目录 （目录必须为空才能删除）</li>
<li><code>public boolean mkdir()</code> ：创建由此File表示的目录。</li>
<li><code>public boolean mkdirs()</code> ：创建由此File表示的多级目录（<strong>开发中一般用</strong><code>mkdirs()</code>）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//判断news1.txt 是否存在，如果存在就删除</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span>  <span class="hljs-title function_">m1</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">parentPath</span> <span class="hljs-operator">=</span> System.getProperty(<span class="hljs-string">&quot;user.dir&quot;</span>) + <span class="hljs-string">&quot;\\src&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;news1.txt&quot;</span>;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(parentPath,fileName);<br>    <span class="hljs-keyword">if</span> (file.exists()) &#123;<br>        <span class="hljs-keyword">if</span>(file.delete())&#123;<br>            System.out.println(file.getName() + <span class="hljs-string">&quot;删除成功&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(file.getName() + <span class="hljs-string">&quot;删除失败&quot;</span>);<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        System.out.println(file.getName() + <span class="hljs-string">&quot;该文件不存在&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//在Java中目录也当作文件，删除demo目录</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m2</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> System.getProperty(<span class="hljs-string">&quot;user.dir&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;demo1&quot;</span>;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filePath,fileName);<br>    <span class="hljs-keyword">if</span> (file.exists())&#123;<br>        <span class="hljs-keyword">if</span>(file.delete())&#123;<br>            System.out.println(file.getName() + <span class="hljs-string">&quot;删除成功&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(file.getName() + <span class="hljs-string">&quot;删除失败&quot;</span>);<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        System.out.println(file.getName() + <span class="hljs-string">&quot;该文件夹不存在&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//创建多级目录</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m3</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">directoryPath</span> <span class="hljs-operator">=</span> System.getProperty(<span class="hljs-string">&quot;user.dir&quot;</span>) + <span class="hljs-string">&quot;\\demo1\\1\\2\\3\\4\\5&quot;</span>;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(directoryPath);<br>    <span class="hljs-keyword">if</span> (file.exists())&#123;<br>        System.out.println(file.getName() + <span class="hljs-string">&quot;存在...&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (file.mkdirs()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;目录&quot;</span> + file.getName() + <span class="hljs-string">&quot;创建成功..&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;目录&quot;</span> + file.getName() + <span class="hljs-string">&quot;创建失败..&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//判断news1.txt 是否存在，如果存在就删除</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span>  <span class="hljs-title function_">m1</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">parentPath</span> <span class="hljs-operator">=</span> System.getProperty(<span class="hljs-string">&quot;user.dir&quot;</span>) + <span class="hljs-string">&quot;\\src&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;news1.txt&quot;</span>;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(parentPath,fileName);<br>    <span class="hljs-keyword">if</span> (file.exists()) &#123;<br>        <span class="hljs-keyword">if</span>(file.delete())&#123;<br>            System.out.println(file.getName() + <span class="hljs-string">&quot;删除成功&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(file.getName() + <span class="hljs-string">&quot;删除失败&quot;</span>);<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        System.out.println(file.getName() + <span class="hljs-string">&quot;该文件不存在&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//在Java中目录也当作文件，删除demo目录</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m2</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> System.getProperty(<span class="hljs-string">&quot;user.dir&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;demo1&quot;</span>;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filePath,fileName);<br>    <span class="hljs-keyword">if</span> (file.exists())&#123;<br>        <span class="hljs-keyword">if</span>(file.delete())&#123;<br>            System.out.println(file.getName() + <span class="hljs-string">&quot;删除成功&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(file.getName() + <span class="hljs-string">&quot;删除失败&quot;</span>);<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        System.out.println(file.getName() + <span class="hljs-string">&quot;该文件夹不存在&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//创建多级目录 mkdirs()可以创建多级目录比如//a//b//c，所以开发中一般用mkdirs()</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m3</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">directoryPath</span> <span class="hljs-operator">=</span> System.getProperty(<span class="hljs-string">&quot;user.dir&quot;</span>) + <span class="hljs-string">&quot;\\demo1\\1\\2\\3\\4\\5&quot;</span>;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(directoryPath);<br>    <span class="hljs-keyword">if</span> (file.exists())&#123;<br>        System.out.println(file.getName() + <span class="hljs-string">&quot;存在...&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (file.mkdirs()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;目录&quot;</span> + file.getName() + <span class="hljs-string">&quot;创建成功..&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;目录&quot;</span> + file.getName() + <span class="hljs-string">&quot;创建失败..&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="目录的遍历"><a href="#目录的遍历" class="headerlink" title="目录的遍历"></a>目录的遍历</h2><ul>
<li><code>public String[] list()</code> ：返回一个String数组，表示该File目录中的所有子文件或目录。</li>
<li><code>public File[] listFiles()</code> ：返回一个File数组，表示该File目录中的所有的子文件或目录。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileFor</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">dir</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;G:\光标&quot;</span>);<br>      <br>      	<span class="hljs-comment">//获取当前目录下的文件以及文件夹的名称。</span><br>		String[] names = dir.list();<br>		<span class="hljs-keyword">for</span>(String name : names)&#123;<br>			System.out.println(name);<br>		&#125;<br>        <span class="hljs-comment">//获取当前目录下的文件以及文件夹对象，只要拿到了文件对象，那么就可以获取更多信息</span><br>        File[] files = dir.listFiles();<br>        <span class="hljs-keyword">for</span> (File file : files) &#123;<br>            System.out.println(file);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="递归遍历文件夹下所有文件以及子文件"><a href="#递归遍历文件夹下所有文件以及子文件" class="headerlink" title="递归遍历文件夹下所有文件以及子文件"></a>递归遍历文件夹下所有文件以及子文件</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">package <span class="hljs-title class_">File</span>;<br><br><span class="hljs-keyword">import</span> java.<span class="hljs-property">io</span>.<span class="hljs-property">File</span>;<br><br><span class="hljs-comment">//递归遍历文件夹下所有的文件</span><br>public <span class="hljs-keyword">class</span> <span class="hljs-title class_">RecursionDirectory</span> &#123;<br>    public <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>) &#123;<br>      <span class="hljs-title class_">File</span> file=<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\java专属IO测试&quot;</span>);<br>        <span class="hljs-title class_">Recursion</span>(file);<br>    &#125;<br>    public <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title class_">Recursion</span>(<span class="hljs-title class_">File</span> file)&#123;<br>        <span class="hljs-comment">//1、判断传入的是否是目录</span><br>        <span class="hljs-keyword">if</span>(!file.<span class="hljs-title function_">isDirectory</span>())&#123;<br>            <span class="hljs-comment">//不是目录直接退出</span><br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">//已经确保了传入的file是目录</span><br>        <span class="hljs-title class_">File</span>[] files = file.<span class="hljs-title function_">listFiles</span>();<br>        <span class="hljs-comment">//遍历files</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-title class_">File</span> <span class="hljs-attr">f</span>: files) &#123;<br>            <span class="hljs-comment">//如果该目录下文件还是个文件夹就再进行递归遍历其子目录</span><br>            <span class="hljs-keyword">if</span>(f.<span class="hljs-title function_">isDirectory</span>())&#123;<br>                <span class="hljs-comment">//递归</span><br>                <span class="hljs-title class_">Recursion</span>(f);<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">//如果该目录下文件是个文件，则打印对应的名字</span><br>                <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(f.<span class="hljs-title function_">getName</span>());<br>            &#125;<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      <categories>
        <category>WEBbackend</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>IO流</title>
    <url>/2022/12/09/WebBackend/Java/IO%E6%B5%81/</url>
    <content><![CDATA[<p> IO概述</p>
<p>Java中I&#x2F;O操作主要是指使用<code>java.io</code>包下的内容，进行输入、输出操作。<strong>输入也叫做读取数据，输出也叫做作写出数据</strong>。</p>
<h2 id="IO的分类"><a href="#IO的分类" class="headerlink" title="IO的分类"></a>IO的分类</h2><p>根据数据的流向分为：<strong>输入流</strong> 和 <strong>输出流</strong>。</p>
<table>
<thead>
<tr>
<th></th>
<th>输入流</th>
<th>输出流</th>
</tr>
</thead>
<tbody><tr>
<td>字节流</td>
<td>字节输入流 <strong>InputStream</strong></td>
<td>字节输出流 <strong>OutputStream</strong></td>
</tr>
<tr>
<td>字符流</td>
<td>字符输入流 <strong>Reader</strong></td>
<td>字符输出流 <strong>Writer</strong></td>
</tr>
</tbody></table>
<ul>
<li>Input指从外部读入数据到内存，例如，把文件从磁盘读取到内存，从网络读取数据到内存等等。</li>
<li>Output指把数据从内存输出到外部，例如，把数据从内存写入到文件，把数据从内存输出到网络等等。</li>
</ul>
<p>根据数据的类型分为：<strong>字节流</strong> 和 <strong>字符流</strong>。</p>
<ul>
<li><strong>字节流</strong> ：以字节为单位，读写数据的流。</li>
<li><strong>字符流</strong> ：以字符为单位，读写数据的流。</li>
</ul>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221208190049353.png" alt="image-20221208190049353"><br><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221208190118586.png" alt="image-20221208190118586"></p>
<p><img src="https://img-blog.csdnimg.cn/20191014111930276.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0NTQzNTA4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h2><h2 id="字节输出流（OutputStream）"><a href="#字节输出流（OutputStream）" class="headerlink" title="字节输出流（OutputStream）"></a>字节输出流（OutputStream）</h2><p><strong>字节输出流的基本共性功能方法</strong>:</p>
<ol>
<li><code>public void close()</code> ：关闭此输出流并释放与此流相关联的任何系统资源。</li>
<li><code>public void flush() </code> ：刷新此输出流并强制任何缓冲的输出字节被写出。</li>
<li><code>public void write(byte[] b)</code>：将 b.length个字节从指定的字节数组写入此输出流。</li>
<li><code>public void write(byte[] b, int off, int len)</code> ：从指定的字节数组写入 len字节，从偏移量 off开始输出到此输出流。  <strong>也就是说从off个字节数开始读取一直到len个字节结束</strong></li>
<li><code>public abstract void write(int b)</code> ：将指定的字节输出流。</li>
</ol>
<blockquote>
<p><strong>以上五个方法则是字节输出流都具有的方法，由父类OutputStream定义提供，子类都会共享以上方法</strong></p>
</blockquote>
<h4 id="FileOutputStream类"><a href="#FileOutputStream类" class="headerlink" title="FileOutputStream类"></a>FileOutputStream类</h4><p><code>OutputStream</code>有很多子类，我们从最简单的一个子类FileOutputStream开始。看名字就知道是文件输出流，用于将数据写出到文件。</p>
<h4 id="FileOutputStream构造方法"><a href="#FileOutputStream构造方法" class="headerlink" title="FileOutputStream构造方法"></a>FileOutputStream构造方法</h4><ol>
<li><code>public FileOutputStream(File file)</code>：根据File对象为参数创建对象。 </li>
<li><code>public FileOutputStream(String name)</code>： 根据名称字符串为参数创建对象。</li>
</ol>
<p><strong>第二种构造方法开发常用：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileOutputStreamConstructor</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>   	 	<span class="hljs-comment">// 使用File对象创建流对象</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;G:\\自动创建的文件夹\\a.txt&quot;</span>);<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(file);<br>      <br>        <span class="hljs-comment">// 使用文件名称创建流对象</span><br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;G:\\b.txt&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="FileOutputStream写出字节数据"><a href="#FileOutputStream写出字节数据" class="headerlink" title="FileOutputStream写出字节数据"></a>FileOutputStream写出字节数据</h4><p>使用FileOutputStream写出字节数据主要通过<code>Write</code>方法，而<code>write</code>方法分如下三种</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">public <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span>(int b)<br>public <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span>(byte[] b)<br>public <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span>(byte[] b,int off,int len)  <span class="hljs-comment">//从`off`索引开始，`len`个字节</span><br></code></pre></td></tr></table></figure>

<ol>
<li><strong>写出字节</strong>：<code>write(int b)</code> 方法，每次可以写出一个字节数据，代码如下：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IoWrite</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 使用文件名称创建流对象</span><br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;fos.txt&quot;</span>);     <br>      	<span class="hljs-comment">// 写出数据</span><br>      	fos.write(<span class="hljs-number">97</span>); <span class="hljs-comment">// 写出第1个字节</span><br>      	fos.write(<span class="hljs-number">98</span>); <span class="hljs-comment">// 写出第2个字节</span><br>      	fos.write(<span class="hljs-number">99</span>); <span class="hljs-comment">// 写出第3个字节</span><br>      	<span class="hljs-comment">// 关闭资源</span><br>        fos.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>写出字节数组</strong>：<code>write(byte[] b)</code>，每次可以写出数组中的数据，代码使用演示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FOSWrite</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 使用文件名称创建流对象</span><br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;fos.txt&quot;</span>);     <br>      	<span class="hljs-comment">// 字符串转换为字节数组</span><br>      	<span class="hljs-type">byte</span>[] b = <span class="hljs-string">&quot;麻麻我想吃烤山药&quot;</span>.getBytes();<br>      	<span class="hljs-comment">// 写出字节数组数据</span><br>      	fos.write(b);<br>      	<span class="hljs-comment">// 关闭资源</span><br>        fos.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<ol>
<li><strong>写出指定长度字节数组</strong>：<code>write(byte[] b, int off, int len)</code> ,每次写出从<code>off</code>索引开始，<code>len</code>个字节，代码如下：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FOSWrite</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 使用文件名称创建流对象</span><br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;fos.txt&quot;</span>);     <br>      	<span class="hljs-comment">// 字符串转换为字节数组</span><br>      	<span class="hljs-type">byte</span>[] b = <span class="hljs-string">&quot;abcde&quot;</span>.getBytes();<br>		<span class="hljs-comment">// 写出从索引2开始，2个字节。索引2是c，两个字节，也就是cd。</span><br>        fos.write(b,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>);<br>      	<span class="hljs-comment">// 关闭资源</span><br>        fos.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="FileOutputStream实现数据追加续写、换行"><a href="#FileOutputStream实现数据追加续写、换行" class="headerlink" title="FileOutputStream实现数据追加续写、换行"></a>FileOutputStream实现数据追加续写、换行</h4><p>1、<code>public FileOutputStream(File file, boolean append)</code></p>
<p>2、<code>public FileOutputStream(String name, boolean append)</code></p>
<p>这两个构造方法，第二个参数中都需要传入一个boolean类型的值，<code>true</code> 表示追加数据，<code>false</code> 表示不追加也就是清空原有数据。</p>
<p>实现数据追加续写代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FOSWrite</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 使用文件名称创建流对象</span><br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;fos.txt&quot;</span>，<span class="hljs-literal">true</span>);     <br>      	<span class="hljs-comment">// 字符串转换为字节数组</span><br>      	<span class="hljs-type">byte</span>[] b = <span class="hljs-string">&quot;abcde&quot;</span>.getBytes();<br>		<span class="hljs-comment">// 写出从索引2开始，2个字节。索引2是c，两个字节，也就是cd。</span><br>        fos.write(b);<br>      	<span class="hljs-comment">// 关闭资源</span><br>        fos.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>Windows系统里，换行符号是<code>\r\n</code> ,具体代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FOSWrite</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 使用文件名称创建流对象</span><br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;fos.txt&quot;</span>);  <br>      	<span class="hljs-comment">// 定义字节数组</span><br>      	<span class="hljs-type">byte</span>[] words = &#123;<span class="hljs-number">97</span>,<span class="hljs-number">98</span>,<span class="hljs-number">99</span>,<span class="hljs-number">100</span>,<span class="hljs-number">101</span>&#125;;<br>      	<span class="hljs-comment">// 遍历数组</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; words.length; i++) &#123;<br>          	<span class="hljs-comment">// 写出一个字节</span><br>            fos.write(words[i]);<br>          	<span class="hljs-comment">// 写出一个换行, 换行符号转成数组写出</span><br>            fos.write(<span class="hljs-string">&quot;\r\n&quot;</span>.getBytes());<br>        &#125;<br>      	<span class="hljs-comment">// 关闭资源</span><br>        fos.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="字节输入流（InputStream）"><a href="#字节输入流（InputStream）" class="headerlink" title="字节输入流（InputStream）"></a>字节输入流（InputStream）</h2><p><code>java.io.InputStream </code>抽象类是表示<strong>字节输入流</strong>的所有类的<strong>超类</strong>（父类），可以读取字节信息到内存中。它定义了字节输入流的基本共性功能方法。</p>
<p><strong>字节输入流的基本共性功能方法</strong>:</p>
<ol>
<li><code>public void close()</code> ：关闭此输入流并释放与此流相关联的任何系统资源。</li>
<li><code>public abstract int read()</code>： 从输入流读取数据的下一个字节。</li>
<li><code>public int read(byte[] b)</code>： 该方法返回的int值代表的是读取了多少个字节，读到几个返回几个，读取不到返回-1</li>
</ol>
<h4 id="FileInputStream类"><a href="#FileInputStream类" class="headerlink" title="FileInputStream类"></a>FileInputStream类</h4><p><code>java.io.FileInputStream </code>类是文件输入流，从文件中读取字节。</p>
<h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><ol>
<li><code>FileInputStream(File file)</code>： 通过打开与实际文件的连接来创建一个 FileInputStream ，该文件由文件系统中的 File对象 file命名。</li>
<li><code>FileInputStream(String name)</code>： 通过打开与实际文件的连接来创建一个 FileInputStream ，该文件由文件系统中的路径名name命名。</li>
</ol>
<p>同样的，推荐使用第二种构造方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">FileInputStream</span> inputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;a.txt&quot;</span>);<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileInputStreamConstructor</span> <span class="hljs-keyword">throws</span> IOException&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>   	 	<span class="hljs-comment">// 使用File对象创建流对象</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;a.txt&quot;</span>);<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file);<br>      <br>        <span class="hljs-comment">// 使用文件名称创建流对象</span><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;b.txt&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="FileInputStream读取字节数据"><a href="#FileInputStream读取字节数据" class="headerlink" title="FileInputStream读取字节数据"></a>FileInputStream读取字节数据</h4><ol>
<li><strong>读取字节</strong>：<code>read</code>方法，每次可以读取一个字节的数据，提升为int类型，读取到文件末尾，返回<code>-1</code>，代码测试如下【read.txt文件中内容为abcde】：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FISRead</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException&#123;<br>      	<span class="hljs-comment">// 使用文件名称创建流对象</span><br>       	<span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;read.txt&quot;</span>);<span class="hljs-comment">//read.txt文件中内容为abcde</span><br>      	<span class="hljs-comment">// 读取数据，返回一个字节</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">read</span> <span class="hljs-operator">=</span> fis.read();<br>        System.out.println((<span class="hljs-type">char</span>) read);<br>        read = fis.read();<br>        System.out.println((<span class="hljs-type">char</span>) read);<br>        read = fis.read();<br>        System.out.println((<span class="hljs-type">char</span>) read);<br>        read = fis.read();<br>        System.out.println((<span class="hljs-type">char</span>) read);<br>        read = fis.read();<br>        System.out.println((<span class="hljs-type">char</span>) read);<br>      	<span class="hljs-comment">// 读取到末尾,返回-1</span><br>       	read = fis.read();<br>        System.out.println( read);<br>		<span class="hljs-comment">// 关闭资源</span><br>        fis.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>循环改进读取方式，代码使用演示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FISRead</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException&#123;<br>      	<span class="hljs-comment">// 使用文件名称创建流对象</span><br>       	<span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;read.txt&quot;</span>);<br>      	<span class="hljs-comment">// 定义变量，保存数据</span><br>        <span class="hljs-type">int</span> b ；<br>        <span class="hljs-comment">// 循环读取</span><br>        <span class="hljs-keyword">while</span> ((b = fis.read())!=-<span class="hljs-number">1</span>) &#123;<br>            System.out.println((<span class="hljs-type">char</span>)b);<br>        &#125;<br>		<span class="hljs-comment">// 关闭资源</span><br>        fis.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<ol>
<li><strong>使用字节数组读取</strong>：<code>read(byte[] b)</code>，每次读取b的长度个字节到数组中，返回读取到的有效字节个数，读取到末尾时，返回<code>-1</code> ，代码使用演示：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FISRead</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException&#123;<br>      	<span class="hljs-comment">// 使用文件名称创建流对象.</span><br>       	<span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;read.txt&quot;</span>); <span class="hljs-comment">// read.txt文件中内容为abcde</span><br>      	<span class="hljs-comment">// 定义变量，作为有效个数</span><br>        <span class="hljs-type">int</span> len ；<br>        <span class="hljs-comment">// 定义字节数组，作为装字节数据的容器   </span><br>        <span class="hljs-type">byte</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">2</span>];<br>        <span class="hljs-comment">// 循环读取</span><br>        <span class="hljs-keyword">while</span> (( len= fis.read(b))!=-<span class="hljs-number">1</span>) &#123;<br>           	<span class="hljs-comment">// 每次读取后,把数组变成字符串打印</span><br>            System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(b));<br>        &#125;<br>		<span class="hljs-comment">// 关闭资源</span><br>        fis.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>由于<code>read.txt</code>文件中内容为<code>abcde</code>，而错误数据<code>d</code>，是由于最后一次读取时，只读取一个字节<code>e</code>，数组中，上次读取的数据没有被完全<strong>替换</strong>【注意是替换，看下图】，所以要通过<code>len</code> ，获取有效的字节<br> <img src="https://img-blog.csdnimg.cn/20191015160242904.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0NTQzNTA4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> 代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FISRead</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException&#123;<br>      	<span class="hljs-comment">// 使用文件名称创建流对象.</span><br>       	<span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;read.txt&quot;</span>); <span class="hljs-comment">// 文件中为abcde</span><br>      	<span class="hljs-comment">// 定义变量，作为有效个数</span><br>        <span class="hljs-type">int</span> len ；<br>        <span class="hljs-comment">// 定义字节数组，作为装字节数据的容器   </span><br>        <span class="hljs-type">byte</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">2</span>];<br>        <span class="hljs-comment">// 循环读取</span><br>        <span class="hljs-keyword">while</span> (( len= fis.read(b))!=-<span class="hljs-number">1</span>) &#123;<br>           	<span class="hljs-comment">// 每次读取后,把数组的有效字节部分，变成字符串打印</span><br>            System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(b，<span class="hljs-number">0</span>，len));<span class="hljs-comment">//  len 每次读取的有效字节个数</span><br>        &#125;<br>		<span class="hljs-comment">// 关闭资源</span><br>        fis.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>在开发中一般强烈推荐使用数组读取文件，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> java.<span class="hljs-property">io</span>.<span class="hljs-property">FileInputStream</span>;<br><span class="hljs-keyword">import</span> java.<span class="hljs-property">io</span>.<span class="hljs-property">FileNotFoundException</span>;<br><span class="hljs-keyword">import</span> java.<span class="hljs-property">io</span>.<span class="hljs-property">IOException</span>;<br><br>public <span class="hljs-keyword">class</span> <span class="hljs-title class_">input2</span> &#123;<br>    public <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> args[]</span>)&#123;<br>        <span class="hljs-title class_">FileInputStream</span> inputStream = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            inputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;a.txt&quot;</span>);<br>            int len = <span class="hljs-number">0</span> ;<br>            byte[] bys = <span class="hljs-keyword">new</span> byte[<span class="hljs-number">1024</span>];<br>            <span class="hljs-keyword">while</span> ((len = inputStream.<span class="hljs-title function_">read</span>(bys)) != -<span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bys,<span class="hljs-number">0</span>,len));<br>            &#125;<br>        <br>        &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">IOException</span> e) &#123;<br>            e.<span class="hljs-title function_">printStackTrace</span>();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                inputStream.<span class="hljs-title function_">close</span>();<br>            &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">IOException</span> e) &#123;<br>                e.<span class="hljs-title function_">printStackTrace</span>();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="字节流FileInputstream复制文件"><a href="#字节流FileInputstream复制文件" class="headerlink" title="字节流FileInputstream复制文件"></a>字节流FileInputstream复制文件</h4><p><strong>原理</strong><br> <img src="https://img-blog.csdnimg.cn/20191013204020152.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0NTQzNTA4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><strong>代码实现</strong></p>
<p>复制文件，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Copy</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 1.创建流对象</span><br>        <span class="hljs-comment">// 1.1 指定数据源</span><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:\\test.jpg&quot;</span>);<br>        <span class="hljs-comment">// 1.2 指定目的地</span><br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;test_copy.jpg&quot;</span>);<br><br>        <span class="hljs-comment">// 2.读写数据</span><br>        <span class="hljs-comment">// 2.1 定义数组</span><br>        <span class="hljs-type">byte</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-comment">// 2.2 定义长度</span><br>        <span class="hljs-type">int</span> len;<br>        <span class="hljs-comment">// 2.3 循环读取</span><br>        <span class="hljs-keyword">while</span> ((len = fis.read(b))!=-<span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-comment">// 2.4 写出数据</span><br>            fos.write(b, <span class="hljs-number">0</span> , len);<br>        &#125;<br><br>        <span class="hljs-comment">// 3.关闭资源</span><br>        fos.close();<br>        fis.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h1 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h1><blockquote>
<p>字符流 &#x3D; 字节流 + 编码表</p>
</blockquote>
<p>使用字符流：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">public <span class="hljs-keyword">class</span> <span class="hljs-title class_">CharaterStream</span> &#123;<br>    public <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-title class_">String</span>[] args) throws <span class="hljs-title class_">Exception</span> &#123;<br><br>        <span class="hljs-title class_">FileInputStream</span> inputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;a.txt&quot;</span>);<br>        byte[] bytes = <span class="hljs-keyword">new</span> byte[<span class="hljs-number">1024</span>];<br>        int len;<br>        <span class="hljs-keyword">while</span> ((len=inputStream.<span class="hljs-title function_">read</span>(bytes))!=-<span class="hljs-number">1</span>)&#123;<br>           <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">print</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes,<span class="hljs-number">0</span>,len));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h1 id="字符输入流（Reader）"><a href="#字符输入流（Reader）" class="headerlink" title="字符输入流（Reader）"></a>字符输入流（Reader）</h1><p><code>java.io.Reader</code>抽象类是<strong>字符输入流</strong>的所有类的<strong>超类</strong>（父类），可以读取字符信息到内存中。它定义了字符输入流的基本共性功能方法。</p>
<p><strong>字符输入流的共性方法</strong>：</p>
<ol>
<li><code>public void close()</code> ：关闭此流并释放与此流相关联的任何系统资源。</li>
<li><code>public int read()</code>： 从输入流读取一个字符。</li>
<li><code>public int read(char[] cbuf)</code>： 从输入流中读取一些字符，并将它们存储到字符数组 <code>cbuf</code>中</li>
</ol>
<h3 id="FileReader类"><a href="#FileReader类" class="headerlink" title="FileReader类"></a>FileReader类</h3><p><code>java.io.FileReader </code>类是读取字符文件的便利类。构造时使用系统默认的字符编码和默认字节缓冲区。</p>
<h3 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h3><ol>
<li><code>FileReader(File file)</code>： 创建一个新的 FileReader ，给定要读取的<strong>File对象</strong>。</li>
<li><code>FileReader(String fileName)</code>： 创建一个新的 FileReader ，给定要读取的文件的<strong>字符串名称</strong>。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileReaderConstructor</span> <span class="hljs-keyword">throws</span> IOException&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>   	 	<span class="hljs-comment">// 使用File对象创建流对象</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;a.txt&quot;</span>);<br>        <span class="hljs-type">FileReader</span> <span class="hljs-variable">fr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(file);<br>      <br>        <span class="hljs-comment">// 使用文件名称创建流对象</span><br>        <span class="hljs-type">FileReader</span> <span class="hljs-variable">fr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;b.txt&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="FileReader读取字符数据"><a href="#FileReader读取字符数据" class="headerlink" title="FileReader读取字符数据"></a>FileReader读取字符数据</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FRRead</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>      	<span class="hljs-comment">// 使用文件名称创建流对象</span><br>       	<span class="hljs-type">FileReader</span> <span class="hljs-variable">fr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;new.txt&quot;</span>);<br>      	<span class="hljs-comment">// 定义变量，保存数据</span><br>        <span class="hljs-type">int</span> b ；<br>        <span class="hljs-comment">// 循环读取</span><br>        <span class="hljs-keyword">while</span> ((b = fr.read())!=-<span class="hljs-number">1</span>) &#123;<br>            System.out.println((<span class="hljs-type">char</span>)b);<br>        &#125;<br>		<span class="hljs-comment">// 关闭资源</span><br>        fr.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h1 id="字符输出流（Writer）"><a href="#字符输出流（Writer）" class="headerlink" title="字符输出流（Writer）"></a>字符输出流（Writer）</h1><p><code>java.io.Writer </code>抽象类是<strong>字符输出流</strong>的所有类的<strong>超类</strong>（父类），将指定的字符信息写出到目的地。它同样定义了字符输出流的基本共性功能方法。</p>
<p><strong>字符输出流的基本共性功能方法</strong>：</p>
<ol>
<li><code>void write(int c)</code> 写入单个字符。</li>
<li><code>void write(char[] cbuf) </code>写入字符数组。</li>
<li><code>abstract  void write(char[] cbuf, int off, int len) </code>写入字符数组的某一部分,off数组的开始索引,len写的字符个数。</li>
<li><code>void write(String str) </code>写入字符串。</li>
<li><code>void write(String str, int off, int len)</code> 写入字符串的某一部分,off字符串的开始索引,len写的字符个数。</li>
<li><code>void flush() </code>刷新该流的缓冲。</li>
<li><code>void close()</code> 关闭此流，但要先刷新它。</li>
</ol>
<h2 id="FileWriter类"><a href="#FileWriter类" class="headerlink" title="FileWriter类"></a>FileWriter类</h2><p><code>java.io.FileWriter </code>类是写出字符到文件的便利类。构造时使用系统默认的字符编码和默认字节缓冲区。</p>
<h3 id="构造方法-2"><a href="#构造方法-2" class="headerlink" title="构造方法"></a>构造方法</h3><p>1、 <code>FileWriter(File file)</code>： 创建一个新的 FileWriter，给定要读取的File对象。<br> 2、<code>FileWriter(String fileName)</code>： 创建一个新的 FileWriter，给定要读取的文件的名称。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileWriterConstructor</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>   	 	<span class="hljs-comment">// 第一种：使用File对象创建流对象</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;a.txt&quot;</span>);<br>        <span class="hljs-type">FileWriter</span> <span class="hljs-variable">fw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(file);<br>      <br>        <span class="hljs-comment">// 第二种：使用文件名称创建流对象</span><br>        <span class="hljs-type">FileWriter</span> <span class="hljs-variable">fw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;b.txt&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="FileWriter写出数据"><a href="#FileWriter写出数据" class="headerlink" title="FileWriter写出数据"></a>FileWriter写出数据</h3><p><strong>写出字符</strong>：<code>write(int b)</code> 方法，每次可以写出一个字符数据，代码使用演示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FWWrite</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 使用文件名称创建流对象</span><br>        <span class="hljs-type">FileWriter</span> <span class="hljs-variable">fw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;fw.txt&quot;</span>);     <br>      	<span class="hljs-comment">// 写出数据</span><br>      	fw.write(<span class="hljs-number">97</span>); <span class="hljs-comment">// 写出第1个字符</span><br>      	fw.write(<span class="hljs-string">&#x27;b&#x27;</span>); <span class="hljs-comment">// 写出第2个字符</span><br>      	fw.write(<span class="hljs-string">&#x27;C&#x27;</span>); <span class="hljs-comment">// 写出第3个字符</span><br>      	<br>        <span class="hljs-comment">//关闭资源时,与FileOutputStream不同。 如果不关闭,数据只是保存到缓冲区，并未保存到文件。</span><br>        <span class="hljs-comment">// fw.close();</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<blockquote>
<p><strong>注：关闭资源时,与FileOutputStream不同。 如果不关闭,数据只是保存到缓冲区，并未保存到文件。</strong></p>
</blockquote>
<h3 id="关闭close和刷新flush"><a href="#关闭close和刷新flush" class="headerlink" title="关闭close和刷新flush"></a>关闭close和刷新flush</h3><p>因为内置缓冲区的原因，如果不关闭输出流，无法写出字符到文件中。但是关闭的流对象，是无法继续写出数据的。如果我们既想写出数据，又想继续使用流，就需要<code>flush</code> 方法了。</p>
<p><code>flush</code> ：刷新缓冲区，流对象可以继续使用。<br><code>close </code> ：先刷新缓冲区，然后通知系统释放资源。流对象不可以再被使用了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FWWrite</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 使用文件名称创建流对象</span><br>        <span class="hljs-type">FileWriter</span> <span class="hljs-variable">fw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;fw.txt&quot;</span>);<br>        <span class="hljs-comment">// 写出数据，通过flush</span><br>        fw.write(<span class="hljs-string">&#x27;刷&#x27;</span>); <span class="hljs-comment">// 写出第1个字符</span><br>        fw.flush();<br>        fw.write(<span class="hljs-string">&#x27;新&#x27;</span>); <span class="hljs-comment">// 继续写出第2个字符，写出成功</span><br>        fw.flush();<br>      <br>      	<span class="hljs-comment">// 写出数据，通过close</span><br>        fw.write(<span class="hljs-string">&#x27;关&#x27;</span>); <span class="hljs-comment">// 写出第1个字符</span><br>        fw.close();<br>        fw.write(<span class="hljs-string">&#x27;闭&#x27;</span>); <span class="hljs-comment">// 继续写出第2个字符,【报错】java.io.IOException: Stream closed</span><br>        fw.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="FileWriter的续写和换行"><a href="#FileWriter的续写和换行" class="headerlink" title="FileWriter的续写和换行"></a>FileWriter的续写和换行</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FWWrite</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 使用文件名称创建流对象，可以续写数据</span><br>        <span class="hljs-type">FileWriter</span> <span class="hljs-variable">fw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;new.txt&quot;</span>，<span class="hljs-literal">true</span>);     <br>      	<span class="hljs-comment">// 写出字符串</span><br>        fw.write(<span class="hljs-string">&quot;Hello&quot;</span>);<br>      	<span class="hljs-comment">// 写出换行</span><br>      	fw.write(<span class="hljs-string">&quot;\r\n&quot;</span>);<br>      	<span class="hljs-comment">// 写出字符串</span><br>  		fw.write(<span class="hljs-string">&quot;World&quot;</span>);<br>      	<span class="hljs-comment">// 关闭资源</span><br>        fw.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="FileReader和FileWriter类完成文本文件复制"><a href="#FileReader和FileWriter类完成文本文件复制" class="headerlink" title="FileReader和FileWriter类完成文本文件复制"></a>FileReader和FileWriter类完成文本文件复制</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> java.<span class="hljs-property">io</span>.<span class="hljs-property">FileReader</span>;<br><span class="hljs-keyword">import</span> java.<span class="hljs-property">io</span>.<span class="hljs-property">FileWriter</span>;<br><span class="hljs-keyword">import</span> java.<span class="hljs-property">io</span>.<span class="hljs-property">IOException</span>;<br><br>public <span class="hljs-keyword">class</span> <span class="hljs-title class_">CopyFile</span> &#123;<br>    public <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-title class_">String</span>[] args) throws <span class="hljs-title class_">IOException</span> &#123;<br>        <span class="hljs-comment">//创建输入流对象</span><br>        <span class="hljs-title class_">FileReader</span> fr=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;F:\\新建文件夹\\aa.txt&quot;</span>);<span class="hljs-comment">//文件不存在会抛出java.io.FileNotFoundException</span><br>        <span class="hljs-comment">//创建输出流对象</span><br>        <span class="hljs-title class_">FileWriter</span> fw=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;C:\\copyaa.txt&quot;</span>);<br>        <span class="hljs-comment">/*创建输出流做的工作：</span><br><span class="hljs-comment">         *      1、调用系统资源创建了一个文件</span><br><span class="hljs-comment">         *      2、创建输出流对象</span><br><span class="hljs-comment">         *      3、把输出流对象指向文件        </span><br><span class="hljs-comment">         * */</span><br>        <span class="hljs-comment">//文本文件复制，一次读一个字符</span><br>        <span class="hljs-title function_">copyMethod1</span>(fr, fw);<br>        <span class="hljs-comment">//文本文件复制，一次读一个字符数组</span><br>        <span class="hljs-title function_">copyMethod2</span>(fr, fw);<br>        <br>        fr.<span class="hljs-title function_">close</span>();<br>        fw.<span class="hljs-title function_">close</span>();<br>    &#125;<br><br>    public <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">copyMethod1</span>(<span class="hljs-title class_">FileReader</span> fr, <span class="hljs-title class_">FileWriter</span> fw) throws <span class="hljs-title class_">IOException</span> &#123;<br>        int ch;<br>        <span class="hljs-keyword">while</span>((ch=fr.<span class="hljs-title function_">read</span>())!=-<span class="hljs-number">1</span>) &#123;<span class="hljs-comment">//读数据</span><br>            fw.<span class="hljs-title function_">write</span>(ch);<span class="hljs-comment">//写数据</span><br>        &#125;<br>        fw.<span class="hljs-title function_">flush</span>();<br>    &#125;<br><br>    public <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">copyMethod2</span>(<span class="hljs-title class_">FileReader</span> fr, <span class="hljs-title class_">FileWriter</span> fw) throws <span class="hljs-title class_">IOException</span> &#123;<br>        char chs[]=<span class="hljs-keyword">new</span> char[<span class="hljs-number">1024</span>];<br>        int len=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>((len=fr.<span class="hljs-title function_">read</span>(chs))!=-<span class="hljs-number">1</span>) &#123;<span class="hljs-comment">//读数据</span><br>            fw.<span class="hljs-title function_">write</span>(chs,<span class="hljs-number">0</span>,len);<span class="hljs-comment">//写数据</span><br>        &#125;<br>        fw.<span class="hljs-title function_">flush</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="IO异常的处理"><a href="#IO异常的处理" class="headerlink" title="IO异常的处理"></a>IO异常的处理</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HandleException1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      	<span class="hljs-comment">// 声明变量</span><br>        <span class="hljs-type">FileWriter</span> <span class="hljs-variable">fw</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//创建流对象</span><br>            fw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;fw.txt&quot;</span>);<br>            <span class="hljs-comment">// 写出数据</span><br>            fw.write(<span class="hljs-string">&quot;哥敢摸si&quot;</span>); <span class="hljs-comment">//哥敢摸si</span><br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (fw != <span class="hljs-literal">null</span>) &#123;<br>                    fw.close();<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h1 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>首先我们来认识认识一下缓冲流,也叫高效流，是对4个<code>FileXxx</code> 流的“增强流”。</p>
<p><strong>缓冲流的基本原理</strong>：</p>
<ol>
<li>使用了底层流对象从具体设备上获取数据，并将数据存储到缓冲区的数组内。</li>
<li>通过缓冲区的read()方法从缓冲区获取具体的字符数据，这样就提高了效率。</li>
<li>如果用read方法读取字符数据，并存储到另一个容器中，直到读取到了换行符时，将另一个容器临时存储的数据转成字符串返回，就形成了readLine()功能。</li>
</ol>
<h2 id="字节缓冲流"><a href="#字节缓冲流" class="headerlink" title="字节缓冲流"></a>字节缓冲流</h2><h3 id="构造方法-3"><a href="#构造方法-3" class="headerlink" title="构造方法"></a>构造方法</h3><ul>
<li><code>public BufferedInputStream(InputStream in)</code> ：创建一个新的缓冲输入流，注意参数类型为<strong>InputStream</strong>。</li>
<li><code>public BufferedOutputStream(OutputStream out)</code>： 创建一个新的缓冲输出流，注意参数类型为<strong>OutputStream</strong>。</li>
</ul>
<p>构造举例代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//构造方式一： 创建字节缓冲输入流【但是开发中一般常用下面的格式申明】</span><br><span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fps</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(b.txt);<br><span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(fps)<br><br><span class="hljs-comment">//构造方式一： 创建字节缓冲输入流</span><br><span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;b.txt&quot;</span>));<br><br><span class="hljs-comment">///构造方式二： 创建字节缓冲输出流</span><br><span class="hljs-type">BufferedOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;b.txt&quot;</span>));<br></code></pre></td></tr></table></figure>

<h3 id="感受缓冲流的高效"><a href="#感受缓冲流的高效" class="headerlink" title="感受缓冲流的高效"></a>感受缓冲流的高效</h3><p>缓冲流读写方法与基本的流是一致的，我们通过复制370多MB的大文件，测试它的效率。</p>
<ol>
<li>基本流，代码如下：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BufferedDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> FileNotFoundException &#123;<br>        <span class="hljs-comment">// 记录开始时间</span><br>      	<span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>		<span class="hljs-comment">// 创建流对象</span><br>        <span class="hljs-keyword">try</span> (<br>        	<span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;py.exe&quot;</span>);<span class="hljs-comment">//exe文件够大</span><br>        	<span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;copyPy.exe&quot;</span>)<br>        )&#123;<br>        	<span class="hljs-comment">// 读写数据</span><br>            <span class="hljs-type">int</span> b;<br>            <span class="hljs-keyword">while</span> ((b = fis.read()) != -<span class="hljs-number">1</span>) &#123;<br>                fos.write(b);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>		<span class="hljs-comment">// 记录结束时间</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;普通流复制时间:&quot;</span>+(end - start)+<span class="hljs-string">&quot; 毫秒&quot;</span>);<br>    &#125;<br>&#125;<br>不好意思十分钟过去了还在玩命复制中...<br></code></pre></td></tr></table></figure>

<ol>
<li>缓冲流，代码如下：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BufferedDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> FileNotFoundException &#123;<br>        <span class="hljs-comment">// 记录开始时间</span><br>      	<span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>		<span class="hljs-comment">// 创建流对象</span><br>        <span class="hljs-keyword">try</span> (<br>         <span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;py.exe&quot;</span>));<br>	     <span class="hljs-type">BufferedOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;copyPy.exe&quot;</span>));<br>        )&#123;<br>        <span class="hljs-comment">// 读写数据</span><br>            <span class="hljs-type">int</span> b;<br>            <span class="hljs-keyword">while</span> ((b = bis.read()) != -<span class="hljs-number">1</span>) &#123;<br>                bos.write(b);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>		<span class="hljs-comment">// 记录结束时间</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;缓冲流复制时间:&quot;</span>+(end - start)+<span class="hljs-string">&quot; 毫秒&quot;</span>);<br>    &#125;<br>&#125;<br><br>缓冲流复制时间:<span class="hljs-number">8016</span> 毫秒<br></code></pre></td></tr></table></figure>

<p>想要更快可以使用数组的方式，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BufferedDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> FileNotFoundException &#123;<br>      	<span class="hljs-comment">// 记录开始时间</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>		<span class="hljs-comment">// 创建流对象</span><br>        <span class="hljs-keyword">try</span> (<br>		 <span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;py.exe&quot;</span>));<br>		 <span class="hljs-type">BufferedOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;copyPy.exe&quot;</span>));<br>        )&#123;<br>          	<span class="hljs-comment">// 读写数据</span><br>            <span class="hljs-type">int</span> len;<br>            <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">8</span>*<span class="hljs-number">1024</span>];<br>            <span class="hljs-keyword">while</span> ((len = bis.read(bytes)) != -<span class="hljs-number">1</span>) &#123;<br>                bos.write(bytes, <span class="hljs-number">0</span> , len);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>		<span class="hljs-comment">// 记录结束时间</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;缓冲流使用数组复制时间:&quot;</span>+(end - start)+<span class="hljs-string">&quot; 毫秒&quot;</span>);<br>    &#125;<br>&#125;<br>缓冲流使用数组复制时间:<span class="hljs-number">521</span> 毫秒  <br></code></pre></td></tr></table></figure>

<h2 id="字符缓冲流"><a href="#字符缓冲流" class="headerlink" title="字符缓冲流"></a>字符缓冲流</h2><h3 id="构造方法-4"><a href="#构造方法-4" class="headerlink" title="构造方法"></a>构造方法</h3><p>相同的来看看其构造，其格式以及原理和字节缓冲流是一样一样的！</p>
<ul>
<li><code>public BufferedReader(Reader in)</code> ：创建一个新的缓冲输入流，注意参数类型为<strong>Reader</strong>。</li>
<li><code>public BufferedWriter(Writer out)</code>： 创建一个新的缓冲输出流，注意参数类型为<strong>Writer</strong>。</li>
</ul>
<p>构造举例，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建字符缓冲输入流</span><br><span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;b.txt&quot;</span>));<br><span class="hljs-comment">// 创建字符缓冲输出流</span><br><span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;b.txt&quot;</span>));<br></code></pre></td></tr></table></figure>

<h3 id="字符缓冲流特有方法"><a href="#字符缓冲流特有方法" class="headerlink" title="字符缓冲流特有方法"></a>字符缓冲流特有方法</h3><p>字符缓冲流的基本方法与普通字符流调用方式一致，这里不再阐述，我们来看字符缓冲流具备的<strong>特有</strong>方法。</p>
<ul>
<li>BufferedReader：<code>public String readLine()</code>: <strong>读一行数据</strong>。 读取到最后返回null</li>
<li>BufferedWriter：<code>public void newLine()</code>: <strong>换行</strong>,由系统属性定义符号。</li>
</ul>
<p><code>readLine</code>方法演示代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BufferedReaderDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>      	 <span class="hljs-comment">// 创建流对象</span><br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;a.txt&quot;</span>));<br>		<span class="hljs-comment">// 定义字符串,保存读取的一行文字</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">line</span>  <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>      	<span class="hljs-comment">// 循环读取,读取到最后返回null</span><br>        <span class="hljs-keyword">while</span> ((line = br.readLine())!=<span class="hljs-literal">null</span>) &#123;<br>            System.out.print(line);<br>            System.out.println(<span class="hljs-string">&quot;------&quot;</span>);<br>        &#125;<br>		<span class="hljs-comment">// 释放资源</span><br>        br.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><code>newLine</code>方法演示代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BufferedWriterDemo</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException  &#123;<br>    	<span class="hljs-comment">// 创建流对象</span><br>  	<span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;b.txt&quot;</span>));<br>    	<span class="hljs-comment">// 写出数据</span><br>      bw.write(<span class="hljs-string">&quot;He);</span><br><span class="hljs-string">    	// 写出换行</span><br><span class="hljs-string">      bw.newLine();</span><br><span class="hljs-string">      bw.write(&quot;</span>ll<span class="hljs-string">&quot;);</span><br><span class="hljs-string">      bw.newLine();</span><br><span class="hljs-string">      bw.write(&quot;</span>o<span class="hljs-string">&quot;);</span><br><span class="hljs-string">      bw.newLine();</span><br><span class="hljs-string">      bw.write(&quot;</span>World<span class="hljs-string">&quot;);</span><br><span class="hljs-string">      bw.newLine();</span><br><span class="hljs-string">  		// 释放资源</span><br><span class="hljs-string">      bw.close();</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure>

<h2 id="字符缓冲流练习"><a href="#字符缓冲流练习" class="headerlink" title="字符缓冲流练习"></a>字符缓冲流练习</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-number">6.</span>你说你的程序叫简单，我说我的代码叫诗篇<br><span class="hljs-number">1.</span>一想到你我就哦豁豁豁豁豁豁豁豁豁豁....哦nima个头啊，完全不理人家受得了受不了<br><span class="hljs-number">8.</span><span class="hljs-title class_">Just</span> 简单你和我  ，<span class="hljs-title class_">Just</span> 简单程序员<br><span class="hljs-number">3.</span>约了地点却忘了见面 ，懂得寂寞才明白浩瀚<br><span class="hljs-number">5.</span>沉默是最大的发言权<br><span class="hljs-number">2.</span>总是喜欢坐在电脑前，  总是喜欢工作到很晚<br><span class="hljs-number">7.</span>向左走 又向右走，我们转了好多的弯<br><span class="hljs-number">4.</span>你从来就不问我，你还是不是那个程序员<br></code></pre></td></tr></table></figure>

<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BufferedTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 创建map集合,保存文本数据,键为序号,值为文字</span><br>        HashMap&lt;String, String&gt; lineMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>        <span class="hljs-comment">// 创建流对象  源</span><br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;a.txt&quot;</span>));<br>        <span class="hljs-comment">//目标</span><br>        <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;b.txt&quot;</span>));<br><br>        <span class="hljs-comment">// 读取数据</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">line</span>  <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">while</span> ((line = br.readLine())!=<span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 解析文本</span><br>            String[] split = line.split(<span class="hljs-string">&quot;\\.&quot;</span>);<br>            <span class="hljs-comment">// 保存到集合</span><br>            lineMap.put(split[<span class="hljs-number">0</span>],split[<span class="hljs-number">1</span>]);<br>        &#125;<br>        <span class="hljs-comment">// 释放资源</span><br>        br.close();<br><br>        <span class="hljs-comment">// 遍历map集合</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= lineMap.size(); i++) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> String.valueOf(i);<br>            <span class="hljs-comment">// 获取map中文本</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> lineMap.get(key);<br>          	<span class="hljs-comment">// 写出拼接文本</span><br>            bw.write(key+<span class="hljs-string">&quot;.&quot;</span>+value);<br>          	<span class="hljs-comment">// 写出换行</span><br>            bw.newLine();<br>        &#125;<br>		<span class="hljs-comment">// 释放资源</span><br>        bw.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>运行效果：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-number">1.</span>一想到你我就哦豁豁豁豁豁豁豁豁豁豁…哦nima个头啊，完全不理人家受得了受不了<br><span class="hljs-number">2.</span>总是喜欢坐在电脑前， 总是喜欢工作到很晚<br><span class="hljs-number">3.</span>约了地点却忘了见面 ，懂得寂寞才明白浩瀚<br><span class="hljs-number">4.</span>你从来就不问我，你还是不是那个程序员<br><span class="hljs-number">5.</span>沉默是最大的发言权<br><span class="hljs-number">6.</span>你说你的程序叫简单，我说我的代码叫诗篇<br><span class="hljs-number">7.</span>向左走 又向右走，我们转了好多的弯<br><span class="hljs-number">8.</span><span class="hljs-title class_">Just</span> 简单你和我 ，<span class="hljs-title class_">Just</span> 简单程序员<br></code></pre></td></tr></table></figure>

<h1 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h1><p>字符流&#x3D;字节流+编码表</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">String(<span class="hljs-type">byte</span>[] bytes, String charsetName):通过指定的字符集解码字节数组<br><span class="hljs-type">byte</span>[] getBytes(String charsetName):使用指定的字符集合把字符串编码为字节数组<br><br>编码:把看得懂的变成看不懂的<br>String -- <span class="hljs-type">byte</span>[]<br><br>解码:把看不懂的变成看得懂的<br><span class="hljs-type">byte</span>[] -- String<br></code></pre></td></tr></table></figure>

<ul>
<li><p><strong>字符编码</strong> <code>Character Encoding</code>: 就是一套自然语言的字符与二进制数之间的对应规则。</p>
<p>而<strong>编码表</strong>则是生活中文字和计算机中二进制的对应规则</p>
</li>
</ul>
<h3 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h3><ul>
<li><strong>字符集</strong> <code>Charset</code>：也叫<strong>编码表</strong>。是一个系统支持的所有字符的集合，包括各国家文字、标点符号、图形符号、数字等。</li>
</ul>
<p>计算机要准确的存储和识别各种字符集符号，需要进行字符编码，一套字符集必然至少有一套字符编码。常见字符集有<code>ASCII</code>字符集、<code>GBK</code>字符集、<code>Unicode</code>字符集等。<br> <img src="https://img-blog.csdnimg.cn/20191016090127127.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0NTQzNTA4,size_16,color_FFFFFF,t_70" alt="字符编码"></p>
<ul>
<li><p>ASCII字符集 ：</p>
<ul>
<li>ASCII（American Standard Code for Information  Interchange，美国信息交换标准代码）是基于拉丁字母的一套电脑编码系统，用于显示现代英语，主要包括控制字符（回车键、退格、换行键等）和可显示字符（英文大小写字符、阿拉伯数字和西文符号）。</li>
<li>基本的ASCII字符集，使用7位（bits）表示一个字符，共128字符。ASCII的扩展字符集使用8位（bits）表示一个字符，共256字符，方便支持欧洲常用字符。</li>
</ul>
</li>
<li><p>ISO-8859-1字符集 ：</p>
<ul>
<li>拉丁码表，别名Latin-1，用于显示欧洲使用的语言，包括荷兰、丹麦、德语、意大利语、西班牙语等。</li>
<li>ISO-8859-1使用单字节编码，兼容ASCII编码。</li>
</ul>
</li>
<li><p>GBxxx字符集 ：</p>
<ul>
<li>GB就是国标的意思，是为了显示中文而设计的一套字符集。</li>
<li><strong>GB2312</strong>：简体中文码表。一个小于127的字符的意义与原来相同。但两个大于127的字符连在一起时，就表示一个汉字，这样大约可以组合了包含7000多个简体汉字，此外数学符号、罗马希腊的字母、日文的假名们都编进去了，连在ASCII里本来就有的数字、标点、字母都统统重新编了两个字节长的编码，这就是常说的”全角”字符，而原来在127号以下的那些就叫”半角”字符了。</li>
<li><strong>GBK</strong>：最常用的中文码表。是在GB2312标准基础上的扩展规范，使用了双字节编码方案，共收录了21003个汉字，完全兼容GB2312标准，同时支持繁体汉字以及日韩汉字等。</li>
<li><strong>GB18030</strong>：最新的中文码表。收录汉字70244个，采用多字节编码，每个字可以由1个、2个或4个字节组成。支持中国国内少数民族的文字，同时支持繁体汉字以及日韩汉字等。</li>
</ul>
</li>
<li><p>Unicode字符集 ：</p>
<ul>
<li>Unicode编码系统为表达任意语言的任意字符而设计，是业界的一种标准，也称为统一码、标准万国码。</li>
<li>它最多使用4个字节的数字来表达每个字母、符号，或者文字。有三种编码方案，UTF-8、UTF-16和UTF-32。最为常用的UTF-8编码。</li>
<li>UTF-8编码，可以用来表示Unicode标准中任何字符，它是电子邮件、网页及其他存储或传送文字的应用中，优先采用的编码。互联网工程工作小组（IETF）要求所有互联网协议都必须支持UTF-8编码。所以，我们开发Web应用，也要使用UTF-8编码。它使用一至四个字节为每个字符编码，编码规则：<ol>
<li>128个US-ASCII字符，只需一个字节编码。</li>
<li>拉丁文等字符，需要二个字节编码。</li>
<li>大部分常用字（含中文），使用三个字节编码。</li>
<li>其他极少使用的Unicode辅助字符，使用四字节编码。</li>
</ol>
</li>
</ul>
</li>
</ul>
<h2 id="InputStreamReader类-字节流到字符流的桥梁"><a href="#InputStreamReader类-字节流到字符流的桥梁" class="headerlink" title="InputStreamReader类(字节流到字符流的桥梁)"></a>InputStreamReader类(字节流到字符流的桥梁)</h2><p>转换流<code>java.io.InputStreamReader</code>，是<code>Reader</code>的子类，从字面意思可以看出它是从字节流到字符流的桥梁。它读取字节，并使用指定的字符集将其解码为字符。它的字符集可以由名称指定，也可以接受平台的默认字符集。</p>
<h3 id="构造方法-5"><a href="#构造方法-5" class="headerlink" title="构造方法"></a>构造方法</h3><blockquote>
<p><code>InputStreamReader(InputStream in)</code>: 创建一个使用默认字符集的字符流。<br><code>InputStreamReader(InputStream in, String charsetName)</code>: 创建一个指定字符集的字符流。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">InputStreamReader</span> <span class="hljs-variable">isr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;in.txt&quot;</span>));<br><span class="hljs-type">InputStreamReader</span> <span class="hljs-variable">isr2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;in.txt&quot;</span>) , <span class="hljs-string">&quot;GBK&quot;</span>);<br></code></pre></td></tr></table></figure>

<h3 id="使用转换流解决编码问题"><a href="#使用转换流解决编码问题" class="headerlink" title="使用转换流解决编码问题"></a>使用转换流解决编码问题</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReaderDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>      	<span class="hljs-comment">// 定义文件路径,文件为gbk编码</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">FileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;C:\\A.txt&quot;</span>;<br>      	<span class="hljs-comment">// 创建流对象,默认UTF8编码</span><br>        <span class="hljs-type">InputStreamReader</span> <span class="hljs-variable">isr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(FileName));<br>      	<span class="hljs-comment">// 创建流对象,指定GBK编码</span><br>        <span class="hljs-type">InputStreamReader</span> <span class="hljs-variable">isr2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(FileName) , <span class="hljs-string">&quot;GBK&quot;</span>);<br>		<span class="hljs-comment">// 定义变量,保存字符</span><br>        <span class="hljs-type">int</span> read;<br>      	<span class="hljs-comment">// 使用默认编码字符流读取,乱码</span><br>        <span class="hljs-keyword">while</span> ((read = isr.read()) != -<span class="hljs-number">1</span>) &#123;<br>            System.out.print((<span class="hljs-type">char</span>)read); <span class="hljs-comment">// �����ʺ      </span><br>        &#125;<br>        isr.close();<br>      <br>      	<span class="hljs-comment">// 使用指定编码字符流读取,正常解析</span><br>        <span class="hljs-keyword">while</span> ((read = isr2.read()) != -<span class="hljs-number">1</span>) &#123;<br>            System.out.print((<span class="hljs-type">char</span>)read);<span class="hljs-comment">// 美丽水世界</span><br>        &#125;<br>        isr2.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="OutputStreamWriter类-字符流到字节流的桥梁"><a href="#OutputStreamWriter类-字符流到字节流的桥梁" class="headerlink" title="OutputStreamWriter类(字符流到字节流的桥梁)"></a>OutputStreamWriter类(字符流到字节流的桥梁)</h2><h3 id="构造方法-6"><a href="#构造方法-6" class="headerlink" title="构造方法"></a>构造方法</h3><blockquote>
<p><code>OutputStreamWriter(OutputStream in)</code>: 创建一个使用默认字符集的字符流。<br><code>OutputStreamWriter(OutputStream in, String charsetName)</code>: 创建一个指定字符集的字符流。</p>
</blockquote>
<p>构造举例，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">OutputStreamWriter</span> <span class="hljs-variable">isr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;a.txt&quot;</span>));<br><span class="hljs-type">OutputStreamWriter</span> <span class="hljs-variable">isr2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;b.txt&quot;</span>) , <span class="hljs-string">&quot;GBK&quot;</span>);<br></code></pre></td></tr></table></figure>

<h3 id="指定编码构造代码"><a href="#指定编码构造代码" class="headerlink" title="指定编码构造代码"></a>指定编码构造代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OutputDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>      	<span class="hljs-comment">// 定义文件路径</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">FileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;C:\\s.txt&quot;</span>;<br>      	<span class="hljs-comment">// 创建流对象,默认UTF8编码</span><br>        <span class="hljs-type">OutputStreamWriter</span> <span class="hljs-variable">osw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(FileName));<br>        <span class="hljs-comment">// 写出数据</span><br>      	osw.write(<span class="hljs-string">&quot;哥敢&quot;</span>); <span class="hljs-comment">// 保存为6个字节</span><br>        osw.close();<br>      	<br>		<span class="hljs-comment">// 定义文件路径</span><br>		<span class="hljs-type">String</span> <span class="hljs-variable">FileName2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\A.txt&quot;</span>;<br>     	<span class="hljs-comment">// 创建流对象,指定GBK编码</span><br>        <span class="hljs-type">OutputStreamWriter</span> <span class="hljs-variable">osw2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(FileName2),<span class="hljs-string">&quot;GBK&quot;</span>);<br>        <span class="hljs-comment">// 写出数据</span><br>      	osw2.write(<span class="hljs-string">&quot;摸屎&quot;</span>);<span class="hljs-comment">// 保存为4个字节</span><br>        osw2.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20191016100612927.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0NTQzNTA4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> 为了达到<strong>最高效率</strong>，可以考虑在 <code>BufferedReader</code> 内包装 <code>InputStreamReader</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">BufferedReader</span> <span class="hljs-keyword">in</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(<span class="hljs-title class_">System</span>.<span class="hljs-property">in</span>))；<br></code></pre></td></tr></table></figure>

<h1 id="序列化流"><a href="#序列化流" class="headerlink" title="序列化流"></a>序列化流</h1><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><p>Java 提供了一种对象<strong>序列化</strong>的机制。用一个字节序列可以表示一个对象，该字节序列包含该<code>对象的数据</code>、<code>对象的类型</code>和<code>对象中存储的属性</code>等信息。字节序列写出到文件之后，相当于文件中<strong>持久保存</strong>了一个对象的信息。</p>
<p>反之，该字节序列还可以从文件中读取回来，重构对象，对它进行<strong>反序列化</strong>。<code>对象的数据</code>、<code>对象的类型</code>和<code>对象中存储的数据</code>信息，都可以用来在内存中创建对象。看图理解序列化：<br> <img src="https://img-blog.csdnimg.cn/20191016100818120.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0NTQzNTA4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="ObjectOutputStream类"><a href="#ObjectOutputStream类" class="headerlink" title="ObjectOutputStream类"></a>ObjectOutputStream类</h2><p><code>java.io.ObjectOutputStream </code> 类，将Java对象的原始数据类型写出到文件,实现对象的持久存储。</p>
<h3 id="构造方法-7"><a href="#构造方法-7" class="headerlink" title="构造方法"></a>构造方法</h3><p><code>public ObjectOutputStream(OutputStream out) </code>： 创建一个指定OutputStream的ObjectOutputStream。</p>
<p>构造代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fileOut</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;aa.txt&quot;</span>);<br><span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(fileOut);<br></code></pre></td></tr></table></figure>

<h3 id="序列化操作"><a href="#序列化操作" class="headerlink" title="序列化操作"></a>序列化操作</h3><ol>
<li>一个对象要想序列化，必须满足两个条件:</li>
</ol>
<p>该类必须实现<code>java.io.Serializable </code> 接口，<code>Serializable</code> 是一个标记接口，不实现此接口的类将不会使任何状态序列化或反序列化，会抛出<code>NotSerializableException</code> 。</p>
<p>该类的所有属性必须是可序列化的。如果有一个属性不需要可序列化的，则该属性必须注明是瞬态的，使用<code>transient</code> 关键字修饰。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">java</span>.io.Serializable &#123;<br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">public</span> String address;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">transient</span> <span class="hljs-type">int</span> age; <span class="hljs-comment">// transient瞬态修饰成员,不会被序列化</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addressCheck</span><span class="hljs-params">()</span> &#123;<br>      	System.out.println(<span class="hljs-string">&quot;Address  check : &quot;</span> + name + <span class="hljs-string">&quot; -- &quot;</span> + address);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>2.写出对象方法</p>
<p><code>public final void writeObject (Object obj)</code> : 将指定的对象写出。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SerializeDemo</span>&#123;<br>   	<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String [] args)</span>   &#123;<br>    	<span class="hljs-type">Employee</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>();<br>    	e.name = <span class="hljs-string">&quot;zhangsan&quot;</span>;<br>    	e.address = <span class="hljs-string">&quot;beiqinglu&quot;</span>;<br>    	e.age = <span class="hljs-number">20</span>; <br>    	<span class="hljs-keyword">try</span> &#123;<br>      		<span class="hljs-comment">// 创建序列化流对象</span><br>          <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;employee.txt&quot;</span>));<br>        	<span class="hljs-comment">// 写出对象</span><br>        	out.writeObject(e);<br>        	<span class="hljs-comment">// 释放资源</span><br>        	out.close();<br>        	fileOut.close();<br>        	System.out.println(<span class="hljs-string">&quot;Serialized data is saved&quot;</span>); <span class="hljs-comment">// 姓名，地址被序列化，年龄没有被序列化。</span><br>        &#125; <span class="hljs-keyword">catch</span>(IOException i)   &#123;<br>            i.printStackTrace();<br>        &#125;<br>   	&#125;<br>&#125;<br>输出结果：<br>Serialized data is saved<br></code></pre></td></tr></table></figure>

<h2 id="ObjectInputStream类"><a href="#ObjectInputStream类" class="headerlink" title="ObjectInputStream类"></a>ObjectInputStream类</h2><p>ObjectInputStream反序列化流，将之前使用ObjectOutputStream序列化的原始数据恢复为对象。</p>
<h3 id="构造方法-8"><a href="#构造方法-8" class="headerlink" title="构造方法"></a>构造方法</h3><p><code>public ObjectInputStream(InputStream in) </code>： 创建一个指定InputStream的ObjectInputStream。</p>
<h3 id="反序列化操作1"><a href="#反序列化操作1" class="headerlink" title="反序列化操作1"></a>反序列化操作1</h3><p>如果能找到一个对象的class文件，我们可以进行反序列化操作，调用<code>ObjectInputStream</code>读取对象的方法：</p>
<ul>
<li><code>public final Object readObject ()</code> : 读取一个对象。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeserializeDemo</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String [] args)</span>   &#123;<br>        <span class="hljs-type">Employee</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;		<br>             <span class="hljs-comment">// 创建反序列化流</span><br>             <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileIn</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;employee.txt&quot;</span>);<br>             <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(fileIn);<br>             <span class="hljs-comment">// 读取一个对象</span><br>             e = (Employee) in.readObject();<br>             <span class="hljs-comment">// 释放资源</span><br>             in.close();<br>             fileIn.close();<br>        &#125;<span class="hljs-keyword">catch</span>(IOException i) &#123;<br>             <span class="hljs-comment">// 捕获其他异常</span><br>             i.printStackTrace();<br>             <span class="hljs-keyword">return</span>;<br>        &#125;<span class="hljs-keyword">catch</span>(ClassNotFoundException c)  &#123;<br>        	<span class="hljs-comment">// 捕获类找不到异常</span><br>             System.out.println(<span class="hljs-string">&quot;Employee class not found&quot;</span>);<br>             c.printStackTrace();<br>             <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">// 无异常,直接打印输出</span><br>        System.out.println(<span class="hljs-string">&quot;Name: &quot;</span> + e.name);	<span class="hljs-comment">// zhangsan</span><br>        System.out.println(<span class="hljs-string">&quot;Address: &quot;</span> + e.address); <span class="hljs-comment">// beiqinglu</span><br>        System.out.println(<span class="hljs-string">&quot;age: &quot;</span> + e.age); <span class="hljs-comment">// 0</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>对于JVM可以反序列化对象，它必须是能够找到class文件的类。如果找不到该类的class文件，则抛出一个 <code>ClassNotFoundException</code> 异常。</strong></p>
<h3 id="反序列化操作2"><a href="#反序列化操作2" class="headerlink" title="反序列化操作2"></a>反序列化操作2</h3><p>另外，当JVM反序列化对象时，能找到class文件，但是class文件在序列化对象之后发生了修改，那么反序列化操作也会失败，抛出一个<code>InvalidClassException</code>异常。发生这个异常的原因如下：</p>
<ol>
<li>该类的序列版本号与从流中读取的类描述符的版本号不匹配</li>
<li>该类包含未知数据类型</li>
<li>该类没有可访问的无参数构造方法</li>
</ol>
<p><code>Serializable</code> 接口给需要序列化的类，提供了一个序列版本号。<code>serialVersionUID</code> 该版本号的目的在于验证序列化的对象和对应类是否版本匹配。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">java</span>.io.Serializable &#123;<br>     <span class="hljs-comment">// 加入序列版本号</span><br>     <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br>     <span class="hljs-keyword">public</span> String name;<br>     <span class="hljs-keyword">public</span> String address;<br>     <span class="hljs-comment">// 添加新的属性 ,重新编译, 可以反序列化,该属性赋为默认值.</span><br>     <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> eid; <br><br>     <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addressCheck</span><span class="hljs-params">()</span> &#123;<br>         System.out.println(<span class="hljs-string">&quot;Address  check : &quot;</span> + name + <span class="hljs-string">&quot; -- &quot;</span> + address);<br>     &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="序列化集合练习"><a href="#序列化集合练习" class="headerlink" title="序列化集合练习"></a>序列化集合练习</h2><ol>
<li>将存有多个自定义对象的集合序列化操作，保存到<code>list.txt</code>文件中。</li>
<li>反序列化<code>list.txt</code> ，并遍历集合，打印对象信息。</li>
</ol>
<h3 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h3><ol>
<li>把若干学生对象 ，保存到集合中。</li>
<li>把集合序列化。</li>
<li>反序列化读取时，只需要读取一次，转换为集合类型。</li>
<li>遍历集合，可以打印所有的学生信息</li>
</ol>
<h3 id="案例代码实现"><a href="#案例代码实现" class="headerlink" title="案例代码实现"></a>案例代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SerTest</span> &#123;<br>	<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>		<span class="hljs-comment">// 创建 学生对象</span><br>		<span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;老王&quot;</span>, <span class="hljs-string">&quot;laow&quot;</span>);<br>		<span class="hljs-type">Student</span> <span class="hljs-variable">student2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;老张&quot;</span>, <span class="hljs-string">&quot;laoz&quot;</span>);<br>		<span class="hljs-type">Student</span> <span class="hljs-variable">student3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;老李&quot;</span>, <span class="hljs-string">&quot;laol&quot;</span>);<br><br>		ArrayList&lt;Student&gt; arrayList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>		arrayList.add(student);<br>		arrayList.add(student2);<br>		arrayList.add(student3);<br>		<span class="hljs-comment">// 序列化操作</span><br>		<span class="hljs-comment">// serializ(arrayList);</span><br>		<br>		<span class="hljs-comment">// 反序列化  </span><br>		<span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span>  <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;list.txt&quot;</span>));<br>		<span class="hljs-comment">// 读取对象,强转为ArrayList类型</span><br>		ArrayList&lt;Student&gt; list  = (ArrayList&lt;Student&gt;)ois.readObject();<br>		<br>      	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; list.size(); i++ )&#123;<br>          	<span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> list.get(i);<br>        	System.out.println(s.getName()+<span class="hljs-string">&quot;--&quot;</span>+ s.getPwd());<br>      	&#125;<br>	&#125;<br><br>	<span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serializ</span><span class="hljs-params">(ArrayList&lt;Student&gt; arrayList)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>		<span class="hljs-comment">// 创建 序列化流 </span><br>		<span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;list.txt&quot;</span>));<br>		<span class="hljs-comment">// 写出对象</span><br>		oos.writeObject(arrayList);<br>		<span class="hljs-comment">// 释放资源</span><br>		oos.close();<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h1 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h1><h2 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h2><p>平时我们在控制台打印输出，是调用<code>print</code>方法和<code>println</code>方法完成的，各位用了这么久的输出语句肯定没想过这两个方法都来自于<code>java.io.PrintStream</code>类吧，哈哈。该类能够方便地打印各种数据类型的值，是一种便捷的输出方式。</p>
<p><strong>打印流分类</strong>：</p>
<blockquote>
<p>字节打印流PrintStream，字符打印流PrintWriter</p>
</blockquote>
<p><strong>打印流特点</strong>：</p>
<blockquote>
<p>A:只操作目的地,不操作数据源<br>B:可以操作任意类型的数据<br>C:如果启用了自动刷新，在调用println()方法的时候，能够换行并刷新<br>D:可以直接操作文件</p>
</blockquote>
<p>这个时候有同学就要问了，哪些流可以直接操作文件呢?答案很简单，<strong>如果该流的构造方法能够同时接收File和String类型的参数，一般都是可以直接操作文件的</strong>！</p>
<p>PrintStream是OutputStream的子类，PrintWriter是Writer的子类，两者处于对等的位置上，所以它们的API是非常相似的。二者区别无非一个是字节打印流，一个是字符打印流。</p>
<h2 id="字节输出打印流PrintStream复制文本文件"><a href="#字节输出打印流PrintStream复制文本文件" class="headerlink" title="字节输出打印流PrintStream复制文本文件"></a>字节输出打印流PrintStream复制文本文件</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> java.<span class="hljs-property">io</span>.<span class="hljs-property">BufferedReader</span>;<br><span class="hljs-keyword">import</span> java.<span class="hljs-property">io</span>.<span class="hljs-property">FileReader</span>;<br><span class="hljs-keyword">import</span> java.<span class="hljs-property">io</span>.<span class="hljs-property">IOException</span>;<br><span class="hljs-keyword">import</span> java.<span class="hljs-property">io</span>.<span class="hljs-property">PrintStream</span>;<br><br>public <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrintStreamDemo</span> &#123;<br>    public <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-title class_">String</span>[] args) throws <span class="hljs-title class_">IOException</span> &#123;<br>        <span class="hljs-title class_">BufferedReader</span> br=<span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;copy.txt&quot;</span>));<br>        <span class="hljs-title class_">PrintStream</span> ps=<span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintStream</span>(<span class="hljs-string">&quot;printcopy.txt&quot;</span>);<br>        <span class="hljs-title class_">String</span> line;<br>        <span class="hljs-keyword">while</span>((line=br.<span class="hljs-title function_">readLine</span>())!=<span class="hljs-literal">null</span>) &#123;<br>            ps.<span class="hljs-title function_">println</span>(line);<br>        &#125;<br>        br.<span class="hljs-title function_">close</span>();<br>        ps.<span class="hljs-title function_">close</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="字符输出打印流PrintWriter复制文本文件"><a href="#字符输出打印流PrintWriter复制文本文件" class="headerlink" title="字符输出打印流PrintWriter复制文本文件"></a>字符输出打印流PrintWriter复制文本文件</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> java.<span class="hljs-property">io</span>.<span class="hljs-property">BufferedReader</span>;<br><span class="hljs-keyword">import</span> java.<span class="hljs-property">io</span>.<span class="hljs-property">FileReader</span>;<br><span class="hljs-keyword">import</span> java.<span class="hljs-property">io</span>.<span class="hljs-property">FileWriter</span>;<br><span class="hljs-keyword">import</span> java.<span class="hljs-property">io</span>.<span class="hljs-property">IOException</span>;<br><span class="hljs-keyword">import</span> java.<span class="hljs-property">io</span>.<span class="hljs-property">PrintWriter</span>;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用打印流复制文本文件</span><br><span class="hljs-comment"> */</span><br>public <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrintWriterDemo</span> &#123;<br>    public <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-title class_">String</span>[] args) throws <span class="hljs-title class_">IOException</span> &#123;<br>        <span class="hljs-title class_">BufferedReader</span> br=<span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;aa.txt&quot;</span>));<br>        <span class="hljs-title class_">PrintWriter</span> pw=<span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintWriter</span>(<span class="hljs-string">&quot;printcopyaa.txt&quot;</span>);<br>        <span class="hljs-title class_">String</span> line;<br>        <span class="hljs-keyword">while</span>((line=br.<span class="hljs-title function_">readLine</span>())!=<span class="hljs-literal">null</span>) &#123;<br>            pw.<span class="hljs-title function_">println</span>(line);<br>        &#125;<br>        br.<span class="hljs-title function_">close</span>();<br>        pw.<span class="hljs-title function_">close</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>WEBbackend</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM</title>
    <url>/2023/05/17/WebBackend/Java/JVM/</url>
    <content><![CDATA[<h2 id="JVM内存结构"><a href="#JVM内存结构" class="headerlink" title="JVM内存结构"></a>JVM内存结构</h2><h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2><p><a href="https://github.com/doocs/jvm/tree/main">https://github.com/doocs/jvm/tree/main</a></p>
]]></content>
      <categories>
        <category>WebBackend/Java</category>
      </categories>
  </entry>
  <entry>
    <title>JVM原理</title>
    <url>/2023/05/17/WebBackend/Java/JVM%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>Java collections (集合)</title>
    <url>/2022/11/28/WebBackend/Java/Java%20collections%20(%E9%9B%86%E5%90%88)/</url>
    <content><![CDATA[<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="声明数组变量"><a href="#声明数组变量" class="headerlink" title="声明数组变量"></a>声明数组变量</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">dataType[] arrayRefVar;   <span class="hljs-comment">// Java风格，首选方法</span><br>dataType arrayRefVar[];   <span class="hljs-comment">// C、C++风格，可以用但不是首选</span><br></code></pre></td></tr></table></figure>

<h3 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">arrayRefVar = <span class="hljs-keyword">new</span> <span class="hljs-title class_">dataType</span>[arraySize];<br><span class="hljs-comment">//1、使用 dataType[arraySize] 创建了一个数组。</span><br><span class="hljs-comment">//2、把新创建的数组的引用赋值给变量 arrayRefVar</span><br></code></pre></td></tr></table></figure>

<p>数组变量声明和创建数组一条语句实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">dataType[] arrayRefVar = <span class="hljs-keyword">new</span> <span class="hljs-title class_">dataType</span>[arraySize];<br><br>dataType[] arrayRefVar = &#123;value0, value1, ..., valuek&#125;;<br></code></pre></td></tr></table></figure>

<h3 id="For-Each循环"><a href="#For-Each循环" class="headerlink" title="For-Each循环"></a>For-Each循环</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(type element: array)<br>&#123;<br>    System.out.println(element);<br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>等价于：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(<span class="hljs-type">type</span> <span class="hljs-variable">element</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; element &lt; array.size(); i++)&#123;<br>    <span class="hljs-type">type</span> <span class="hljs-variable">element2</span> <span class="hljs-operator">=</span> array.get(element);<br>&#125;<br></code></pre></td></tr></table></figure>



<h3 id="多维数组初始化"><a href="#多维数组初始化" class="headerlink" title="多维数组初始化"></a>多维数组初始化</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">type[][] typeName = <span class="hljs-keyword">new</span> <span class="hljs-title class_">type</span>[typeLength1][typeLength2];<br></code></pre></td></tr></table></figure>

<p>type 可以为基本数据类型和复合数据类型，typeLength1 和 typeLength2 必须为正整数，typeLength1 为行数，typeLength2 为列数</p>
<h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221128103642624.png" alt="image-20221128103642624"></p>
<p>List表示一种有序列表，会根据放入元素先后顺序存放，可以包含重复的元素。</p>
<p>List 实现了 Collection 接口，它主要有两个常用的实现类：ArrayList 类和 LinkedList 类</p>
<table>
<thead>
<tr>
<th></th>
<th>ArrayList</th>
<th>LinkedList</th>
</tr>
</thead>
<tbody><tr>
<td>获取指定元素</td>
<td>速度很快</td>
<td>需要从头开始查找元素</td>
</tr>
<tr>
<td>添加元素到末尾</td>
<td>速度很快</td>
<td>速度很快</td>
</tr>
<tr>
<td>在指定位置添加&#x2F;删除</td>
<td>需要移动元素</td>
<td>不需要移动元素</td>
</tr>
<tr>
<td>内存占用</td>
<td>少</td>
<td>较大</td>
</tr>
<tr>
<td>实现方式</td>
<td>动态数组数据结构</td>
<td>链表数据结构</td>
</tr>
</tbody></table>
<p>高运行速度往往是以牺牲空间为代价的，而节省占用空间往往是以牺牲运行速度为代价的，所谓“鱼与<em>熊掌</em>不可得兼”</p>
<h3 id="ArrayList类"><a href="#ArrayList类" class="headerlink" title="ArrayList类"></a>ArrayList类</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//使用ArrayList类创建列表</span><br>        List&lt;Integer&gt; numbers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>        <span class="hljs-comment">//将元素添加到列表</span><br>        numbers.add(<span class="hljs-number">1</span>);<br>        numbers.add(<span class="hljs-number">2</span>);<br>        numbers.add(<span class="hljs-number">3</span>);<br>        System.out.println(<span class="hljs-string">&quot;List: &quot;</span> + numbers);<br><br>        <span class="hljs-comment">//从列表中访问元素</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> numbers.get(<span class="hljs-number">2</span>);<br>        System.out.println(<span class="hljs-string">&quot;访问元素: &quot;</span> + number);<br><br>        <span class="hljs-comment">//从列表中删除元素</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">removedNumber</span> <span class="hljs-operator">=</span> numbers.remove(<span class="hljs-number">1</span>);<br>        System.out.println(<span class="hljs-string">&quot;删除元素: &quot;</span> + removedNumber);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">List: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>访问元素: <span class="hljs-number">3</span><br>删除元素: <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure>

<h3 id="LinkedList类"><a href="#LinkedList类" class="headerlink" title="LinkedList类"></a>LinkedList类</h3><p>LinkedList底层的数据结构是基于双向循环链表，且头结点中不存放数据</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221128114729288.png" alt="image-20221128114729288"></p>
<p>既然是双向链表，那么必定存在一种数据结构——我们可以称之为节点，节点实例保存业务数据，前一个节点的位置信息和后一个节点位置信息，如：</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221128114850541.png" alt="image-20221128114850541"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">List&lt;Integer&gt; numbers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br></code></pre></td></tr></table></figure>

<h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221128151006577.png" alt="image-20221128151006577"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">HashMap&lt;Integer, String&gt; Sites = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Integer, String&gt;();<br></code></pre></td></tr></table></figure>

<h2 id="Properties-属性"><a href="#Properties-属性" class="headerlink" title="Properties(属性)"></a>Properties(属性)</h2><p>Properties 继承于 Hashtable，其作用用来读写以<code>.properties</code>为扩展名的配置文件。每行以<code>key=value</code>表示，以之前的连接池笔记为例：</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221206142119783.png" alt="image-20221206142119783"></p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221206141345604.png" alt="image-20221206141345604"></p>
<p><code>Properties</code>读取配置文件，一共有三步：</p>
<ol>
<li>创建<code>Properties</code>实例；</li>
<li>调用<code>load()</code>读取文件；</li>
<li>调用<code>getProperty()</code>获取配置。</li>
</ol>
<h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>List接口和Set接口都继承了Collection接口。 但是，它们之间存在一些差异。</p>
<ul>
<li>List可以包含重复的元素。但是，Set不能有重复的元素。</li>
<li>List中的元素以某种顺序存储。但是，Set中的元素以组的形式存储，就像数学中的集合一样。</li>
</ul>
<h2 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h2><p>表示先进先出（FIFO：First In First Out）的有序表</p>
<ul>
<li>通过<code>add()</code>&#x2F;<code>offer()</code>方法将元素添加到队尾；</li>
<li>通过<code>remove()</code>&#x2F;<code>poll()</code>从队首获取元素并删除；</li>
<li>通过<code>element()</code>&#x2F;<code>peek()</code>从队首获取元素但不删除。</li>
</ul>
<h2 id="PriorityQueue"><a href="#PriorityQueue" class="headerlink" title="PriorityQueue"></a>PriorityQueue</h2><p><code>PriorityQueue</code>实现了一个优先队列：从队首获取元素时，总是获取优先级最高的元素。</p>
<p><code>PriorityQueue</code>默认按元素比较的顺序排序（必须实现<code>Comparable</code>接口），也可以通过<code>Comparator</code>自定义排序算法（元素就不必实现<code>Comparable</code>接口）</p>
<h2 id="Deque"><a href="#Deque" class="headerlink" title="Deque"></a>Deque</h2><p><code>Deque</code>实现了一个双端队列（Double Ended Queue），它可以：</p>
<ul>
<li>将元素添加到队尾或队首：<code>addLast()</code>&#x2F;<code>offerLast()</code>&#x2F;<code>addFirst()</code>&#x2F;<code>offerFirst()</code>；</li>
<li>从队首／队尾获取元素并删除：<code>removeFirst()</code>&#x2F;<code>pollFirst()</code>&#x2F;<code>removeLast()</code>&#x2F;<code>pollLast()</code>；</li>
<li>从队首／队尾获取元素但不删除：<code>getFirst()</code>&#x2F;<code>peekFirst()</code>&#x2F;<code>getLast()</code>&#x2F;<code>peekLast()</code>；</li>
<li>总是调用<code>xxxFirst()</code>&#x2F;<code>xxxLast()</code>以便与<code>Queue</code>的方法区分开；</li>
<li>避免把<code>null</code>添加到队列</li>
</ul>
<h2 id="Stack-栈"><a href="#Stack-栈" class="headerlink" title="Stack(栈)"></a>Stack(栈)</h2><p>栈（Stack）是一种后进先出（LIFO）的数据结构，操作栈的元素的方法有：</p>
<ul>
<li>把元素压栈：<code>push(E)</code>；</li>
<li>把栈顶的元素“弹出”：<code>pop(E)</code>；</li>
<li>取栈顶元素但不弹出：<code>peek(E)</code>。</li>
</ul>
<p>在Java中，我们用<code>Deque</code>可以实现<code>Stack</code>的功能，注意只调用<code>push()</code>&#x2F;<code>pop()</code>&#x2F;<code>peek()</code>方法，避免调用<code>Deque</code>的其他方法。</p>
<p>最后，不要使用遗留类<code>Stack</code></p>
<h2 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h2><p>Iterator（迭代器）不是一个集合，它是一种用于访问集合的方法，可用于迭代   <code>ArrayList</code>和 <code>HashSet</code>等集合，比如我们之前的增强for就是迭代器简化的书写格式（增强for循环的底层使用了迭代器遍历）</p>
<h2 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h2><p><code>Collections</code>类提供了一组工具方法来方便使用集合类：</p>
<ul>
<li>创建空集合；</li>
<li>创建单元素集合；</li>
<li>创建不可变集合；</li>
<li>排序／洗牌等操作。</li>
</ul>
]]></content>
      <categories>
        <category>WEBbackend</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 项目模块化管理</title>
    <url>/2023/04/04/WebBackend/Java/Java%20%E9%A1%B9%E7%9B%AE%E6%A8%A1%E5%9D%97%E5%8C%96%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h2 id="父项目"><a href="#父项目" class="headerlink" title="父项目"></a>父项目</h2><h2 id="子模块"><a href="#子模块" class="headerlink" title="子模块"></a>子模块</h2><p>Git 子模块是一种特殊的 Git 仓库，它保存在主项目中的一个独立目录中。当您使用 <code>git submodule add</code> 命令添加一个子模块时，Git 会在主项目的 .gitmodules 文件中添加一个条目，用于记录子模块的 Git URL 和保存位置等信息。同时，Git 会将子模块的代码克隆到主项目的子目录中，这个子目录就是您指定的子模块保存位置。</p>
<p>因此，当您执行 Git 命令时，应该在主项目目录中执行命令，而不是在子模块目录或 .git 目录中执行。如果您需要在子模块中执行 Git 命令，可以使用 <code>cd</code> 命令切换到子模块目录中。</p>
<p>例如，如果您需要更新子模块的代码，可以按照以下步骤执行 Git 命令：</p>
<ol>
<li>切换到主项目目录中： <code>cd /path/to/main/project</code></li>
<li>初始化子模块： <code>git submodule init</code></li>
<li>拉取子模块的最新代码： <code>git submodule update</code></li>
<li>切换到子模块目录中： <code>cd path/to/submodule</code></li>
<li>在子模块目录中执行 Git 命令，例如： <code>git pull</code> 更新子模块的代码。</li>
</ol>
<p>请注意，在使用 Git 子模块时，您需要额外注意子模块的版本控制。如果您更新了子模块的代码，您需要提交子模块的变更，并在主项目中提交对子模块的更新。</p>
<h3 id="更新全部子模块"><a href="#更新全部子模块" class="headerlink" title="更新全部子模块"></a>更新全部子模块</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">git submodule update --init --recursive<br></code></pre></td></tr></table></figure>


<h3 id="更新指定子模块"><a href="#更新指定子模块" class="headerlink" title="更新指定子模块"></a>更新指定子模块</h3><p>**更新单个子模块：如果您只想更新一个子模块，可以指定子模块的路径，例如：</p>
<ul>
<li><p><code>git submodule update --init path/to/submodule</code></p>
<p>在这个命令中，<code>path/to/submodule</code> 是要更新的子模块的路径。Git 将拉取该子模块的最新代码，并将其更新为子模块仓库中的默认分支或提交。</p>
</li>
<li><p>更新所有子模块中的特定分支：如果您希望更新所有子模块到一个特定的分支，可以使用 <code>--remote</code> 选项来拉取最新的远程分支代码，例如：</p>
</li>
</ul>
<ol>
<li><p><code>git submodule update --remote</code></p>
<p>在这个命令中，<code>--remote</code> 选项告诉 Git 拉取子模块的最新远程代码，而不是使用子模块仓库中的默认分支或提交。这将使得所有子模块更新到最新的远程分支代码。</p>
</li>
</ol>
<p>请注意，在使用这些命令时，您需要在主项目中运行 Git 命令，并在执行命令前，确保您已经初始化了子模块。否则，命令将无法更新子模块。</p>
<h3 id="父项目启动子项目"><a href="#父项目启动子项目" class="headerlink" title="父项目启动子项目"></a>父项目启动子项目</h3><p>默认情况下，父项目启动时，子项目不会自动启动。子项目和父项目是两个独立的 Java 项目，需要分别进行构建和启动。然而，您可以使用 Maven 或其他构建工具来自动化这个过程，使得父项目能够启动子项目。</p>
<p>如果您使用 Maven 进行构建和依赖管理，可以将子项目作为父项目的子模块，并使用 Maven 的插件来自动化子项目的构建和部署。以下是一些常见的用例：</p>
<ol>
<li>在父项目的 pom.xml 文件中添加子模块依赖：</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>submodule1<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>submodule2<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>  ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span><br></code></pre></td></tr></table></figure>

<pre><code>在这个例子中，我们将子模块 submodule1 和 submodule2 添加为父项目的子模块。这将使 Maven 在构建父项目时，自动构建和打包子模块，并将其包含在父项目的 JAR 或 WAR 文件中。
</code></pre>
<ul>
<li>在父项目的 pom.xml 文件中添加子模块构建插件：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-ejb-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>ejb<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">phase</span>&gt;</span>package<span class="hljs-tag">&lt;/<span class="hljs-name">phase</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>ejb<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    ...<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure>

<pre><code>在这个例子中，我们添加了一个 EJB 插件，用于构建子模块中的 EJB 代码。当父项目构建时，该插件将自动构建子模块，并将生成的 EJB JAR 文件包含在父项目的 WAR 文件中。
</code></pre>
<p>请注意，子模块和父项目是两个独立的 Java 项目，它们需要分别进行构建和部署。如果您使用 Maven 等构建工具，可以使用上述方法来自动化这个过程，以便父项目能够启动子项目。另外，如果您使用 Spring Boot 等框架，您可以使用 Spring Boot 的依赖管理和自动配置功能来管理子项目和父项目之间的依赖关系，并使得父项目能够启动子项目。</p>
<h4 id="详细教程："><a href="#详细教程：" class="headerlink" title="详细教程："></a>详细教程：</h4><p><a href="https://iphysresearch.github.io/blog/post/programing/git/git_submodule/">https://iphysresearch.github.io/blog/post/programing/git/git_submodule/</a></p>
]]></content>
      <categories>
        <category>WEBbackend</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java内部类</title>
    <url>/2022/11/29/WebBackend/Java/Java%E5%86%85%E9%83%A8%E7%B1%BB/</url>
    <content><![CDATA[<h2 id="Java-Inner-Classes-Nested-Classes"><a href="#Java-Inner-Classes-Nested-Classes" class="headerlink" title="Java Inner Classes (Nested Classes)"></a>Java Inner Classes (Nested Classes)</h2><p><strong>内部类</strong>又称<strong>嵌套类</strong>，是在类或接口内部声明的类，内部类可以访问外部类私有数据，但外部类不能访问内部类的成员，隐藏细节和内部结构封装性好</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221129172214926.png" alt="image-20221129172214926"></p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221129173253006.png" alt="image-20221129173253006"></p>
<h2 id="Public-Class"><a href="#Public-Class" class="headerlink" title="Public Class"></a>Public Class</h2><p>一个文件可以写多个类，但只能有一个public类</p>
<h2 id="Member-Inner-class-成员内部类"><a href="#Member-Inner-class-成员内部类" class="headerlink" title="Member Inner class(成员内部类)"></a>Member Inner class(成员内部类)</h2><p>成员内部类 ：</p>
<ul>
<li>静态成员内部类：使用static修饰类；</li>
<li>非静态成员内部类：未用static修饰类，在没有说明是静态成员内部类时，默认成员内部类指的就是非静态成员内部类；</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span> &#123;<br>    <span class="hljs-comment">//code</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span> &#123;<br>        <span class="hljs-comment">//code</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="Local-Inner-Class-局部内部类"><a href="#Local-Inner-Class-局部内部类" class="headerlink" title="Local Inner Class(局部内部类)"></a>Local Inner Class(局部内部类)</h2><p>定义在一个方法或者一个作用域里面的类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">locallnner1</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;  <span class="hljs-comment">//instance variable</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">display</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">class</span> <span class="hljs-title class_">Local</span> &#123;<br>            <span class="hljs-keyword">void</span> <span class="hljs-title function_">msg</span><span class="hljs-params">()</span>&#123;<br>                System.out.println(data);<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">Local</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Local</span>();<br>        l.msg();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>        <span class="hljs-type">locallnner1</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">locallnner1</span>();<br>        obj,display();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="Anonymous-Class-匿名类"><a href="#Anonymous-Class-匿名类" class="headerlink" title="Anonymous Class(匿名类)"></a>Anonymous Class(匿名类)</h2><p><strong>匿名类是没有名字的内部类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Outer</span> <span class="hljs-variable">outer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer</span>(<span class="hljs-string">&quot;Nested&quot;</span>); <span class="hljs-comment">// 实例化一个Outer</span><br>        Outer.<span class="hljs-type">Inner</span> <span class="hljs-variable">inner</span> <span class="hljs-operator">=</span> outer.<span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner</span>(); <span class="hljs-comment">// 实例化一个Inner</span><br>        inner.hello();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    Outer(String name) &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span> &#123;<br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;Hello, &quot;</span> + Outer.<span class="hljs-built_in">this</span>.name);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>WEBbackend</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java泛型</title>
    <url>/2022/11/03/WebBackend/Java/Java%E6%B3%9B%E5%9E%8B/</url>
    <content><![CDATA[<p><strong>java 中泛型标记符：</strong></p>
<ul>
<li><strong>E</strong> - Element (在集合中使用，因为集合中存放的是元素)</li>
<li><strong>T</strong> - Type（Java 类）</li>
<li><strong>K</strong> - Key（键）</li>
<li><strong>V</strong> - Value（值）</li>
<li><strong>N</strong> - Number（数值类型）</li>
<li><strong>？</strong> - 表示不确定的 java 类型</li>
</ul>
]]></content>
      <categories>
        <category>WEBbackend</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java笔记</title>
    <url>/2022/09/16/WebBackend/Java/Java%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Java-程序设计概述"><a href="#Java-程序设计概述" class="headerlink" title="Java 程序设计概述"></a>Java 程序设计概述</h1><h2 id="简单性"><a href="#简单性" class="headerlink" title="简单性"></a>简单性</h2><p>Java语法是C++语法的一个“纯净”版本。这里没有头文件、指针运算（甚至指针语法）、结构、联合、操作符重载、虚基类等。</p>
<p>“简单”的另一个方面是小。Java的目标之一是支持开发能够在小型机器上独立运行的软件。</p>
<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>简单来讲，面向对象设计是一种程序设计技术。它将重点放在数据（即对象）和对象的接口上。在本质上，Java的面向对象能力与C++是一样的。</p>
<h2 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h2><p>Java有一个丰富的例程库，用于处理像HTTP和FTP之类的TCP&#x2F;IP 协议。</p>
<p>Java应用程序能够通过URL打开和访问网络上的对象，其便捷程度就好像访问本地文件一样。</p>
<h2 id="健壮性"><a href="#健壮性" class="headerlink" title="健壮性"></a>健壮性</h2><p>Java的设计目标之一在于使得Java编写的程序具有多方面的可靠性。Java非常强调进行早期的问题检测、后期动态的（运行时）检测，以及消除容易出错的情况……Java与C&#x2F;C++最大的不同在于Java采用的指针模型可以消除重写内存和损坏数据的可能性。</p>
<h2 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h2><p>Java要适用于网络&#x2F;分布式环境。为了实现这个目标，安全性颇受重视。使用Java可以构建防病毒、防篡改的系统。</p>
<h2 id="体系结构中立"><a href="#体系结构中立" class="headerlink" title="体系结构中立"></a>体系结构中立</h2><p>编译器生成一个体系结构中立的目标文件格式，这是一种编译过的代码，只要有Java运行时系统，这些编译后的代码可以在许多处理器上运行。Java编译器通过生成与特定的计算机体系结构无关的字节码指令来实现这一特性。精心设计的字节码不仅可以很容易地在任何机器上解释执行，而且还可以动态的转换成本地机器代码。</p>
<p>解释性虚拟机指令肯定会比全速运行机器指令慢很多。不过，虚拟机有一个选项，可以将执行最频繁的字节码序列转换成机器码，这一过程为即时编译。</p>
<p>Java虚拟器还有一些其他优点。它可以检查指令序列的行为，从而增强其安全性。</p>
<h2 id="可移植性"><a href="#可移植性" class="headerlink" title="可移植性"></a>可移植性</h2><p>与C和C++不同，Java规范中没有“依赖具体实现”的方法。基本数据类型的大小以及有关运算的行为都有明确的说明。</p>
<p>例如，Java中的int永远为32位的整数，而在C&#x2F;C++中，int可能是16位整数、32位整数，也可能是编译器开发商指定的任何其他大小。唯一的限制只是int类型的字节数不能低于short int，而且不能高于long int。在Java 中，数值类型有固定的字节数，这消除了代码移植时一个令人头痛的主要问题。二进制数据以固定的格式进行存储和传输，消除了字节顺序的困扰。字符串则采用标准的Unicode格式存储。</p>
<p>Java库能够很好地支持平台独立性。可以处理文件、正则表达式、XML、日期和时间、数据库、网络连接、线程等，从而不用操心地城操作系统。不仅程序是可以移植的，Java API往往也比原生的API质量更高。</p>
<h2 id="高性能"><a href="#高性能" class="headerlink" title="高性能"></a>高性能</h2><p>尽管对解释后的字节码性能已经比较满意，但在有些场合下还需要更高的性能。</p>
<p>字节码可以（在运行时）动态地转换成对应运行这个程序的特定CPU的机器码。</p>
<h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><p>多线程可以带来更快的交互响应和实时行为。</p>
<p>至今我们非常关注并发性。我们不再追求更快的处理器，而是着眼于获得更多的处理器，而且要让它们一直保持工作。不过，可以看到，大多数编程语言对于这个问题并没有显示出足够的重视。</p>
<p>Java在当时很超前。它是第一个支持并发程序设计的主流语言。当时，多核处理器还很神秘，而Web编程才刚刚起步，处理器要花很长时间等待服务器响应，需要并发程序设计来确保用户界面不会“冻住”。</p>
<h2 id="动态性"><a href="#动态性" class="headerlink" title="动态性"></a>动态性</h2><p>从很多方面来看，Java与C或C++相比更加具有动态性。他能够适应不断发展的环境。库中可以自由地添加新方法和实例变量，二对客户端却没有任何影响。下Java中找出运行时类型信息十分简单。</p>
<p>当需要为正在运行的程序添加代码时，动态性将是一个非常重要的特性。一个很好的例子：从Internet下载代码，然后再浏览器上运行。如果使用C或C++，这确实难度很大，不过Java设计者很清楚动态语言可以很容易地实现运行程序的演进。最终，他们将这一特性引入这个主流程序设计语言中。</p>
<blockquote>
<p>小知识：Java成功地推出后不久，微软就发布了一个叫作J++的产品，它与Java有几乎相同的编程语言和虚拟机。现在，微软不再支持J++，取而代之的时另一个名为C#的语言。C#和Java有很多相似之处，不过在一个不同的虚拟机上运行。</p>
</blockquote>
<h2 id="Java-applet-与-Internet"><a href="#Java-applet-与-Internet" class="headerlink" title="Java applet 与 Internet"></a>Java applet 与 Internet</h2><p>这里的想法很简单：用户从Internet下载Java字节码，并在自己的机器上运行。在网页中运行的Java程序称为applet。而使用applet，只需要一个启用Java的Web浏览器，它会为你执行字节码。不需要安装任何软件。任何时候只要访问包含applet的网页，就会得到程序的最新版本。最重要的是，要感谢虚拟机的安全性，它让我们不必再担心来自而已代码的攻击。</p>
<h2 id="Java发展简史"><a href="#Java发展简史" class="headerlink" title="Java发展简史"></a>Java发展简史</h2><p>Java的历史要追溯到1991年，由Patrick Naughton和James Gosling（一个全能的计算机奇才，Sun公司会士）带领的Sun的工程师小组想要设计一种小型的计算机语言，主要用于像有线电视转换盒这类消费设备。由于这些消费设备的处理能力和内存都很有限，所以语言必须非常小而能够生成非常紧凑的代码。另外，由于不同的厂商会选择不同的中央处理器（CPU），因此很重要的一点是这种语言不应与任何特定的体系结构绑定。这个项目被命名为“Green”。</p>
<p>代码短小，紧凑且与平台无关，这些要求促使开发团队设计出一个可移植的语言，可以为虚拟机生成中间代码。</p>
<p>不过，Sun公司的人都有UNIX的应用背景。因此，所开发的语言以C++为基础，而不是Lisp、Smalltalk或Pascal。不过，就像Gosling在专访中谈道：“毕竟，语言只是实现目标的工具，而不是目标本身。”Gosling把这种语言称为“Oak”。Sun公司的人后台发现，Oak是一种已有的计算机语言的名字，于是，将其改名为Java。</p>
<p>1992年，Green项目发布了它的第一个产品，称之为“*7”。这个产品可以提供非常智能的远程控制。遗憾的是，Sun公司对生产这个产品并不感兴趣，Green项目组的人员必须找出其他的方法来将他们的技术推向市场。然而，仍然没有一家标准消费品电子公司对此感兴趣。于是，Green项目组投标了一个设计有线电视盒的项目，它能提供视频点播等新型有线服务，但他们没能拿到这个合同。</p>
<p>Green项目（这时换了一个新名字——“First Person公司”）在1993年一整年以及1994年的上半年，一直在苦苦寻求买家购买他们的技术。然而，一个也没有找到。1994年First Person公司解散了。</p>
<p>当这一切在Sun公司发生的时候，Internet的万维网也在日渐发展壮大。万维网的关键是浏览器把超文本页面转换到屏幕上。1994年大多数人都在使用Mosaic，这是1993年出自伊利诺伊大学超级计算中心的一个非商业化的Web浏览器。</p>
<p>在接受SunWorld采访的时候，Gosling说，在1994年中期，Java语言的开发者意识到：“我们能够建立一个相当酷的浏览器。在客户&#x2F;服务器主流框架中，浏览器恰好需要我们已经完成的一些工作：体系结构中立、实时、可靠、安全——这些问题在工作站环境并不太重要，所以，我们决定开发浏览器。”</p>
<p>实际的浏览器是由Patrick Naughton 和Jonathan Payne 开发的，并演变为HotJava浏览器。HotJava浏览器采用Java编写，以炫耀Java语言超强的能力。这个浏览器能够在网页中执行内嵌的Java代码。这一“技术证明”在1995年5月23日的SunWorld‘95大会上展示，同时引发了人们延续至今对Java的狂热追逐。</p>
<p>1996年年初，Sun发布了Java第一个版本-Java 1.0，但是Java1.0不能用来真正的应用开发。</p>
<p>1998年发布了Java 1.2版。这个版本早期玩具式的GPU和图形工具包代之以复杂而且可伸缩的工具包。</p>
<p>标准版的1.3和1.4版本对最初的Java2版本做出了增量式的改进，提供了不断扩展的标准类库，提高了性能，当然，还修正了一些bug。在此期间，原先对Java applet和客户端应用的炒作逐渐消退，但Java成为服务器端应用的首选平台。</p>
<p>5.0版是自1.1版以来第一个对Java语言做出重大改进的版本（这一版本原来定为1.5版，在2004年的JavaOne会议之后，版本号直接升至5.0）。经过了多年的研究，这个版本添加了泛型类型（generic type0，大致相当于C++的模板），其挑战性在于添加这一特性而不需要对虚拟机做出任何修改。另外，受到C#的启发，还增加了几个很有用的语言特性：“for each”虚幻、自动装箱和注解。</p>
<p>版本6（没有后缀.0）于2006年年末发布。同样，这个版本没有对语言方面再进行修改，而是做了其他性能改进，并增强了类库。</p>
<p>随着数据中心越来越依赖于商业硬件而不是专用服务器，Sun公司终于沦陷，于2009年被Oracle收购。Java的开发停止了很长一段时间。直到2011年Oracle发布了Java的一个新版本——Java 7，其中只做了一些简单的改进。</p>
<p>2014年，Java8终于发布，再近20年中这个版本发生的改变最大。Java 8 包含了一种“函数式”编程方式，可以很容易得表述并发执行的计算。所有编程语言都必须与时俱进，Java再这方面显示出了非凡的能力。</p>
<p>Java 9的主要特性要一直追溯到2008年。那时，Java平台首席工程师Mark Reinhold开始着力分解这个庞大的Java平台。为此引入了模块，模块是提供一个特定功能的自包含的代码单元。设计和实现一个适用于Java平台的模块系统前后用了11年，而它是否也适用于Java应用和类库还有待观察。Java9于2017年发布，它提供了另外一些吸引人的特性。</p>
<p>从2018年开始，每6个月就会发布一个Java版本，以支持更快地引入新特性。某些版本（如Java 11）设计为长期支持的版本。</p>
<h1 id="Java程序设计"><a href="#Java程序设计" class="headerlink" title="Java程序设计"></a>Java程序设计</h1><h2 id="安装Java开发工具包"><a href="#安装Java开发工具包" class="headerlink" title="安装Java开发工具包"></a>安装Java开发工具包</h2><p>Oracle公司为Linux、Mac OS、Solaris 和 Windows 提供了最新、最完备的Java开发工具包版本。对于很多其他平台，也有处于不同开发阶段的JDK版本，不过，这些版本要相应平台的开发商授权和分发。</p>
<h2 id="下载JDK"><a href="#下载JDK" class="headerlink" title="下载JDK"></a>下载JDK</h2><p>想要下载Java开发工具包，可以访问Oracle公司的网站：<a href="https://www.oracle.com/java/technologies/downloads/">https://www.oracle.com/java/technologies/downloads/</a></p>
<p>华为镜像网站：<a href="https://repo.huaweicloud.com/java/jdk/">https://repo.huaweicloud.com/java/jdk/</a></p>
<p>在得到所需的软件之前，必须弄清楚大量专业术语：</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220917003236028.png" alt="image-20220917003236028"></p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220917003317331.png" alt="image-20220917003317331"></p>
<p>你已经看到，JDK是Java Development Kit 的缩写。有点混乱的是：这个工具包的版本1.2~1.4被称为Java SDK。在某些场合下，还可以看到这个过时的术语。在Java 10之前，还有一个术语是Java运行时环境（JRE），它只包含虚拟机。这不是开发人员想要的，只是专门为不需要编译器的用户提供。</p>
<p>接下来，你会看到大量的Java SE，相对于Java EE和Java ME，Java SE是Java标准版。</p>
<p>Java2这种提法始于1998年。当时Sun公司的销售人员感觉以增加小数点后面数值的方式改变版本号并没有反映出JDK1.2的重大改进。但是，在于发布之后才意识到这个问题，所以他们决定开发工具包的版本号仍然沿用1.2，接下来的版本是1.3、1.4和5.0.不过，Java平台重新被命名为Java 2。因此，就有了Java 2 Standard Edition Software Development Kit（Java 2标准版软件开发包）5.0版，即J2SE SDK 5.0。</p>
<p>幸运的是，2006年版本号得到简化。Java标准版的下一个版本取名为Java SE 6，后来又有了Java SE 7和Java SE 8</p>
<p>不过，“内部”版本号分别是1.6.0、1.7.0和1.8.0.到了Java SE 9，这种混乱终于终结，版本号变为9，以及后来的9.0.1。（为什么没有使用9.0.0作为初始版本呢？为了保留一点兴奋感，版本号规范要求在主版本和第一次安全更新之间的短暂间隔中删除版本号末尾的零。）</p>
<blockquote>
<p>注：在此后面的Java 9表示Java SE 9</p>
</blockquote>
<p>在Java9之前，有32位和64位两个版本的Java开发工具包，现在Oracle公司不再开发32位版本。要使用Oracle JDK，你需要有一个64位的操作系统。</p>
<p>对于Linux，还可以在RPM文件和.tar.gz文件之间做出选择。我们建议使用后者，这样就可以在任何位置直接解压缩这个压缩包。</p>
<p>小结：</p>
<ul>
<li>我们需要的是JDK（Java SE 开发工具包），而不是JRE。</li>
<li>对于Linux，选择 .tar.gz版本</li>
</ul>
<blockquote>
<p>注：取决于具体情况，Oracle公司可能会提供一个捆绑包，其中包含Java开发工具包（JDK）和 NetBeans 集成开发环境。建议现在不要安装任何捆绑包，目前只需要安装Java开发工具包。如果以后打算使用NetBeans，可以再从 <a href="http://netbeans.org/">http://netbeans.org</a> 下载.</p>
</blockquote>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220917013821076.png" alt="image-20220917013821076"></p>
<h2 id="设置JDK"><a href="#设置JDK" class="headerlink" title="设置JDK"></a>设置JDK</h2><p>下载JDK之后，需要安装这个开发工具包并明确要在哪里安装，后面还会需要这个信息。</p>
<ul>
<li><p>再Windows上，启动安装程序，会询问你要在哪里安装JDK。最好不要接收路径名称包含空格的默认位置，如 C:\Program Files\Java\jdk-11.0.x。取出路径名中的Program Files部分就可以了。</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220917014833715.png" alt="image-20220917014833715"></p>
</li>
<li><p>在Linux上，只需要把.tar.gz解压缩到你选择的某个位置，如你的主目录，或者&#x2F;opt。如果从RPM文件安装，则要反复检查是否安装在&#x2F;usr&#x2F;java&#x2F;jdk-11.0.x上。</p>
</li>
</ul>
<p>环境变量配置：</p>
<ul>
<li><p>在Linux中，需要在<del>&#x2F;.bashrc或</del>&#x2F;.bash_profile文件的最后增加这样一行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> PATH=jdk/bin:<span class="hljs-variable">$PATH</span><br></code></pre></td></tr></table></figure>

<p>一定要使用JDK的正确路径，如&#x2F;opt&#x2F;jdk-11.0.4。</p>
</li>
<li><p>在Windows 10中，在搜索栏输入environment（环境），选择编辑账户的环境变量-环境变量。</p>
</li>
<li><p>在User Variables（用户变量）列表中找到并选择一个名为Path的变量。点击Edit（编辑）按钮，再点击New（新建）按钮，添加一个变量，值为jdk\bin目录<img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220917020459628.png" alt="image-20220917020459628"></p>
</li>
<li><p>打开一个终端窗口输入<code>javac --version</code>,来检查配置是否正确：</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220917020829148.png" alt="image-20220917020829148"></p>
</li>
</ul>
<h2 id="安装库源文件和文档"><a href="#安装库源文件和文档" class="headerlink" title="安装库源文件和文档"></a>安装库源文件和文档</h2><p>源文件：</p>
<blockquote>
<p>注：如果含有源文件可以跳过此步骤</p>
</blockquote>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220917022126431.png" alt="image-20220917022126431"></p>
<p>类库源文件在JDK中以压缩文件lib&#x2F;src.zip的形式发布，将其解压缩后才能够访问源代码。只需要完成以下步骤：</p>
<ol>
<li><p>确保JDK已经安装，而且jdk&#x2F;bin目录在可执行路径中。</p>
</li>
<li><p>在主目录中创建一个目录javasrc。如果愿意，可以从一个终端窗口完成这个步骤。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">mkdir javasrc<br></code></pre></td></tr></table></figure>
</li>
<li><p>在jdk&#x2F;lib 目录下找到文件src.zip。</p>
</li>
<li><p>将src.zip 文件解压到javasrc目录。在一个终端窗口中，可以指向以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">cd javasrc<br>jar xvf jdk/lib/src.zip<br>cd ...<br></code></pre></td></tr></table></figure></li>
</ol>
<blockquote>
<p>提示：src.zip文件中包含了所有公共类库的源代码。要想获得更多源代码（例如编译器、虚拟机、原生方法以及私有辅助类），请访问网站 <a href="http://openjdk.java.net/">http://openjdk.java.net</a></p>
</blockquote>
<p>文档：</p>
<p>文档包含在一个压缩文件中，它是一个独立于JDK的压缩文件。可以从网站 <a href="http://www.oracle.com/technetwork/java/javase/downloads">http://www.oracle.com/technetwork/java/javase/downloads</a> 下载这个文档。</p>
<h2 id="使用命令行工具"><a href="#使用命令行工具" class="headerlink" title="使用命令行工具"></a>使用命令行工具</h2><p>第一次安装Java时，需要先检查Java的安装是否正确。另外，通过自己执行这些基本步骤，可以更好得理解开发环境的后台工作。</p>
<p>在掌握了编译和运行Java程序的基本步骤之后，我们就需要使用专业的开发环境，让我们从基础开始吧：</p>
<p>首先介绍比较难的方法：从命令行编译并运行Java程序。</p>
<ol>
<li><p>打开一个终端窗口。</p>
</li>
<li><p>进入 corejava\v1ch02\welcome目录（下载地址：<a href="https://horstmann.com/corejava/corejava11.zip">点我</a>）</p>
</li>
<li><p>输入下面的命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">javac Welcome.java<br>java Welcome<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220917031105650.png" alt="image-20220917031105650"></p>
</li>
</ol>
<p>如果成功输出如上结果，可喜可贺，我们已经编译了并运行了第一个Java程序。</p>
<p>那么，刚才发生了什么？javac程序是一个Java编译器，他将文件Welcome.java编译成Welcome.class。Java程序启动Java虚拟机，虚拟机执行编译器编译到类文件中的字节码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * This program displays a greeting for the reader.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.30 2014-02-27</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Cay Horstmann</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Welcome</span><br>&#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>   &#123;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">greeting</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Welcome to Core Java!&quot;</span>;<br>      System.out.println(greeting);<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; greeting.length(); i++)<br>         System.out.print(<span class="hljs-string">&quot;=&quot;</span>);<br>      System.out.println();<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>在使用集成开发环境的年代，许多程序员对于在终端窗口中运行程序已经很生疏了。常常会出现很多错误，最终导致令人沮丧的结果。</p>
<p>一定要注意一下几点：</p>
<ul>
<li>如果手工输入源程序，一定要注意正确地输入大小写。例如，类名为Welcome,而不是<br>welcome或WELCOME,</li>
<li>编译器需要一个文件名(Welcome.java),而运行程序时，只需要指定类名(Welcome),不要带扩展名，.java或.class.</li>
<li>如果看到诸如Bad command or file name或javac:command not found之类的消息，就<br>要返回去反复检查安装是否有问题，特别是可执行路径的设置。</li>
<li>如果javac报告了一个错误，指出无法找到Welcome.java,就应该检查目录中是否存在这个文件。<ul>
<li>在Linux环境下，检查Welcome.java是否以正确的大写字母开头。</li>
<li>在Windows环境下，使用命令dir,而不要使用图形浏览器工具。有些文本编辑器(特别是Notepad)会在每个文件名后面添加扩展名 .txt。如果使用Notepad编辑<br>Welcome.java,实际上会把它保存Welcome.java.txt。如果采用默认的Windows设置，浏览器会与Notepad“勾结”，隐藏，txt扩展名，因为这属于“已知的文件类型”。对于这种情况，需要使用命令ren重新命名这个文件，或是另存一次，在文件名两边加一对双引号，如：”Welcome.java”。</li>
</ul>
</li>
<li>运行程序之后，如果收到关于java.lang.NoClassDefFoundError的错误消息，就应该仔细地检查出问题的类名。<ul>
<li>如果收到关于welcome(w为小写)的错误消息，就应该重新执行命令：java Welcome(W为大写)。记住，Java区分大小写。</li>
<li>如果收到有关Welcome&#x2F;java的错误信息，这说明你错误地键入了java Welcome.java,应该重新执行命令java Welcome.</li>
</ul>
</li>
<li>如果键入java Welcome,而虚拟机没有找到Welcome类，就应该检查是否有人设置了系统的CLASSPATH环境变量（将这个变量设置为全局并不是提倡的做法，然而，Windows中有些比较差的软件安装程序确实会这样做）。可以像设置PATH环境变量一样设置CLASSPATH,不过这里将删除这个设置。</li>
</ul>
<blockquote>
<p>注：在JDK 11中，单个源文件不再需要javac命令。这个特性是为了支持以”shebang“(#!)行(#!&#x2F;path&#x2F;to&#x2F;java)开头的shell脚本。</p>
</blockquote>
<p>接下来再来尝试一个图像化应用。这个程序是一个简单的图像文件查看器，可以加载和显示一个图像。与前面一样，从命令行编译和运行这个程序。</p>
<ol>
<li><p>打开一个终端窗口</p>
</li>
<li><p>切换到目录corejava\v1ch02\ImageViewer</p>
</li>
<li><p>输入以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">javac ImageViewer.java<br>java ImageViewer<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220917033710946.png" alt="image-20220917033710946"></p>
</li>
</ol>
<p>会弹出一个新的程序窗口（ImageViewer应用）。现在选择File-&gt;Open，找到一个要打开的图像文件。（这个目录下有两个示例文件。）然后会显示这个文件。<img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/GIF%202022-9-17%203-40-35.gif" alt="GIF 2022-9-17 3-40-35"></p>
<p>要关闭这个程序，可以点击标题栏上的关闭按钮，或者从菜单选择File-&gt;Exit。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.awt.*;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> javax.swing.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * A program for viewing images.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.31 2018-04-10</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Cay Horstmann</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ImageViewer</span><br>&#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>   &#123;<br>      EventQueue.invokeLater(() -&gt; &#123;<br>         <span class="hljs-type">var</span> <span class="hljs-variable">frame</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ImageViewerFrame</span>();<br>         frame.setTitle(<span class="hljs-string">&quot;ImageViewer&quot;</span>);<br>         frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<br>         frame.setVisible(<span class="hljs-literal">true</span>);<br>      &#125;);<br>   &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * A frame with a label to show an image.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ImageViewerFrame</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JFrame</span><br>&#123;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">DEFAULT_WIDTH</span> <span class="hljs-operator">=</span> <span class="hljs-number">300</span>;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">DEFAULT_HEIGHT</span> <span class="hljs-operator">=</span> <span class="hljs-number">400</span>;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">ImageViewerFrame</span><span class="hljs-params">()</span><br>   &#123;<br>      setSize(DEFAULT_WIDTH, DEFAULT_HEIGHT);<br><br>      <span class="hljs-comment">// use a label to display the images</span><br>      <span class="hljs-type">var</span> <span class="hljs-variable">label</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JLabel</span>();<br>      add(label);<br><br>      <span class="hljs-comment">// set up the file chooser</span><br>      <span class="hljs-type">var</span> <span class="hljs-variable">chooser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JFileChooser</span>();<br>      chooser.setCurrentDirectory(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;.&quot;</span>));<br><br>      <span class="hljs-comment">// set up the menu bar</span><br>      <span class="hljs-type">var</span> <span class="hljs-variable">menuBar</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JMenuBar</span>();<br>      setJMenuBar(menuBar);<br><br>      <span class="hljs-type">var</span> <span class="hljs-variable">menu</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JMenu</span>(<span class="hljs-string">&quot;File&quot;</span>);<br>      menuBar.add(menu);<br><br>      <span class="hljs-type">var</span> <span class="hljs-variable">openItem</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JMenuItem</span>(<span class="hljs-string">&quot;Open&quot;</span>);<br>      menu.add(openItem);<br>      openItem.addActionListener(event -&gt; &#123;<br>         <span class="hljs-comment">// show file chooser dialog</span><br>         <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> chooser.showOpenDialog(<span class="hljs-literal">null</span>);<br><br>         <span class="hljs-comment">// if file selected, set it as icon of the label</span><br>         <span class="hljs-keyword">if</span> (result == JFileChooser.APPROVE_OPTION)<br>         &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> chooser.getSelectedFile().getPath();<br>            label.setIcon(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ImageIcon</span>(name));<br>         &#125;<br>      &#125;);<br><br>      <span class="hljs-type">var</span> <span class="hljs-variable">exitItem</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JMenuItem</span>(<span class="hljs-string">&quot;Exit&quot;</span>);<br>      menu.add(exitItem);<br>      exitItem.addActionListener(event -&gt; System.exit(<span class="hljs-number">0</span>));<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="使用集成开发工具"><a href="#使用集成开发工具" class="headerlink" title="使用集成开发工具"></a>使用集成开发工具</h2><p>我们已经了解如何从命令行编译和运行一个Java程序。这是一个很有用的排错技能，不过对于大多数日常工作来说，这还是应该使用集成开发环境。这些环境非常强大，非常方便，不使用这些集成环境简直有些不合情理。我们可以免费获得一些很棒的开发环境，如Eclipse、IntelliJ IDEA 和 NetBeans。</p>
<p>Eclipse下载地址：<a href="http://eclipse.org/downloads">http://eclipse.org/downloads</a></p>
<p>下载之后运行安装程序，并选择Eclipse IDE for Java Developers。</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220917034901867.png" alt="image-20220917034901867"></p>
<p>下面是用Eclipse编写程序的一般步骤：</p>
<ol>
<li>启动Eclipse之后，从菜单选择File-&gt;New-&gt;Project</li>
<li>从向导对话框中选择Java Project</li>
<li>点击Next按钮，不选中”Use default location“复选框。点击Browse导航到core-java&#x2F;v1ch02&#x2F;Welcome目录。</li>
<li>点击Finish按钮。这个工程已经创建完成了。</li>
<li>点击工程窗口左边窗格中的三角，直到找到Welcome.java并双击这个文件。现在应该看到一个包含程序代码的窗格</li>
<li>用鼠标右键点击左侧窗格中的工程名（Welcome），选择Run-&gt;Run As-&gt;Java Application。程序输出会显示在控制台窗格中。</li>
</ol>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/GIF%202022-9-17%204-13-36.gif" alt="GIF 2022-9-17 4-13-36"></p>
<p>之前假定这个程序没有输入错误或bug（毕竟，这段代码只有几行）。为了说明问题，假设在代码中不小心出现了录入错误（或者甚至语法错误）。试着将原来的程序修改一下，让它包含一些录入错误，列入，将String的大小写弄错：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">string</span> <span class="hljs-variable">greeting</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Welcome to Core Java!&quot;</span>;<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220917042456384.png" alt="image-20220917042456384"></p>
<p>注意string下面的波浪线。点击源代码下标签中的Problems，展开小三角，直到看到一个错误消息指出有一个未知的string类型。点击这个错误消息。光标会移到编辑窗格中相应的代码行，可以在这里纠正错误。利用这个特性可以快速地修正错误。</p>
<blockquote>
<p>提示：通常，Eclipse错误报告会伴有一个灯泡图标。点击这个图标可以得到解决这个错误的建议方案列表。</p>
</blockquote>
<h2 id="JShell"><a href="#JShell" class="headerlink" title="JShell"></a>JShell</h2><p>Java9进入了另一种使用Java的方式。JShell程序提供一个“读取-计算-打印循环”（Read-Evaluate-Print Loop。REPL）。键入一个Java表达式；JShell会评估你的输入，打印结果，等待你的下一个输入。</p>
<p>要启动JShell，只需要在终端窗口中键入jshell</p>
<p>JShell首先会向你显示一个问候语，后面是一个提示符：</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220918232038432.png" alt="image-20220918232038432"></p>
<p>现在键入一个表达式，如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">&quot;Core Java&quot;.length()<br></code></pre></td></tr></table></figure>

<p>JShell会回应一个结果——在这里就是”Core Java“中的字符个数。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$</span><span class="language-bash">1 ==&gt; 9</span><br></code></pre></td></tr></table></figure>

<p>注意，我们并没有输入System.out.println。JShell会自动打印你输入的每一个表达式的值。输出中的$1表示这个结果可以用来的计算。例如，如果你输入：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">5 * $1 - 3<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220918233146620.png" alt="image-20220918233146620"></p>
<p>就会得到：</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220918235210457.png" alt="image-20220918235210457"></p>
<p>如果需要多次使用一个变量，可以给它们指定一个容易记忆的名字。不过，一定要遵循Java语法，需要指定类型和变量名。例如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">jshell&gt; </span><span class="language-bash">int answer = 6 * 7</span><br>answer ==&gt; 42<br></code></pre></td></tr></table></figure>

<p>另一个有用的特性是”tab补全“。如果输入：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">Math.<br></code></pre></td></tr></table></figure>

<p>然后再按一次Tab键。你就会得到可以在generator变量上调用的所有方法的一个列表：</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220918234857491.png" alt="image-20220918234857491"></p>
<p>现在输入l，然后再按一次Tab键。方法名会补全位log，现在你会得到一个比较小的列表：</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220918235118413.png" alt="image-20220918235118413"></p>
<p>接下来可以手动填入其余的部分：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">jshell&gt; </span><span class="language-bash">Math.log10(0.001)</span><br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220919002342773.png" alt="image-20220919002342773"></p>
<p>要重复运行一个命令，可以连续按↑键，知道看到想要重新运行或编辑的命令行。可以用←和→键移动命令行中的光标位置，然后添加或删除字符。编辑完命令后再按回车。例如，把命令行中的0.001替换为1000，然后按回车：</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220919003005176.png" alt="image-20220919003005176"></p>
<p>JShell会让Java语言和类库的学习变得轻松而有趣，它不要求你启动一个庞大的开发环境，不会让你再为public static void main而困扰。</p>
<h1 id="Java的基本程序设计结构"><a href="#Java的基本程序设计结构" class="headerlink" title="Java的基本程序设计结构"></a>Java的基本程序设计结构</h1><h2 id="一个简单的Java应用程序"><a href="#一个简单的Java应用程序" class="headerlink" title="一个简单的Java应用程序"></a>一个简单的Java应用程序</h2><p>下面看一个最简单的Java应用程序，它只发送一条消息到控制台窗口中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FirstSample</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>  &#123;<br>    System.out.println(<span class="hljs-string">&quot;We will not use &#x27;Hello,World!&#x27;&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220919010043654.png" alt="image-20220919010043654"></p>
<blockquote>
<p>注：出于个人习惯，本人用的是IntelliJ IDEA，Eclipse IDE实在用不惯。</p>
</blockquote>
<p>这个程序很简单，所有的Java应用程序都具有这种结构，因此还是值得花一些时间来研究的。首先，Java区分大小写。如果出现了大小写拼写错误（例如，将main拼写成Main），程序将无法运行。</p>
<p>下面逐行地查看这段源代码。关键字public称为访问修饰符（access modifier），这些修饰符用于控制程序的其他部分对这段代码的访问级别。关键字class表明Java程序中的全部内容的包括在类中。类是构建所有Java应用程序和applet的构建块。Java应用程序中的全部内容都必须放置在类中。</p>
<p>关键字class后面紧跟类名。Java中定义类名的规则很宽松。名字必须以字母开头，后面可以跟字母和数字的任意组合。长度基本上没有限制。但是不能用Java保留字（例如，public或class）作为类名。</p>
<p>类名是以大写字母开头的名词。如果名字是由多个单词组成，每个单词的第一个字母都应该大写（驼峰命名法）。</p>
<p>源代码的文件必须与公共类的名字相同，并用.java作为扩展名。因此，存储这段源代码的文件必须为FirstSample.java。</p>
<p>如果正确的命名了这个文件，并且源代码没有任何录入错误，在编译这段源代码之后就会得到一个包含这个类字节码的文件。Java编译器将字节码文件自动地命名为FirstSample.class，并存储在源文件的同一个目录下。</p>
<p>Java虚拟机总是从指定类中的main方法的代码开始执行（这里的”方法“就是Java中的”函数“），因此为了代码能够执行，在类的源文件中必须包含一个main方法。当然，也可以将用户自定义的方法添加到类中，并将main方法中调用这些方法。</p>
<p>需要注意源代码中的大括号{}.在Java中，像在C&#x2F;C++中一样，用大括号划分程序的各个部分（通常称为块）。Java中任何方法的代码都用”{“ 开始，用 ”}“结束。</p>
<p>大括号的使用风格曾经引发过许多无意义的争论。我们的习惯是把匹配的大括号上下对齐。不过，由于空白符会被Java编译器忽略，可以选用自己喜欢的大括号风格。</p>
<p>我们暂时不用理睬关键字static void，而仅把它们当作编译Java 应用程序必须要的部分就行了。现在只需要机制：每个Java应用程序都必须有一个main方法，其声明格式如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClassName</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>    &#123;<br>        program statements<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>接下来研究以下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">&#123;<br>    System.out.printlun(<span class="hljs-string">&quot;We Will not use &#x27;Hello, World!&#x27;&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>

<p>一对大括号表示方法体的开始与结束，在这个方法中只包含一条语句。与大多数程序设计语言一样，可以将Java语句看成是语言中的句子。在Java中，每个句子必须用分号结束。特别需要说明，回车不是语句结束标志，因此，如果需要将一条语句写在多行上。</p>
<p>在上面这个main方法体中只包含了一条语句，其功能是将一个文本行输出到控制台上。</p>
<p>在这里，我们使用System.out对象并调用了它println方法。注意，点好（.）用于调用方法Java使用的通用语法是</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">object.method(parameters)<br></code></pre></td></tr></table></figure>

<p>这等价于函数调用。</p>
<p>在这个示例中，调用了println方法并传递给它一个字符串参数。这个方法将传递给它的字符串参数显示在控制台上。然后，终止是这个输出行，使得每次调用println都会在新的一行上显示输出。需要注意一点，Java与C&#x2F;C++一样，都采用双引号界定字符串。</p>
<p>与其他程序设计语言的函数一样，Java中的方法可以没有参数，也可以有一个或者多个参数（实参）。即使一个方法没有参数，也需要需用空括号。例如，不带参数的println方法只打印一个空行。使用下面的语句来调用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">System.out.println();<br></code></pre></td></tr></table></figure>

<blockquote>
<p>注：System.out 还有一个print方法，它不在输出之后增加换行符。例如，Ststem.out.print(“Hello”)打印”Hello”之后不换行，后面的输出紧跟在字母”o”之后。</p>
</blockquote>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>与大多数程序设计语言一样，Java中的注释也不会出现在可执行程序中。因此，可以在源程序中根据需要添加任意多的注释，而不必担心可执行代码会膨胀。在Java中，有3种标记注释的方式，最常用的方式是使用&#x2F;&#x2F;，其注释内容从&#x2F;&#x2F;开始到本行结尾。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;We will not use &#x27;Hello, World!&#x27;&quot;</span>); <span class="hljs-comment">//is this too cute?</span><br></code></pre></td></tr></table></figure>

<p>当需要更长的注释时，既可以在每行的注释前面标记&#x2F;&#x2F;。也可以使用&#x2F;* 和 *&#x2F;注释界定符将一段比较长的注释括起来。</p>
<p>最后，第3种注释可以用来自动地生成文档。这种注释以<code>/**</code> 开始，以<code>*/</code>结束。</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220920154243355.png" alt="image-20220920154243355"></p>
<blockquote>
<p>注：注释不能嵌套</p>
</blockquote>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>Java是一种强类型语言。这就意味着必须为每一个变量声明一种类型。在Java中，一共有8种基本类型（primitive type），其中有4种整数、2种浮点类型、1种字符类型char（用于表示Unicode编码的代码单元）和1种用于表示真值的boolean类型。</p>
<h3 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h3><p>整数用于表示没有小数的数值，允许是负数。Java提供了4种整型。</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220920230124192.png" alt="image-20220920230124192"></p>
<p>在通常情况下，int类型最常用。但如果想要表示整个地球的居住人口。就需要使用long类型了。byte和short类型主要用于特定的应用场合，例如，底层文件处理或者存储空间很宝贵时的大数组。</p>
<p>在Java中，整型的范围与运行Java代码的机器无关。这就解决了软件从一个平台移植到另一个平台，或者在同一个平台中的不同操作系统直接进行移植给程序员带来的诸多问题。与此相反，C和C++程序会针对不同的处理器选择最为高效的整数，这样就会造成一个32位处理器上运行很好的C程序在16位系统上运行时却发生整数溢出。由于Java程序必须保证在所有机器上都能得到相同的运行结果，所以各种数据类型的取值范围必须固定。</p>
<p>长整数数值有一个后缀L或l（如 4000000000L）。十六进制数值有一个前缀0x或0</p>
<p>X（如0xCAFE）。八进制有一个前缀0，例如，010对应十进制中的8。很显然，八进制表示法比较容易混淆，所以建议做好不要使用八进制常数。</p>
<p>从Java7开始，加上前缀0b或0B就可以写二进制数。列入，0b1001就是9.另外，同样是从Java7开始，还可以为数字字面量加下划线，如用1_000_000（或0B1111_0100_0010_0100_0000）表示100万。这些下划线只是为了让人更易读。Java编译器会去除这些下划线。</p>
<h3 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h3><p>浮点类型用于表示有小数部分的数值。在Java中有两种浮点类型。</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220921092809896.png" alt="image-20220921092809896"></p>
<p>double表示这种类型的数值精度是float类型的两倍（双精度数值）。</p>
<p>float类型的数值有一个后缀F或f（例如，3.14F）。没有后缀F的浮点数值（如3.14）默认为double类型。当然，也可以在浮点数值后面添加后缀D或d（例如，3.14D）。</p>
<p>所有的浮点数值计算都遵循IEEE 754规范。具体来说，下面是用于表示溢出和出错情况的三个特殊的浮点数值：</p>
<ul>
<li>正无穷大</li>
<li>负无穷大</li>
<li>NaN（不是一个数字）</li>
</ul>
<p>例如，一个正整数除以0的结果为正无穷大。计算0&#x2F;0或者负数的平方根结果为NaN。</p>
<h3 id="char类型"><a href="#char类型" class="headerlink" title="char类型"></a>char类型</h3><p>char类型原本用于表示单个字符。不过，现在情况已经有所变化。如今，有些Unicode字符可以用一个char值描述，另外一些Unicode字符则需要两个char值。</p>
<p>char类型的字面量值要用单引号括起来。例如：“A”是编码值为65的字符常量。它与“A”不同，“A”是包含一个字符A的字符串。</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220921141144002.png" alt="image-20220921141144002"></p>
<p>在Java中，char类型描述了UTF-16编码中的一个代码单元。</p>
<p>强烈建议不要在程序中使用char类型，除非确实处理UTF-16代码单元，最好将字符串作为抽象数据类型处理。</p>
<h3 id="boolean-类型"><a href="#boolean-类型" class="headerlink" title="boolean 类型"></a>boolean 类型</h3><p>boolean（布尔）类型有两个值：false和true，用来判定逻辑条件。整型值和布尔值之间不能进行相互转换。</p>
<h2 id="变量与常量"><a href="#变量与常量" class="headerlink" title="变量与常量"></a>变量与常量</h2><p>与所有程序设计语言一样，Java也使用变量存储值。常量就是不变的变量。</p>
<h3 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h3><p>在Java中，每个变量都有一个类型（type）。在声明变量时，先指定变量的类型，然后是变量名。实例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">double</span> salary;<br><span class="hljs-type">int</span> varationDays;<br><span class="hljs-type">long</span> earthPopulation;<br><span class="hljs-type">boolean</span> done;<br></code></pre></td></tr></table></figure>

<p>变量名必须是一个以字母开头并由字母或数字构成的序列。字母包括‘A’<del>‘Z’、‘a’</del>‘z’、‘_’、‘$’,或在某种语言中表示字母的任何Unicode字符。</p>
<p>不能使用Java保留字作为变量名。在Java9中，单下划线_不能作为变量名；</p>
<p>可以在一行中声明多个变量：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> i,j;  <span class="hljs-comment">//both are integers</span><br></code></pre></td></tr></table></figure>

<p>不过，不提倡使用这种风格。逐一声明每一个变量可以提高程序的可读性。</p>
<h3 id="变量初始化"><a href="#变量初始化" class="headerlink" title="变量初始化"></a>变量初始化</h3><p>声明一个变量之后，必须用赋值语句对变量进行显式初始化，千万不要使用未初始化的变量的值。例如，Java编译器认为下面的语句序列是错误的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs Java"><span class="hljs-type">int</span> vacationDays;<br>System.out.println(vacationDays); <span class="hljs-comment">//ERROR--variable not initialized</span><br></code></pre></td></tr></table></figure>

<p>想要对一个已经声明过的变量进行赋值，就需要将变量名放在等号（&#x3D;）左侧，再把一个适当取值的Java表达式放在等号右侧。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> vacationDays;<br>vacationDays = <span class="hljs-number">12</span>;<br></code></pre></td></tr></table></figure>

<p>也可以将变量的声明和初始化放在同一行中。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">vacationDays</span> <span class="hljs-operator">=</span> <span class="hljs-number">12</span>;<br></code></pre></td></tr></table></figure>

<p>在Java中，变量的声明尽可能地靠近变量第一次使用的地方，这是一种良好的程序编写风格。</p>
<blockquote>
<p>注：从Java10开始，对于局部变量，如果可以从变量初始值推断出它的类型，就不再需要声明类型。只需要使用关键字var而无需指定类型：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">var</span> <span class="hljs-variable">vacationDays</span> <span class="hljs-operator">=</span> <span class="hljs-number">12</span>;<span class="hljs-comment">//vacationDays is an int</span><br><span class="hljs-type">var</span> <span class="hljs-variable">greeting</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello&quot;</span>; <span class="hljs-comment">//greeting is a String</span><br></code></pre></td></tr></table></figure>
</blockquote>
<h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>在Java中，利用关键字final指示常量。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Constants</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> <span class="hljs-variable">CM_PER_INCH</span> <span class="hljs-operator">=</span> <span class="hljs-number">2.54</span>;<br>    <span class="hljs-type">double</span> <span class="hljs-variable">paperWidth</span> <span class="hljs-operator">=</span> <span class="hljs-number">8.5</span>;<br>    <span class="hljs-type">double</span> <span class="hljs-variable">paperHeight</span> <span class="hljs-operator">=</span> <span class="hljs-number">11</span>;<br>    System.out.println(<span class="hljs-string">&quot;Paper size in centimeters: &quot;</span> + paperWidth * CM_PER_INCH + <span class="hljs-string">&quot;by&quot;</span> + paperHeight * CM_PER_INCH);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>关键字final表示这个变量只能被赋值一次。一旦被赋值之后，就不能够再更改了。习惯上，常量名使用全大写。</p>
<p><strong>类常量</strong>（class constant）可以在一个类的多个方法使用。使用关键字static final设置一个类常量：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Constants2</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> <span class="hljs-variable">CM_PER_INCH</span> <span class="hljs-operator">=</span> <span class="hljs-number">2.54</span>;<span class="hljs-comment">//类常量</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>  &#123;<br>    <span class="hljs-type">double</span> <span class="hljs-variable">paperWidth</span> <span class="hljs-operator">=</span> <span class="hljs-number">8.5</span>;<br>    <span class="hljs-type">double</span> <span class="hljs-variable">paperHeight</span> <span class="hljs-operator">=</span> <span class="hljs-number">11</span>;<br>    System.out.println(<span class="hljs-string">&quot;Paper size in Centimeters:&quot;</span> + paperWidth * CM_PER_INCH + <span class="hljs-string">&quot;by&quot;</span> + paperHeight * CM_PER_INCH);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>类常量的定义位于main方法的外部。因此，同一个类的其他方法中也可以使用这个常量。</p>
<h3 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h3><p>枚举类型包括有限个命名的值。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Size</span> &#123; SMALL,MEDIUM,LARGE,EXTRA_LARGE &#125;;<br></code></pre></td></tr></table></figure>

<p>声明这种类型变量：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">Size</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> Size.MEDIUM;<br></code></pre></td></tr></table></figure>

<p>Size类型的变量只能储存这个类型声明中给定的某个枚举值，或者特殊值null；</p>
<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>运算符用于连接值。Java提供了一组丰富的算数和逻辑运算符以及数学函数。</p>
<h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3><p>在Java中，使用算数运算符 +、-、*、&#x2F;表示加、减、乘、除运算.当参与&#x2F;运算的两个操作数都是整数时，表示整数除法：否则，表示浮点除法。整数的求余操作（有时候称为取模）用%表示。例如，15&#x2F;2等于7，15%2等于1，15.0&#x2F;2等于7.5。</p>
<p>需要注意，整数被除0会产生一个异常，而浮点数被0除将会得到无穷大或NaN的结果。</p>
<h3 id="数学函数与常量"><a href="#数学函数与常量" class="headerlink" title="数学函数与常量"></a>数学函数与常量</h3><p>在Math类中，包含了各种各样的数学函数。</p>
<p>想要计算一个数值的平方根，可以使用sqrt方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">double</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>;<br><span class="hljs-type">double</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> Math.sqrt(x);<br>System.out.println(y);  <span class="hljs-comment">//prints 2.0</span><br></code></pre></td></tr></table></figure>

<blockquote>
<p>注：println方法处理System.out对象。Math类中的sqrt方法并不处理任何对象，这种方法被称为<strong>静态</strong>方法。</p>
</blockquote>
<p>在Java中，没有幂运算，因此需要借助于Math类的pow方法。以下语句：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs JAVA"><span class="hljs-type">double</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> Math.pow(x,a);<br></code></pre></td></tr></table></figure>

<p>将y的值设置为x的a次幂（xᵃ）。pow方法有两个double类型的参数，其返回结果也为double类型。</p>
<p>Math类提供了一些常用的三角函数：</p>
<ul>
<li>Math.sin</li>
<li>Math.cos</li>
<li>Math.tan</li>
<li>Math.atan</li>
<li>Math.atan2</li>
</ul>
<p>还有指数函数以及它的反函数-自然对数以及以10为底的对数：</p>
<ul>
<li>Math.exp</li>
<li>Math.log</li>
<li>Math.log10</li>
</ul>
<p>最后，Java还提供了两个用于表示Π和e常量的最接近的近似值：</p>
<ul>
<li>Math.PI</li>
<li>Math.E</li>
</ul>
<h3 id="数值类型之间的转换"><a href="#数值类型之间的转换" class="headerlink" title="数值类型之间的转换"></a>数值类型之间的转换</h3><p>我们经常需要将一种数值类型转换为另一种数值类型。</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220922151739808.png" alt="image-20220922151739808"></p>
<p>实线箭头表示无信息丢失的转换，虚线箭头，表示可能有精度损失的转换。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">123456789</span>;<br><span class="hljs-type">float</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> n; <span class="hljs-comment">//f is 1.23456792E8</span><br></code></pre></td></tr></table></figure>

<h3 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h3><p>有时候可能损失信息的转换通过强制类型转换（cast）来完成。</p>
<p>强制类型转换的语法格式是在圆括号中给出想要转换的目标类型，后面紧跟待转换的变量名。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">double</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">9.997</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">nx</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>)x; <span class="hljs-comment">//nx is 9</span><br></code></pre></td></tr></table></figure>

<p>这样，变量nx的值为9，因为强制类型转换通过截断小数部分将浮点值转换为整型。</p>
<p>如果想对浮点数进行舍入运算，以便获得到最接近的整数，那就需要用<code>Math.round</code>方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">double</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">9.997</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">nx</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>)Math.round(x); <span class="hljs-comment">//nx is 10</span><br></code></pre></td></tr></table></figure>

<p>当调用round的时候，仍需要使用强制类型转换（int）。其原因是round方法返回的结果为long类型，由于存在信息丢失的可能性，所以只有通过使用显式的强制类型转换才能够将long类型转换成int类型。</p>
<h3 id="综合赋值和运算符"><a href="#综合赋值和运算符" class="headerlink" title="综合赋值和运算符"></a>综合赋值和运算符</h3><p>可以在赋值中使用二元运算符，这是一种很方便的简写形式。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">x += <span class="hljs-number">4</span>;<br></code></pre></td></tr></table></figure>

<p>等价于：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">x = x + <span class="hljs-number">4</span>;<br></code></pre></td></tr></table></figure>

<p> 一般来说，要把运算符放在&#x3D;号左边，如*&#x3D;或%&#x3D;.</p>
<blockquote>
<p>注：如果运算符得到一个值，其类型与左侧操作数的类型不同，就会发生强制类型转换。例如，如果x是一个int，则以下语句</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">x += <span class="hljs-number">3.5</span>;<br></code></pre></td></tr></table></figure>

<p>是合法的，将把x设置为(int)(x+3.5)。</p>
</blockquote>
<h3 id="自增与自减运算符"><a href="#自增与自减运算符" class="headerlink" title="自增与自减运算符"></a>自增与自减运算符</h3><p>当然，程序员都知道加1、减1是数值变量最常见的操作。在Java中，借鉴了C和C++中的做法，也提供了自增、自减运算符：n++将变量n的当前值加1，n–则将n的值减1.例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">12</span>;<br>n++;<br></code></pre></td></tr></table></figure>

<p>将n的值改为13。由于这些运算符改变的是变量的值，所以它们不能应用于数值本身。例如，4++就不是一个合法的语句。</p>
<p>实际上，这些运算符有两种形式；除了上面的”后缀“形式，还有一种”前缀“形式：++n。后缀和前缀形式都会使变量值加1或减1。</p>
<p>前缀形式会先完成加1；而后缀形式会使用变量原来的值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">7</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">7</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span> * ++m; <span class="hljs-comment">//now a is 16,m is 8</span><br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span> * m++; <span class="hljs-comment">//new b is 14,m is 8</span><br></code></pre></td></tr></table></figure>

<p>建议不要在表达式中使用++，因为这样的代码很容易让人困惑，而且会带来烦人的bug。</p>
<h3 id="关系和boolean运算符"><a href="#关系和boolean运算符" class="headerlink" title="关系和boolean运算符"></a>关系和boolean运算符</h3><p>Java包含丰富的关系运算符。要检测相等性，可以使用两个等号 <code>==</code>。例如，<code>3 == 7</code>的值为false。</p>
<p>另外可以使用<code>!=</code>检测不相等。例如，<code>3 != 7</code>的值为true。</p>
<p>最后，还有经常使用的<code>&lt;</code>、<code>&gt;</code>、<code>&lt;=</code>和<code>&gt;=</code>运算符。</p>
<p>Java沿用了C++的做法，使用<code>&amp;&amp;</code>表示逻辑”与”运算符，使用<code>||</code>表示逻辑”或”运算符。从<code>!=</code>运算符可以想到，感叹号<code>!</code>就是逻辑非运算符。<code>&amp;&amp;</code>和<code>||</code>运算符是按照”短路”方式来求值的：如果第一个操作数已经能够确定表达式的值，第二个操作数就不必计算了。如果用<code>&amp;&amp;</code>运算符合并两个表达式，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">expression1 &amp;&amp; expression2 <span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure>

<p>而且已经计算得到第一个表达式的真值为false，那么结果就不可能为true。因此，第二个表达式就不必计算了。可以利用这一点来避免错误。例如，在下面的表达式中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">x != <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-number">1</span> / x &gt; x + y <span class="hljs-comment">//no division by 0</span><br></code></pre></td></tr></table></figure>

<p>如果x等于0，那么第二部分就不会计算。因此，如果x为0，也就不会计算1&#x2F;x，除以0的错误就不会出现。</p>
<p>类似地，如果第一个表达式为true，expression1 || expressopn2的值就自动为 true，而无需计算第二个表达式。</p>
<p>最后一点，Java支持三元操作符<code>?:</code>，这个操作符有时很有用。如果条件为true,下面的表达式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">condition ? expression1 : expression2<br></code></pre></td></tr></table></figure>

<p>就为第一个表达式的值，否则计算为第二个表达式的值，例如，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">x &lt; y ? x : y<br></code></pre></td></tr></table></figure>

<p>会返回x和y中比较小的一个。</p>
<h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><p>处理整型类型时，可以直接对组成整数的各个位完成操作。这意味着可以使用掩码技术得到整数中的各个位，位运算符包括：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">&amp;(<span class="hljs-string">&quot;and&quot;</span>) |(<span class="hljs-string">&quot;or&quot;</span>) ^(<span class="hljs-string">&quot;xor&quot;</span>) ~(<span class="hljs-string">&quot;not&quot;</span>)<br></code></pre></td></tr></table></figure>

<p>这些运算符按位模式处理。例如，如果n是一个整数变量，而且用二进制表示的n从右边数第4位为1，则：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">fourthBitFromRight</span> <span class="hljs-operator">=</span> (n &amp; <span class="hljs-number">0b1000</span>) /<span class="hljs-number">0b1000</span>;<br></code></pre></td></tr></table></figure>

<p>会返回1，否则返回0，利用&amp;结合使用适当的2的幂，可以把其他位掩掉，而只留下其中的某一位。</p>
<p>另外，还有<code>&gt;&gt;</code>和<code>&lt;&lt;</code>运算符可以将位模式左移或右移。需要建立位模式来完成掩码时，这两个运算符会很方便：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">fourthBitFromRight</span> <span class="hljs-operator">=</span> (n &amp; (<span class="hljs-number">1</span> &lt;&lt;<span class="hljs-number">3</span>)) &gt;&gt; <span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure>

<p>最后，&gt;&gt;&gt;运算符会用0填充高位，这与&gt;&gt;不同，它会用符号位填充高位。不存在&lt;&lt;&lt;运算符。</p>
<blockquote>
<p>警告：位移运算符的右操作数要完成模32的运算（除非左操作数时long类型，在这种情况下需要对右操作数模64）。例如,1&lt;&lt;35的值等同于1&lt;&lt;3或8。</p>
</blockquote>
<h3 id="括号与运算符级别"><a href="#括号与运算符级别" class="headerlink" title="括号与运算符级别"></a>括号与运算符级别</h3><p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220923093347065.png" alt="image-20220923093347065"></p>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>从概念上讲，Java字符串就是Unicode字符序列。例如，字符串”Java\u2122“由5Unicode字符J、a、v、a和™组成。Java没有内置的字符串类型。而是在标准Java类库提供了一个预定义类，很自然地叫做String。每个用双引号括起来的字符串都是String类一个实例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>; <span class="hljs-comment">// an empty string</span><br><span class="hljs-type">String</span> <span class="hljs-variable">greeting</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello&quot;</span>;<br></code></pre></td></tr></table></figure>

<h3 id="子串"><a href="#子串" class="headerlink" title="子串"></a>子串</h3><p>String类的substring方法可以从一个较大的字符串提取出一个子串。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">greeting</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> greeting.substring(<span class="hljs-number">0</span>,<span class="hljs-number">3</span>); <br></code></pre></td></tr></table></figure>

<p>创建一个由字符”Hel“组成的字符串。</p>
<blockquote>
<p>注：类似于C和C++，Java字符串中的代码单元和代码点从0开始计数。</p>
</blockquote>
<h3 id="拼接"><a href="#拼接" class="headerlink" title="拼接"></a>拼接</h3><p>与绝大多数程序设计语言一样，Java语言允许使用+号连接（拼接）两个字符串。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">expletive</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Expletive&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">PG13</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;deleted&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> expletive + PG13; <span class="hljs-comment">//&quot;Expletivedeleted&quot;</span><br></code></pre></td></tr></table></figure>

<p>当将一个字符串与一个非字符串的值进行拼接时，后者会转换成字符串。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">13</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">rating</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;PG&quot;</span> + age; <span class="hljs-comment">//&quot;PG13&quot;</span><br></code></pre></td></tr></table></figure>

<p>如果需要把多个字符串放在一起，用一个界定符分割，可以使用静态join方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">all</span> <span class="hljs-operator">=</span> String.join(<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;This&quot;</span>, <span class="hljs-string">&quot;is&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;String&quot;</span>);<br>	<span class="hljs-comment">//message returned is: &quot;This-is-a-String&quot;</span><br></code></pre></td></tr></table></figure>

<p>在Java 11中，还提供了一个repeat方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">repeated</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Java&quot;</span>.repeat(<span class="hljs-number">3</span>); <span class="hljs-comment">//repeated is ”JavaJavaJava“</span><br></code></pre></td></tr></table></figure>

<h3 id="不可变字符串"><a href="#不可变字符串" class="headerlink" title="不可变字符串"></a>不可变字符串</h3><p>String类没有提供修改字符串中某个字符的方法。如果希望将greeting的内容修改为”Hello“，可以提取想要保留的字串，再与希望替换的字符拼接：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">greeting</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Help!&quot;</span><br>greeting = greeting.substrung(<span class="hljs-number">0</span>,<span class="hljs-number">3</span>) + <span class="hljs-string">&quot;lo&quot;</span>; <span class="hljs-comment">//greeting is Hello</span><br></code></pre></td></tr></table></figure>

<p>由于不能修改Java字符串中的单个字符。所以在Java文档中将String类对象称为是不可变的（immutable），字符串”Hello“永远包含字符H、e、l、l和o代码单元序列。虽然不能修改这些值，不过可以修改字符串变量greeting，让它引用另外一个字符串。</p>
<p>这样做是否会降低运行效率呢？看起来好像修改一个代码单元要比从头创建一个新字符串更加简洁。答案是：也对，也不对。的确，通过拼接”Hel“和”lo“来创建一个新的字符串的效率确实不高。但是，不可变字符串却有一个优点：编译器还可以让字符串共享。</p>
<h3 id="检测字符串是否相等"><a href="#检测字符串是否相等" class="headerlink" title="检测字符串是否相等"></a>检测字符串是否相等</h3><p>可以使用equals方法检测两个字符串是否相等。对于表达式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">s.equals(t)<br></code></pre></td></tr></table></figure>

<p>如果字符串s与字符串t相等，则返回true；否则，返回false。需要注意的是，s与t可以是字符串变量，也可以是字符串字面量。例如，以下表达式是合法的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-string">&quot;Hello&quot;</span>.equalsIgnoreCase(<span class="hljs-string">&quot;Hello&quot;</span>)<br></code></pre></td></tr></table></figure>

<p>一定不要使用&#x3D;&#x3D;运算符检测两个字符串是否相等！这个运算符只能够确定两个字符串是否存放在同一个位置上。当然，如果字符串在同一个位置上，它们必然相等。但是，完全由可能将内容相同的多个字符串副本放置在不同的位置上。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">greeting</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello&quot;</span>; <span class="hljs-comment">//initialize greeting to a string</span><br><span class="hljs-keyword">if</span> (greeting == <span class="hljs-string">&quot;Hello&quot;</span>)...<br>    <span class="hljs-comment">//probably true</span><br><span class="hljs-keyword">if</span> (greeting.substring(<span class="hljs-number">0</span>,<span class="hljs-number">3</span>) == <span class="hljs-string">&quot;Hel&quot;</span>)...<br>    <span class="hljs-comment">//probably false</span><br></code></pre></td></tr></table></figure>

<p>如果虚拟机始终将相同的字符串共享，就可以使用&#x3D;&#x3D;运算符检测是否相等。但实际上只有字符串字面量是共享的，而+或substring等操作得到的字符串并不共享。因此，千万不要使用&#x3D;&#x3D;运算符测试字符串的相等性。</p>
]]></content>
      <categories>
        <category>WEBbackend</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java继承</title>
    <url>/2022/11/10/WebBackend/Java/Java%E7%BB%A7%E6%89%BF/</url>
    <content><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>继承（inheritance）。继承的基本思想是，可以基于已有的类创建新的类。继承已存在的类就是复用（继承）这些类的方法，而且可以增加一些新的方法和字段，是新类能够适应新的情况。</p>
<h2 id="Class、superclass-and-subclass"><a href="#Class、superclass-and-subclass" class="headerlink" title="Class、superclass and subclass"></a>Class、superclass and subclass</h2><h3 id="定义subclass"><a href="#定义subclass" class="headerlink" title="定义subclass"></a>定义subclass</h3><p>继承Employee类来定义Manager类，这里使用关键字<code>extends</code>表示继承。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Manager</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Employee</span><br>&#123;<br>    added methods and fields<br>&#125;<br></code></pre></td></tr></table></figure>

<blockquote>
<p>C++&#x2F;C# 注：Java与C++定义继承的方式十分相似。Java用关键字替代了C++和C#中的冒号( : )。在Java中，所有继承都是公开继承。 </p>
</blockquote>
<p>关键字<code>extends</code>表明正在构造的新类派生于一个存在的类。</p>
<p>已存在的类称为：<strong>超类(superclass)<strong>、</strong>基类(base class)<strong>或</strong>父类(parent class)</strong>;</p>
<p>新类称为：<strong>子类(subclass)<strong>、</strong>派生类(derived class)<strong>或</strong>孩子类(child class)</strong></p>
<blockquote>
<p>注：前缀**超(super)<strong>和</strong>子(sub)**来源于计算机科学与数学理论中集合语言的术语。所有员工组成的集合包含所有经理组成的集合。即，员工集合是经理集合的超级，也可以说，经理集合是员工集合的子集。</p>
</blockquote>
<p>在<code>Manager</code>类中增加一个用于存储奖金信息的字段，以及一个用于设置这个字段的新方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Manager</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Employee</span><br>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> bonus;<br>    ...<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBonus</span><span class="hljs-params">(<span class="hljs-type">double</span> bonus)</span><br>    &#123;<br>        <span class="hljs-built_in">this</span>.bonus = bonus;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="override方法"><a href="#override方法" class="headerlink" title="override方法"></a>override方法</h3><p>超类中的有些方法对子类Manager不一定使用。具体来说，<code>Manager</code>类中<code>getSalary</code>方法应该返回薪水和奖金的总和。为此需要提供一个新的方法来**覆盖(override)**超类中的这个方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Manager</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Employee</span><br>&#123;<br>    ...<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getSalary</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">baseSalary</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">super</span>.getSalary();<br>        <span class="hljs-keyword">return</span> baseSalary + bonus;<br>    &#125;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure>

<p>在这里，我们希望调用超类<code>Employee</code>中的<code>getSalary</code>方法，而不是当前类的这个方法。为此，可以使用特殊的关键字<code>super</code>解决这个问题:</p>
<blockquote>
<p>注：有些人认为super与this引用是类似的概念，实际上，这样比较并不太恰当。这是因为super不是一个对象的引用，例如，不能将值super赋给另一个对象变量，它只是一个<strong>指示编译器调用超类方法</strong>的特殊关键字。</p>
</blockquote>
<p>正像前面所看到的那样，在子类可以增加字段、增加方法或覆盖超类的方法，不过，继承绝不会删除任何字段或方法。</p>
<blockquote>
<p>C++注：在Java中使用关键字<strong>super</strong>调用超类的方法，而在C++中则采用超类名加<code>::</code>操作符的形式。例如，Manager类的<code>getSalary</code>方法要调用<code>Employee::getSalary</code>而不是<code>super.getSalarty</code>。</p>
</blockquote>
<h3 id="subclass构造器"><a href="#subclass构造器" class="headerlink" title="subclass构造器"></a>subclass构造器</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">Manager</span><span class="hljs-params">(String name,<span class="hljs-type">double</span> salary,<span class="hljs-type">int</span> year,<span class="hljs-type">int</span> month,<span class="hljs-type">int</span> day)</span><br>&#123;<br>    <span class="hljs-built_in">super</span>(name,salary,year,month,day);<br>    bonus = <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>这里的关键字super具有不同的含义。语句<code>super(name,salary,year,month,day);</code>是”调用超类<strong>Employee</strong>中带有name、salary、year、month和day参数的构造器“的简写形式。</p>
<p>由于<strong>Manager</strong>类的构造器不能访问<strong>Employee</strong>类的私有字段，所以必须通过一个构造器来初始化这些私有字段。可以利用特殊的<code>super</code>语法调用这个构造器。使用<code>super</code>调用构造器的语法句必须是子类构造器的第一条语句。</p>
<p>如果子类的构造器没有显式地调用超类的构造器，将自动地调用超类的无参数构造器。如果超类没有无参数的构造器，并且在子类的构造器中又没有显式地调用超类的其他构造器，Java编译器就会报告一个错误。</p>
<blockquote>
<p>回想一下，关键字this有两个含义：一是指示隐式参数的引用，二是调用该类的其他构造器。</p>
<p>类似地，super关键字也有两个含义：一是调用超类的方法，二是调用超类的构造器。在调用构造器的时候，this和super这两个关键字紧密相关。调用构造器的语句只能作为另一个构造器的第一条语句出现。构造器参数可以传递给当前类(this)的另一个构造器，也可以传递给超类(super)的构造器。</p>
</blockquote>
<p>创建一个新经理，并设置他的奖金：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">Manager</span> <span class="hljs-variable">boss</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Manager</span>(<span class="hljs-string">&quot;Carl Cracker&quot;</span>,<span class="hljs-number">80000</span>,<span class="hljs-number">1987</span>,<span class="hljs-number">12</span>,<span class="hljs-number">15</span>);<br>boss.setBonus(<span class="hljs-number">5000</span>);<br></code></pre></td></tr></table></figure>

<p>下面定义一个包含3个员工的数组：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">var</span> <span class="hljs-variable">staff</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>[<span class="hljs-number">3</span>];<br></code></pre></td></tr></table></figure>

<p>在数组中混合填入经理和员工：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">staff[<span class="hljs-number">0</span>] = boss;<br>staff[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;Harry Hacker&quot;</span>,<span class="hljs-number">50000</span>,<span class="hljs-number">1989</span>,<span class="hljs-number">10</span>,<span class="hljs-number">1</span>);<br>staff[<span class="hljs-number">2</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;Tony Tester&quot;</span>,<span class="hljs-number">40000</span>,<span class="hljs-number">1990</span>,<span class="hljs-number">3</span>,<span class="hljs-number">15</span>);<br></code></pre></td></tr></table></figure>

<p>输出每个人的薪水：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (Employee e : staff)<br>&#123;<br>    System.out.println(e.getName() + <span class="hljs-string">&quot; &quot;</span> + e.getSalary());<br>&#125;<br><span class="hljs-comment">//输出：</span><br><span class="hljs-comment">//	Carl Cracker 85000.0</span><br><span class="hljs-comment">//	Harry Hacker 50000.0</span><br><span class="hljs-comment">//	Tommy Tester 40000.0</span><br></code></pre></td></tr></table></figure>

<p>一个对象变量（例如，变量e）可以指示多种实际类型的现象称为**多态(polymorphism)<strong>。在运行时能够自动地选择适当的方法，称为</strong>动态绑定(dynamic binding)**。</p>
<blockquote>
<p>C++注：在C++中，如果希望实现动态绑定，需要将成员函数声明为<strong>virtual</strong>。在Java中，动态绑定是默认的行为。如果<strong>不</strong>希望让一个方法是虚拟的，可以将它标记为<strong>final</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* File name: ManagerTest.java */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ManagerTest</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>    &#123;<br>        <span class="hljs-comment">// construct a Manager object</span><br>        <span class="hljs-type">var</span> <span class="hljs-variable">boss</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Manager</span>(<span class="hljs-string">&quot;Carl Cracker&quot;</span>,<span class="hljs-number">80000</span>,<span class="hljs-number">1987</span>,<span class="hljs-number">12</span>,<span class="hljs-number">15</span>);<br>        boss.setBonus(<span class="hljs-number">5000</span>);<br>        <br>        <span class="hljs-type">var</span> <span class="hljs-variable">staff</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>[<span class="hljs-number">3</span>];<br>        <br>        <span class="hljs-comment">// fill the staff array with Manager and Employee objects</span><br>        <br>        staff[<span class="hljs-number">0</span>] = boss;<br>        staff[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;Harry Hacker&quot;</span>,<span class="hljs-number">50000</span>,<span class="hljs-number">1989</span>,<span class="hljs-number">10</span>,<span class="hljs-number">1</span>);<br>        staff[<span class="hljs-number">2</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;Tommy Tester&quot;</span>,<span class="hljs-number">40000</span>,<span class="hljs-number">1990</span>,<span class="hljs-number">3</span>,<span class="hljs-number">15</span>);<br>        <br>        <span class="hljs-comment">// print out information about all Employee objects</span><br>        <span class="hljs-keyword">for</span> (Employee e : staff)<br>            System.out.println(<span class="hljs-string">&quot;name=&quot;</span> + e.getName() + <span class="hljs-string">&quot;,salary=&quot;</span> + e.getSalary());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* File name: Employee.java */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span><br>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> salary;<br>    <span class="hljs-keyword">private</span> LocalDate hireDay;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Employee</span><span class="hljs-params">(String name,<span class="hljs-type">double</span> salary,<span class="hljs-type">int</span> year,<span class="hljs-type">int</span> month,<span class="hljs-type">int</span> day)</span><br>    &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.salary = salary;<br>        hireDay = LocalDate.of(year,month,day);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getSalary</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> salary;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> LocalDate <span class="hljs-title function_">getHireDay</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> hireDay;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">raiseSalary</span><span class="hljs-params">(<span class="hljs-type">double</span> byPercent)</span><br>    &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">raise</span> <span class="hljs-operator">=</span> salary * byPercent / <span class="hljs-number">100</span>;<br>        salary += raise;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Manager</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Employee</span><br>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> bonus;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Manager</span><span class="hljs-params">(String name,<span class="hljs-type">double</span> salary,<span class="hljs-type">int</span> year,<span class="hljs-type">int</span> month,<span class="hljs-type">int</span> day)</span><br>    &#123;<br>        <span class="hljs-built_in">super</span>(name,salary,year,month,day);<br>        bonus = <span class="hljs-number">0</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getSalary</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">baseSalary</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">super</span>.getSalary();<br>        <span class="hljs-keyword">return</span> baseSalary + bonus;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBonus</span><span class="hljs-params">(<span class="hljs-type">double</span> b)</span><br>    &#123;<br>        bonus = b;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>有一个简单规则可以用来判断是否应该将数据设计为继承关系，这就是<strong>is-a</strong>规则，它指出子类的每个对象也是超类的对象</p>
<p>。例如，每个经理都是员工，因此，将Manager类设计为Employee类的子类是有道理的。</p>
<p><strong>is-a</strong>规则的另一种表述是替换原则（substitution principle）。它指出程序中出现超类对象任何地方都可以使用子类对象替换。</p>
<p>例如，可以将子类的对象赋给超类变量：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">Employee e;<br>e = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(...);	<span class="hljs-comment">//Employee object expected</span><br>e = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Manager</span>(...);	<span class="hljs-comment">//OK,Manager can be used well</span><br></code></pre></td></tr></table></figure>

<p>在Java程序设计语言中，对象变量是多态的（polymorphic）。一个Employee类型的变量即可以引用一个Employee类型的变量，也可以引用Employee类的任何一个子类的对象（例如，Manager、Executive、Secretary等）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">Manager</span> <span class="hljs-variable">boss</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Manager</span>(...);<br>Employee[] staff = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>[<span class="hljs-number">3</span>];<br>staff[<span class="hljs-number">0</span>] = boss;<br></code></pre></td></tr></table></figure>

<p>在这个例子中，变量staff[0]与boss引用同一个对象。但编译器只将staff[0]看成是一个Employee对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">boss.setBonus(<span class="hljs-number">5000</span>);		<span class="hljs-comment">// OK</span><br>staff[<span class="hljs-number">0</span>].setBonus(<span class="hljs-number">5000</span>);	<span class="hljs-comment">//ERROR</span><br><span class="hljs-type">Manager</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> staff[i];		<span class="hljs-comment">//ERROR</span><br></code></pre></td></tr></table></figure>

<h3 id="理解方法调用"><a href="#理解方法调用" class="headerlink" title="理解方法调用"></a>理解方法调用</h3><p>假设调用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">x.f(atgs)<br></code></pre></td></tr></table></figure>

<p>隐式参数x声明为类c的一个对象：</p>
<ol>
<li><p>编译器查看对象的声明类型和方法名。需要注意的是：有可能存在多个名字为f但参数类型不一样的方法。例如，可能存在方法f(int)和方法f(String)。编译器将会一一列举C类中所有名为f但参数类型不一样的方法。例如，可能存在方法f(int)和方法f(String)。</p>
</li>
<li><p>接下来，编译器要确定方法调用中提供的参数类型。如果在所有名为f的方法中存在一个与所类型提供参数类型完全匹配的方法，就选择这个方法。这个过程称为重载解析(overloading resolution)</p>
</li>
<li><p>如果是private方法、static方法、final方法 或者构造器，那么编译器将可以准确地知道应该调用哪个方法。这称为静态绑定(static binding)</p>
</li>
<li><p>程序运行并且采用动态绑定调用方法时，虚拟机必须调用与x所引用对象的实际类型对应的那个方法。假设x的实际类型是D，它是C类的子类。如果D类定义了方法f(String), 就会调用这个方法；否则，将在D类的超类中寻找f(String)，以此类推。</p>
<p>如果调用的是super.f(param)，那么编译器将对隐式参数超类的方法表进行搜索。</p>
</li>
</ol>
<h3 id="阻止继承：final-类和方法"><a href="#阻止继承：final-类和方法" class="headerlink" title="阻止继承：final 类和方法"></a>阻止继承：final 类和方法</h3><p>有时候，我们可能希望阻止人们利用某个类定义子类。不允许扩展的类被称为final类。如果在定义类的时候使用了<strong>final修饰符</strong>就表明这个类是<strong>final类</strong>。例如，假设希望阻止人们派生Executive类的子类，就可以在声明这个类的时候使用final修饰符：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Executive</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Manager</span><br>&#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure>

<p>类中的某个特定方法也可以被声明为final。如果这样做，子类就不能覆盖这个方法（final 类中的所有方法自动地称为final方法）。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span><br>&#123;<br>    ...<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure>

<blockquote>
<p>注：对于final字段来说，构造对象之后就不允许改变它们的值了。不过，如果将一个类声明为final，只有其中的方法自动地称为final，而不包括字段。</p>
</blockquote>
<h3 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h3><p>Java程序设计语言为强制类型转换提供了一种特殊的表示法。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">double</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">3.405</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">nx</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) x;<br></code></pre></td></tr></table></figure>

<p>有时候也可能需要将某个类的对象引用转换成另一个类的对象引用。语法和数值表达式的强制类型转换类似，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">Manager</span> <span class="hljs-variable">boss</span> <span class="hljs-operator">=</span> (Manager) staff[<span class="hljs-number">0</span>];<br></code></pre></td></tr></table></figure>

<h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221114160122027.png" alt="image-20221114160122027"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> String <span class="hljs-title function_">getDescroption</span><span class="hljs-params">()</span>;<br>	<span class="hljs-comment">//no implementation required</span><br></code></pre></td></tr></table></figure>

<p>为了提高程序的清晰度，包含一个或多个抽象方法的类本身必须被声明为抽象的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span><br>&#123;<br>    ...<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> String <span class="hljs-title function_">getDescription</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>除了抽象方法之外，抽象类还可以包含字段和具体方法。例如，Person类还保存着一个人的姓名，另外有一个返回姓名的具体方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span><br>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name)</span><br>    &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> String <span class="hljs-title function_">getDescription</span><span class="hljs-params">()</span>;<br>    <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>抽象方法充当着占位方法的角色，它们在子类中具体实现。扩展抽象类可以有两种选择。</p>
<p>一种是在子类中保留抽象类中的部分或所有抽象方法仍未定义，这样就必须将子类也标记为抽象类；</p>
<p>另一种做法是定义全部方法，这样一来，子类就不是抽象的了。</p>
<p>例如，通过扩展抽象Person类，并实现getDescription方法来定义Student类。由于在Student类中不再含有抽象方法，所以不需要将这个类声明为抽象类。</p>
<p><strong>抽象类不能实例化</strong></p>
<p>可以定义一个抽象类的对象变量，但是这样一个变量只能引用非抽象子类的对象。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;Vince Vu&quot;</span>,<span class="hljs-string">&quot;Economics&quot;</span>);<br></code></pre></td></tr></table></figure>

<p>这里的p是一个抽象类型Person的变量，它引用了一个非抽象子类Student的实例。</p>
<blockquote>
<p><code>C++</code>注：在<code>C++</code>中，有一种抽象方法称为<strong>纯虚函数</strong>(pure virtual function)，要在末尾用 &#x3D; 0 标记，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> <span class="hljs-comment">//C++</span><br>&#123;<br> <span class="hljs-keyword">public</span>:<br> 	virtual string <span class="hljs-title function_">getDescription</span><span class="hljs-params">()</span> = <span class="hljs-number">0</span>;<br> 	...<br>&#125;;<br><span class="hljs-comment">// 如果至少有一个纯虚函数，这个C++类就是抽象类。在C++中，没有提供用于表示抽象类的特殊关键字。</span><br></code></pre></td></tr></table></figure>

<p>如果至少有一个纯虚构函数，这个C++类就是抽象类。C++中，没有提供用于表示抽象类的特殊关键字。</p>
</blockquote>
<p>下面定义一个扩展抽象类Person的具体子类Student：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span><br>&#123;<br>    <span class="hljs-keyword">private</span> String major;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name,String major)</span><br>    &#123;<br>        <span class="hljs-built_in">super</span>(name);<br>        <span class="hljs-built_in">this</span>.major = major;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDescription</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;a student majoring in &quot;</span> + major;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>Student 类定义了 getDescription 方法，在 Student 类中的全部方法都是具体的，这个类不再是抽象类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PersonTest</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>    &#123;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">people</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>[<span class="hljs-number">2</span>];<br>        <br>        <span class="hljs-comment">// fill the people array with Student and Employee objects</span><br>        people[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;Harry Hacker&quot;</span>,<span class="hljs-number">5000</span>,<span class="hljs-number">1989</span>,<span class="hljs-number">10</span>,<span class="hljs-number">1</span>);<br>        people[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;Maria Morris&quot;</span>,<span class="hljs-string">&quot;computer science&quot;</span>);<br>        <br>        <span class="hljs-comment">// print out names and descriptions of all Person objects</span><br>        <span class="hljs-keyword">for</span> (Person p : people)<br>            System.out.println(p.getName() + <span class="hljs-string">&quot;, &quot;</span> + p.getDescription)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> String <span class="hljs-title function_">getDescription</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">private</span> String name;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name)</span><br>    &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span><br>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> salary;<br>    <span class="hljs-keyword">private</span> LocalDate hireDay;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Employee</span><span class="hljs-params">(String name,<span class="hljs-type">double</span> salary,<span class="hljs-type">int</span> year,<span class="hljs-type">int</span> month,<span class="hljs-type">int</span> day)</span><br>    &#123;<br>        <span class="hljs-built_in">super</span>(name);<br>        <span class="hljs-built_in">this</span>.salary = salary;<br>        hireDay = LocalDate.of(year,month,day);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getSalary</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> salary;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> LocalDate <span class="hljs-title function_">getHireDay</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> hireDay;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDescripting</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> String <span class="hljs-title function_">format</span><span class="hljs-params">(<span class="hljs-string">&quot;an employee with a salary of $%.2f&quot;</span>,salary)</span><br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">raiseSalary</span><span class="hljs-params">(<span class="hljs-type">double</span> byPercent)</span><br>    &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">raise</span> <span class="hljs-operator">=</span> salary * byPercent / <span class="hljs-number">100</span>;<br>        salart += raise;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span><br>&#123;<br>    <span class="hljs-keyword">private</span> String major;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name the student&#x27;s name</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> major the student&#x27;s major</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name,String major)</span><br>    &#123;<br>        <span class="hljs-comment">// pass name to superclass constructor</span><br>        <span class="hljs-built_in">super</span>(name);<br>        <span class="hljs-built_in">this</span>.major = major;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDescription</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;a student majoring in &quot;</span> + major;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="受保护访问"><a href="#受保护访问" class="headerlink" title="受保护访问"></a>受保护访问</h3><ul>
<li>仅对本类可见 —— private</li>
<li>对外部完全可见 —— public</li>
<li>对本包和所有子类可见 —— protected</li>
<li>对本包可见 —— 默认，不需要修饰符</li>
</ul>
<blockquote>
<p> <code>C++</code>注：Java中的受保护部分对所有子类及同一个包中的所有其他类都可见。这与<code>C++</code>中的保护机制稍有不同，Java中的protected概念要比<code>C++</code>中的安全性差。</p>
</blockquote>
<h2 id="Object：所有类的超类"><a href="#Object：所有类的超类" class="headerlink" title="Object：所有类的超类"></a>Object：所有类的超类</h2><p>Object类是Java中所有类的始祖，在Java中每个类都扩展了Object。但是并不需要这样写：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Object</span><br></code></pre></td></tr></table></figure>

<p>如果没有明确地指出超类，Object就被认为是这个类的超类。</p>
<h3 id="Object类型的变量"><a href="#Object类型的变量" class="headerlink" title="Object类型的变量"></a>Object类型的变量</h3><p>可以使用Object类型的变量引用任何类型的对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;Harry Hacker&quot;</span>,<span class="hljs-number">35000</span>);<br></code></pre></td></tr></table></figure>

<p>当然，Object类型的变量只能用于作为各种值的一个泛型容器。想要对其内容进行具体的操作，还需要清除对象的原始类型，并进行相应的强制类型转换：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">Employee</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> (Employee) obj;<br></code></pre></td></tr></table></figure>

<p>在Java中，只有基本类型（primitive）不是对象，例如，数值、字符和布尔类型的值都不是对象。</p>
<p>所有的数组类型，不管是对象数组还是基本类型的数组都扩展了Object类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs Java">Employee[] staff = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>[<span class="hljs-number">10</span>];<br>obj = staff;	<span class="hljs-comment">//OK</span><br>obj = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">10</span>];	<span class="hljs-comment">// OK</span><br></code></pre></td></tr></table></figure>

<blockquote>
<p><code>C++</code>注：在<code>C++</code>中没有所有类的根类，不过，每个指针都可以转换成<code>void*</code>指针。</p>
</blockquote>
<h3 id="equals方法"><a href="#equals方法" class="headerlink" title="equals方法"></a>equals方法</h3><p>Object类中的equals方法用于检测一个对象是否等于另外一个对象</p>
<h3 id="相等测试与继承"><a href="#相等测试与继承" class="headerlink" title="相等测试与继承"></a>相等测试与继承</h3><p>如果隐式和显示的参数不属于同一个类equals方法就返沪false。</p>
<p>但是许多程序员却喜欢使用instanceof进行检测：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (!(otherObject <span class="hljs-keyword">instanceof</span> Employee)) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br></code></pre></td></tr></table></figure>

<p>这样就允许otherObject属于一个子类。但是这种方法可能会招致一些麻烦。正因为这些麻烦，所以建议不要采用这种处理方式。Java语言规范要求equals方法具有下面的特性：</p>
<ol>
<li>自反性：对于任何非空引用x，x.equals(x) 应该返回true</li>
<li>对称性：对于任何引用x和y，当且仅当y.equals(x) 返回 true时，x.equals(y) 返回 true</li>
<li>传递性：对于任何引用x、y和z，如果x.equals(y)返回true，y.equals(z) 返回 true,x.equals(z) 也应该返回true </li>
<li>一致性：如果x和y引用的对象么有发生变化，反复调用x.equals(y)应该返回同样的结果</li>
</ol>
<p><strong>equals 方法的建议：</strong></p>
<ol>
<li><p>显式参数命名为otherObject，稍后我们需要将它强制转换成另一个名为other的变量</p>
</li>
<li><p>检测this与otherObject是否想等：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == otherObject) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br></code></pre></td></tr></table></figure>
</li>
<li><p>检测otherObject是否为null：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (otherObject == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br></code></pre></td></tr></table></figure>
</li>
<li><p>比较this与otherObject的类。如果equals的语句可以在子类中改变，就使用<strong>getClass</strong>检测：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (getClass() != otherObject.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br></code></pre></td></tr></table></figure>
</li>
<li><p>将otherObject强制转换为对应类型的变量：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">ClassName</span> <span class="hljs-variable">other</span> <span class="hljs-operator">=</span> (ClassName) otherObject<br></code></pre></td></tr></table></figure>
</li>
<li><p>使用 &#x3D;&#x3D; 比较基本类型字段，使用Objects，equals比较对象字段。如果所有的字段都匹配，就返回true；否则返回false</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">return</span> field1 == ohter.field1<br>    &amp;&amp; Objects.equals(field2,other.field2)<br>    &amp;&amp; ...;<br></code></pre></td></tr></table></figure>

<p>如果在子类中重新定义equals，就要在其中包含一个super.equals(other)调用。</p>
</li>
</ol>
<blockquote>
<p>对于数组类型的字段，可以使用静态Arrays.equals方法检测相应的数组元素是否相等</p>
</blockquote>
<h3 id="hashCode方法"><a href="#hashCode方法" class="headerlink" title="hashCode方法"></a>hashCode方法</h3><p>散列码（hash code）是由对象导出的一个整型值。散列码是没有规律的。</p>
<p>如果x和y是两个不同的对象，x.hashCode() 与y.hashCode() 基本上不会相同。</p>
<p>String类使用以下算法计算散列码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">hash</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; length();i++)<br>    hash = <span class="hljs-number">31</span> * hash + charAt(i);<br></code></pre></td></tr></table></figure>

<p>由于hashCode方法定义在Object类中，因此每个对象都有默认的散列码，其值由对象的存储地址得出。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">var</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Ok&quot;</span>;<br><span class="hljs-type">var</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(s);<br>System.out.println(s.hashCode() + <span class="hljs-string">&quot; &quot;</span> + sb.hashCode()); <span class="hljs-comment">//s 2556  sb 20526976</span><br><span class="hljs-type">var</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;Ok&quot;</span>);<br><span class="hljs-type">var</span> <span class="hljs-variable">tb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(t);<br>System.out.println(t.hashCode() + <span class="hljs-string">&quot; &quot;</span> + tb.hashCode()); <span class="hljs-comment">//t 2556  tb 20527144</span><br></code></pre></td></tr></table></figure>

<p>其中字符串s与t的散列码是由内容导出的。在StringBuilder类中没有定义hashCode方法，而Object类的默认hashCode方法会从对象的地址得出散列码。</p>
<p>如果重新定义了equal方法，就必须为用户可能插入散列表的对象重新定义hashCode方法。</p>
<p>hashCode方法应该返回一个整数（也可以是负数）。要合理地组合实例字段的散列码，以便能够让不同对象产生的散列码分布更加均匀。</p>
<p>例如，下面是Employee类的hashCode方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> Objects.hash(name,salary,hireDay);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>equals与hashCode的定义必须相容：如果x.equals(y)返回true，那么x.hashCode()就必须与y.hashCode()返回相同的值。例如，如果定义Employee.equals比较员工的ID，那么hashCode方法就需要散列ID，而不是员工的姓名或存储地址。</p>
<ul>
<li><p>返回一个散列码，由提供的所有对象的散列码组合而得到</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hash</span><span class="hljs-params">(Object...objects)</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>如果a为null返回0，否则返回a.hashCode()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">(Object a)</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>返回给定值的散列码。这里xxx是对应给定包装器类型的基本类型。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hasCode</span><span class="hljs-params">(xxx value)</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>计算数组a的散列码。组成这个数组的元素类型xxx可以是object、int、long、short、char、byte、boolean、float或double。</p>
</li>
</ul>
<h3 id="toString方法"><a href="#toString方法" class="headerlink" title="toString方法"></a>toString方法</h3><p>在Object中还有一个重要的方法，就是toString方法，它会返回表示对象值的一个字符串。</p>
<p>下面是一个典型的例子。Point类的toString方法将返回下面这样的字符串：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">java.awt.Point[x=<span class="hljs-number">10</span>,y=<span class="hljs-number">20</span>]<br></code></pre></td></tr></table></figure>

<p>绝大多数（但不是全部）的toString方法都遵循这样的格式：类的名字，随后是一对方括号括起来的字段值。下面是Employee类中的toString方法的实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Employee[name=&quot;</span> + name<br>        + <span class="hljs-string">&quot;,salart=&quot;</span> + salary<br>        + <span class="hljs-string">&quot;,hireDay=&quot;</span> + hireDay<br>        + <span class="hljs-string">&quot;]&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>还可以设计得更好一些。最好通过**getClass().getName()**获得类名的字符串，但是不要将类名硬编码写道toString方法中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">return</span> getClass().getName()<br>        + <span class="hljs-string">&quot;[name=&quot;</span> + name<br>        + <span class="hljs-string">&quot;,salary=&quot;</span> + salary<br>        + <span class="hljs-string">&quot;,hireDay=&quot;</span> + hireDay<br>        + <span class="hljs-string">&quot;]&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>这样toString方法也可以由子类调用。</p>
<p>当然，设计子类的程序员应该定义自己的toString方法，并加入子类的字段。如果超类使用了<code>getClass().getName()</code>,那么子类只需要调用<code>super.toString()</code>就可以了。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Manager</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Employee</span><br>&#123;<br>    ...<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.toString()<br>            + <span class="hljs-string">&quot;[bonus=&quot;</span> + bonus<br>            + <span class="hljs-string">&quot;]&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<blockquote>
<p>可以不写<code>x.toString()</code>,而写作<code>”“ + x</code>。这条语句将一个空串与x的字符串表示(也就是<code>x.toString()</code>)相连接。与toString不用的是，即使x是基本类型，这条语句照样能够执行。</p>
</blockquote>
<p>如果x是一个任意对象，并调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">System.out.println(x);<br></code></pre></td></tr></table></figure>

<p>println方法就会简单地调用<code>x.toString()</code>，并打印输出得到的字符串。</p>
<p>Object类定义了toString方法，可以打印对象的类名和散列码。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">System.out.println(System.our)<br></code></pre></td></tr></table></figure>

<p>输出：<code>java.io.PrintStream@626b2d4a</code></p>
<p>之所以得到这样的结果，是因为PrintStream类的实现者没有覆盖toString方法。</p>
<blockquote>
<p>警告：令人烦恼的是，数组继承了object类的toString方法，更有甚者，数组类型将采用一种古老的格式打印。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] luckyNumbers = &#123;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">11</span>,<span class="hljs-number">13</span>&#125;;<br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span> + luckyNumber;<br></code></pre></td></tr></table></figure>

<p>会生成字符串<code>[I@626b2d4a</code>(前缀[I表明是一个整型数组])。补救的方法是调用静态方法Arrays.toString。代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> Arrays.toString(luckyNumber);<br></code></pre></td></tr></table></figure>

<p>将生成字符串<code>[2, 3, 5, 7, 11, 13]</code>.</p>
<p>想要打印多维数组(即，数组的数组)，则需要调用<code>Arrays.deepToString</code>方法。</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221116195859507.png" alt="image-20221116195859507"></p>
</blockquote>
<p>toString方法是一种非常有用的调试工具。在标准类库中，许多类都定义了<code>toString</code>方法，以便用户能够获得一些有关对象状态的有用信息：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;Current position = &quot;</span> + position);<br></code></pre></td></tr></table></figure>

<p>更好的解决方法是使用Logger类的一个对象并调用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">Logger.global.info(<span class="hljs-string">&quot;Current position = &quot;</span> + position);<br></code></pre></td></tr></table></figure>

<blockquote>
<p>最好为自定义的每一个类都添加toString方法</p>
</blockquote>
<p>如下的程序测试了Employee类和Manager类的equals、hashCode和toString方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* File name: EqualsTest.java */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EqualsTest</span> &#123;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">alice1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;Alice Adams&quot;</span>, <span class="hljs-number">75000</span>, <span class="hljs-number">1987</span>, <span class="hljs-number">12</span>, <span class="hljs-number">15</span>);<br>        <span class="hljs-type">var</span> <span class="hljs-variable">alice2</span> <span class="hljs-operator">=</span> alice1;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">alice3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;Bob Brandson&quot;</span>, <span class="hljs-number">75000</span>, <span class="hljs-number">1987</span>, <span class="hljs-number">12</span>, <span class="hljs-number">15</span>);<br>        <span class="hljs-type">var</span> <span class="hljs-variable">bob</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;Bob Brandson&quot;</span>, <span class="hljs-number">50000</span>, <span class="hljs-number">1989</span>, <span class="hljs-number">10</span>, <span class="hljs-number">1</span>);<br>        <br>        System.out.println(<span class="hljs-string">&quot;alice1 == alice2: &quot;</span> + (alice1 == alice2));<br>        System.out.println(<span class="hljs-string">&quot;alice1 == alice3: &quot;</span> + (alice1 == alice3));<br>        System.out.println(<span class="hljs-string">&quot;alice1.equals(alice3): &quot;</span> + alice1.equals(alice3));<br>        System.out.println(<span class="hljs-string">&quot;alice1.equals(bob): &quot;</span> + alice1.equals(bob));<br>        System.out.println(<span class="hljs-string">&quot;bob.toString(): &quot;</span> + bob);<br>        <br>        <span class="hljs-type">var</span> <span class="hljs-variable">carl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Manager</span>(<span class="hljs-string">&quot;Carl Cracker&quot;</span>, <span class="hljs-number">80000</span>, <span class="hljs-number">1987</span>, <span class="hljs-number">12</span>, <span class="hljs-number">15</span>);<br>        <span class="hljs-type">var</span> <span class="hljs-variable">boss</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Manager</span>(<span class="hljs-string">&quot;Carl Cracker&quot;</span>, <span class="hljs-number">80000</span>, <span class="hljs-number">1987</span>, <span class="hljs-number">12</span>, <span class="hljs-number">15</span>);<br>        boss.setBonus(<span class="hljs-number">5000</span>);<br>        System.out.println(<span class="hljs-string">&quot;boss.toString(): &quot;</span> + boss);<br>        System.out.println(<span class="hljs-string">&quot;carl.equals(boss): &quot;</span> + carl.equals(boss));<br>        System.out.println(<span class="hljs-string">&quot;alice1.hashCode(): &quot;</span> + alice1.hashCode());<br>        System.out.println(<span class="hljs-string">&quot;alice3.hashCode(): &quot;</span> + alice3.hashCode());<br>        System.out.println(<span class="hljs-string">&quot;bob.hashCode(): &quot;</span> + bob.hashCode());<br>        System.out.println(<span class="hljs-string">&quot;carl.hashCode(): &quot;</span> + carl.hashCode());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* File name: Employee.java */</span><br><span class="hljs-keyword">import</span> java.time.LocalDate;<br><span class="hljs-keyword">import</span> java.util.Objects;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> salary;<br>    <span class="hljs-keyword">private</span> LocalDate hireDay;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Employee</span><span class="hljs-params">(String name,<span class="hljs-type">double</span> salary,<span class="hljs-type">int</span> year,<span class="hljs-type">int</span> month,<span class="hljs-type">int</span> day)</span><br>    &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.salary = salary;<br>        hireDay = LocalDate.of(year, month, day);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getSalary</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> salary;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> LocalDate <span class="hljs-title function_">getHireDay</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> hireDay;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">raiseSalary</span><span class="hljs-params">(<span class="hljs-type">double</span> byPercent)</span><br>    &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">raise</span> <span class="hljs-operator">=</span> salary * byPercent / <span class="hljs-number">100</span>;<br>        salary += raise;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object otherObject)</span> &#123;<br>        <span class="hljs-comment">// a quick test to see if the objects are identical</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span> == otherObject) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <br>        <span class="hljs-comment">// must return false if the explicit parameter is null</span><br>        <span class="hljs-keyword">if</span>(otherObject == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <br>        <span class="hljs-comment">// if the classes don&#x27;t match,they can&#x27;t be equal</span><br>        <span class="hljs-keyword">if</span>(getClass() != otherObject.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <br>        <span class="hljs-comment">// now we know otherObject is a non-null Employee</span><br>        <span class="hljs-type">var</span> <span class="hljs-variable">other</span> <span class="hljs-operator">=</span> (Employee) otherObject;<br>        <br>        <span class="hljs-comment">// text whether the fields have identical values</span><br>        <span class="hljs-keyword">return</span> Objects.equals(name, other.name)<br>                &amp;&amp; salary == other.salary &amp;&amp; Objects.equals(hireDay, other.hireDay);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Objects.hash(name,salary,hireDay);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> getClass().getName() + <span class="hljs-string">&quot;[name=&quot;</span> + name + <span class="hljs-string">&quot;,salary=&quot;</span> + salary + <span class="hljs-string">&quot;,hireDay=&quot;</span><br>                + hireDay + <span class="hljs-string">&quot;]&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* File name: Manager.java */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Manager</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Employee</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> bonus;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Manager</span><span class="hljs-params">(String name,<span class="hljs-type">double</span> salary,<span class="hljs-type">int</span> year,<span class="hljs-type">int</span> month,<span class="hljs-type">int</span> day)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name,salary,year,month,day);<br>        bonus = <span class="hljs-number">0</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getSalary</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">baseSalary</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">super</span>.getSalary();<br>        <span class="hljs-keyword">return</span> baseSalary + bonus;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBonus</span><span class="hljs-params">(<span class="hljs-type">double</span> b)</span> &#123;<br>        bonus = b;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object otheObject)</span> &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">super</span>.equals(otheObject)) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">other</span> <span class="hljs-operator">=</span> (Manager) otheObject;<br>        <span class="hljs-comment">// super.equals checked that this and other belong to the same class</span><br>        <span class="hljs-keyword">return</span> bonus == other.bonus;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> java.util.Objects.hash(<span class="hljs-built_in">super</span>.hashCode(),bonus);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.toString() + <span class="hljs-string">&quot;[bonus=&quot;</span> + bonus + <span class="hljs-string">&quot;]&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<ul>
<li><p><code>Class getClass()</code></p>
<p>返回包含对象信息的类对象。</p>
</li>
<li><p><code>boolean equals(Object otherObject)</code></p>
<p>比较两个对象是否相等，如果两个对象指向同一块存储地区，方法返回true：否则方法返回false。要在自定义的类中覆盖这个方法。</p>
</li>
<li><p><code>String toString()</code></p>
<p>返回表示该对象的字符串。要在自定义的类中覆盖这个方法。</p>
</li>
<li><p><code>String getName()</code></p>
<p>返回这个类的名字。</p>
</li>
<li><p><code>Class getSuperclass()</code></p>
<p>以Class对象的形式返回这个类的超类。</p>
</li>
</ul>
<h2 id="泛型数组列表"><a href="#泛型数组列表" class="headerlink" title="泛型数组列表"></a>泛型数组列表</h2><p>在许多程序设计语言，特别是在C&#x2F;C++语言中，必须在编译时就确定整个数组的大小。</p>
<p>在Java中，情况就好多了。它允许在运行时确定数组的大小。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">actualSize</span> <span class="hljs-operator">=</span> ...;<br><span class="hljs-type">var</span> <span class="hljs-variable">staff</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>[actualSize];<br></code></pre></td></tr></table></figure>

<p>当然，这段代码并没有完全解决运行时动态更改数组的问题。一旦确定了数组的大小，就不能很容易地改变它了。在Java中，解决这个问题最简单的方法就是使用Java中的另外一个类，名为<code>ArrayList</code>。<code>ArrayList</code>类类似于数组，但在添加或删除元素时，它能够自动地调整数组容量，而不需要为此编写任何代码。</p>
<p><code>ArrayList</code>是一个有**类型参数(type parameter)<strong>的</strong>泛型类(generic class)**。为了指定数组列表保存的元素对象的类型，需要用一对尖括号将类名括起来追加刀<code>ArrayList</code>后面，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">ArrayList&lt;Employee&gt;<br></code></pre></td></tr></table></figure>

<h3 id="声明数组列表"><a href="#声明数组列表" class="headerlink" title="声明数组列表"></a>声明数组列表</h3><p>声明和构造一个保存<code>Employee</code>对象的数组列表：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">ArrayList&lt;Employee&gt; staff = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Employee&gt;();<br></code></pre></td></tr></table></figure>

<p>在Java10中，最好使用<code>var</code>关键字以避免重复写类名：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">var</span> <span class="hljs-variable">staff</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Employee&gt;();<br></code></pre></td></tr></table></figure>

<p>如果没有使用<code>var</code>关键字，可以省去右边的类型参数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">ArrayList&lt;Employee&gt; staff = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br></code></pre></td></tr></table></figure>

<p>这称为”菱形”语法，因为空尖括号<code>&lt;&gt;</code> 就像是一个菱形。可以结合<code>new</code>操作符使用菱形语法。检查器会检查新值要做什么。如果赋值给一个变量，或传递给某个方法，或者从某个方法返回，检查器会检查这个变量、参数或方法的泛型类型，然后将这个类型放在<code>&lt;&gt;</code>中。在这个例子中，<code>new ArrayList&lt;&gt;</code>将赋值给一个类型为<code>ArrayList&lt;Employee&gt;</code>的变量，所以泛型类型为<code>Employee</code>。</p>
<blockquote>
<p>如果使用var声明ArrayList，就不要使用菱形语法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">var</span> <span class="hljs-variable">elements</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br></code></pre></td></tr></table></figure>

<p>会生成一个<code>ArrayList&lt;Object&gt;</code></p>
</blockquote>
<p>使用add方法可以将元素添加到数组列表中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">staff.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;Harry Hacker&quot;</span>,...));<br>staff.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;Tony Tester&quot;</span>,...));<br></code></pre></td></tr></table></figure>

<p>如果调用add而内部数组已经满了，数组列表会自动地创建一个更大的数组，并将所有的对象从较小的数组中拷贝到较大的数组中。</p>
<p>如果已经知道或能够估计出数组可能存值的元素数量，就可以在填充数组之前调用ensureCapacity方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">staff.ensureCapacity(<span class="hljs-number">100</span>);<br></code></pre></td></tr></table></figure>

<p>这个方法调用将分配一个包含100个对象的内部数组。这样一来，前100次add调用不会带来开销很大的重新分配空间。</p>
<p>另外，还可以把初始容量传递给<code>ArrayList</code>构造器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">ArrayList&lt;Employee&gt; staff = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(<span class="hljs-number">100</span>);<br></code></pre></td></tr></table></figure>

<p>size方法将返回数组列表中包含的实际元素个数，等价于数组a的a.length。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">staff.size()<br></code></pre></td></tr></table></figure>

<ul>
<li><p><code>ArrayList&lt;E&gt;()</code></p>
<p>构造一个空数组列表。</p>
</li>
<li><p><code>ArrayList&lt;E&gt;(int initialCapacity)</code></p>
<p>用指定容量构造一个空数组列表。</p>
</li>
<li><p><code>boolean add(E obj)</code></p>
<p>在数组列表的末尾追加一个元素。永远返回true。</p>
</li>
<li><p><code>int size()</code></p>
<p>返回当前存储在数组列表中的元素个数。(当然，这个值永远不会大于数组列表的容量。)</p>
</li>
<li><p><code>void ensureCapacity(int capacity)</code></p>
<p>确保数组列表在不重新分类内部存储数组的情况下有足够的内容存储给定数量的元素。</p>
</li>
<li><p><code>void trimToSize()</code></p>
<p>将数组列表的存储容量削减到当前大小。</p>
</li>
</ul>
<h3 id="访问数组列表元素"><a href="#访问数组列表元素" class="headerlink" title="访问数组列表元素"></a>访问数组列表元素</h3><p>数组列表自动扩展容量的便利增加了访问元素语法的复杂程度。其原因是<code>ArrayList</code>类并不是Java程序设计语言的一部分；它只是由某个人编写并在标准库中提供的一个实用工具类。</p>
<p>不能使用<code>[]</code>语法格式访问或改变数组的元素，而要使用<code>get</code>和<code>set</code>方法。</p>
<ul>
<li><p><code>E set(int index,E obj)</code></p>
<p>将值obj放置在数组列表的指定索引位置，返回之前的内容。</p>
</li>
<li><p><code>E get(int index)</code></p>
<p>得到指定索引位置存储的值。</p>
</li>
<li><p><code>void add(int index,E obj)</code></p>
<p>后移元素从而将obj插入到指定索引位置。</p>
</li>
<li><p><code>E remove(int index)</code></p>
<p>删除指定索引位置的元素，并将后面的所有元素前移。返回所删除的元素。</p>
</li>
</ul>
<h3 id="对象包装器与自动装箱"><a href="#对象包装器与自动装箱" class="headerlink" title="对象包装器与自动装箱"></a>对象包装器与自动装箱</h3><p>有时，需要将int这样的基本类型转换为对象。所有的基本类型都有一个与之对应的类。例如，<code>Integer</code>类对应基本类型<code>int</code>。通常，这些类称为<code>包装器(wrapper)</code>。这些包装器类有显而易见的名字：<strong>Integer</strong>、<strong>Long</strong>、<strong>Float</strong>、<strong>Double</strong>、<strong>Short</strong>、<strong>Byte</strong>、<strong>Character</strong>、<strong>Boolean</strong>(前6个类派生于公共的超类<strong>Number</strong>)。</p>
<p>声明<code>Integer</code>对象的数组列表：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">var</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;();<br></code></pre></td></tr></table></figure>

<ul>
<li><p><code>int intValue()</code></p>
<p>将这个Integer对象的值作为int返回（覆盖Number类中intValue方法）</p>
</li>
<li><p><code>static String toString(int i)</code></p>
<p>返回一个新的String对象，表示指定数值i的十进制表示</p>
</li>
<li><p><code>static String toString(int i,int radix)</code></p>
<p>返回数值i基于radix参数指定进制的表示</p>
</li>
<li><p><code>static int parseInt(String s)</code></p>
</li>
<li><p><code>static int parseInt(String s,int radix)</code></p>
<p>返回字符串s表示的整数，指定字符串必须表示一个十进制整数（第一种方法），或者采用radix参数指定的进制（第二种方法）</p>
</li>
<li><p><code>static Integer valueOf(String s)</code></p>
</li>
<li><p><code>static Integer valueOf(String s,int radix)</code></p>
<p>返回一个新的Integer对象，用字符串s表示的整数初始化。指定字符串必须表示一个十进制整数（第一种方法），或者采用radix参数指定的进制（第二种方法）</p>
</li>
<li><p><code>Number parse(String s)</code></p>
<p>返回数字值，假设给定的String表示一个值</p>
</li>
</ul>
<h2 id="学习效率太差，该笔记停止更新！！！"><a href="#学习效率太差，该笔记停止更新！！！" class="headerlink" title="学习效率太差，该笔记停止更新！！！"></a>学习效率太差，该笔记停止更新！！！</h2>]]></content>
      <categories>
        <category>WEBbackend</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java集合</title>
    <url>/2022/11/03/WebBackend/Java/Java%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="声明数组变量"><a href="#声明数组变量" class="headerlink" title="声明数组变量"></a>声明数组变量</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">dataType[] arrayRefVar;   <span class="hljs-comment">// Java风格，首选方法</span><br>dataType arrayRefVar[];   <span class="hljs-comment">// C、C++风格，可以用但不是首选</span><br></code></pre></td></tr></table></figure>

<h3 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">arrayRefVar = <span class="hljs-keyword">new</span> <span class="hljs-title class_">dataType</span>[arraySize];<br><span class="hljs-comment">//1、使用 dataType[arraySize] 创建了一个数组。</span><br><span class="hljs-comment">//2、把新创建的数组的引用赋值给变量 arrayRefVar</span><br></code></pre></td></tr></table></figure>

<p>数组变量声明和创建数组一条语句实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">dataType[] arrayRefVar = <span class="hljs-keyword">new</span> <span class="hljs-title class_">dataType</span>[arraySize];<br><br>dataType[] arrayRefVar = &#123;value0, value1, ..., valuek&#125;;<br></code></pre></td></tr></table></figure>

<h3 id="For-Each循环"><a href="#For-Each循环" class="headerlink" title="For-Each循环"></a>For-Each循环</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(type element: array)<br>&#123;<br>    System.out.println(element);<br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>等价于：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(<span class="hljs-type">type</span> <span class="hljs-variable">element</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; element &lt; array.size(); i++)&#123;<br>    <span class="hljs-type">type</span> <span class="hljs-variable">element2</span> <span class="hljs-operator">=</span> array.get(element);<br>&#125;<br></code></pre></td></tr></table></figure>



<h3 id="多维数组初始化"><a href="#多维数组初始化" class="headerlink" title="多维数组初始化"></a>多维数组初始化</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">type[][] typeName = <span class="hljs-keyword">new</span> <span class="hljs-title class_">type</span>[typeLength1][typeLength2];<br></code></pre></td></tr></table></figure>

<p>type 可以为基本数据类型和复合数据类型，typeLength1 和 typeLength2 必须为正整数，typeLength1 为行数，typeLength2 为列数</p>
<h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221128103642624.png" alt="image-20221128103642624"></p>
<p>List表示一种有序列表，会根据放入元素先后顺序存放，可以包含重复的元素。</p>
<p>List 实现了 Collection 接口，它主要有两个常用的实现类：ArrayList 类和 LinkedList 类</p>
<table>
<thead>
<tr>
<th></th>
<th>ArrayList</th>
<th>LinkedList</th>
</tr>
</thead>
<tbody><tr>
<td>获取指定元素</td>
<td>速度很快</td>
<td>需要从头开始查找元素</td>
</tr>
<tr>
<td>添加元素到末尾</td>
<td>速度很快</td>
<td>速度很快</td>
</tr>
<tr>
<td>在指定位置添加&#x2F;删除</td>
<td>需要移动元素</td>
<td>不需要移动元素</td>
</tr>
<tr>
<td>内存占用</td>
<td>少</td>
<td>较大</td>
</tr>
<tr>
<td>实现方式</td>
<td>动态数组数据结构</td>
<td>链表数据结构</td>
</tr>
</tbody></table>
<p>高运行速度往往是以牺牲空间为代价的，而节省占用空间往往是以牺牲运行速度为代价的，所谓“鱼与<em>熊掌</em>不可得兼”</p>
<h3 id="ArrayList类"><a href="#ArrayList类" class="headerlink" title="ArrayList类"></a>ArrayList类</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//使用ArrayList类创建列表</span><br>        List&lt;Integer&gt; numbers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>        <span class="hljs-comment">//将元素添加到列表</span><br>        numbers.add(<span class="hljs-number">1</span>);<br>        numbers.add(<span class="hljs-number">2</span>);<br>        numbers.add(<span class="hljs-number">3</span>);<br>        System.out.println(<span class="hljs-string">&quot;List: &quot;</span> + numbers);<br><br>        <span class="hljs-comment">//从列表中访问元素</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> numbers.get(<span class="hljs-number">2</span>);<br>        System.out.println(<span class="hljs-string">&quot;访问元素: &quot;</span> + number);<br><br>        <span class="hljs-comment">//从列表中删除元素</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">removedNumber</span> <span class="hljs-operator">=</span> numbers.remove(<span class="hljs-number">1</span>);<br>        System.out.println(<span class="hljs-string">&quot;删除元素: &quot;</span> + removedNumber);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">List: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>访问元素: <span class="hljs-number">3</span><br>删除元素: <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure>

<h3 id="LinkedList类"><a href="#LinkedList类" class="headerlink" title="LinkedList类"></a>LinkedList类</h3><p>LinkedList底层的数据结构是基于双向循环链表，且头结点中不存放数据</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221128114729288.png" alt="image-20221128114729288"></p>
<p>既然是双向链表，那么必定存在一种数据结构——我们可以称之为节点，节点实例保存业务数据，前一个节点的位置信息和后一个节点位置信息，如：</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221128114850541.png" alt="image-20221128114850541"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">List&lt;Integer&gt; numbers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br></code></pre></td></tr></table></figure>

<h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221128151006577.png" alt="image-20221128151006577"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">HashMap&lt;Integer, String&gt; Sites = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Integer, String&gt;();<br></code></pre></td></tr></table></figure>

<h2 id="Properties-属性"><a href="#Properties-属性" class="headerlink" title="Properties(属性)"></a>Properties(属性)</h2><p>Properties 继承于 Hashtable，其作用用来读写以<code>.properties</code>为扩展名的配置文件。每行以<code>key=value</code>表示，以之前的连接池笔记为例：</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221206142119783.png" alt="image-20221206142119783"></p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221206141345604.png" alt="image-20221206141345604"></p>
<p><code>Properties</code>读取配置文件，一共有三步：</p>
<ol>
<li>创建<code>Properties</code>实例；</li>
<li>调用<code>load()</code>读取文件；</li>
<li>调用<code>getProperty()</code>获取配置。</li>
</ol>
<h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>List接口和Set接口都继承了Collection接口。 但是，它们之间存在一些差异。</p>
<ul>
<li>List可以包含重复的元素。但是，Set不能有重复的元素。</li>
<li>List中的元素以某种顺序存储。但是，Set中的元素以组的形式存储，就像数学中的集合一样。</li>
</ul>
<h2 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h2><p>表示先进先出（FIFO：First In First Out）的有序表</p>
<ul>
<li>通过<code>add()</code>&#x2F;<code>offer()</code>方法将元素添加到队尾；</li>
<li>通过<code>remove()</code>&#x2F;<code>poll()</code>从队首获取元素并删除；</li>
<li>通过<code>element()</code>&#x2F;<code>peek()</code>从队首获取元素但不删除。</li>
</ul>
<h2 id="PriorityQueue"><a href="#PriorityQueue" class="headerlink" title="PriorityQueue"></a>PriorityQueue</h2><p><code>PriorityQueue</code>实现了一个优先队列：从队首获取元素时，总是获取优先级最高的元素。</p>
<p><code>PriorityQueue</code>默认按元素比较的顺序排序（必须实现<code>Comparable</code>接口），也可以通过<code>Comparator</code>自定义排序算法（元素就不必实现<code>Comparable</code>接口）</p>
<h2 id="Deque"><a href="#Deque" class="headerlink" title="Deque"></a>Deque</h2><p><code>Deque</code>实现了一个双端队列（Double Ended Queue），它可以：</p>
<ul>
<li>将元素添加到队尾或队首：<code>addLast()</code>&#x2F;<code>offerLast()</code>&#x2F;<code>addFirst()</code>&#x2F;<code>offerFirst()</code>；</li>
<li>从队首／队尾获取元素并删除：<code>removeFirst()</code>&#x2F;<code>pollFirst()</code>&#x2F;<code>removeLast()</code>&#x2F;<code>pollLast()</code>；</li>
<li>从队首／队尾获取元素但不删除：<code>getFirst()</code>&#x2F;<code>peekFirst()</code>&#x2F;<code>getLast()</code>&#x2F;<code>peekLast()</code>；</li>
<li>总是调用<code>xxxFirst()</code>&#x2F;<code>xxxLast()</code>以便与<code>Queue</code>的方法区分开；</li>
<li>避免把<code>null</code>添加到队列</li>
</ul>
<h2 id="Stack-栈"><a href="#Stack-栈" class="headerlink" title="Stack(栈)"></a>Stack(栈)</h2><p>栈（Stack）是一种后进先出（LIFO）的数据结构，操作栈的元素的方法有：</p>
<ul>
<li>把元素压栈：<code>push(E)</code>；</li>
<li>把栈顶的元素“弹出”：<code>pop(E)</code>；</li>
<li>取栈顶元素但不弹出：<code>peek(E)</code>。</li>
</ul>
<p>在Java中，我们用<code>Deque</code>可以实现<code>Stack</code>的功能，注意只调用<code>push()</code>&#x2F;<code>pop()</code>&#x2F;<code>peek()</code>方法，避免调用<code>Deque</code>的其他方法。</p>
<p>最后，不要使用遗留类<code>Stack</code></p>
<h2 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h2><p>Iterator（迭代器）不是一个集合，它是一种用于访问集合的方法，可用于迭代   <code>ArrayList</code>和 <code>HashSet</code>等集合，比如我们之前的增强for就是迭代器简化的书写格式（增强for循环的底层使用了迭代器遍历）</p>
<h2 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h2><p><code>Collections</code>类提供了一组工具方法来方便使用集合类：</p>
<ul>
<li>创建空集合；</li>
<li>创建单元素集合；</li>
<li>创建不可变集合；</li>
<li>排序／洗牌等操作。</li>
</ul>
]]></content>
      <categories>
        <category>WEBbackend</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java面向对象</title>
    <url>/2022/11/03/WebBackend/Java/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul>
<li><p>面向对象程序设计(object-oriented programming,OPP)</p>
</li>
<li><p>一个程序就是一个世界，有很多事物(对象[属性,行为])</p>
</li>
</ul>
<h2 id="类-class-与对象-object"><a href="#类-class-与对象-object" class="headerlink" title="类(class)与对象(object)"></a>类(class)与对象(object)</h2><p><strong>类：</strong>是对象一个模板（抽象的概念集合），定义<strong>属性</strong>和<strong>行为</strong>(方法)</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221103165918708.png" alt="image-20221103165918708"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">class 类名称 &#123;<br>    属性（变量）;<br>    行为（方法）;<br>&#125;<br></code></pre></td></tr></table></figure>



<blockquote>
<p>注：</p>
<ul>
<li><p><strong>属性</strong>是类的组成部分，一般是<strong>基本数据类型</strong>，也可以是<strong>引用类型</strong>(对象，数组)</p>
</li>
<li><p><strong>属性</strong>的定义：set&#x2F;get方法名，去掉set&#x2F;get后，把剩余的部分首字母改为小写后，即为这个类的属性</p>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">student</span>&#123;<br>　　<span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>&#123;<br>　　　　<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello World&quot;</span>;<br>　　&#125;<br>&#125;<br><span class="hljs-comment">//成员变量：无</span><br><span class="hljs-comment">//属性：name</span><br></code></pre></td></tr></table></figure>
</li>
<li><p><strong>所以,成员变量!&#x3D;属性</strong>，还有个叫法<strong>实例字段</strong>(instance field)</p>
</li>
</ul>
</blockquote>
<p><strong>对象：</strong>是类的一个实例，每个对象拥有自己独立的<strong>属性</strong>(数据)，依靠属性来区分不用的对象。</p>
<p><strong>实例：</strong>由类<strong>构造</strong>(construct)对象的过程称为创建类的<strong>实例</strong>(instance)</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221103174135936.png" alt="image-20221103174135936"></p>
<h2 id="面向对象基本特性"><a href="#面向对象基本特性" class="headerlink" title="面向对象基本特性"></a>面向对象基本特性</h2><p>封装：(encapsulation,有时被称为数据隐藏)封装就是将<strong>属性</strong>(数据)和<strong>行为</strong>组合在一个包中，并对对象的使用者隐藏具体的实现方式。</p>
<p>继承：在原本的基础之上继续进行扩充</p>
<p>多态：在一个指定的范围之内进行概念的转换</p>
<blockquote>
<p>方法(method)：操作数据的过程</p>
<p>状态(state)：实例字段值的集合就是这个对象的当前状态。</p>
</blockquote>
<h2 id="类的成员"><a href="#类的成员" class="headerlink" title="类的成员"></a>类的成员</h2><p>成员变量：在类中声明的变量</p>
<p>局部变量：在方法中声明的变量</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/clip_image089.jpg" alt="img"></p>
<h3 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">访问修饰符 返回值类型 方法名(形参列表) &#123;	<span class="hljs-comment">//方法体</span><br>    语句;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<ul>
<li><strong>访问修饰符</strong>：public，protected，默认，private</li>
<li><strong>返回值类型</strong>：基本类型和引用类型（数组，对象）,void表示无返回值</li>
<li><strong>方法名</strong>：遵循驼峰命名法</li>
<li><strong>形参列表</strong>：表示成员方法的输入<ul>
<li>一个方法可以有零个参数，也可以有多个参数</li>
<li>参数类型可以为任意类型，包括基本类型和引用类型（数组，对象）</li>
<li>调用带参数的方法时，一定要对应着参数列表传入相同类型或兼容类型的参数</li>
<li>方法定义时的参数叫形式参数，简称<strong>形参</strong>；方法调用时的参数叫实际参数，简称<strong>实参</strong>；实参和形参的类时要一致或兼容，个数、顺序必须一致</li>
</ul>
</li>
<li><strong>方法主体</strong>：表示为了实现某一功能代码块</li>
<li><strong>return</strong>：如果有返回值类型，必须用return</li>
</ul>
<p>this.对象成员方法(参数值,参数值);</p>
<p>对象名.对象成员方法(参数值,参数值);</p>
<h2 id="重载-overload"><a href="#重载-overload" class="headerlink" title="重载(overload)"></a>重载(overload)</h2><ul>
<li>方法名和作用域必须相同</li>
<li>参数必须不同：数量、类型、顺序不用（只要有一个不用，就是重载方法）</li>
</ul>
<h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h2><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2>]]></content>
      <categories>
        <category>WEBbackend</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java面试八股文（Company）</title>
    <url>/2022/11/25/WebBackend/Java/Java%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87%EF%BC%88Company%EF%BC%89/</url>
    <content><![CDATA[<h3 id="1-jdk和jre的区别"><a href="#1-jdk和jre的区别" class="headerlink" title="1. jdk和jre的区别"></a>1. jdk和jre的区别</h3><ul>
<li>jdk是开发工具</li>
<li>jre是运行环境</li>
</ul>
<h3 id="2-jdk目录？"><a href="#2-jdk目录？" class="headerlink" title="2. jdk目录？"></a>2. jdk目录？</h3><ul>
<li>bin-&gt;可执行文件 <code>javac.exe</code>编译   <code>java.exe</code>执行</li>
<li>lib-&gt;类库包   tools.jar公共类库</li>
<li>db-&gt;数据库</li>
<li>include-&gt;包含函数库</li>
<li>src.zip-&gt;源代码</li>
</ul>
<h3 id="3-java为什么能跨平台？"><a href="#3-java为什么能跨平台？" class="headerlink" title="3. java为什么能跨平台？"></a>3. java为什么能跨平台？</h3><p>JVM（java虚拟机）</p>
<h3 id="4-JVM的工作机制？"><a href="#4-JVM的工作机制？" class="headerlink" title="4. JVM的工作机制？"></a>4. JVM的工作机制？</h3><p>*.java源文件通过javac.exe编译生成.class的字节码文件。再由java.exe解释执行字节码文件，生成中间代码，显示结果</p>
<h3 id="5-java是哪种语言派生？又是哪种语言衍生？"><a href="#5-java是哪种语言派生？又是哪种语言衍生？" class="headerlink" title="5. java是哪种语言派生？又是哪种语言衍生？"></a>5. java是哪种语言派生？又是哪种语言衍生？</h3><p>oak派生，c语言衍生</p>
<h3 id="6-java有几种基本数据类型各占多少字节？"><a href="#6-java有几种基本数据类型各占多少字节？" class="headerlink" title="6. java有几种基本数据类型各占多少字节？"></a>6. java有几种基本数据类型各占多少字节？</h3><table>
<thead>
<tr>
<th align="center">数据类型1</th>
<th align="center">数据类型2</th>
<th align="center">占用字节</th>
</tr>
</thead>
<tbody><tr>
<td align="center">byte</td>
<td align="center">boolean</td>
<td align="center">1字节</td>
</tr>
<tr>
<td align="center">char</td>
<td align="center">short</td>
<td align="center">2字节</td>
</tr>
<tr>
<td align="center">int</td>
<td align="center">float</td>
<td align="center">4字节</td>
</tr>
<tr>
<td align="center">long</td>
<td align="center">double</td>
<td align="center">8字节</td>
</tr>
</tbody></table>
<h3 id="7-byte-bvar-x3D-129-能编译通过吗？如果不能请说明？"><a href="#7-byte-bvar-x3D-129-能编译通过吗？如果不能请说明？" class="headerlink" title="7. byte bvar &#x3D; 129;能编译通过吗？如果不能请说明？"></a>7. byte bvar &#x3D; 129;能编译通过吗？如果不能请说明？</h3><p>不能通过编译，因为byte类型的数据取值范围为-128-127，超范围了</p>
<h3 id="8-short-s-x3D-1-s-x3D-s-1-能编译通过吗？如果不能请说明，并改正？"><a href="#8-short-s-x3D-1-s-x3D-s-1-能编译通过吗？如果不能请说明，并改正？" class="headerlink" title="8. short s &#x3D; 1; s &#x3D; s + 1;能编译通过吗？如果不能请说明，并改正？"></a>8. short s &#x3D; 1; s &#x3D; s + 1;能编译通过吗？如果不能请说明，并改正？</h3><p>不能通过编译，因为<code>s = s + 1;</code>中的1为int型，而s为short类型。一个int<br>和short类型运算时，自动转换为int类型所以超出short范围。改正：<code>s += 1;</code></p>
<h3 id="9-int-a-a-x3D-a-2-能编译通过吗？如果不能请说明？"><a href="#9-int-a-a-x3D-a-2-能编译通过吗？如果不能请说明？" class="headerlink" title="9. int a; a &#x3D; a + 2;能编译通过吗？如果不能请说明？"></a>9. int a; a &#x3D; a + 2;能编译通过吗？如果不能请说明？</h3><p>不能通过编译，因为a为局部变量没有进行初始化赋值，就在 <code>a = a+2;</code>获取a<br>的值，所以编译产生错误</p>
<h3 id="10-char-c-x3D-‘ab’-能编译通过吗？如果不能请说明？"><a href="#10-char-c-x3D-‘ab’-能编译通过吗？如果不能请说明？" class="headerlink" title="10. char c &#x3D; ‘ab’;能编译通过吗？如果不能请说明？"></a>10. char c &#x3D; ‘ab’;能编译通过吗？如果不能请说明？</h3><p>不能通过编译，因为char类型只能赋值一个字符，两个字符称为字符串</p>
<h3 id="11-char-c-x3D-‘-n’-能编译通过吗？如果不能请说明？"><a href="#11-char-c-x3D-‘-n’-能编译通过吗？如果不能请说明？" class="headerlink" title="11. char c&#x3D; ‘\n’;能编译通过吗？如果不能请说明？"></a>11. char c&#x3D; ‘\n’;能编译通过吗？如果不能请说明？</h3><p>能通过编译，因为<code>\n</code>为转义字符，视为一个字符所以可以通过</p>
<h3 id="12-float-x3D-3-4-编译能通过吗？"><a href="#12-float-x3D-3-4-编译能通过吗？" class="headerlink" title="12. float&#x3D;3.4; 编译能通过吗？"></a>12. float&#x3D;3.4; 编译能通过吗？</h3><p>不能，默认的小数类型为double，改正：<code>float=3.4f;</code></p>
<h3 id="13-double-a-x3D-3-编译能通过吗？"><a href="#13-double-a-x3D-3-编译能通过吗？" class="headerlink" title="13. double $a &#x3D; 3; 编译能通过吗？"></a>13. double $a &#x3D; 3; 编译能通过吗？</h3><p>能，变量名可以由$_字母开头，可以包含数字，不能包含特殊字符，不能以关键字和保留字命名</p>
<h3 id="14-int-num-x3D-int-1-3-int-2-9-和int-num2-x3D-int-1-3-2-9-结果相同吗？"><a href="#14-int-num-x3D-int-1-3-int-2-9-和int-num2-x3D-int-1-3-2-9-结果相同吗？" class="headerlink" title="14. int num &#x3D; (int)1.3 + (int)2.9;和int num2 &#x3D; (int)(1.3 + 2.9);结果相同吗？"></a>14. int num &#x3D; (int)1.3 + (int)2.9;和int num2 &#x3D; (int)(1.3 + 2.9);结果相同吗？</h3><p>不能 num值为3，num2值为4</p>
<h3 id="15-‘a’-1结果为多少？"><a href="#15-‘a’-1结果为多少？" class="headerlink" title="15. ‘a’ + 1结果为多少？"></a>15. ‘a’ + 1结果为多少？</h3><p>98，因为a为char类型，以unicode编码。a的ASCII码为97.当char和数值运算时，自动转换为对应的ASCII码值进行运算</p>
<h3 id="16-System-out-println-1-lt-3-8-88-2-输出结果"><a href="#16-System-out-println-1-lt-3-8-88-2-输出结果" class="headerlink" title="16. System.out.println(1&lt;3?8:88.2);输出结果"></a>16. System.out.println(1&lt;3?8:88.2);输出结果</h3><p>输出8.0。因为隐式转换，前后的类型相同。</p>
<h3 id="17-int-a-x3D-0-b-x3D-0-b-x3D-a-a和b的值是多少"><a href="#17-int-a-x3D-0-b-x3D-0-b-x3D-a-a和b的值是多少" class="headerlink" title="17. int a &#x3D; 0,b &#x3D;0; b &#x3D; a++;a和b的值是多少"></a>17. int a &#x3D; 0,b &#x3D;0; b &#x3D; a++;a和b的值是多少</h3><p>a为1,b为0.变量++,先赋值后自加1</p>
<h3 id="18-int-a-x3D-0-b-x3D-0-b-x3D-a-a和b的值是多少"><a href="#18-int-a-x3D-0-b-x3D-0-b-x3D-a-a和b的值是多少" class="headerlink" title="18. int a &#x3D; 0,b &#x3D;0; b &#x3D; ++a;a和b的值是多少"></a>18. int a &#x3D; 0,b &#x3D;0; b &#x3D; ++a;a和b的值是多少</h3><p>a为1,b为1.++变量,先自加1后赋值</p>
<h3 id="19-amp-和-amp-amp-的区别"><a href="#19-amp-和-amp-amp-的区别" class="headerlink" title="19. &amp;和&amp;&amp;的区别"></a>19. &amp;和&amp;&amp;的区别</h3><ul>
<li>&amp;与位运算符，第一个条件不满足时第二个条件继续执行</li>
<li>&amp;&amp;逻辑与运算符，第一个条件不满足时第二个条件不继续执行，所以称之为短路与</li>
</ul>
<h3 id="20-int-a-x3D-1-b-x3D-2-System-out-println-a-gt-1-amp-amp-–b-gt-0-true-false-输出值是多少？a和b的值是多少？"><a href="#20-int-a-x3D-1-b-x3D-2-System-out-println-a-gt-1-amp-amp-–b-gt-0-true-false-输出值是多少？a和b的值是多少？" class="headerlink" title="20. int a &#x3D;1,b &#x3D; 2; System.out.println(a++ &gt; 1 &amp;&amp; –b &gt;0 ?true:false);输出值是多少？a和b的值是多少？"></a>20. int a &#x3D;1,b &#x3D; 2; System.out.println(a++ &gt; 1 &amp;&amp; –b &gt;0 ?true:false);输出值是多少？a和b的值是多少？</h3><p>false a为2 b为2 &amp;&amp;为逻辑与，如果第一个表达式为假，第二个表达式不会被执行</p>
<h3 id="21-int-a-x3D-1-b-x3D-2-System-out-println-a-gt-1-–b-lt-0-true-false-输出值是多少？a和b的值是多少？"><a href="#21-int-a-x3D-1-b-x3D-2-System-out-println-a-gt-1-–b-lt-0-true-false-输出值是多少？a和b的值是多少？" class="headerlink" title="21. int a &#x3D;1,b &#x3D; 2; System.out.println(++a &gt; 1 || –b &lt;0 ?true:false);输出值是多少？a和b的值是多少？"></a>21. int a &#x3D;1,b &#x3D; 2; System.out.println(++a &gt; 1 || –b &lt;0 ?true:false);输出值是多少？a和b的值是多少？</h3><p>true a为2 b为2 &amp;&amp;为逻辑与，如果第一个表达式为真，第二个表达式不会被执行</p>
<h3 id="22-int-a-x3D-1-int-b-x3D-1-if-a-lt-0-amp-b–-lt-x3D-1-System-out-print-“OK”-输出结果"><a href="#22-int-a-x3D-1-int-b-x3D-1-if-a-lt-0-amp-b–-lt-x3D-1-System-out-print-“OK”-输出结果" class="headerlink" title="22. int a&#x3D;1;int b&#x3D;1;if(++a&lt;0&amp;b–&lt;&#x3D;1){System.out.print(“OK”)};输出结果"></a>22. int a&#x3D;1;int b&#x3D;1;if(++a&lt;0&amp;b–&lt;&#x3D;1){System.out.print(“OK”)};输出结果</h3><p><code>a=2</code>,<code>b=0;</code> OK不打印</p>
<h3 id="23-int-a-x3D-1-int-b-x3D-1-if-a-lt-0-amp-amp-b–-lt-x3D-1-System-out-print-“OK”-输出结果"><a href="#23-int-a-x3D-1-int-b-x3D-1-if-a-lt-0-amp-amp-b–-lt-x3D-1-System-out-print-“OK”-输出结果" class="headerlink" title="23. int a&#x3D;1;int b&#x3D;1;if(++a&lt;0&amp;&amp;b–&lt;&#x3D;1){System.out.print(“OK”)};输出结果"></a>23. int a&#x3D;1;int b&#x3D;1;if(++a&lt;0&amp;&amp;b–&lt;&#x3D;1){System.out.print(“OK”)};输出结果</h3><p><code>a=2</code>,<code>b=1;</code> OK不打印</p>
<h3 id="24-int-a-x3D-1-int-b-x3D-1-if-a-lt-0-b–-lt-x3D-1-System-out-print-“OK”-输出结果-96"><a href="#24-int-a-x3D-1-int-b-x3D-1-if-a-lt-0-b–-lt-x3D-1-System-out-print-“OK”-输出结果-96" class="headerlink" title="24. int a&#x3D;1;int b&#x3D;1;if(++a&lt;0||b–&lt;&#x3D;1){System.out.print(“OK”)};输出结果&#96;"></a>24. int a&#x3D;1;int b&#x3D;1;if(++a&lt;0||b–&lt;&#x3D;1){System.out.print(“OK”)};输出结果&#96;</h3><p><code>a=2</code>,<code>b=0;</code> 打印OK</p>
<h3 id="25-for-int-i-x3D-0-i-lt-3-i-其中i-lt-3这个执行多少次？int-i-x3D-0-执行几次？i-执行几次？"><a href="#25-for-int-i-x3D-0-i-lt-3-i-其中i-lt-3这个执行多少次？int-i-x3D-0-执行几次？i-执行几次？" class="headerlink" title="25. for(int i&#x3D;0; i &lt; 3;i++){},其中i &lt; 3这个执行多少次？int i &#x3D; 0 执行几次？i++执行几次？"></a>25. for(int i&#x3D;0; i &lt; 3;i++){},其中i &lt; 3这个执行多少次？int i &#x3D; 0 执行几次？i++执行几次？</h3><p><code>i &lt; 3</code>执行4次  <code>int i = 0 </code>执行1次  <code>i++</code> 执行3次</p>
<h3 id="26-int-i-x3D-2-while-i-lt-3-System-out-println-i-i-；输出结果"><a href="#26-int-i-x3D-2-while-i-lt-3-System-out-println-i-i-；输出结果" class="headerlink" title="26. int i &#x3D; 2; while(i&lt;3) {System.out.println(i);i++;}；输出结果"></a>26. int i &#x3D; 2; while(i&lt;3) {System.out.println(i);i++;}；输出结果</h3><p>输出2</p>
<h3 id="27-int-i-x3D-2-do-System-out-println-i-i-while-i-lt-2-；System-out-println-i-输出结果"><a href="#27-int-i-x3D-2-do-System-out-println-i-i-while-i-lt-2-；System-out-println-i-输出结果" class="headerlink" title="27. int i &#x3D; 2; do{System.out.println(i);i++;}while(i&lt;2)；System.out.println(i);输出结果"></a>27. int i &#x3D; 2; do{System.out.println(i);i++;}while(i&lt;2)；System.out.println(i);输出结果</h3><p>输出2,3</p>
<h3 id="28-int-a-x3D-1-switch-a-case-1-System-out-println-1-case-2-System-out-println-2-break-default-System-out-println-3-输出结果"><a href="#28-int-a-x3D-1-switch-a-case-1-System-out-println-1-case-2-System-out-println-2-break-default-System-out-println-3-输出结果" class="headerlink" title="28. int a&#x3D;1; switch(a){case 1:System.out.println(1);case 2:System.out.println(2);break;default:System.out.println(3);}输出结果"></a>28. int a&#x3D;1; switch(a){case 1:System.out.println(1);case 2:System.out.println(2);break;default:System.out.println(3);}输出结果</h3><p>输出1,2</p>
<h3 id="29-数组是对象吗？"><a href="#29-数组是对象吗？" class="headerlink" title="29.  数组是对象吗？"></a>29.  数组是对象吗？</h3><p>是</p>
<h3 id="30-length是String的方法，数组的属性吗"><a href="#30-length是String的方法，数组的属性吗" class="headerlink" title="30. length是String的方法，数组的属性吗"></a>30. length是String的方法，数组的属性吗</h3><p>是</p>
<h3 id="31-数值类型的数组，每个元素的默认值是什么，boolean的默认元素是什么，引用型的默认值是什么，Integer的默认元素是什么"><a href="#31-数值类型的数组，每个元素的默认值是什么，boolean的默认元素是什么，引用型的默认值是什么，Integer的默认元素是什么" class="headerlink" title="31. 数值类型的数组，每个元素的默认值是什么，boolean的默认元素是什么，引用型的默认值是什么，Integer的默认元素是什么"></a>31. 数值类型的数组，每个元素的默认值是什么，boolean的默认元素是什么，引用型的默认值是什么，Integer的默认元素是什么</h3><ul>
<li>数值:0;</li>
<li>boolean : false;</li>
<li>引用型 : null;</li>
<li>Integer : null;</li>
</ul>
<h3 id="32-实例化数组的几种方式"><a href="#32-实例化数组的几种方式" class="headerlink" title="32. 实例化数组的几种方式"></a>32. 实例化数组的几种方式</h3><p>int [] num &#x3D;{1,2,3};<br>int [] num &#x3D;new int [3];<br>int num [] &#x3D; new int[3];<br>int num [] &#x3D; new int []{1,2,3}.</p>
<h3 id="33-int-num-x3D-new-int-3-打印输出num-3-，编译能不能通过，如果能通过，运行能不能发生异常"><a href="#33-int-num-x3D-new-int-3-打印输出num-3-，编译能不能通过，如果能通过，运行能不能发生异常" class="headerlink" title="33. int [] num &#x3D;new int [3];打印输出num[3]，编译能不能通过，如果能通过，运行能不能发生异常"></a>33. int [] num &#x3D;new int [3];打印输出num[3]，编译能不能通过，如果能通过，运行能不能发生异常</h3><p>能通过，但是运行时会发生数组下标越界异常，因为该数组的下标最大到2</p>
<h3 id="33-1-如果声明一个数组-int-num-x3D-null-num-0-x3D-1"><a href="#33-1-如果声明一个数组-int-num-x3D-null-num-0-x3D-1" class="headerlink" title="33.1 如果声明一个数组 int[]num&#x3D;null;num[0]&#x3D;1;"></a>33.1 如果声明一个数组 int[]num&#x3D;null;num[0]&#x3D;1;</h3><p>编译能通过，运行出现空指针异常。</p>
<h3 id="34-String-str-x3D-new-String-3-System-out-println-str-0-length"><a href="#34-String-str-x3D-new-String-3-System-out-println-str-0-length" class="headerlink" title="34. String [] str&#x3D;new String[3];System.out.println(str[0].length());"></a>34. String [] str&#x3D;new String[3];System.out.println(str[0].length());</h3><p>编译能通过，运行出现空指针异常</p>
<h3 id="35-java和c哪个是面向对象的语言，哪个是面向过程的语言？"><a href="#35-java和c哪个是面向对象的语言，哪个是面向过程的语言？" class="headerlink" title="35. java和c哪个是面向对象的语言，哪个是面向过程的语言？"></a>35. java和c哪个是面向对象的语言，哪个是面向过程的语言？</h3><p>java面向对象  c面向过程</p>
<h3 id="36-OOP-OOD-OOA代表的含义"><a href="#36-OOP-OOD-OOA代表的含义" class="headerlink" title="36. OOP\OOD\OOA代表的含义"></a>36. OOP\OOD\OOA代表的含义</h3><p>OOP面向对象编程  OOD面向对象设计  OOA面向对象分析</p>
<h3 id="37-面向对象和面向过程的区别？"><a href="#37-面向对象和面向过程的区别？" class="headerlink" title="37. 面向对象和面向过程的区别？"></a>37. 面向对象和面向过程的区别？</h3><p>面向过程，重点在执行的流程，函数调用函数，如果流程发生变化，将重新编写。程序紧耦合，代码不能复用<br>面向对象，把事物看成对象，是对象与对象的联系。如果需求发生变化，更改联系即可。使程序更加松耦合，代码的复用性更高</p>
<h3 id="38-面向对象的基本特征"><a href="#38-面向对象的基本特征" class="headerlink" title="38. 面向对象的基本特征?"></a>38. 面向对象的基本特征?</h3><p>封装、继承、多态</p>
<h3 id="39-什么是封装？封装有什么好处？"><a href="#39-什么是封装？封装有什么好处？" class="headerlink" title="39. 什么是封装？封装有什么好处？"></a>39. 什么是封装？封装有什么好处？</h3><p>隐藏属性、方法或实现细节的过程称为封装。好处在于让使用者只能通过事先定制好的方法来访问数据，可以方便地加入控制逻辑，限制对属性的不合理操作<br>便于修改，增强代码的可维护性</p>
<h3 id="40-什么是继承，继承有什么好处？"><a href="#40-什么是继承，继承有什么好处？" class="headerlink" title="40. 什么是继承，继承有什么好处？"></a>40. 什么是继承，继承有什么好处？</h3><p>在Java中定义一个类时，让该类通过关键字extends继承一个已有的类，这就是类的继承(泛化)。<br>被继承的类称为父类（超类，基类），新的类称为子类（派生类）。子类继承父类的所有属性和方法，<br>同时也可以增加自己的属性和方法，实现代码的复用和扩展。</p>
<h3 id="41-什么是多态，多态的优点？多态的表现方式有哪些？"><a href="#41-什么是多态，多态的优点？多态的表现方式有哪些？" class="headerlink" title="41. 什么是多态，多态的优点？多态的表现方式有哪些？"></a>41. 什么是多态，多态的优点？多态的表现方式有哪些？</h3><p>一种事务的多种表现形态称之为多态。多态的优点简化代码，改善代码的组织性和可读性，易于扩展。多态表现方式：重写、重载、父类 对象 &#x3D; new 子类(); 接口 对象 &#x3D; new 实现类();</p>
<h3 id="42-在一个java文件中只能声明一个类吗？"><a href="#42-在一个java文件中只能声明一个类吗？" class="headerlink" title="42. 在一个java文件中只能声明一个类吗？"></a>42. 在一个java文件中只能声明一个类吗？</h3><p>不是，可以声明多个类，但是只能有一个public类，必须与文件名相同</p>
<h3 id="43-对象分为哪两种？"><a href="#43-对象分为哪两种？" class="headerlink" title="43. 对象分为哪两种？"></a>43. 对象分为哪两种？</h3><p>引用对象，存在于栈中，指向堆中的地址<br>实例化对象，用new实例化，存在于堆中，在内存中开辟存储空间</p>
<h3 id="44-String-str-x3D-new-String-“123”-产生几个对象？"><a href="#44-String-str-x3D-new-String-“123”-产生几个对象？" class="headerlink" title="44. String str &#x3D; new String(“123”);产生几个对象？"></a>44. String str &#x3D; new String(“123”);产生几个对象？</h3><p>产生两个对象，一个是引用对象String str存在于栈中<br>另一个实例化对象<code>str = new String(&quot;123&quot;);</code>存在于堆中，开辟存储空间</p>
<h3 id="45-x3D-x3D-和equals的区别"><a href="#45-x3D-x3D-和equals的区别" class="headerlink" title="45. &#x3D;&#x3D;和equals的区别"></a>45. &#x3D;&#x3D;和equals的区别</h3><p>&#x3D;&#x3D;用于比对基本数据类型是否相等。对于引用对象来说，先比对地址后比较值<br>equals,用于比对引用类型，比对String类型时只比对值，因为它重写了equlas方法。<br>如果比对指定的引用类型，可以重写equals方法，获取属性的hashCode进行比对。</p>
<h3 id="46-String-str1-x3D-new-String-“123”-String-str2-x3D-new-String-“123”-x3D-x3D-和equals的值？"><a href="#46-String-str1-x3D-new-String-“123”-String-str2-x3D-new-String-“123”-x3D-x3D-和equals的值？" class="headerlink" title="46. String str1 &#x3D; new String(“123”);String str2 &#x3D; new String(“123”); &#x3D;&#x3D;和equals的值？"></a>46. String str1 &#x3D; new String(“123”);String str2 &#x3D; new String(“123”); &#x3D;&#x3D;和equals的值？</h3><p>&#x3D;&#x3D;：返回值为false，因为str1和str2都是实例化对象，在堆中存在不同的地址。<br>先比对地址后比较值。因为地址不同，所以返回false<br>equals：返回值为true,只是比较值，应为值相等，所以返回为true</p>
<h3 id="47-String-str1-x3D-“123”-String-str2-x3D-“123”-x3D-x3D-和equals的值？"><a href="#47-String-str1-x3D-“123”-String-str2-x3D-“123”-x3D-x3D-和equals的值？" class="headerlink" title="47. String str1 &#x3D; “123”;String str2 &#x3D; “123”;&#x3D;&#x3D;和equals的值？"></a>47. String str1 &#x3D; “123”;String str2 &#x3D; “123”;&#x3D;&#x3D;和equals的值？</h3><p>&#x3D;&#x3D;：返回值为true，因为str1和str2两个引用对象都指向于堆中的常量池中的123，地址相同。<br>先比对地址后比较值。因为地址相同，并且值相同，所以返回true<br>equals：返回值为true,只是比较值，应为值相等，所以返回为true</p>
<h3 id="48-构造方法当什么时候被调用？有什么作用？"><a href="#48-构造方法当什么时候被调用？有什么作用？" class="headerlink" title="48. 构造方法当什么时候被调用？有什么作用？"></a>48. 构造方法当什么时候被调用？有什么作用？</h3><p>当对象实例化的时候被调用。给对象属性初始化赋值</p>
<h3 id="49-如果一个类中只有有参的构造，能实例化一个无参的对象吗？"><a href="#49-如果一个类中只有有参的构造，能实例化一个无参的对象吗？" class="headerlink" title="49. 如果一个类中只有有参的构造，能实例化一个无参的对象吗？"></a>49. 如果一个类中只有有参的构造，能实例化一个无参的对象吗？</h3><p>不能，在这种情况下想实例化无参的对象，必须重载一个无参的构造</p>
<h3 id="50-什么是对象方法和对象属性，如何在静态方法中调用？"><a href="#50-什么是对象方法和对象属性，如何在静态方法中调用？" class="headerlink" title="50. 什么是对象方法和对象属性，如何在静态方法中调用？"></a>50. 什么是对象方法和对象属性，如何在静态方法中调用？</h3><p>不用static修饰的方法和属性称为对象方法和对象属性<br>用对象进行调用对象方法和对象属性，不能使用this</p>
<h3 id="51-静态块什么时候执行？有什么作用？"><a href="#51-静态块什么时候执行？有什么作用？" class="headerlink" title="51. 静态块什么时候执行？有什么作用？"></a>51. 静态块什么时候执行？有什么作用？</h3><p>静态块在类加载的时候执行，在构造方法前执行，并且只执行一次。给静态成员变量初始化。</p>
<h3 id="52-输出一点数据”13-25-36-18-99”，中间以逗号分隔-请进行解析，分割成数组。"><a href="#52-输出一点数据”13-25-36-18-99”，中间以逗号分隔-请进行解析，分割成数组。" class="headerlink" title="52. 输出一点数据”13,25,36,18,99”，中间以逗号分隔 请进行解析，分割成数组。"></a>52. 输出一点数据”13,25,36,18,99”，中间以逗号分隔 请进行解析，分割成数组。</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">String[] str= <span class="hljs-string">&quot;13,25,36,18,99&quot;</span>.split(<span class="hljs-string">&quot;,&quot;</span>);		<span class="hljs-comment">//以，解析字符串</span><br></code></pre></td></tr></table></figure>

<h3 id="53-截取字符串用什么方法？"><a href="#53-截取字符串用什么方法？" class="headerlink" title="53. 截取字符串用什么方法？"></a>53. 截取字符串用什么方法？</h3><p>“字符串”.subString(起始索引，结束索引);<br>截取位置 &gt;&#x3D;起始索引 &amp;&amp; 截取位置 &lt; 结束索引</p>
<h3 id="54-子字串在父字串包含的位置，用什么方法？"><a href="#54-子字串在父字串包含的位置，用什么方法？" class="headerlink" title="54. 子字串在父字串包含的位置，用什么方法？"></a>54. 子字串在父字串包含的位置，用什么方法？</h3><p><code>&quot;字符串&quot;.indexOf(&quot;子字串&quot;);</code><br>如果大于-1，代表包含，否则代表不存在</p>
<h3 id="55-“123”-subString-0-4-编译能通过吗？"><a href="#55-“123”-subString-0-4-编译能通过吗？" class="headerlink" title="55. “123”.subString(0,4);,编译能通过吗？"></a>55. “123”.subString(0,4);,编译能通过吗？</h3><p>能通过编译，但运行时，会抛出字符串下标越界异常</p>
<h3 id="56-String类能被继承吗？"><a href="#56-String类能被继承吗？" class="headerlink" title="56. String类能被继承吗？"></a>56. String类能被继承吗？</h3><p>不能，因为被final所修饰</p>
<h3 id="57-子类覆盖了父类的方法，实例化父类对象，调用该同名方法，调用的是父类还是子类的方法？"><a href="#57-子类覆盖了父类的方法，实例化父类对象，调用该同名方法，调用的是父类还是子类的方法？" class="headerlink" title="57. 子类覆盖了父类的方法，实例化父类对象，调用该同名方法，调用的是父类还是子类的方法？"></a>57. 子类覆盖了父类的方法，实例化父类对象，调用该同名方法，调用的是父类还是子类的方法？</h3><p>父类的方法，父类只能调用父类的方法</p>
<h3 id="58-如果父类只有有参构造，在子类如何编写，才能编译通过？"><a href="#58-如果父类只有有参构造，在子类如何编写，才能编译通过？" class="headerlink" title="58. 如果父类只有有参构造，在子类如何编写，才能编译通过？"></a>58. 如果父类只有有参构造，在子类如何编写，才能编译通过？</h3><p>在子类编写子类的构造方法，在子类的构造方法的第一行调用父类的有参构造<br>用super(参数值,参数值)</p>
<h3 id="59-重写和重载的区别？"><a href="#59-重写和重载的区别？" class="headerlink" title="59. 重写和重载的区别？"></a>59. 重写和重载的区别？</h3><p>重写(override覆写)：在继承关系下，子类覆盖父类的方法，要求方法名，参数列表，返回值必须相同<br>访问修饰符必须大于等于父类访问修饰符。由private修饰的方法不能被重写，也不能被继承。由static<br>修饰的方法不能被重写，但是能被继承。由final所修饰的方法不能被重写，但是能被继承<br>重载（overload）:在同一类中，方法名相同，参数列表必须不同，跟返回值无关</p>
<h3 id="60-访问修饰符有哪些？作用域是什么？"><a href="#60-访问修饰符有哪些？作用域是什么？" class="headerlink" title="60. 访问修饰符有哪些？作用域是什么？"></a>60. 访问修饰符有哪些？作用域是什么？</h3><table>
<thead>
<tr>
<th>访问修饰符</th>
<th>同一类</th>
<th>同一类不同包</th>
<th>不同包子孙类</th>
<th>不同包</th>
</tr>
</thead>
<tbody><tr>
<td>public</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>公共的</td>
</tr>
<tr>
<td>protected</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>受保护的</td>
</tr>
<tr>
<td>缺省的</td>
<td>√</td>
<td>√</td>
<td></td>
<td></td>
</tr>
<tr>
<td>private</td>
<td>√</td>
<td></td>
<td></td>
<td>私有的</td>
</tr>
</tbody></table>
<h3 id="61-抽象类和接口能被实例化吗"><a href="#61-抽象类和接口能被实例化吗" class="headerlink" title="61. 抽象类和接口能被实例化吗"></a>61. 抽象类和接口能被实例化吗</h3><p>都不能被实例化</p>
<h3 id="62-抽象类的构造方法什么时候被调用"><a href="#62-抽象类的构造方法什么时候被调用" class="headerlink" title="62. 抽象类的构造方法什么时候被调用"></a>62. 抽象类的构造方法什么时候被调用</h3><p>实例化实现子类的实例化对象的时候被调用</p>
<h3 id="63-没有抽象方法的类一定不为抽象类"><a href="#63-没有抽象方法的类一定不为抽象类" class="headerlink" title="63. 没有抽象方法的类一定不为抽象类"></a>63. 没有抽象方法的类一定不为抽象类</h3><p>不对</p>
<h3 id="64-有抽象方法的类一定为抽象类"><a href="#64-有抽象方法的类一定为抽象类" class="headerlink" title="64. 有抽象方法的类一定为抽象类"></a>64. 有抽象方法的类一定为抽象类</h3><p>对</p>
<h3 id="65-一个类可以继承多个接口吗"><a href="#65-一个类可以继承多个接口吗" class="headerlink" title="65. 一个类可以继承多个接口吗"></a>65. 一个类可以继承多个接口吗</h3><p>不能，一个类只能实现多个接口。</p>
<h3 id="66-一个类能继承一个类的同时实现多个接口吗"><a href="#66-一个类能继承一个类的同时实现多个接口吗" class="headerlink" title="66. 一个类能继承一个类的同时实现多个接口吗"></a>66. 一个类能继承一个类的同时实现多个接口吗</h3><p>能 ，类 extends 父类  implements 接口,接口</p>
<h3 id="67-一个接口可以继承多个接口，java是多继承吗"><a href="#67-一个接口可以继承多个接口，java是多继承吗" class="headerlink" title="67. 一个接口可以继承多个接口，java是多继承吗"></a>67. 一个接口可以继承多个接口，java是多继承吗</h3><p>不对，因为Java的单继承是针对于类而言，而不是接口</p>
<h3 id="68-一个类实现了一个接口，部分实现了该接口的部分抽象方法，该类一定为抽象类吗"><a href="#68-一个类实现了一个接口，部分实现了该接口的部分抽象方法，该类一定为抽象类吗" class="headerlink" title="68. 一个类实现了一个接口，部分实现了该接口的部分抽象方法，该类一定为抽象类吗"></a>68. 一个类实现了一个接口，部分实现了该接口的部分抽象方法，该类一定为抽象类吗</h3><p>一定</p>
<h3 id="69-如果一个类继承了一个抽象类，部分实现了该类的部分抽象方法，该类一定为抽象类吗"><a href="#69-如果一个类继承了一个抽象类，部分实现了该类的部分抽象方法，该类一定为抽象类吗" class="headerlink" title="69. 如果一个类继承了一个抽象类，部分实现了该类的部分抽象方法，该类一定为抽象类吗"></a>69. 如果一个类继承了一个抽象类，部分实现了该类的部分抽象方法，该类一定为抽象类吗</h3><p>一定</p>
<h3 id="70-抽象类必须得有抽象方法存在"><a href="#70-抽象类必须得有抽象方法存在" class="headerlink" title="70. 抽象类必须得有抽象方法存在"></a>70. 抽象类必须得有抽象方法存在</h3><p>错</p>
<h3 id="71-多态的表现方式？"><a href="#71-多态的表现方式？" class="headerlink" title="71. 多态的表现方式？"></a>71. 多态的表现方式？</h3><p>多态在继承关系下，重写，重载，父类 引用对象 &#x3D; new 子类();<br>接口  引用对象 &#x3D;new 实现类();</p>
<h3 id="72-接口和抽象类的区别"><a href="#72-接口和抽象类的区别" class="headerlink" title="72. 接口和抽象类的区别"></a>72. 接口和抽象类的区别</h3><p>抽象类:</p>
<ul>
<li>可以有变量也可以有常量 可以有抽象方法也可以有实现方法 </li>
<li>一个抽象类只能继承一个类，可以被多个类所继承 </li>
<li>抽象类有构造方法</li>
</ul>
<p>接口：</p>
<ul>
<li>只能有public static final修饰的常量，必须初始化赋值</li>
<li>只能有public abstract的抽象方法，没有实体方法存在</li>
<li>一个接口可以继承多个接口，一个类可以实现多个接口</li>
<li>接口没有构造方法</li>
</ul>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>OkHttp WebSocket</title>
    <url>/2023/04/21/WebBackend/Java/OkHttp3/</url>
    <content><![CDATA[<h2 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h2><p><strong>WebSocket</strong>是一种<a href="https://zh.wikipedia.org/wiki/%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE" title="网络传输协议">网络传输协议</a>，可在单个<a href="https://zh.wikipedia.org/wiki/%E4%BC%A0%E8%BE%93%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AE" title="传输控制协议">TCP</a>连接上进行<a href="https://zh.wikipedia.org/wiki/%E5%85%A8%E9%9B%99%E5%B7%A5" title="全双工">全双工</a>通信，位于<a href="https://zh.wikipedia.org/wiki/OSI%E6%A8%A1%E5%9E%8B" title="OSI模型">OSI模型</a>的<a href="https://zh.wikipedia.org/wiki/%E5%BA%94%E7%94%A8%E5%B1%82" title="应用层">应用层</a>。<br>WebSocket使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。在WebSocket API中，浏览器和服务器只需要完成一次握手，两者之间就可以创建持久性的连接，并进行双向数据传输123</p>
<h1 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h1><ol>
<li><a href="https://zhuanlan.zhihu.com/p/80971113">Spring Boot教程(15) – 使用WebSocket</a></li>
</ol>
]]></content>
      <categories>
        <category>WebBackend/Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
        <tag>Http</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis</title>
    <url>/2023/01/13/WebBackend/Java/MyBatis%E7%A0%94%E7%A9%B6/</url>
    <content><![CDATA[<h2 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h2><p>记录知识是一个重要的习惯，尤其是对于一个技术框架来说，Mybatis虽然简单易用，但是为了更好地理解其基本概念和原理，我决定在2023年1月13日开始编写这篇笔记。这将不仅仅是使用API字典。在导师（项目经理）的指导下，我将自己的理解与导师的讲解相结合，当然我也References(借鉴)了网上一些优秀的文章，这样做不仅有助于我自己未来复习回顾，同时也希望对阅读这篇文章的人有所帮助。</p>
<h2 id="Synopsis"><a href="#Synopsis" class="headerlink" title="Synopsis"></a>Synopsis</h2><p>MyBatis是一个开源、轻量级的持久层框架，它内部封装了JDBC，可以简化JDBC加载驱动、创建连接、创建statement等繁杂过程，使开发人员更专注于SQL语句本身。</p>
<blockquote>
<p>PS：MyBatis不是专门用于ORM映射，而是为了简化和优化JDBC操作而设计的，所以严格意义上来讲，<strong>MyBatis不是ORM框架</strong>。</p>
</blockquote>
<p><strong>总结要点：</strong></p>
<ul>
<li>MyBatis是一款优秀的持久层框架，主要通过XML或注解来配置和映射原始类型、接口和Java POJO（Plain Old Java Objects，普通老式Java对象）为数据库中的记录。它支持自定义SQL、存储过程以及高级映射，可以在实体类和SQL语句之间建立映射关系。</li>
<li>MyBatis减少了大量的JDBC代码、设置参数和获取结果集的重复工作。并且连接池是可选的，默认使用的是PooledDataSource（Apache commons DBCP）连接池。</li>
<li>MyBatis不同于Hibernate等全自动化ORM框架，它更多的是手动编写SQL，用来满足在追求性能和灵活性的同时对于开发者更好的掌握数据库操作。</li>
</ul>
<blockquote>
<p>ORM (Object Relational Mapping，对象关系映射) 是一种数据持久化技术，它在对象模型和关系型数据库之间建立起对应关系。ORM提供了一种机制，通过JavaBean对象去操作数据库表中的数据。 这样就可以避免编写大量的SQL语句和JDBC代码，提高开发效率。</p>
<p>常见的ORM框架有：<a href="https://stackshare.io/hibernate">Hibernate</a>、<a href="https://stackshare.io/entity-framework">Entity Framework</a>、<a href="https://stackshare.io/sqlalchemy">SQLAlchemy</a>、<a href="https://stackshare.io/sequelize">Sequelize</a></p>
</blockquote>
<h2 id="构建方式"><a href="#构建方式" class="headerlink" title="构建方式"></a>构建方式</h2><h3 id="普通构建："><a href="#普通构建：" class="headerlink" title="普通构建："></a>普通构建：</h3><p>Mybatis安装方式有很多种，其中最简单一种就是直接下载MyBatis的jar包，然后导入到项目中。</p>
<ul>
<li><strong>下载MyBatis jar包：</strong>可以从<a href="http://mybatis.org/">MyBatis官网</a>或者<a href="https://github.com/mybatis/mybatis-3/releases">Github</a>上下载最新版本的jar包。</li>
<li><strong>将jar包导入到项目中：</strong>将下载下来的jar包文件导入到项目中即可。</li>
</ul>
<h3 id="maven构建："><a href="#maven构建：" class="headerlink" title="maven构建："></a>maven构建：</h3><p>使用<a href="https://mvnrepository.com/">maven</a>构建时，可以通过在pom.xml文件上添加下面的代码来添加MyBatis的依赖。需要注意的是，version应该填写最新版本号。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>x.x.x<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="MyBatis文件目录结构"><a href="#MyBatis文件目录结构" class="headerlink" title="MyBatis文件目录结构"></a>MyBatis文件目录结构</h2><p>这是常用的目录结构，但是和Maven项目的目录结构会有所不同。</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20230113152144935.png" alt="image-20230113152144935"></p>
<ul>
<li>dao：数据访问对象。用于存放与数据库交互的类，负责数据访问层的实现。</li>
<li>factory：工厂。用于存放工厂类，这些类用于创建其他对象。</li>
<li>mapper：映射器。用于存放于数据库表之间的映射关系。</li>
<li>model：模型。用于存放项目中的实体类，这些类用于表示数据库中的表。</li>
<li>test：测试。用于存放单元测试代码。</li>
</ul>
<h2 id="主配置文件"><a href="#主配置文件" class="headerlink" title="主配置文件"></a>主配置文件</h2><p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20230115190035491.png" alt="image-20230115190035491"></p>
<ul>
<li><code>&lt;configuration&gt;</code>是<strong>配置</strong>文件的根标签，里面包含了Mybatis的各种配置信息。</li>
<li><code>&lt;properties&gt;</code>标签用于配置Mybatis使用的<strong>属性</strong>文件。</li>
<li><code>&lt;settings&gt;</code>标签用于配置Mybatis的运行时<strong>设置</strong>。</li>
<li><code>&lt;typeAliases&gt;</code>标签用于配置<strong>类型别名</strong>。</li>
<li><code>&lt;typeHandlers&gt;</code>标签用于配置<strong>类型处理器</strong>。</li>
<li><u><code>&lt;objectFactory&gt;</code>标签用于配置<strong>对象工厂</strong>。</u></li>
<li><u><code>&lt;plugins&gt;</code>标签用于配置<strong>插件</strong>。</u></li>
<li><code>&lt;environments&gt;</code>标签用于配置环境变量(<strong>环境配置</strong>)，里面包含<code>&lt;environment&gt;</code>标签。</li>
<li><code>&lt;environment&gt;</code>标签用于配置单个<strong>环境变量</strong>，里面包含:<ul>
<li><code>&lt;transactionManager&gt;</code>用于配置<strong>事物管理器</strong>。</li>
<li><code>&lt;dataSource&gt;</code>用于配置<strong>数据源</strong>。</li>
</ul>
</li>
<li><u><code>&lt;databaseIdProvider&gt;</code>标签用于配置<strong>数据库厂商标识</strong>。</u></li>
<li><code>&lt;mappers&gt;</code>标签用于配置<strong>映射器</strong>。</li>
</ul>
<blockquote>
<p>PS：除了这些重要标签，还有其他标签可用。具体方式可参考<a href="https://mybatis.net.cn/configuration.html">MyBatis官方文档</a>。阅读官方文档是一个非常高效的学习方式。</p>
</blockquote>
<h2 id="公共类"><a href="#公共类" class="headerlink" title="公共类"></a>公共类</h2><ul>
<li>构建sqlSessionFactory</li>
<li>打开sqlSession会话，并执行sql</li>
</ul>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20230115190026118.png" alt="image-20230115190026118"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisTest</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>      <span class="hljs-comment">// 指定全局配置文件</span><br>      <span class="hljs-type">String</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br>      <span class="hljs-comment">// 读取配置文件</span><br>      <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(resource);<br>      <span class="hljs-comment">// 构建sqlSessionFactory</span><br>      <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(inputStream);<br>      <span class="hljs-comment">// 获取sqlSession</span><br>      <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br>      <span class="hljs-keyword">try</span> &#123;<br>         <span class="hljs-comment">// 操作CRUD，第一个参数：指定statement，规则：命名空间+“.”+statementId</span><br>         <span class="hljs-comment">// 第二个参数：指定传入sql的参数：这里是用户id</span><br>         <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> sqlSession.selectOne(<span class="hljs-string">&quot;MyMapper.selectUser&quot;</span>, <span class="hljs-number">1</span>);<br>         System.out.println(user);<br>      &#125; <span class="hljs-keyword">finally</span> &#123;<br>         sqlSession.close();<br>      &#125;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="Mapper-xml"><a href="#Mapper-xml" class="headerlink" title="Mapper.xml"></a>Mapper.xml</h2><p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20230115190017708.png" alt="image-20230115190017708"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">  <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">  <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- mapper:根标签，namespace：命名空间，随便写，一般保证命名空间唯一 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;MyMapper&quot;</span>&gt;</span><br>   <span class="hljs-comment">&lt;!-- statement，内容：sql语句。id：唯一标识，随便写，在同一个命名空间下保持唯一</span><br><span class="hljs-comment">      resultType：sql语句查询结果集的封装类型,tb_user即为数据库中的表</span><br><span class="hljs-comment">    --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectUser&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.zpc.mybatis.User&quot;</span>&gt;</span><br>      select * from tb_user where id = #&#123;id&#125;<br>   <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h2><p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20230115190007814.png" alt="image-20230115190007814"></p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20230115190002784.png" alt="image-20230115190002784"></p>
<h2 id="查询多条数据"><a href="#查询多条数据" class="headerlink" title="查询多条数据"></a>查询多条数据</h2><p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20230115185950761.png" alt="image-20230115185950761"></p>
<h2 id="插入修改删除"><a href="#插入修改删除" class="headerlink" title="插入修改删除"></a>插入修改删除</h2><p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20230115185923512.png" alt="image-20230115185923512"></p>
<h2 id="动态SQL语句"><a href="#动态SQL语句" class="headerlink" title="动态SQL语句"></a>动态SQL语句</h2><p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20230115193252619.png" alt="image-20230115193252619"></p>
<h2 id="多表连接-一对多"><a href="#多表连接-一对多" class="headerlink" title="多表连接-一对多"></a>多表连接-一对多</h2><p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20230115185844380.png" alt="image-20230115185844380"></p>
<h2 id="多表连接-一对一"><a href="#多表连接-一对一" class="headerlink" title="多表连接-一对一"></a>多表连接-一对一</h2><p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20230115185826453.png" alt="image-20230115185826453"></p>
<h2 id="多表连接-动态SQL"><a href="#多表连接-动态SQL" class="headerlink" title="多表连接-动态SQL"></a>多表连接-动态SQL</h2><p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20230115185819470.png" alt="image-20230115185819470"></p>
<h2 id="注解开发"><a href="#注解开发" class="headerlink" title="注解开发"></a>注解开发</h2><p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20230115185812232.png" alt="image-20230115185812232"></p>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>[1] <a href="https://blog.csdn.net/wanglei19891210/article/details/105653841">MyBatis 全网最通俗易懂的教程（2020年、非常详细） - B站狂神MyBatis</a></p>
<p>[2] <a href="http://c.biancheng.net/mybatis/">Mybatis - C语言中文网</a></p>
<p>[3] <a href="https://www.jc2182.com/mybatis/mybatis-jiaocheng.html">MyBatis 教程 - 蝴蝶教程</a></p>
<p>[4] <a href="https://www.qikegu.com/docs/1868">MYBATIS 教程 - 奇客谷教程 💯</a></p>
<p>[5] <a href="https://mybatis.net.cn/">MyBatis中文网</a></p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Servlet</title>
    <url>/2023/01/10/WebBackend/Java/Servlet/</url>
    <content><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><ul>
<li>Servlet是一种基于组件的技术，它可以在多种Web服务器上运行，并且独立于平台。</li>
<li>Servlet可以访问整个Java API系列，包括JDBC用于访问企业数据库。</li>
<li>Servlet可以通过表单从用户那里收集输入，显示来自数据库或其他来源的记录，并动态创建网页。</li>
<li>Servlet通常认为是CGI程序的高效替代品。Servlet相比CGI有很多种优点，如更高的性能。</li>
<li>Servlet 是平台无关的，因为它们是用 Java 编写的。</li>
<li>Java安全管理器强制执行限制以保护服务器资源，可以使用Java类库全部功能（依赖于容器和服务器支持的功能）。</li>
<li>Servlet需要运行在Servlet容器（如 Tomcat）上，然后才能在Web服务器上工作。</li>
</ul>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20230110201204891.png" alt="image-20230110201204891"></p>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>Java Servlet是由支持Java Servlet规范的解释器（通常是Web容器）在服务器端运行的Java类。这些类可以使用 <code>javax.servlet</code> 和 <code>javax.servlet.http</code>包中的类来创建，这些包是Java企业版标准部分，可以支持大型开发项目。</p>
<p>Servlet的创建和编译基本上就像其他Java类一样，需要将Servlet包安装并添加到类路径中，然后可以使用JDK的Java编译器或其他编译器来编译Servlet。</p>
<p>但是一般会使用一些构建工具来管理依赖，打包和发布项目。这样可以更加便捷的管理项目，常见构建工具有：Apache Maven、Gradle、Apache Ant</p>
<p>本次使用环境：</p>
<ul>
<li>Java开发工具包（SDK）</li>
<li>Web服务器 - Tomcat</li>
</ul>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><ul>
<li><strong>处理和相应HTTP请求</strong>：Servlet通过实现HTTP协议相关的方法来响应客户端的请求，如get或post。</li>
<li><strong>维护状态信息</strong>：Servlet可以在会话期间维护状态信息，这在跨请求的操作中很有用，例如在网上购物车中存储物品。</li>
<li><strong>数据库交互</strong>：Servlet通过JDBC或其他数据库访问技术来访问数据库并执行查询和更新操作。</li>
<li><strong>生成动态内容</strong>：Servlet可以根据请求内容动态生成HTML、XML或其他格式的文档。</li>
<li><strong>访问远程组件</strong>：Servlet可以通过RMI或SOAP等协议访问远程组件。</li>
</ul>
<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>Servlet的生命周期可以定义为从创建到销毁的整个过程。在这个过程中，Servlet容器会调用Servlet的三个生命周期方法：<code>init()</code>、<code>service()</code>和<code>destroy()</code>。</p>
<h3 id="init"><a href="#init" class="headerlink" title="init()"></a>init()</h3><p>Servlet的生命周期中有一个可选的方法叫做<code>init()</code>,它通常在Servlet第一次被请求时被调用一次。它可以用于进行一些初始化工作，如加载配置文件、建立数据库连接等。</p>
<p>常见<code>init()</code>方法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>    <span class="hljs-comment">// initialization code</span><br>&#125;<br></code></pre></td></tr></table></figure>



<p>带<strong>ServletConfig</strong> 参数的<code>init()</code>方法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ServletConfig config)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>    <span class="hljs-comment">// initialization code</span><br>&#125;<br></code></pre></td></tr></table></figure>



<h3 id="service"><a href="#service" class="headerlink" title="service()"></a>service()</h3><p>Servlet的生命周期中<code>service()</code>方法是执行实际任务的主要方法。当客户端（浏览器）发送请求到Servlet时，Servlet容器（即Web服务器）会生成一个新线程并调用<code>service()</code>方法来处理请求。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(ServletRequest request, ServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>   <span class="hljs-comment">// Service Code</span><br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="doGet"><a href="#doGet" class="headerlink" title="doGet()"></a>doGet()</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>   <span class="hljs-comment">// Servlet code</span><br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="doPost"><a href="#doPost" class="headerlink" title="doPost()"></a>doPost()</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>   <span class="hljs-comment">// Servlet code</span><br>&#125;<br></code></pre></td></tr></table></figure>



<h3 id="destroy"><a href="#destroy" class="headerlink" title="destroy()"></a>destroy()</h3><p>Servlet生命周期结束时会调用一次<code>destroy()</code>方法。它可以进行关闭数据库连接、停止后台线程等。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>   <span class="hljs-comment">// Finalization code...</span><br>&#125;<br></code></pre></td></tr></table></figure>



<h2 id="参考学习"><a href="#参考学习" class="headerlink" title="参考学习"></a>参考学习</h2><p><a href="https://www.jc2182.com/servlet/servlet-jiaocheng.html">Servlet - 教程</a></p>
<p><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1304265949708322">Servlet入门 - 廖雪峰的官方网站</a></p>
]]></content>
      <categories>
        <category>WEBbackend</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring</title>
    <url>/2023/01/11/WebBackend/Java/Spring%E7%A0%94%E7%A9%B6/</url>
    <content><![CDATA[<h2 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h2><p>当我第一次接触Spring框架时，我的导师(项目经理)以迅雷不及掩耳之势，在短短三天内讲完了整个Spring框架。尽管当时我对很多概念还有疑问，但我决定将我的学习过程记录下来，这就是这篇研究Spring框架的笔记。这篇文章于2023年1月11日开始编写。快过年了我可以摸几天鱼吗…</p>
<h2 id="Synopsis"><a href="#Synopsis" class="headerlink" title="Synopsis"></a>Synopsis</h2><p>Spring是最受欢迎的企业级Java应用程序开发框架。它是一个开源的Java平台，轻量级且灵活，可以用于开发各种类型的Java应用程序。其中最常用的是基于Spring MVC构建Web应用程序。Spring框架的目标是使J2EE(企业版)开发变得更容易使用，通过启用基于<strong>POJO</strong>编程模型来促进良好的编程实践。</p>
<blockquote>
<p>POJO 是 Plain Old Java Object 的缩写，意思是“纯粹的旧Java对象”。在Java中，POJO指的是没有任何特殊要求的Java类，也就是没有任何继承自特定父类或实现特定接口的类。</p>
<p>Spring框架采用了POJO编程模型，它提供了一种简洁而直观的方式来管理应用程序对象之间的关系。使用POJO编程模型，开发人员可以将业务逻辑与框架相分离，使得应用程序更易于理解和维护。</p>
</blockquote>
<h2 id="两大核心"><a href="#两大核心" class="headerlink" title="两大核心"></a>两大核心</h2><h3 id="IoC和DI"><a href="#IoC和DI" class="headerlink" title="IoC和DI"></a>IoC和DI</h3><p><strong>IoC：</strong>控制反转（Inversion of Control，IoC）是指将对象的实例化和管理的权限（反转）交给容器。即对象不在负责创建和管理自己的依赖，而是将这些工作委托给容器来完成。</p>
<p><strong>DI：</strong>依赖注入（Dependency Injection，DI）是一种从容器角度管理对象依赖关系的方式。容器自动将对象依赖的其他对象注入。例如：对象A在实例化过程中声明了一个B类型的属性，容器会在运行时自动将B对象注入到A中。</p>
<p><strong>区别：</strong>IoC和DI形成了类似”嵌套”的关系，其中IoC是一个更宽泛的概念，而DI是一种实现IoC的具体方式。IoC是一种范式，而DI是一种实现IOC的技术。简单来说，<strong>IoC是一个思想，而DI是一种实现IoC的具体方式。</strong></p>
<p><strong>何为反转：</strong>如果对反转控制的概念还有疑惑，没关系。我们来举个例子。在传统的Java SE程序设计中，我们通常会直接在对象内使用new关键字创建对象，这是程序主动去创建依赖对象。而IoC则使用一个专门的容器来创建这些对象，容器控制了对象的创建，并主要控制了外部资源的获取。<em>这种方式被称为反转，因为它与传统的程序设计相反。在传统方式中，我们自己在对象中主动控制直接获取依赖对象，这就是正转。而在IoC中，容器帮助创建和注入依赖对象，对象只是被动接受依赖对象，依赖对象的获取被反转了</em></p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20230112171221155.png" alt="image-20230112171221155"></p>
<p><strong>Spring是一种IoC容器：</strong>它使用依赖注入（DI）的方式管理对象之间的依赖关系，使得对象之间松耦合，方便管理。</p>
<h3 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h3><p><strong>概述：</strong>面向切面编程（Aspect-Oriented Programming，AOP）是一种编程思想，在不修改源代码的情况下，通过切面来统一管理公用行为。它可以将程序中与业务无关的功能，比如日志记录、性能监控、事务处理等抽离出来，通过配置或代码的方式组合到业务逻辑中。这样做有助于提高代码的可重用性和可维护性，同时提高开发效率。AOP在Spring框架中是一个重要的内容。</p>
<p><strong>AOP和OOP：</strong>AOP是OOP（Object-Oriented Programming）的延续。AOP主要用于解决OOP重复代码和横切关注点的问题。</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20230112154043848.png" alt="image-20230112154043848"></p>
<h2 id="Spring-体系结构"><a href="#Spring-体系结构" class="headerlink" title="Spring 体系结构"></a>Spring 体系结构</h2><p>Spring框架是一个非常强大的框架，它提供了各种各样的功能和模块。在实际的应用开发中，我们并不需要使用所有的功能和模块，而是可以根据需要，选择适合自己项目的Spring模块进行使用。</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20230112164031999.png" alt="image-20230112164031999"></p>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>[1] <a href="https://dunwu.github.io/spring-tutorial/">SPRING TUTORIAL spring-tutoria</a></p>
<p>[2] <a href="https://blog.csdn.net/sandyLL0224/article/details/81147316">Spring框架两大核心特征的基本理解_sandyLL0224的博客-CSDN博客_spring框架两大特性</a></p>
<p>[3] <a href="https://www.zhihu.com/tardis/sogou/qus/335362570">IOC是什么意思！？- 动力节点在线</a></p>
<p>[4] <a href="https://blog.csdn.net/ivan820819/article/details/79744797">浅谈IOC–说清楚IOC是什么</a></p>
<p>[5] <a href="https://www.slideshare.net/koneru9999/aspect-oriented-programing-introduction">Aspect Oriented Programing - Introduction</a></p>
<p>[6] <a href="https://livebook.manning.com/book/aspectj-in-action-second-edition/chapter-8/73">Chapter 8. AspectJ weaving models - AspectJ in Action, Second Edition</a></p>
<p>[7] <a href="https://www.cnblogs.com/carpenterlee/p/8241042.html">Java Proxy和CGLIB动态代理原理 - CarpenterLee - 博客园</a></p>
<p>[8] <a href="https://tech-blog.cymetrics.io/posts/maxchiu/aop/">來談談 AOP (Aspect-Oriented Programming) 的精神與各種主流實現模式的差異</a></p>
<p>[9] <a href="https://www.quora.com/What-are-the-differences-between-Spring-IOC-and-Spring-MVC">What are the differences between Spring IOC and Spring MVC? - Quora</a></p>
<p>[10] <a href="https://jishuin.proginn.com/p/763bfbd2a478">Spring IOC 原理深层解析-技术圈</a></p>
]]></content>
      <categories>
        <category>WEBbackend</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>String、StringBuffer和StringBuilder</title>
    <url>/2022/11/30/WebBackend/Java/String%E3%80%81StringBuffer%E5%92%8CStringBuilder/</url>
    <content><![CDATA[<p>String 是 Java 中基础且重要的类，被声明为 final class，是不可变字符串。</p>
<p>所以如果要频繁操作一个字符串会使其性能降低，所以使用StringBuffer和StringBuilder “字符串缓冲区”；</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221130091509475.png" alt="image-20221130091509475"></p>
<h4 id="线程安全："><a href="#线程安全：" class="headerlink" title="线程安全："></a>线程安全：</h4><p>StringBuffer：线程安全<br>StringBuilder：线程不安全</p>
<h4 id="速度："><a href="#速度：" class="headerlink" title="速度："></a>速度：</h4><p>一般情况下，速度从快到慢为 StringBuilder &gt; StringBuffer &gt; String，当然这是相对的，不是绝对的。</p>
<h4 id="使用环境："><a href="#使用环境：" class="headerlink" title="使用环境："></a>使用环境：</h4><p>操作少量的数据使用 String。<br>单线程操作大量数据使用 StringBuilder。<br>多线程操作大量数据使用 StringBuffer。</p>
]]></content>
      <categories>
        <category>WEBbackend</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>执行流程</title>
    <url>/2023/04/18/WebBackend/Java/%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="Web前端历史"><a href="#Web前端历史" class="headerlink" title="Web前端历史"></a>Web前端历史</h1><h2 id="Web1-0时代"><a href="#Web1-0时代" class="headerlink" title="Web1.0时代"></a>Web1.0时代</h2><p>在web1.0时代，没有前后端之分。页面由 JSP、PHP 等工程师在服务端生成，浏览器负责展现。基本上是服务端给什么浏览器就展现什么，展现的控制在 Web Server 层。</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20230219204441797.png" alt="image-20230219204441797"></p>
<p>这种架构的好处就是简单快捷。但是，缺点也非常明显：JSP代码难以维护</p>
<p>为了让开发更加便捷，代码更易维护，前后端职责更清晰。便衍生出MVC开发模式和框架，前端展示以模板的形式出现。典型的框架就是Spring，Suructs、Hibernate。整体框架如图所示：</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/2062729-b718cd0a7d3b32b9.png" alt="img"></p>
<p>使用这种分层架构，职责清晰，代码易于维护。但这里的MVC仅限于后端，前后端形成了一定的分离，前端只完成了后端开发的view层</p>
<h2 id="Web2-0时代"><a href="#Web2-0时代" class="headerlink" title="Web2.0时代"></a>Web2.0时代</h2><p>自从Gmail的出现，ajax技术开始风靡全球。有了ajax之后，前后端的职责就更加清晰了。因为前端可以通过Ajax与后端进行数据交互，因此，整体的架构图也变化成了下面这幅图：</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/web2.0.jpg" alt="web2.0"></p>
<p>Ajax 技术与后台服务器进行数据交换，可以使得前端开发人员只需要专注于页面内容的开发，数据可以由后台提供，从而分工更加明确，提高了开发效率。而且，使用 Ajax 技术可以实现页面的部分刷新，减少了服务器端负载和流量消耗，用户体验更佳。</p>
<h1 id="前后端分离后的架构演变-MVC、MVP和MVVM"><a href="#前后端分离后的架构演变-MVC、MVP和MVVM" class="headerlink" title="前后端分离后的架构演变-MVC、MVP和MVVM"></a>前后端分离后的架构演变-MVC、MVP和MVVM</h1><h2 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h2><p>前端的MVC与后端类似，具备View、Controller和Model。</p>
<p>Model：负责保存应用数据，与后端数据进行同步</p>
<p>Controller：负责业务逻辑，根据用户行为对Model数据进行修改</p>
<p>View：负责视图展示，将model中的数据可视化出来</p>
<p>三者形成了一个如图所示的模型：</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/4b233d989851c553aede751f7cdf4885.jpg" alt="4b233d989851c553aede751f7cdf4885"></p>
<p>这样的模型，在理论上是可行的。但往往在实际开发中，并不会这样操作。因为开发过程并不灵活。例如，一个小小的事件操作，都必须经历这样的一个流程，那么开发就不再便捷了。</p>
<p>在实际场景中，我们往往会看到另一种模式，如图：</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/0f92b4266a.jpg" alt="0f92b4266a"></p>
<p>这种模式在开发中更加灵活，backbone.js框架就是这种的模式。</p>
<p>但是，这种灵活可能导致严重的问题：</p>
<p>1.数据流混乱：</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/66066801154.jpg" alt="66066801154"></p>
<p>2.View比庞大，而Controller比较单薄：由于很多开发者就会在view中写一些逻辑代码，逐渐的就导致了view中的内容越来越庞大，而controller变得越来越单薄。</p>
<h2 id="MVP"><a href="#MVP" class="headerlink" title="MVP"></a>MVP</h2><p>MVP模式虽然在前端开发并不常见，但是在安卓等原生开发中，开发者还是考虑到它</p>
<p>MVP模式与MVC唯一不同的在于Presenter和Controller</p>
<p>再MVC模式中我们使用观察者模式，来实现当Model层数据发生变化的时候，通知View层的更新，</p>
<p>这样View和Model层耦合在一起，当项目逻辑变得复杂的时候，会造成代码的混乱</p>
<p>MVP的模式通过使用Presenter来实现对View层和Model层的解耦。</p>
<p>MVC中的Controller只知道Model的接口，因此它没有办法控制View层的更新，MVP模式中View层的接口暴露给了Presenter，因此我们可以在Presenter中将Model的变化和View的变化绑定在一起，以此来实现View和Model的同步更新，这就实现了对View和Model的解耦，Presenter还包含了其他的响应逻辑。</p>
<p>MVP与MVC很接近，P指的是Presenter，presenter可以理解为一个中间人，它负责着View和Model之间的数据流动，防止View和Model之间直接交流。我们可以看一下图示：</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/6364fee4b2.jpg" alt="6364fee4b2"></p>
<p>我们可以通过看到，presenter负责和Model进行双向交互，还和View进行双向交互。这种交互方式，相对于MVC来说少了一些灵活，view变成了被动视图，并且本身变得很小。虽然它分离了View和Model。但是应用逐渐变大之后，缺陷也会随之暴露。</p>
<p>缺陷：</p>
<p>由于大部分逻辑都需要presenter去进行管理，从而导致presenter的体积增大，难以维护。如果需要去解决这个问题，或许可以从MVVM的思想中找到答案。</p>
<h2 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h2><p>首先，何为MVVM呢？MVVM可以分解成(Model-View-VIewModel)。ViewModel可以理解为在presenter基础上的进阶版。废话不多说，先上图例：</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/fe2ae148d68.jpg" alt="fe2ae148d68"></p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/alcyu8psepmvwkrbiyy8.png" alt="KZFfe.png"></p>
<p>在这里View是ViewModel的外在显示，和ViewModel的数据是同步的。一旦View中的数据发生变化，会自动同步到ViewModel，然后ViewModel可以将变化的数据传给Model；反过来也是一样的，Model中的数据一旦发生改变，就会将值传给ViewModel，而ViewModel也会同步更新到view中。现在的框架实现这样的形式，各有各的不同。主要的三个框架angular2、vue、react都是实现了这样子的模式。</p>
<p>这种的好处就是View和Model之间被分离开来。view不知道model的存在，viewmodel和model也觉察不到view。事实上，model也完全忽略viewmodel和view的存在。这是一个非常松散耦合的设计。</p>
<p>但它也不是所用地方都适用的，例如，后端开发是适用的。因为网络资源成本过高，开发成本过高导致的。</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20230219215903465.png" alt="image-20230219215903465"></p>
<p>MVVM模式中的VM，指的是ViewModel，它和MVP的思想其实是相同的，不过它通过双向的数据绑定，将View和Model的同步更新给自动化了。当Model发生变化的时候，ViewModel就会自动更新，这样就将Presenter中的工作给自动化了</p>
<h2 id="MVVM执行流程"><a href="#MVVM执行流程" class="headerlink" title="MVVM执行流程"></a>MVVM执行流程</h2><p>MVVM 是一种基于前端的架构模式，它的执行流程如下：</p>
<ol>
<li>视图层 (View)：MVVM 模式的视图层通常由 HTML 和 CSS 组成，它负责用户界面的呈现和交互。在 Vue.js 中，视图层使用模板语法来描述 UI。</li>
<li>模型层 (Model)：模型层是应用程序的数据模型，它负责处理数据的读写操作。在 Vue.js 中，模型层由 Vue 实例的数据属性组成。</li>
<li>视图模型层 (ViewModel)：视图模型层是连接视图层和模型层的桥梁，它负责将模型层中的数据和方法绑定到视图层上。在 Vue.js 中，视图模型层由 Vue 实例的计算属性、方法和指令组成。</li>
<li>数据绑定：MVVM 模式使用双向数据绑定机制，实现视图层和模型层之间的数据同步。当模型层数据发生变化时，视图层会自动更新，反之亦然。</li>
<li>事件监听：视图层通常会触发各种事件，例如点击按钮、输入文本等。在 Vue.js 中，可以使用指令和事件监听器来处理这些事件，例如 v-on:click。</li>
<li>视图更新：当模型层数据发生变化或用户事件触发时，视图模型层会自动更新视图层，反映最新的数据状态。</li>
</ol>
<p>总的来说，MVVM 模式的执行流程是：视图层通过指令和事件监听器与视图模型层进行交互，视图模型层通过计算属性、方法和指令将模型层的数据和方法绑定到视图层上，实现视图层和模型层之间的双向数据绑定和自动更新。这种模式能够提高应用程序的可维护性和可测试性，同时也可以减少开发人员的工作量，提高开发效率。</p>
<h1 id="后端架构"><a href="#后端架构" class="headerlink" title="后端架构"></a>后端架构</h1><h2 id="B-x2F-S架构、C-x2F-S架构"><a href="#B-x2F-S架构、C-x2F-S架构" class="headerlink" title="B&#x2F;S架构、C&#x2F;S架构"></a>B&#x2F;S架构、C&#x2F;S架构</h2><p>SSM框架（Spring + SpringMVC + MyBatis）中的Spring MVC是基于MVC设计模式的实现。因此，SSM框架可以看作是一种基于MVC设计模式的WEB应用程序开发的框架</p>
<h2 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h2><p>三层架构(3-tier architecture)基于**”高内聚低耦合”**设计思想。三层架构我们都听说过，要想知道SSN工作流程就必须知道三层架构，下面我来给它们一步一步分块解析。</p>
<p>关于三层架构我不得不吐槽它们的大名：</p>
<ul>
<li>**表示层(UI、Presentation layer)**、视图层(View layer)、表现层、用户界面层、前端层、Web层等</li>
<li>**业务逻辑层(BLL、Business Logic layer)**、应用层(Application)、服务层(Service layer)等</li>
<li>**数据访问层(DAL、Data Access layer)**、数据持久层(Persistence layer)、DAO层(Data Access Object layer)等</li>
</ul>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20230218200927398.png" alt="image-20230218200927398"></p>
<p>现在，它们的名字和之间的关系我们大概理解了。三层架构有表示层</p>
<p>关于上述三个主要层次，还有一些相关的层次和模块：</p>
<ol>
<li>应用服务层（Application Service layer）：用于提供面向应用的服务接口。</li>
<li>业务服务层（Business Service layer）：用于提供面向业务的服务接口。</li>
<li>领域层（Domain layer）：用于定义业务领域对象和业务规则。</li>
<li>数据库访问层（Database Access layer）：用于实现与数据库的交互。</li>
<li>数据访问对象层（Data Access Object layer）：用于封装数据访问操作。</li>
<li>模型层（Model layer）：实体类层、用于表示业务对象和业务规则。</li>
</ol>
<h2 id="MVC架构工作流程"><a href="#MVC架构工作流程" class="headerlink" title="MVC架构工作流程"></a>MVC架构工作流程</h2><p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20230218124957747.png" alt="image-20230218124957747"></p>
<ol>
<li>用户发起 request 请求，请求被控制器（Controller）接收，并将用户请求的数据委托给模型（Model）进行处理。</li>
<li>控制器通过模型处理数据，并得到处理结果。模型通常指业务逻辑。</li>
<li>模型处理结果返回给控制器。</li>
<li>控制器将模型数据传递给视图（View），视图通过控制器进行数据展示。在 Web 中，模型无法将数据直接在视图上显示，需要通过视图和控制器完成。如果在 C&#x2F;S 应用中，模型可以将数据在视图中展示。</li>
<li>控制器将视图响应（response）给用户，通过视图展示给用户所需的数据或处理结果。</li>
</ol>
<p>View和Mode应用了观察者模式，当Model层发生改变的时候。它会通知有关View层更新页面</p>
<p>controller层是View层和Model层的纽带，主要负责用户与应用的响应操作，它主要负责用户与应用程序的响应操作，当用户与页面发生交互的时候，Controller中的事件触发器就开始工作了，通过调用Model层，来完成对Model的修改，然后Model层再去通知View层更新。</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20230219215358671.png" alt="image-20230219215358671"></p>
<p><strong>总结：</strong></p>
<p>MVC（Model-View-Controller）是一种常见的软件架构模式，它把应用程序分为三个核心组件：模型、视图和控制器，用于更好地组织代码、降低耦合度、提高可维护性。</p>
<p>MVC 的工作流程如下：</p>
<ol>
<li>用户与视图交互，触发事件。</li>
<li>视图将事件发送给控制器。</li>
<li>控制器接收事件并进行处理，可能需要从模型中获取数据或者调用模型的方法进行业务逻辑处理。</li>
<li>控制器将处理结果返回给视图。</li>
<li>视图根据控制器返回的结果更新界面。</li>
</ol>
<p>具体来说，MVC 的三个组件的作用如下：</p>
<ol>
<li>模型（Model）：模型表示应用程序的数据和业务逻辑，负责对数据进行处理、存储和检索。它提供了数据接口，供控制器和视图使用。</li>
<li>视图（View）：视图表示应用程序的用户界面，负责展示数据、接收用户输入、响应用户操作。它是用户与应用程序交互的窗口，可以是一个页面、一个组件或者一个控件。</li>
<li>控制器（Controller）：控制器是模型和视图之间的中介，负责接收用户输入、处理业务逻辑、更新模型和更新视图。它负责协调和管理视图和模型之间的通信，将用户输入转换为对模型的操作，并将模型的更新通知视图更新界面。</li>
</ol>
<p>通过这种工作流程，MVC 可以实现代码的分离和解耦，使得代码更加清晰、可维护和可扩展。同时，MVC 的工作流程也提供了一种可重用的设计模式，能够在不同的应用程序中使用。</p>
<h2 id="Spring-MVC工作流程"><a href="#Spring-MVC工作流程" class="headerlink" title="Spring MVC工作流程"></a>Spring MVC工作流程</h2><p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20230217202926943.png" alt="image-20230217202926943"></p>
<ol>
<li>用户发送请求至前端控制器 DispatcherServlet。</li>
<li>DispatcherServlet 收到请求调用 HandlerMapping 处理器映射器。</li>
<li>处理器映射器找到具体的处理器（可以根据 XML 配置、注解进行查找），生成处理器及处理器拦截器（如果有则生成并返回给 DispatcherServlet）。</li>
<li>DispatcherServlet 调用 HandlerAdapter 处理器适配器。</li>
<li>HandlerAdapter 经过适配调用具体的处理器（Controller，也叫后端控制器）。</li>
<li>Controller 执行完成返回 ModelAndView。</li>
<li>HandlerAdapter 将 Controller 执行结果 ModelAndView 返回给 DispatcherServlet。</li>
<li>DispatcherServlet 将 ModelAndView 传给 ViewResolver 视图解析器。</li>
<li>ViewResolver 解析后返回具体 View。</li>
<li>DispatcherServlet 根据 View 进行渲染视图（即将模型数据填充至视图中）。</li>
<li>DispatcherServlet 响应用户。</li>
</ol>
<p>Spring MVC 是基于 MVC 模式的 Web 框架，用于构建 Web 应用程序。Spring MVC 的工作流程如下：</p>
<ol>
<li>用户发送请求：用户在浏览器中发送请求，请求会被发送到服务器端的 DispatcherServlet。</li>
<li>DispatcherServlet 接收请求：DispatcherServlet 是 Spring MVC 中的核心组件，用于接收请求并将请求分发到相应的处理器。</li>
<li>处理器映射器解析请求：处理器映射器（HandlerMapping）用于解析请求并确定请求对应的处理器，它会将请求映射到一个或多个处理器。</li>
<li>处理器适配器调用处理器：处理器适配器（HandlerAdapter）会调用处理器对请求进行处理，处理器可以是一个控制器（Controller）、一个服务类（Service）或其他组件。</li>
<li>处理器处理请求：处理器对请求进行处理，并生成相应的模型和视图对象。</li>
<li>视图解析器解析视图：视图解析器（ViewResolver）用于解析视图，根据处理器返回的视图名称和视图类型确定最终的视图对象。</li>
<li>视图渲染：视图将模型数据渲染到 HTML、JSON、XML 或其他类型的响应体中。</li>
<li>响应结果发送给客户端：响应结果被发送回客户端，客户端接收到响应结果并显示在浏览器中。</li>
</ol>
<p>通过这个工作流程，Spring MVC 可以实现请求的处理、视图的渲染和响应的发送，实现了分离关注点，使得应用程序的开发更加模块化，代码也更加清晰和易于维护。同时，Spring MVC 提供了丰富的扩展点和定制选项，可以方便地满足不同应用程序的需求。</p>
<h2 id="SSM工作流程"><a href="#SSM工作流程" class="headerlink" title="SSM工作流程"></a>SSM工作流程</h2><ol>
<li>用户发送请求：用户在浏览器中发送请求，请求会被发送到服务器端的 DispatcherServlet。</li>
<li>DispatcherServlet 接收请求：DispatcherServlet 是 Spring MVC 中的核心组件，用于接收请求并将请求分发到相应的处理器。</li>
<li>处理器映射器解析请求：处理器映射器（HandlerMapping）用于解析请求并确定请求对应的处理器，它会将请求映射到一个或多个处理器。</li>
<li>处理器适配器调用处理器：处理器适配器（HandlerAdapter）会调用处理器对请求进行处理，处理器可以是一个控制器（Controller）、一个服务类（Service）或其他组件。</li>
<li>处理器处理请求：处理器对请求进行处理，可以通过调用服务类等方式获取业务数据并进行处理，生成相应的模型和视图对象。</li>
<li>MyBatis 数据访问：MyBatis 是一个 ORM 框架，它可以将 Java 对象映射到数据库表中，使得开发人员可以通过对象的方式访问数据库。在 SSM 中，处理器可以通过调用 MyBatis DAO 层的方法来访问数据库，获取数据并进行处理。</li>
<li>视图解析器解析视图：视图解析器（ViewResolver）用于解析视图，根据处理器返回的视图名称和视图类型确定最终的视图对象。</li>
<li>视图渲染：视图将模型数据渲染到 HTML、JSON、XML 或其他类型的响应体中。</li>
<li>响应结果发送给客户端：响应结果被发送回客户端，客户端接收到响应结果并显示在浏览器中。</li>
</ol>
<p>通过这个工作流程，SSM 框架可以实现请求的处理、数据库访问、视图的渲染和响应的发送，实现了分离关注点，使得应用程序的开发更加模块化，代码也更加清晰和易于维护。同时，SSM 框架提供了丰富的扩展点和定制选项，可以方便地满足不同应用程序的需求。</p>
<h2 id="VUE工作流程"><a href="#VUE工作流程" class="headerlink" title="VUE工作流程"></a>VUE工作流程</h2><ol>
<li>创建 Vue 实例：首先，我们需要通过创建 Vue 实例来启动应用程序。Vue 实例是 Vue.js 的核心，它包含了应用程序的数据和方法，以及用于将数据和方法绑定到视图上的指令。</li>
<li>模板解析：Vue.js 使用基于 HTML 的模板语法，将模板解析成 Virtual DOM 树。</li>
<li>数据绑定：Vue.js 使用双向数据绑定机制，可以将模型数据和视图保持同步。当模型数据发生变化时，视图会自动更新，反之亦然。</li>
<li>编译模板：Vue.js 将模板编译成渲染函数，这个函数可以将 Virtual DOM 节点渲染成真正的 DOM 节点，并将模板中的指令转换为对应的 JavaScript 代码。</li>
<li>渲染视图：Vue.js 使用 Virtual DOM 技术，将模板中的数据和方法渲染到真实的 DOM 上。</li>
<li>监听事件：Vue.js 使用指令和事件处理器，可以实现用户交互的响应，例如点击按钮、输入文本等操作。</li>
<li>更新数据：当用户交互或其他事件发生时，Vue.js 会自动更新模型数据，触发重新渲染视图。这个过程中，Vue.js 会根据依赖关系自动进行优化，只更新必要的组件，提高性能。</li>
</ol>
<p>通过这个工作流程，Vue.js 可以实现高效的视图渲染、双向数据绑定和组件化开发，使得应用程序的开发更加快速和灵活。同时，Vue.js 提供了丰富的插件和组件库，可以方便地扩展和定制应用程序，满足不同应用程序的需求。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>这三者都是框架模式，它们设计的目标都是为了解决Model和View的耦合问题。</li>
<li>MVC模式出现较早主要应用在后端，如Spring MVC、ASP.NET MVC等，在前端领域的早期也有应用，如<br>Backbone.js。。它的优点是分层清晰，缺点是数据流混乱，灵活性带来的维护性问题。</li>
<li>MVP模式在是MVC的进化形式，Presenter作为中间层负责M通信，解决了两者耦合问题，但P层过于臃肿会<br>导致维护问题。</li>
<li>MWM模式在前端领域有广泛应用，它不仅解决MV耦合问题，还同时解决了维护两者映射关系的大量繁杂代<br>码和DOM操作代码，在提高开发效率、可读性同时还保持了优越的性能表现。</li>
</ul>
<h1 id="Re-ferences"><a href="#Re-ferences" class="headerlink" title="Re ferences"></a>Re ferences</h1><p><a href="https://www.freesion.com/article/3175878285/">java进阶之三层架构+MVC - 灰信网</a></p>
<p><a href="https://gngsn.tistory.com/84">Spring, 3-Tier-Architecture</a></p>
<p><a href="https://www.bilibili.com/video/BV1Ji4y1U7Y1/">mvc，mvp，mvvm 的区别</a></p>
<p><a href="https://developer.aliyun.com/article/770897">Web开发的历史发展技术演变-阿里云开发者社区</a></p>
<p><a href="https://toutiao.io/posts/fklq1v/preview">前端框架模式的变迁</a></p>
]]></content>
      <categories>
        <category>WebFrontend</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Python  orm 连接MySQL数据库</title>
    <url>/2023/05/21/WebBackend/Python/Python%20%20orm%20%E8%BF%9E%E6%8E%A5MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<h2 id="安装第三方模块"><a href="#安装第三方模块" class="headerlink" title="安装第三方模块"></a>安装第三方模块</h2><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">pip install mysqlclient<br></code></pre></td></tr></table></figure>

<h2 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h2><p>ORM可以帮助我们做两件事</p>
<ul>
<li>创建、修改、删除数据库中的表。 (不用创建数据库)</li>
<li>操作表中的数据 (不用写SQL语句)</li>
</ul>
<h2 id="django连接数据库"><a href="#django连接数据库" class="headerlink" title="django连接数据库"></a>django连接数据库</h2><p>在settings.py文件中配置和修改</p>
<p><strong>生成数据库同步脚本：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">python manage.py makemigrations<br></code></pre></td></tr></table></figure>

<p><strong>迁移处理表：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">python manage.py migrate<br></code></pre></td></tr></table></figure>


<h2 id="依赖安装"><a href="#依赖安装" class="headerlink" title="依赖安装"></a>依赖安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">pip install -r requirements.txt<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>目录结构实例</title>
    <url>/2023/04/18/WebBackend/Java/%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E5%AE%9E%E4%BE%8B/</url>
    <content><![CDATA[<h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><p>标准的Java SSM（Spring + Spring MVC + MyBatis）项目：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><code class="hljs yml"><span class="hljs-bullet">-</span> <span class="hljs-string">src/main/java</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">com.example.project</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">controller</span>      <span class="hljs-string">//</span> <span class="hljs-string">Spring</span> <span class="hljs-string">MVC控制器类</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">dao</span>             <span class="hljs-string">//</span> <span class="hljs-string">MyBatis数据访问对象接口</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">service</span>         <span class="hljs-string">//</span> <span class="hljs-string">Spring服务层接口</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">impl</span>          <span class="hljs-string">//</span> <span class="hljs-string">Spring服务层实现类</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">model</span>           <span class="hljs-string">//</span> <span class="hljs-string">模型类和DTO（数据传输对象）</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">resources</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">mybatis</span>         <span class="hljs-string">//</span> <span class="hljs-string">MyBatis配置和映射文件</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">spring</span>          <span class="hljs-string">//</span> <span class="hljs-string">Spring配置文件</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">applicationContext.xml</span>     <span class="hljs-string">//</span> <span class="hljs-string">应用程序上下文配置文件</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">spring-mvc.xml</span>             <span class="hljs-string">//</span> <span class="hljs-string">Spring</span> <span class="hljs-string">MVC配置文件</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">log4j.properties</span> <span class="hljs-string">//</span> <span class="hljs-string">日志配置文件</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">db.properties</span>    <span class="hljs-string">//</span> <span class="hljs-string">数据库配置文件</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">webapp</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">WEB-INF</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">views</span>         <span class="hljs-string">//</span> <span class="hljs-string">视图文件（JSP、Thymeleaf等）</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">web.xml</span>       <span class="hljs-string">//</span> <span class="hljs-string">Web应用程序配置文件</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">pom.xml</span>             <span class="hljs-string">//</span> <span class="hljs-string">Maven项目配置文件</span><br></code></pre></td></tr></table></figure>

<p>其中，<code>src/main/java</code>目录包含Java源代码，<code>src/main/resources</code>目录包含资源文件，<code>webapp</code>目录包含Web应用程序的资源（例如静态资源、视图文件等）。</p>
<p>在<code>src/main/java</code>目录中，通常会有<code>controller</code>、<code>dao</code>、<code>service</code>和<code>model</code>四个子目录。其中，<code>controller</code>目录包含Spring MVC控制器类，<code>dao</code>目录包含MyBatis数据访问对象接口，<code>service</code>目录包含Spring服务层接口和实现类，<code>model</code>目录包含模型类和DTO（数据传输对象）。</p>
<p>在<code>src/main/resources</code>目录中，通常会有<code>mybatis</code>和<code>spring</code>两个子目录。其中，<code>mybatis</code>目录包含MyBatis配置和映射文件，<code>spring</code>目录包含Spring配置文件，如应用程序上下文配置文件、Spring MVC配置文件等。</p>
<p>最后，<code>webapp</code>目录中包含Web应用程序的资源，例如静态资源和视图文件等，其中<code>WEB-INF</code>目录中通常包含<code>views</code>目录和<code>web.xml</code>配置文件。</p>
<h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><p>Spring Boot框架</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><code class="hljs yml"><span class="hljs-bullet">-</span> <span class="hljs-string">src/main/java</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">com.example.project</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">controller</span>      <span class="hljs-string">//</span> <span class="hljs-string">Spring</span> <span class="hljs-string">MVC控制器类</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">dao</span>             <span class="hljs-string">//</span> <span class="hljs-string">MyBatis数据访问对象接口</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">service</span>         <span class="hljs-string">//</span> <span class="hljs-string">Spring服务层接口</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">impl</span>          <span class="hljs-string">//</span> <span class="hljs-string">Spring服务层实现类</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">model</span>           <span class="hljs-string">//</span> <span class="hljs-string">模型类和DTO（数据传输对象）</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">Application.java</span> <span class="hljs-string">//</span> <span class="hljs-string">Spring</span> <span class="hljs-string">Boot应用程序入口</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">src/main/resources</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">mybatis</span>           <span class="hljs-string">//</span> <span class="hljs-string">MyBatis配置和映射文件</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">application.yml</span>   <span class="hljs-string">//</span> <span class="hljs-string">Spring</span> <span class="hljs-string">Boot应用程序配置文件</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">log4j.properties</span>  <span class="hljs-string">//</span> <span class="hljs-string">日志配置文件</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">src/main/webapp</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">WEB-INF</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">views</span>           <span class="hljs-string">//</span> <span class="hljs-string">视图文件（JSP、Thymeleaf等）</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">pom.xml</span>             <span class="hljs-string">//</span> <span class="hljs-string">Maven项目配置文件</span><br></code></pre></td></tr></table></figure>

<p>其中，<code>src/main/java</code>目录包含Java源代码，<code>src/main/resources</code>目录包含资源文件，<code>src/main/webapp</code>目录包含Web应用程序的资源（例如静态资源、视图文件等）。</p>
<p>在<code>src/main/java</code>目录中，除了SSM项目中的<code>controller</code>、<code>dao</code>、<code>service</code>和<code>model</code>四个子目录之外，还需要添加一个名为<code>Application.java</code>的入口文件，用于启动Spring Boot应用程序。</p>
<p>在<code>src/main/resources</code>目录中，除了SSM项目中的<code>mybatis</code>目录、<code>log4j.properties</code>日志配置文件之外，还需要添加一个名为<code>application.yml</code>（或<code>application.properties</code>）的Spring Boot应用程序配置文件。这个文件包含了应用程序的配置，如数据库配置、日志配置、端口配置等。</p>
<p>在<code>src/main/webapp</code>目录中，与SSM项目相同，需要包含视图文件，但是通常不再使用JSP作为视图技术，而是使用Thymeleaf、FreeMarker等模板引擎。</p>
<p>最后，<code>pom.xml</code>文件是Maven项目配置文件，包含了项目的依赖和构建信息。</p>
<p>SpringMVC完整的执行流程：<br>    浏览器发送请求，被DispatcherServlet处理，DispatcherServlet在处理请求时要找到请求对应的请求映射，这时候就分两种情况：存在或不存在，存在就可以找到相对应的请求映射，不存在就会找我们有没有配置默认的servlet（mvc:default-servlet-handler)，如果没有配置，则页面直接404，如果配置了的话，就交给默认的servlet进行处理，访问目标资源（一般为静态资源（js，css，HTML）），找不到也会404。</p>
<pre><code>若有这个请求映射，就通过HandlerMapping去匹配当前的控制器方法，匹配到控制器方法之后由HandlerAdapter调用执行控制器方法，在执行控制器方法之前，先执行拦截器的preHandler()方法（按照拦截器的顺序执行），然后开始调用执行控制器方法，执行之后调用拦截器的postHandler()方法，postHandler()执行之后，处理ModuleAndView来渲染视图。
</code></pre>
<p>渲染视图之后执行拦截器的afterComoletion()方法，最终将结果响应到浏览器。</p>
]]></content>
      <categories>
        <category>WebBackend</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>java</tag>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Python环境搭建</title>
    <url>/2023/05/24/WebBackend/Python/Python%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h2 id="安装CUDA-NVCC"><a href="#安装CUDA-NVCC" class="headerlink" title="安装CUDA + NVCC"></a>安装CUDA + NVCC</h2><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">nvidia-smi<br></code></pre></td></tr></table></figure>

<p><a href="https://developer.nvidia.com/cuda-downloads">CUDA Toolkit</a>自带 NVIDIA CUDA 编译器（NVCC）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">nvcc --version<br></code></pre></td></tr></table></figure>

<p>安装Visual Studio，因为CUDA在安装时，需要VS的里面的工具包来编译。在安装过程中，会自动检测本机是否已经安装了配套的VS版本，如果VS版本和Cuda版本不匹配的话，安装无法进行</p>
<p>下载完安装包后双击，安装选项：工作负载处，勾选“C++的桌面开发（其他的可不勾选，若需要的话，后面可再次安装）</p>
<h2 id="安装anconda"><a href="#安装anconda" class="headerlink" title="安装anconda"></a>安装anconda</h2><p><strong>查找路径：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">sudo find / -<span class="hljs-built_in">type</span> d -iname <span class="hljs-string">&#x27;anaconda3&#x27;</span> 2&gt;/dev/null<br></code></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">conda --version<br>anaconda --version<br></code></pre></td></tr></table></figure>

<p><strong>更新：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">~/anaconda3/bin/conda update -n base conda<br>~/anaconda3/bin/conda update --all<br></code></pre></td></tr></table></figure>

<h2 id="安装pycharm"><a href="#安装pycharm" class="headerlink" title="安装pycharm"></a>安装pycharm</h2><h2 id="安装pytorch"><a href="#安装pytorch" class="headerlink" title="安装pytorch"></a>安装pytorch</h2><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">pip install torch torchvision -f https://download.pytorch.org/whl/cu111/torch_stable.html<br></code></pre></td></tr></table></figure>

<p><strong>版本查看：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-built_in">print</span>(torch.__version__) <span class="hljs-comment">#注意是双下划线</span><br></code></pre></td></tr></table></figure>

<p>nvcc可能不是强依赖，咱们安装2<del>4<br>安装pytorch参考<br><a href="https://blog.csdn.net/qq_42257666/article/details/121361983?utm_medium=distribute.pc_relevant.none-task-blog-2">https://blog.csdn.net/qq_42257666/article/details/121361983?utm_medium=distribute.pc_relevant.none-task-blog-2</a></del>default<del>baidujs_baidulandingword</del>default-0-121361983-blog-127182762.235^v36^pc_relevant_default_base&amp;spm&#x3D;1001.2101.3001.4242.1&amp;utm_relevant_index&#x3D;3</p>
<h2 id="Microsoft-C-Build-Tools"><a href="#Microsoft-C-Build-Tools" class="headerlink" title="Microsoft C++ Build Tools"></a>Microsoft C++ Build Tools</h2><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">sudo apt update<br>sudo apt install g++ gdb make ninja-build rsync zip<br></code></pre></td></tr></table></figure>



<h2 id="更换下载源"><a href="#更换下载源" class="headerlink" title="更换下载源"></a>更换下载源</h2><ol>
<li>阿里云：<a href="http://mirrors.aliyun.com/pypi/simple/">http://mirrors.aliyun.com/pypi/simple/</a></li>
<li>中国科技大学：<a href="https://pypi.mirrors.ustc.edu.cn/simple/">https://pypi.mirrors.ustc.edu.cn/simple/</a></li>
<li>豆瓣：<a href="http://pypi.douban.com/simple/">http://pypi.douban.com/simple/</a></li>
<li>清华大学：<a href="https://pypi.tuna.tsinghua.edu.cn/simple/">https://pypi.tuna.tsinghua.edu.cn/simple/</a></li>
<li>中国科学技术大学：<a href="http://pypi.mirrors.ustc.edu.cn/simple/">http://pypi.mirrors.ustc.edu.cn/simple/</a></li>
</ol>
<p>更换pip源有两种方法：</p>
<ol>
<li><p>临时使用：在使用pip时加上<code>-i</code>参数，然后指定源。例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">pip install scrapy -i https://pypi.tuna.tsinghua.edu.cn/simple<br></code></pre></td></tr></table></figure>
</li>
<li><p>永久修改：</p>
<ol>
<li>在Linux系统中，修改<code>~/.pip/pip.conf</code>文件（若不存在则创建一个)，内容如下：<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">[global]<br>index-url = https://mirrors.aliyun.com/pypi/simple/<br></code></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h2 id="版本切换"><a href="#版本切换" class="headerlink" title="版本切换"></a>版本切换</h2><p><a href="https://blog.csdn.net/lly1122334/article/details/126846882">https://blog.csdn.net/lly1122334/article/details/126846882</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">python3.8-distutils<br></code></pre></td></tr></table></figure>


<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">sudo apt install libmysqlclient-dev<br></code></pre></td></tr></table></figure>


<ol>
<li><a href="https://blog.csdn.net/Xuanze_xx/article/details/107948638">生成requirements.txt文件</a></li>
</ol>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>Python虚拟环境创建</title>
    <url>/2023/05/24/WebBackend/Python/Python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E5%88%9B%E5%BB%BA/</url>
    <content><![CDATA[<h2 id="Python-虚拟环境"><a href="#Python-虚拟环境" class="headerlink" title="Python 虚拟环境"></a>Python 虚拟环境</h2><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">pip3 install virtualenv<br>````<br><br>或者：<br>```bash<br>sudo apt install python-virtualenv<br></code></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">virtualenv --python=/usr/bin/python3.4 venv<br></code></pre></td></tr></table></figure>

<p><strong>虚拟环境安装：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">sudo apt install python3.8-dev python3.8-venv<br></code></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">apt-cache show python3.8-dev<br>apt-cache show python3.8-venv<br></code></pre></td></tr></table></figure>

<p>创建一个新的虚拟环境，并将其命名为<code>django-RESTfulAPI</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">python3 -m venv django-RESTfulAPI<br></code></pre></td></tr></table></figure>

<p><strong>激活新的虚拟环境：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> django-RESTfulAPI/bin/activate<br><br>[ or powershell ]<br><br>.\venv\Scripts\Activate<br></code></pre></td></tr></table></figure>


<p>安装完成后，您可以继续使用这个虚拟环境进行项目开发。如果您要退出虚拟环境，请使用以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">deactivate<br></code></pre></td></tr></table></figure>

<h2 id="django"><a href="#django" class="headerlink" title="django"></a>django</h2><p>我认为使用 django 的最好方法是使用 virtualenv，它是安全的，你可以在 virtualenv 中安装许多应用程序，这不会影响系统的任何外部空间 vitualenv 使用默认版本的 python，这与你的系统中安装 virtualenv 的相同</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">pip install virtualenv<br></code></pre></td></tr></table></figure>

<p>或者对于 python3</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">pip3 install virtualenv<br></code></pre></td></tr></table></figure>

<p>然后在你的目录中</p>
<blockquote>
<p>mkdir ~&#x2F;新项目</p>
<p>cd ~&#x2F;新项目</p>
</blockquote>
<p>现在，通过键入在项目目录中创建一个虚拟环境</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs undefined">virtualenv newenv<br></code></pre></td></tr></table></figure>

<p>要将软件包安装到隔离环境中，您必须通过键入以下内容来激活它：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> newenv/bin/activate<br></code></pre></td></tr></table></figure>

<p>现在在这里安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs undefined">pip install django<br></code></pre></td></tr></table></figure>

<p>您可以通过键入以下内容来验证安装：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css">django-admin <span class="hljs-attr">--version</span><br></code></pre></td></tr></table></figure>

<p>要离开虚拟环境，您需要从系统的任何位置发出 deactivate 命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs undefined">deactivate<br></code></pre></td></tr></table></figure>

<h2 id="大坑"><a href="#大坑" class="headerlink" title="大坑"></a>大坑</h2><ul>
<li>在virtualenv中不要加sudo安装pip包</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>退出当前的Anaconda环境：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">conda deactivate<br></code></pre></td></tr></table></figure>

<p><strong>线程性能测试：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">sysbench cpu --threads=8 --time=0 run<br></code></pre></td></tr></table></figure>

<h3 id="添加代理"><a href="#添加代理" class="headerlink" title="添加代理"></a>添加代理</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$env</span>:http_proxy = <span class="hljs-string">&quot;http://proxy.example.com:port&quot;</span><br><span class="hljs-variable">$env</span>:https_proxy = <span class="hljs-string">&quot;http://proxy.example.com:port&quot;</span><br></code></pre></td></tr></table></figure>

<h3 id="Ubuntu-18-04-中-sudo-apt-update-的问题：如果-x2F-usr-x2F-bin-x2F-test-w-x2F-var-x2F-lib-x2F-command-not-found-x2F-调用成功后"><a href="#Ubuntu-18-04-中-sudo-apt-update-的问题：如果-x2F-usr-x2F-bin-x2F-test-w-x2F-var-x2F-lib-x2F-command-not-found-x2F-调用成功后" class="headerlink" title="Ubuntu 18.04 中 sudo apt update 的问题：如果 &#x2F;usr&#x2F;bin&#x2F;test -w &#x2F;var&#x2F;lib&#x2F;command-not-found&#x2F; 调用成功后"></a><a href="https://askubuntu.com/questions/1041226/problem-with-sudo-apt-update-in-ubuntu-18-04-post-invoke-success-if-usr-bin-te">Ubuntu 18.04 中 sudo apt update 的问题：如果 &#x2F;usr&#x2F;bin&#x2F;test -w &#x2F;var&#x2F;lib&#x2F;command-not-found&#x2F; 调用成功后</a></h3>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Streamlit App with PyCharm and WSL2</title>
    <url>/2023/05/28/WebBackend/Python/Streamlit%20App%20with%20PyCharm%20and%20WSL2/</url>
    <content><![CDATA[<h2 id="运行Python脚本"><a href="#运行Python脚本" class="headerlink" title="运行Python脚本"></a>运行Python脚本</h2><p>在 PyCharm 中运行 Streamlit 应用程序，需要更改运行配置。按照以下步骤操作：</p>
<ol>
<li><p>打开 PyCharm，并确保已打开您的项目。</p>
</li>
<li><p>在顶部工具栏上找到“Run”菜单并点击“Edit Configurations…”。</p>
</li>
<li><p>点击左上角的 “+” 按钮以创建一个新的配置。</p>
</li>
<li><p>在弹出列表中选择 “Python”。</p>
</li>
<li><p>为新配置命名，例如 “Streamlit App”。</p>
</li>
<li><p>在 “Script path” 或 “Module name” 字段中输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">streamlit<br></code></pre></td></tr></table></figure>
</li>
<li><p>在 “Parameters” 字段中输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">run test.py [ARGUMENTS]<br></code></pre></td></tr></table></figure>
<p>（如果有任何实际参数需要传递给应用，请替换 <code>[ARGUMENTS]</code>）</p>
</li>
<li><p>在 “Python interpreter” 下拉菜单中选择在 WSL 中设置的 Python 解释器。</p>
</li>
<li><p>点击 “OK” 以保存配置。</p>
</li>
</ol>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/202305282048933.png" alt="image.png"></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>yapf代码格式化</title>
    <url>/2023/07/01/WebBackend/Python/yapf%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F%E5%8C%96/</url>
    <content><![CDATA[<h2 id="配置设置"><a href="#配置设置" class="headerlink" title="配置设置"></a>配置设置</h2><p>创建一个名为<code>.style.yapf</code>的文件，并将其放在项目的根目录中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">[style]<br><br>based_on_style = google<br><br>indent_width = 2<br><br>column_limit = 120<br><br>split_before_logical_operator = true<br></code></pre></td></tr></table></figure>


<h2 id="格式化全部代码"><a href="#格式化全部代码" class="headerlink" title="格式化全部代码"></a>格式化全部代码</h2><p><strong>PowerShell：</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">Get-ChildItem</span> <span class="hljs-literal">-Path</span> . <span class="hljs-literal">-Filter</span> *.py <span class="hljs-literal">-Recurse</span> | <span class="hljs-built_in">ForEach-Object</span> &#123; yapf <span class="hljs-literal">-i</span> <span class="hljs-literal">--style</span>=.style.yapf <span class="hljs-variable">$_</span>.FullName &#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">Get-ChildItem</span> <span class="hljs-literal">-Path</span> . <span class="hljs-literal">-Filter</span> *.py <span class="hljs-literal">-Recurse</span> <span class="hljs-literal">-Exclude</span> (<span class="hljs-built_in">Get-ChildItem</span> <span class="hljs-literal">-Path</span> .\venv\ <span class="hljs-literal">-Recurse</span> <span class="hljs-literal">-Include</span> *.py | <span class="hljs-built_in">ForEach-Object</span> &#123; <span class="hljs-variable">$_</span>.FullName &#125;) | <span class="hljs-built_in">ForEach-Object</span> &#123; yapf <span class="hljs-literal">-i</span> <span class="hljs-literal">--style</span>=.style.yapf <span class="hljs-variable">$_</span>.FullName &#125;<br></code></pre></td></tr></table></figure>

<p><strong>Linux：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">find . -iname <span class="hljs-string">&quot;*.py&quot;</span> -<span class="hljs-built_in">exec</span> yapf -i --style=.style.yapf &#123;&#125; \;<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>WebBackend/Python</category>
      </categories>
  </entry>
  <entry>
    <title>Unity2017教程笔记（P1到P23，unity页面介绍）</title>
    <url>/2022/07/24/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Unity/Unity%E7%AC%94%E8%AE%B0%EF%BC%88%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%EF%BC%89/</url>
    <content><![CDATA[<h2 id="坐标"><a href="#坐标" class="headerlink" title="坐标"></a>坐标</h2><ul>
<li><p>坐标：X红色、Y绿色、Z蓝色</p>
<p>世界坐标 ： 整个场景的固定坐标，不随物体旋转而改变</p>
<p>本地坐标 ：物体自身坐标，随旋转而改变</p>
</li>
</ul>
<h2 id="场景-Scenes"><a href="#场景-Scenes" class="headerlink" title="场景 Scenes"></a>场景 Scenes</h2><ul>
<li>一组相关联的游戏对象的集合，通常游戏中每个关卡就是一个场景，用于展现当前关卡中的所有物体。</li>
</ul>
<h2 id="游戏对象-GameObject"><a href="#游戏对象-GameObject" class="headerlink" title="游戏对象 GameObject"></a>游戏对象 GameObject</h2><ul>
<li><p>运行时出现在场景中的游戏物体</p>
<p>例如：人物、地形、数目……</p>
</li>
<li><p>是一种<u>容器</u>、可以挂载组件。</p>
</li>
<li><p>父、子物体</p>
<p>在Hierarchy面板中。将一个物体拖拽到另外一个物体中。</p>
<p>子物体将继承父物体的移动，旋转和缩放属性，但子物体不影响父物体。</p>
</li>
</ul>
<h2 id="组件-Component"><a href="#组件-Component" class="headerlink" title="组件 Component"></a>组件 Component</h2><ul>
<li>是游戏对象的功能模块。</li>
<li>每个组件都是一个类的实例。</li>
<li>Transform 变换组件：决定物体位置、旋转、缩放比。</li>
<li>Mesh Filter 网络过滤器：用于从资源中获取网络信息。</li>
<li>Mesh Renderer 网络渲染器 : 从网络过滤器中获得几何形状，对根据变化组件定义的位置进行渲染。</li>
<li>网格过滤器 与 网格渲染器 联合使用 ，使模型显示到屏幕上。</li>
</ul>
<p>Project工程对象-Scene场景-GameObject游戏对象（容器）-Component组件（功能）</p>
<h2 id="材质-Material"><a href="#材质-Material" class="headerlink" title="材质 Material"></a>材质 Material</h2><ul>
<li>材质：物体的质地，指色彩、纹理、光滑度、透明度、反射率、发光度等。实际就是Shader的实例。</li>
<li>Shader 着色器 ： 专门用来渲染3D图形的技术，可以使纹理以某种方式展现。实际就是一段嵌入到渲染管线中的程序，可以控制GPU运算图像效果的算法。</li>
<li>Texture 纹理 ：附加到物体表面的贴图。</li>
</ul>
<h2 id="物理着色器"><a href="#物理着色器" class="headerlink" title="物理着色器"></a>物理着色器</h2><ul>
<li>基于物理特性的Shader是Unity 5.x的重大革新之一,所谓物理着色器(Physically Based Shading,PBS)就是遵从物理学的能量守恒定律,可以创建出在不同光照环境下都接近真实的效果。</li>
</ul>
<h2 id="摄像机-Camera"><a href="#摄像机-Camera" class="headerlink" title="摄像机 Camera"></a>摄像机 Camera</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul>
<li>附加了摄像机Camera组件的游戏对象</li>
<li>向玩家捕获和现实世界的设备</li>
<li>场景中摄像机的数量不受限制</li>
</ul>
<h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><ul>
<li>Transform 变换组件</li>
<li>Camera 摄像机 ： 向玩家捕获和显示世界</li>
<li>Flare Layer 耀斑层 : 激活可显示光源耀斑</li>
<li>GUI Layer : 激活可渲染二维GUI元素</li>
<li>Audio Listener视频监听器 ； 接收场景输入的音源Audio Source并通过计算机的扬声器播放声音。</li>
</ul>
<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><ul>
<li><p>Clear Flags清除标识:决定屏幕的空白部分如何处理<br>Skybox天空盒:空白部分显示天空盒图案<br>Solid Color纯色:空白部分显示背景颜色<br>Depth Only仅深度:画中画效果时，小画面摄像机选</p>
<p>择该项可清除屏幕空部分信息只保留物体颜色信息。<br>Don’ t Clear 不清除:不清除任何颜色或深度缓存。</p>
</li>
<li><p>Background背景:所有元素绘制后，没有天空盒的情况<br>下，剩余屏幕的颜色。</p>
</li>
<li><p>Culling Mask选择遮蔽层:选择要照射的层Layer 。</p>
</li>
<li><p>Projection投射方式:<br>Perspective透视:透视图,物体具有近大远小效果。<br>Orthographic正交:摄像机会均匀地渲染物体,没有透视感,通常小地图使用。</p>
</li>
<li><p>Size大小(正交模式) :摄影机视口的大小</p>
</li>
<li><p>Field of view视野(透视模式) :设置相机视野的远近距离</p>
</li>
<li><p>Field of view裁剪面:相机到开始和结束渲染的距离<br>Near近:绘制的最近点。<br>Far远:绘制的最远点。</p>
</li>
<li><p>Viewport Rect视矩形:标明这台相机视图将会在屏幕<br>上绘制的屏幕坐标。<br>X:摄像机视图的开始水平位置。<br>Y:摄像机视图的开始垂直位置。<br>W宽度:摄像机输出在屏幕上的宽度。<br>H高度:摄像机输出在屏幕上的高度。</p>
</li>
<li><p>Depth深度:相机在渲染顺序上的位置。具有较低深度的<br>摄像机将在较高深度的摄像机之前渲染。</p>
</li>
</ul>
<h2 id="天空盒-SkyBox"><a href="#天空盒-SkyBox" class="headerlink" title="天空盒 SkyBox"></a>天空盒 SkyBox</h2><ul>
<li><p>围绕整个场景的包装器，用于模拟天空的材质</p>
</li>
<li><p>天空和材质种类 ： 6 Sided ， Procedural ，Cubemap 。</p>
</li>
</ul>
<h3 id="6-Sided-属性"><a href="#6-Sided-属性" class="headerlink" title="6 Sided 属性"></a>6 Sided 属性</h3><ul>
<li>Tint Color 色彩</li>
<li>Exposure 亮度</li>
<li>Rotation 旋转</li>
</ul>
<h3 id="Procedural-属性"><a href="#Procedural-属性" class="headerlink" title="Procedural 属性"></a>Procedural 属性</h3><ul>
<li><p>Sun 太阳模式</p>
<p>– None 没有</p>
<p>– Simple 简单</p>
<p>–Higth  Quality 高质量</p>
</li>
<li><p>Atmoshpere Thickness 大气层厚度</p>
</li>
<li><p>Ground 地面颜色</p>
</li>
<li><p>如果为Environment Lighting的Sun属性设置一 个平行光场景中会根据平行光角度自动创建太阳,并且位置随平行光旋转而改变。如果不设置,系统将默认选择场景中最亮的平行光。</p>
</li>
</ul>
<h3 id="使用太空盒"><a href="#使用太空盒" class="headerlink" title="使用太空盒"></a>使用太空盒</h3><ul>
<li><p>设置摄像机 Clear Flags 属性为Skybox。</p>
</li>
<li><p>方式以：摄像机添加组件 Skybox</p>
</li>
<li><p>方法二 ：光照窗口</p>
<p>Window - Lighting - Environment Lighting – Skybox<br>可作为反射源将天空色彩反射到场景中物体。</p>
</li>
</ul>
<h2 id="InstantOC"><a href="#InstantOC" class="headerlink" title="InstantOC"></a>InstantOC</h2><h3 id="渲染管线"><a href="#渲染管线" class="headerlink" title="渲染管线"></a>渲染管线</h3><ul>
<li>游戏数据在GPU上经过运算处理，最后输出到屏幕的过程<br>$$<br>绘制调用 Draw Call： 每次引擎准备数据并通知GPU的过程。通俗讲，每帧调用显卡渲染物体的次数<br>$$<br>游戏 —&gt; 图形API —&gt; CPU与GPU分界线 —&gt; 顶点处理 —&gt; 图元装配 —&gt; 光栅化 —&gt; 图像处理 —&gt; 缓存</li>
</ul>
<h4 id="顶点处理"><a href="#顶点处理" class="headerlink" title="顶点处理"></a>顶点处理</h4><ul>
<li>接受模型顶点数据。（任何的一个图形都是若干个三角组成的,三角形定点坐标）</li>
<li>坐标系转换。</li>
</ul>
<h4 id="图元装配"><a href="#图元装配" class="headerlink" title="图元装配"></a>图元装配</h4><ul>
<li>组装面 ： 连接相邻的顶点，绘制为三角面</li>
</ul>
<h4 id="光栅化"><a href="#光栅化" class="headerlink" title="光栅化"></a>光栅化</h4><ul>
<li>计算三角面上的像素，并为后面着色阶段提供合理的插值参数。</li>
</ul>
<h4 id="像素处理"><a href="#像素处理" class="headerlink" title="像素处理"></a>像素处理</h4><ul>
<li>对每个像素区域进行着色。</li>
<li>写入到缓存中</li>
</ul>
<h4 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h4><ul>
<li>一个存储像素数据的内存块，最重要的缓存时帧缓存与深度缓存</li>
<li>帧缓存 ：存储每个像素的色彩，即渲染后的图像。帧缓存常常在显存中，显卡不断读取并输出到屏幕中。</li>
<li>深度缓存 z-buffer : 存储像素的深度信息，即物体到摄像机的距离。光栅化时便计算各像素的深度值，如果新的深度值比现有值更近，则像素颜色被写到帧缓存，并替换深度缓存。</li>
</ul>
<h3 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h3><ul>
<li><p>Layer mask ：参与遮挡剔除的游戏对象层。</p>
</li>
<li><p>IOC Tag ：将为指定标签的游戏对象自动添加IOClod脚本对象。</p>
</li>
<li><p>Samples ： 每帧相机发射的射线数目。数量多剔除效果好，但性能开销大。通常在150-500之间。</p>
</li>
<li><p>Rays FOV ： 射线视野，应大于摄像机事业Field of View。</p>
</li>
<li><p>View Distance ： 试图距离 ， 射线长度。</p>
<p>​								将影响摄像机Clipping Planes -Far 数值。</p>
</li>
<li><p>Hide Delay： 延迟隐藏，当物体被剔除时延迟的帧数，建议50-100之间。</p>
</li>
<li><p>PreCull Check ： 检查采集信息，建议勾选，可以提高剔除效率。</p>
</li>
<li><p>Realtime Shadows： 实时阴影，如果场景需要实时阴影，建议启用，确保剔除物体显示正常的阴影。</p>
</li>
</ul>
<h2 id="Occlusion-Culling"><a href="#Occlusion-Culling" class="headerlink" title="Occlusion Culling"></a>Occlusion Culling</h2><h3 id="即时遮挡剔除"><a href="#即时遮挡剔除" class="headerlink" title="即时遮挡剔除"></a>即时遮挡剔除</h3><ul>
<li>即使遮挡剔除 Instant Occlusion Culling</li>
<li>遮挡剔除 ： 当物体被送到渲染流水线之前，将摄像机视角内看不到的物体进行剔除，从而减少了每帧渲染数据量，提高渲染性能。</li>
</ul>
<h2 id="LOD"><a href="#LOD" class="headerlink" title="LOD"></a>LOD</h2><h3 id="多细节层次"><a href="#多细节层次" class="headerlink" title="多细节层次"></a>多细节层次</h3><ul>
<li><p>多细节层次 Levels of Detail</p>
<p>LOD技术指根据物体模型的节点在显示环境中所处的位置和重要程度，决定物体渲染的资源分配，降低非重要物体的面数和细节度，从而获得高效率的渲染运算。(根据距离进行资源渲染分配)</p>
</li>
</ul>
<h2 id="光照系统"><a href="#光照系统" class="headerlink" title="光照系统"></a>光照系统</h2><h3 id="Global-Illumination"><a href="#Global-Illumination" class="headerlink" title="Global Illumination"></a>Global Illumination</h3><ul>
<li>简称GI，即全局光照</li>
<li>能够计算直接光、间接光、环境光一级反射光的光照系统。</li>
<li>通过GI算法可以使渲染出来的光照效果更为真实丰富。</li>
</ul>
<h3 id="直接光照"><a href="#直接光照" class="headerlink" title="直接光照"></a>直接光照</h3><ul>
<li>从光源直接发出的光，通过Light组件实现。</li>
<li>Type类型:灯光对象的当前类型<ul>
<li>Directional Light平行光:平行发射光线,可以照射场<br>景里所有物体,用于模拟太阳。</li>
<li>Point Light点光源:在灯光位置上向四周发射光线,可<br>以照射其范围内的所有对象,用于模拟灯泡。</li>
<li>Spot Light聚光灯:在灯光位置上向圆锥区域内发射光<br>线,只有在这个区域内的物体才会受到光线照射,用于模拟探<br>照灯。</li>
<li>Area Light区域光:由一个面向一个方向发射光线,只<br>照射该区域内物体,仅烘焙时有效，用在光线较为集中的区域。</li>
<li>Range范围:光从物体的中心发射的范围。仅适用于点光<br>源和聚光灯。</li>
<li>Spot Angle聚光角度:灯光的聚光角度。只适用于聚光灯。</li>
<li>Color颜色:光线的颜色。</li>
<li>Intensity强度:光线的明亮程度。</li>
<li>Culling Mask选择遮蔽层:选择要照射的层Layer。</li>
</ul>
</li>
</ul>
<h3 id="间接光照"><a href="#间接光照" class="headerlink" title="间接光照"></a>间接光照</h3><ul>
<li>物体表面在接受光照后反射出来的光。</li>
<li>通过Light组件中Bounce Intensity反弹强度控制。</li>
<li>可以通过Scene面板Irradiance模式查看间接光照。</li>
<li>注意:<br>只有标记Lightmaping Static的物体才能产生间接反弹光照。</li>
</ul>
<h3 id="环境光照"><a href="#环境光照" class="headerlink" title="环境光照"></a>环境光照</h3><ul>
<li>作用于场景内所有物体的光照,通过Environment Lighting<br>中Ambient控制。</li>
<li>Ambient Source环境光源<ul>
<li>Skybox通过天空盒颜色设置环境光照</li>
<li>Gradient梯度颜色<br>Sky天空颜色、Equator 地平线颜色、Ground 地面颜色</li>
<li>Ambient Color纯色</li>
<li>Ambient Intensity环境光强度</li>
<li>Ambient GI环境光GI模式<ul>
<li>Realtime实时更新，环境光源会改变选择此项。</li>
<li>Backed烘焙,环境光源不会改变选择此项。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="反射光照"><a href="#反射光照" class="headerlink" title="反射光照"></a>反射光照</h3><ul>
<li>根据天空盒或立方体贴图计算的作用于所有物体的反射效<br>果，通过Environment Lighting中Reflection控制。</li>
<li>Reflection Source反射源<ul>
<li>Skybox 天空盒</li>
</ul>
</li>
<li>Resolution分辨率Compression 是否压缩<ul>
<li>Custom自定义</li>
</ul>
</li>
<li>Cubemap立方体贴图</li>
<li>Reflection Intensity反射强度</li>
<li>Reflection Bounces使用Reflection Probe后允许不同游<br>戏对象间来回反弹的次数。</li>
</ul>
<h2 id="实时GI"><a href="#实时GI" class="headerlink" title="实时GI"></a>实时GI</h2><h3 id="Realtime-GI"><a href="#Realtime-GI" class="headerlink" title="Realtime GI"></a>Realtime GI</h3><ul>
<li>所谓”实时”是指在运行期间任意修改光源,而所有的变化可<br>以立即更新。</li>
<li>正是由于Unity 5引入了行业领先的实时全局光照技术<br>Enlighten系统,才可以在运行时产生间接光照,使场景更<br>为真实丰富。<br>操作步骤:<ol>
<li>游戏对象设置为Lightmaping Static</li>
<li>启用Lighting面板的Precomputed Realtime GI</li>
<li>点击Build按钮(如果勾选Auto编辑器会自动检测场景的改动修复光照效果)</li>
</ol>
</li>
</ul>
<h2 id="烘焙GI"><a href="#烘焙GI" class="headerlink" title="烘焙GI"></a>烘焙GI</h2><h3 id="烘焙Lightmap"><a href="#烘焙Lightmap" class="headerlink" title="烘焙Lightmap"></a>烘焙Lightmap</h3><ul>
<li>当场景包含大量物体时,实时光照和阴影对游戏性能有很大影响。<br>使用烘焙技术,可以将光线效果预渲染成贴图再<br>作用到物体上模拟光影,从而提高性能。适用于在性能较<br>低的设备上运行的程序。</li>
<li>Light 组件 Baking属性:烘培模式Realtime仅实时光照时起作用。</li>
<li>-Realtime 仅实时光照时起作用。<br>-Baked仅烘焙时起作用。<br>-Mixed 混合,烘焙与实时光照都起作用。</li>
<li>可以通过Scene面板Baked模式查看光照贴图。</li>
</ul>
<h2 id="声音"><a href="#声音" class="headerlink" title="声音"></a>声音</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><ul>
<li><p>Unity支持的音频文件格式：</p>
<p>mp3，ogg，wav，aif，mod，it，s3m，xm。</p>
</li>
<li><p>声音分为2D、3D两类</p>
<p>3D声音 : 有空间感，近大远小。</p>
<p>2D声音：适合背景音乐。</p>
</li>
<li><p>在场景中产生声音，主要依靠两个重要组件；</p>
<p>Audio Listener音频监听器 ： 接收场景中音频源Audio</p>
</li>
<li><p>Source发出的声音，通过计算机的扬声器播放声音</p>
<p>Audio Source 音频源</p>
</li>
</ul>
<h3 id="Audio-Source"><a href="#Audio-Source" class="headerlink" title="Audio Source"></a>Audio Source</h3><ul>
<li>音频源 ：<ul>
<li>Audio Clip 音频剪辑 ： 需要播放的音频资源。</li>
<li>Mute 静音 ： 如果启用，播放音频没有声音</li>
<li>Play On Awake 唤醒播放 ： 勾选后场景启动时自动播放。</li>
<li>Loop 循环 ： 循环播放音频</li>
<li>Volume 音量 ： 音量大小</li>
<li>Pitch 音调 ： 通过改变音调值调节音频播放速度。1是正常播放。</li>
<li>Stereo Pan ： 2D声音设置左右声道</li>
<li>Spatial Blend ： 2D与3D声音切换</li>
</ul>
</li>
</ul>
<h3 id="3D-Sound-Settings"><a href="#3D-Sound-Settings" class="headerlink" title="3D Sound Settings"></a>3D Sound Settings</h3><ul>
<li>3D声音设置<ul>
<li>Volume Rolloff 音量衰减方法</li>
<li>Min Distance 开始缩减距离</li>
<li>Max Distance 开始缩减距离</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Unity/虚幻</category>
      </categories>
      <tags>
        <tag>unity</tag>
      </tags>
  </entry>
  <entry>
    <title>Update&amp;FixedUpdate</title>
    <url>/2023/04/18/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Unity/Update&amp;FixedUpdate/</url>
    <content><![CDATA[<h2 id="Updata-和-FixedUpdata"><a href="#Updata-和-FixedUpdata" class="headerlink" title="Updata 和 FixedUpdata"></a>Updata 和 FixedUpdata</h2><p>rigbody组件不能写在Update函数里，要写在FixedUpdata里面</p>
<ul>
<li>Update()：每帧被调用一次</li>
<li>FixedUpdate()：每隔Time.fixedDeltaTime被调用一次。</li>
<li>MonoBehaviour.LateUpdate  晚于更新   当Behaviour启用时，其LateUpdate在每一帧被调用。<br>LateUpdate是在所有Update函数调用后被调用。这可用于调整脚本执行顺序。例如:当物体在Update里移动时，跟随物体的相机可以在LateUpdate里实现。</li>
</ul>
<h3 id="Update-和-FixedUpdate-区别"><a href="#Update-和-FixedUpdate-区别" class="headerlink" title="Update 和 FixedUpdate 区别"></a>Update 和 FixedUpdate 区别</h3><p>update跟当前平台的帧数有关，而FixedUpdate是真实时间，所以处理物理逻辑的时候要把代码放在FixedUpdate而不是Update.</p>
<p>​     Update是在每次渲染新的一帧的时候才会调用，也就是说，这个函数的更新频率和设备的性能有关以及被渲染的物体（可以认为是三角形的数量）。在性能好的机器上可能fps 30，差的可能小些。这会导致同一个游戏在不同的机器上效果不一致，有的快有的慢。因为Update的执行间隔不一样了。</p>
<p>​     而FixedUpdate，是在固定的时间间隔执行，不受游戏帧率的影响。有点想Tick。所以处理Rigidbody的时候最好用FixedUpdate。</p>
<p>​     PS：Time.fixedDeltaTime默认是0.02s，可以通过Edit-&gt;ProjectSettings-&gt;Time来设置</p>
<h3 id="Update和-LateUpdate的区别"><a href="#Update和-LateUpdate的区别" class="headerlink" title="Update和 LateUpdate的区别"></a>Update和 LateUpdate的区别</h3><p>​     在圣典里LateUpdate被解释成一句话：LateUpdate是在所有Update函数调用后被调用。这可用于调整脚本执行顺序。例如:当物体在Update里移动时，跟随物体的相机可以在LateUpdate里实现。这句我看了云里雾里的，后来看了别人的解释才明白过来。</p>
<p>​     LateUpdate是晚于所有Update执行的。例如：游戏中有2个脚步，脚步1含有Update和LateUpdate，脚步2含有Update，那么当游戏执行时，每一帧都是把2个脚步中的Update执行完后才执行LateUpdate 。虽然是在同一帧中执行的，但是Update会先执行，LateUpdate会晚执行。</p>
<p>​     现在假设有2个不同的脚本同时在Update中控制一个物体，那么当其中一个脚本改变物体方位、旋转或者其他参数时，另一个脚步也在改变这些东西，那么这个物体的方位、旋转就会出现一定的反复。如果还有个物体在Update中跟随这个物体移动、旋转的话，那跟随的物体就会出现抖动。 如果是在LateUpdate中跟随的话就会只跟随所有Update执行完后的最后位置、旋转，这样就防止了抖动。</p>
<p>​     做一个相机跟随主角的功能时，相机的位置调整写在LateUpdate（），老是不明白，看官方的SmoothFollow相机跟随写在Update（）中</p>
<p> <strong>资料参考链接：</strong><a href="http://www.cnblogs.com/zhaoqingqing/p/3454091.html"><strong>http://www.cnblogs.com/zhaoqingqing/p/3454091.html</strong></a></p>
<p>​                       <a href="http://www.cnblogs.com/zhaoqingqing/p/3296086.html"><strong>http://www.cnblogs.com/zhaoqingqing/p/3296086.html</strong></a></p>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity基础</tag>
      </tags>
  </entry>
  <entry>
    <title>序列化_特性</title>
    <url>/2022/08/25/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Unity/%E5%BA%8F%E5%88%97%E5%8C%96_%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<h1 id="1-SerializeField"><a href="#1-SerializeField" class="headerlink" title="1. [SerializeField]"></a>1. [SerializeField]</h1><p><strong>让私有的和保护的也可以被显示</strong></p>
<figure class="highlight cs"><table><tr><td class="code"><pre><code class="hljs cs">[<span class="hljs-meta">SerializeField</span>]<br><span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> privateInt;<br>[<span class="hljs-meta">SerializeField</span>]<br><span class="hljs-keyword">protected</span> <span class="hljs-built_in">string</span> protectedStr;<br></code></pre></td></tr></table></figure>

<p> <img src="https://img-blog.csdnimg.cn/ee7ee0052f534b528abdcd99714e5215.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBARE9VTTEyMw==,size_12,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<h1 id="2-HideInInspector"><a href="#2-HideInInspector" class="headerlink" title="2. [HideInInspector]"></a>2. [HideInInspector]</h1><p><strong>公开的变量不会暴露到编辑器</strong></p>
<figure class="highlight cs"><table><tr><td class="code"><pre><code class="hljs cs">[<span class="hljs-meta">HideInInspector</span>]<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> publicInt2 = <span class="hljs-number">50</span>;<br></code></pre></td></tr></table></figure>



<h1 id="3-System-Serializable"><a href="#3-System-Serializable" class="headerlink" title="3. [System.Serializable]"></a>3. [System.Serializable]</h1><p><strong>让自定义类型暴露到编辑器</strong></p>
<p><strong>注意: 字典类型例外</strong></p>
<figure class="highlight cs"><table><tr><td class="code"><pre><code class="hljs cs">[<span class="hljs-meta">System.Serializable</span>]<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">struct</span> MyStruct<br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> age;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> sex;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">public</span> MyStruct mystruct;<br>&#125;<br></code></pre></td></tr></table></figure>

<p> <img src="https://img-blog.csdnimg.cn/15b106b5ad5d4676add63b2628e33437.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBARE9VTTEyMw==,size_12,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<h1 id="4-Header"><a href="#4-Header" class="headerlink" title="4. [Header()]"></a>4. [Header()]</h1><p><strong>为成员分组</strong></p>
<figure class="highlight cs"><table><tr><td class="code"><pre><code class="hljs cs">[<span class="hljs-meta">Header(<span class="hljs-string">&quot;分组说明&quot;</span>)</span>]<br>[<span class="hljs-meta">Header(<span class="hljs-string">&quot;基础属性&quot;</span>)</span>]<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> age;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> sex;<br>[<span class="hljs-meta">Header(<span class="hljs-string">&quot;战斗属性&quot;</span>)</span>]<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> atk;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> def;<br></code></pre></td></tr></table></figure>

<p> <img src="https://img-blog.csdnimg.cn/e16b60b0e8ee4d859a31a1f79de5d92e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBARE9VTTEyMw==,size_12,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<h1 id="5-Tooltip"><a href="#5-Tooltip" class="headerlink" title="5. [Tooltip()]"></a>5. [Tooltip()]</h1><p><strong>为变量添加说明</strong></p>
<figure class="highlight cs"><table><tr><td class="code"><pre><code class="hljs cs">[<span class="hljs-meta">Tooltip(<span class="hljs-string">&quot;说明内容&quot;</span>)</span>]<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> miss;<br></code></pre></td></tr></table></figure>

<p> <img src="https://img-blog.csdnimg.cn/7dc183cf651f46e2ac830d2703bee44d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBARE9VTTEyMw==,size_12,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<h1 id="6-Space"><a href="#6-Space" class="headerlink" title="6. [Space()]"></a>6. [Space()]</h1><p><strong>让两个字段之间出现间隔</strong></p>
<figure class="highlight cs"><table><tr><td class="code"><pre><code class="hljs cs">[<span class="hljs-meta">Tooltip(<span class="hljs-string">&quot;说明内容&quot;</span>)</span>]<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> miss;<br>[<span class="hljs-meta">Space()</span>]<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> crit;<br></code></pre></td></tr></table></figure>

<p> <img src="https://img-blog.csdnimg.cn/871a6ecd1436454b9197056c0156c409.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBARE9VTTEyMw==,size_12,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<h1 id="7-Range-min-max"><a href="#7-Range-min-max" class="headerlink" title="7. [Range(min, max)]"></a>7. [Range(min, max)]</h1><p><strong>限制数值范围</strong></p>
<figure class="highlight cs"><table><tr><td class="code"><pre><code class="hljs cs">[<span class="hljs-meta">Range(0, 10)</span>]<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> luck;<br></code></pre></td></tr></table></figure>

<p> <img src="https://img-blog.csdnimg.cn/9f1fb0ef4523469e9e0540ab5925cc1c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBARE9VTTEyMw==,size_12,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<h1 id="8-ContextMenuItem-“显示按钮名”-“方法名”"><a href="#8-ContextMenuItem-“显示按钮名”-“方法名”" class="headerlink" title="8. [ContextMenuItem(“显示按钮名”, “方法名”)]"></a>8. [ContextMenuItem(“显示按钮名”, “方法名”)]</h1><p> <strong>为变量添加快捷方法</strong></p>
<p>  参数1 显示按钮名</p>
<p>  参数2 方法名 不能有参数</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><code class="hljs cs">[<span class="hljs-meta">ContextMenuItem(<span class="hljs-string">&quot;重置钱&quot;</span>, <span class="hljs-string">&quot;Test&quot;</span>)</span>]<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> money;<br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Test</span>()</span><br>&#123;<br>    money = <span class="hljs-number">99</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<p> <img src="https://img-blog.csdnimg.cn/0265e1cf4eed4c18a7fa4886199166a9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBARE9VTTEyMw==,size_12,color_FFFFFF,t_70,g_se,x_16" alt="img">(右键参数)</p>
<h1 id="9-ContextMenu-“测试函数”"><a href="#9-ContextMenu-“测试函数”" class="headerlink" title="9. [ContextMenu(“测试函数”)]"></a>9. [ContextMenu(“测试函数”)]</h1><p><strong>为方法添加特性能够在Inspector中执行</strong></p>
<figure class="highlight cs"><table><tr><td class="code"><pre><code class="hljs cs">[<span class="hljs-meta">ContextMenu(<span class="hljs-string">&quot;Test&quot;</span>)</span>]<br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">TestFun</span>()</span><br>&#123;<br>    print(<span class="hljs-string">&quot;测试方法&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>

<p> <img src="https://img-blog.csdnimg.cn/c74f2bd62ff8400c8a16ee5b181312c3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBARE9VTTEyMw==,size_12,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity基础</tag>
      </tags>
  </entry>
  <entry>
    <title>黑魂复刻第一季（傅老师）</title>
    <url>/2022/07/21/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Unity/%E9%BB%91%E9%AD%82%E5%A4%8D%E5%88%BB%E7%AC%AC%E4%B8%80%E5%AD%A3%EF%BC%88%E5%82%85%E8%80%81%E5%B8%88%EF%BC%89/</url>
    <content><![CDATA[<h1 id="1-玩家输入模块Player-Input-Module"><a href="#1-玩家输入模块Player-Input-Module" class="headerlink" title="1.玩家输入模块Player Input Module"></a>1.玩家输入模块Player Input Module</h1><h2 id="按键输入原理"><a href="#按键输入原理" class="headerlink" title="按键输入原理"></a>按键输入原理</h2><p>灵魂画师博老师：</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220720143557788.png" alt="image-20220720143557788"></p>
<p>Key （键盘输入）–&gt; PI脚本（PlayerInput） –&gt; signal（信号）<br>Joy	(手柄输入)  –&gt; PI脚本（PlayerInput） –&gt; signal（信号）</p>
<h2 id="创建场景"><a href="#创建场景" class="headerlink" title="创建场景"></a>创建场景</h2><p>在Hierarchy窗口创建Capsule(胶囊)和Plane(平面)，并重置坐标值，Capsule的Position Y值抬高1</p>
<h2 id="添加按键输入"><a href="#添加按键输入" class="headerlink" title="添加按键输入"></a>添加按键输入</h2><p>在Capsule新建一个PalyerInput脚本</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">// Variable</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> keyUp = <span class="hljs-string">&quot;w&quot;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> keyDown = <span class="hljs-string">&quot;s&quot;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> keyLeft = <span class="hljs-string">&quot;a&quot;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> keyRight = <span class="hljs-string">&quot;d&quot;</span>;<br></code></pre></td></tr></table></figure>

<p>效果如下:<br><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220720141645144.png" alt="image-20220720141645144"></p>
<h2 id="把输入的信号转换成电脑能读懂的signal"><a href="#把输入的信号转换成电脑能读懂的signal" class="headerlink" title="把输入的信号转换成电脑能读懂的signal"></a>把输入的信号转换成电脑能读懂的signal</h2><figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> Dup;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> Dright;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span> ()</span><br>&#123;<br>    Dup = (Input.GetKey(keyUp)?<span class="hljs-number">1.0f</span>:<span class="hljs-number">0</span>) - (Input.GetKey(keyDown)?<span class="hljs-number">1.0f</span>:<span class="hljs-number">0</span>); <span class="hljs-comment">//三目运算符</span><br>    Dright = (Input.GetKey(keyRight)?<span class="hljs-number">1.0f</span>:<span class="hljs-number">0</span>) - (Input.GetKey(keyLeft)?<span class="hljs-number">1.0f</span>:<span class="hljs-number">0</span>); <br>&#125;<br></code></pre></td></tr></table></figure>

<h1 id="2-输入衰减与使能旗飘-Damping-and-Enable-Flag"><a href="#2-输入衰减与使能旗飘-Damping-and-Enable-Flag" class="headerlink" title="2.输入衰减与使能旗飘 Damping and Enable Flag."></a>2.输入衰减与使能旗飘 Damping and Enable Flag.</h1><h2 id="SmoothDamp平滑缓冲"><a href="#SmoothDamp平滑缓冲" class="headerlink" title="SmoothDamp平滑缓冲"></a>SmoothDamp平滑缓冲</h2><p>代码如下：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">// Variable</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> keyUp = <span class="hljs-string">&quot;w&quot;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> keyDown = <span class="hljs-string">&quot;s&quot;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> keyLeft = <span class="hljs-string">&quot;a&quot;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> keyRight = <span class="hljs-string">&quot;d&quot;</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> Dup;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> Dright;<br><br><span class="hljs-keyword">private</span> <span class="hljs-built_in">float</span> targetDup; <span class="hljs-comment">//目标值</span><br><span class="hljs-keyword">private</span> <span class="hljs-built_in">float</span> targetDright;<br><span class="hljs-keyword">private</span> <span class="hljs-built_in">float</span> velocityDup; <span class="hljs-comment">//暂存值</span><br><span class="hljs-keyword">private</span> <span class="hljs-built_in">float</span> velocityDright;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span> ()</span><br>&#123;<br>    targetDup = (Input.GetKey(keyUp)?<span class="hljs-number">1.0f</span>:<span class="hljs-number">0</span>) - (Input.GetKey(keyDown)?<span class="hljs-number">1.0f</span>:<span class="hljs-number">0</span>); <span class="hljs-comment">//三目运算符</span><br>    targetDright = (Input.GetKey(keyRight)?<span class="hljs-number">1.0f</span>:<span class="hljs-number">0</span>) - (Input.GetKey(keyLeft)?<span class="hljs-number">1.0f</span>:<span class="hljs-number">0</span>); <br>    <br>    Dup = Mathf.SmoothDamp(Dup,targetDup,<span class="hljs-keyword">ref</span> velocityDup,<span class="hljs-number">0.1f</span>);<br>    Dright = Mathf.SmoothDamp(Dright, targetDright, <span class="hljs-keyword">ref</span> velocityDright, <span class="hljs-number">0.1f</span>);<br>&#125;<br></code></pre></td></tr></table></figure>

<p>smoothdamp（平滑缓冲）东西不是僵硬的移动而是做减速缓冲运动到指定位置<br>Mathf.SmoothDamp(需要修改的参数, 目标值 ,ref 暂存值,平滑所需的时间);</p>
<h2 id="添加关闭输入开关"><a href="#添加关闭输入开关" class="headerlink" title="添加关闭输入开关"></a>添加关闭输入开关</h2><figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> inputEnabled = <span class="hljs-literal">true</span>; <span class="hljs-comment">//Flag</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span> ()</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (!inputEnabled)<br>    &#123;<br>        targetDup = <span class="hljs-number">0</span>;<br>        targetDright = <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h1 id="3-导入模型Import-Models"><a href="#3-导入模型Import-Models" class="headerlink" title="3.导入模型Import Models"></a>3.导入模型Import Models</h1><h2 id="导入材质更改参数"><a href="#导入材质更改参数" class="headerlink" title="导入材质更改参数"></a>导入材质更改参数</h2><ul>
<li><p>把材质和模型导入Project文件夹中</p>
</li>
<li><p>添加Plane，并把地板贴图并拖入材质球中，Tiling属性设为9，9，地板大小也放大三倍（扩大地图）</p>
</li>
<li><p>capsule改名为PlayerHandle并放入人物模型，成为PlayerHandle子物件，remove（删除）掉Mesh Renderer（网格渲染器）和Mesh Filter（网格过滤器）</p>
</li>
<li><p>调整PlayerHandle和人物模型的位置及大小</p>
</li>
</ul>
<h2 id="更改材质密度大小"><a href="#更改材质密度大小" class="headerlink" title="更改材质密度大小"></a>更改材质密度大小</h2><p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220702095845832.png" alt="image-20220702095845832"></p>
<h2 id="scene-中的gizmos设置（优化场景显示）"><a href="#scene-中的gizmos设置（优化场景显示）" class="headerlink" title="scene 中的gizmos设置（优化场景显示）"></a>scene 中的gizmos设置（优化场景显示）</h2><p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220721224353457.png" alt="image-20220721224353457"></p>
<p>3d lcons 调整场景图标大小</p>
<p>selection Qutline 取消显示模型外边框</p>
<h1 id="4-新增动画控制器Add-Animator-Controller"><a href="#4-新增动画控制器Add-Animator-Controller" class="headerlink" title="4.新增动画控制器Add Animator Controller"></a>4.新增动画控制器Add Animator Controller</h1><ul>
<li>在Assets窗口中新建一个folder改名为Animator，并在Animator文件夹中新建一个Animator Controller名字就叫Actor</li>
<li>没有animator创建就在windows-animator窗口可以找到</li>
<li>放入idle和walk动画，并给人物模型的Animator的controller加入刚刚创建名为Actor的动画控制器</li>
<li>在Project窗口找到人物模型，在rig-Animation Type的属性改为Humanoid（关于这个的详细设置以后再更新）</li>
<li>Hierarchy窗口的人物模型animator组件的Apply Root Motion（根运动）选项消勾</li>
</ul>
<h1 id="5-一维混合树1D-Blend-Tree"><a href="#5-一维混合树1D-Blend-Tree" class="headerlink" title="5.一维混合树1D Blend Tree"></a>5.一维混合树1D Blend Tree</h1><p>一个混合树可以包含多个动画</p>
<p>右键单击 Animator Controller 窗口上的空白区域。 从显示的上下文菜单中，选择 <strong>Create State &gt; From New Blend Tree</strong>。 双击混合树 (Blend Tree) 以进入混合树视图 (Blend Tree Graph)。</p>
<p>把BlendTree改名为ground，双击Blend改名为forward，在inspector窗口加两个motion filed并放入动画</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220724114848868.png" alt="image-20220724114848868"></p>
<h1 id="6-串联玩家控制与角色控制模块Connect-PI-and-AC-modules"><a href="#6-串联玩家控制与角色控制模块Connect-PI-and-AC-modules" class="headerlink" title="6.串联玩家控制与角色控制模块Connect PI and AC modules"></a>6.串联玩家控制与角色控制模块Connect PI and AC modules</h1><p>在PlayerHandle添加一个名为ActorController的脚本</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220724115759797.png" alt="image-20220724115759797"></p>
<p>代码如下：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">//ActorController</span><br><span class="hljs-keyword">public</span> GameObject modle;	<span class="hljs-comment">//挂载一个GameObject名为modle</span><br><span class="hljs-keyword">public</span> PlayerInput pi;		<span class="hljs-comment">//挂载一个pi叫PlayerInput</span><br><br>[<span class="hljs-meta">SerializeField</span>]<span class="hljs-comment">//序列化的数据类型可以通过这个特性显示到编辑器上</span><br><span class="hljs-keyword">private</span> Animator anim;	<span class="hljs-comment">//声明一个animator组件,把ybot子物体拖进去</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Awake</span>() <span class="hljs-comment">//awake&gt;enable&gt;start</span></span><br>&#123;<br>    pi = GetComponent&lt;PlayerInput&gt;();	<span class="hljs-comment">//得到pi的PlayerInput脚本</span><br>    anim = model.GetConmponent&lt;Animator&gt;(); <span class="hljs-comment">//得到modle的animator动画组件</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()	<span class="hljs-comment">//帧更新</span></span><br>&#123;<br>    anim.SetFloat(<span class="hljs-string">&quot;forward&quot;</span>, pi.Dup);	<span class="hljs-comment">//取pi的Dup变量更改animator的forward的值</span><br>&#125;<br></code></pre></td></tr></table></figure>

<h1 id="7-角色行走-1Actor-walks-1"><a href="#7-角色行走-1Actor-walks-1" class="headerlink" title="7.角色行走#1Actor walks#1"></a>7.角色行走#1Actor walks#1</h1><p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220724122702081.png" alt="image-20220724122702081"></p>
<p>Dup和Dright值数范围是-1到1，而animator的forword数值变化值数范围是0到1</p>
<p>因此我们把Dup和Dright的值变为长度m，方向和由Dup和Dright的变化而变化</p>
<p>根据这幅图的原理我们把以前的代码更改一下：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">//ActorController</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()</span><br>&#123;<br>    anim.SetFloat(<span class="hljs-string">&quot;forward&quot;</span>, Mathf.Sqrt((pi.Dup * pi.Dright) + (pi.Dright * pi.Dright))); <span class="hljs-comment">//图片的m值</span><br>    model.transform.forward = pi.Dright * transform.right + pi.Dup * transform.forward;	<span class="hljs-comment">//旋转</span><br>&#125;<br></code></pre></td></tr></table></figure>

<p>然后我们把代码进行封装一下，更改PallyerInput脚本:</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">//PallyerInput</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> Dmag;	<span class="hljs-comment">//D向量模,用来更改动画forward的值</span><br><span class="hljs-keyword">public</span> Vector3 Dvec;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()</span><br>&#123;<br>    Dmag = Mathf.Sqrt((Dup * Dright) + (Dright * Dright));<br>    Dvec = Dright * transform.right + Dup * transform.forward;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>然后我们把ActorController脚本改一下，漂漂亮亮的：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">//ActorController</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()</span><br>&#123;<br>    anim.SetFloat(<span class="hljs-string">&quot;forward&quot;</span>, pi.Dmag); <span class="hljs-comment">//图片的m值</span><br>    model.transform.forward = pi.Dvec	<span class="hljs-comment">//旋转</span><br>&#125;<br></code></pre></td></tr></table></figure>

<p>但是这个代码有个缺陷：停止按键会立刻朝着前方，这个我们下一课进行解决</p>
<h1 id="8-角色行走-2Actor-walks-2"><a href="#8-角色行走-2Actor-walks-2" class="headerlink" title="8.角色行走#2Actor walks#2"></a>8.角色行走#2Actor walks#2</h1><p>我们是以Dup和Dright的大小作为方向的，但是松手后Dup和Dright的值数大小会组件变成0，forward向量的值不能为0导致模型方向重置，解决方法很简单在Dmag到0之前暂停这段代码执行即可：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">//ActorController</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()</span><br>&#123;<br>    anim.SetFloat(<span class="hljs-string">&quot;forward&quot;</span>, pi.Dmag); <span class="hljs-comment">//图片的m值</span><br>    <span class="hljs-keyword">if</span> (pi.Dmag &gt; <span class="hljs-number">0.1f</span>)<br>    &#123;<br>        model.transform.forward = pi.Dvec	<span class="hljs-comment">//旋转</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">//ActorController</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> walkSpeed = <span class="hljs-number">1.4f</span><br><br><span class="hljs-keyword">private</span> Rigidbody rb;	<span class="hljs-comment">//声明一个rigidbody组件</span><br><span class="hljs-keyword">private</span> Vector3 movingVec;	<span class="hljs-comment">//声明一个模型移动方向</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Awake</span>()</span><br>&#123;<br>    rb = GetComponent&lt;Rigidbody&gt;();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()</span><br>&#123;<br>    movingVec = pi.Dmag * model.transform.forward * walkSpeed; <span class="hljs-comment">//每秒向model.transform.forward移动Dmag米</span><br>&#125;<br>    <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">FixedUpdate</span>()  <span class="hljs-comment">//注意rigidbody一定要在fixedupdate里写，update是每帧执行一次，Fixedupdate是固定每0.02秒执行uici（Unity默认值）</span></span><br>&#123;<br>    <span class="hljs-comment">//rb.position += movingVec * Time.fixedDeltaTime; //胶囊速度乘以时间</span><br>    rb.velocity = <span class="hljs-keyword">new</span> Vector3(movingVec.x, rb.velocity.y, movingVec.z);<br>&#125;<br></code></pre></td></tr></table></figure>

<p>完整代码如下：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">//PallyerInput</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> Dmag;	<span class="hljs-comment">//D向量模,用来更改动画forward的值</span><br><span class="hljs-keyword">public</span> Vector3 Dvec;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()</span><br>&#123;<br>    Dmag = Mathf.Sqrt((Dup * Dright) + (Dright * Dright));<br>    Dvec = Dright * transform.right + Dup * transform.forward;<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">//ActorController</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> walkSpeed = <span class="hljs-number">1.4f</span><br><span class="hljs-keyword">public</span> GameObject modle;	<span class="hljs-comment">//挂载一个GameObject名为modle</span><br><span class="hljs-keyword">public</span> PlayerInput pi;		<span class="hljs-comment">//挂载一个pi叫PlayerInput</span><br><br>[<span class="hljs-meta">SerializeField</span>]<span class="hljs-comment">//序列化的数据类型可以通过这个特性显示到编辑器上</span><br><span class="hljs-keyword">private</span> Animator anim;	<span class="hljs-comment">//声明一个animator组件,把ybot子物体拖进去</span><br><span class="hljs-keyword">private</span> Rigidbody rb;	<span class="hljs-comment">//声明一个rigidbody组件</span><br><span class="hljs-keyword">private</span> Vector3 movingVec;	<span class="hljs-comment">//声明一个模型移动方向</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Awake</span>() <span class="hljs-comment">//awake&gt;enable&gt;start</span></span><br>&#123;<br>    pi = GetComponent&lt;PlayerInput&gt;();	<span class="hljs-comment">//得到pi的PlayerInput脚本</span><br>    anim = model.GetConmponent&lt;Animator&gt;(); <span class="hljs-comment">//得到modle的animator动画组件</span><br>    rb = GetComponent&lt;Rigidbody&gt;();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()	<span class="hljs-comment">//帧更新</span></span><br>&#123;<br>    anim.SetFloat(<span class="hljs-string">&quot;forward&quot;</span>, pi.Dmag); <span class="hljs-comment">//图片的m值</span><br>    <span class="hljs-keyword">if</span> (pi.Dmag &gt; <span class="hljs-number">0.1f</span>)<br>    &#123;<br>        model.transform.forward = pi.Dvec	<span class="hljs-comment">//旋转</span><br>    &#125;<br>    movingVec = pi.Dmag * model.transform.forward * walkSpeed; <span class="hljs-comment">//每秒向model.transform.forward移动Dmag米</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">FixedUpdate</span>()  <span class="hljs-comment">//注意rigidbody一定要在fixedupdate里写，update是每帧执行一次，Fixedupdate是固定每0.02秒执行uici（Unity默认值）</span></span><br>&#123;<br>    rb.velocity = <span class="hljs-keyword">new</span> Vector3(movingVec.x, rb.velocity.y, movingVec.z);<br>&#125;<br></code></pre></td></tr></table></figure>

<h1 id="9-角色奔跑Actor-run"><a href="#9-角色奔跑Actor-run" class="headerlink" title="9.角色奔跑Actor run"></a>9.角色奔跑Actor run</h1><p>在blend tree添加跑步动画</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220725142134641.png" alt="image-20220725142134641"></p>
<p>更改Threshold的值如果改不了就把Automate Thresholds选项消勾</p>
<p>因为需要实现跑步功能所以我们要添加新的按键，代码如下：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">//PlayerInput</span><br>[<span class="hljs-meta">Header(<span class="hljs-string">&quot;===== key settings =====&quot;</span>)</span>]<span class="hljs-comment">//序列化,Inspector面板中显示文字</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> keyA;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> keyB;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> keyC;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> keyD;<br><br>[<span class="hljs-meta">Header(<span class="hljs-string">&quot;===== Output signals =====&quot;</span>)</span>]<br><span class="hljs-comment">// 1.pressing signal</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> run;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()</span><br>&#123;<br>    run = Input.Getkey(keyA);<br>&#125;<br><br><span class="hljs-comment">//ActorConntroller</span><br>anim.SetFloat(<span class="hljs-string">&quot;forward&quot;</span>, pi.Dmag * ((pi.run) ? <span class="hljs-number">2.0f</span> : <span class="hljs-number">1.0f</span>));<br>movingVec = pi.Dmag * model.transform.forward * walkSpeed *((pi.run) ? <span class="hljs-number">2.7f</span> : <span class="hljs-number">1.0f</span>); <span class="hljs-comment">//三元运算符</span><br></code></pre></td></tr></table></figure>

<h1 id="10-线性插值与球形线性插值Lerp-amp-Slerp"><a href="#10-线性插值与球形线性插值Lerp-amp-Slerp" class="headerlink" title="10.线性插值与球形线性插值Lerp &amp; Slerp"></a>10.线性插值与球形线性插值Lerp &amp; Slerp</h1><figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">//ActorConntroller</span><br><span class="hljs-comment">//移动渐变</span><br>anim.SetFloat(<span class="hljs-string">&quot;forward&quot;</span>, pi.Dmag * Mathf.Lerp(anim.GetFloat(<span class="hljs-string">&quot;forward&quot;</span>),(pi.run) ? <span class="hljs-number">2.0f</span> :<span class="hljs-number">1.0f</span>),<span class="hljs-number">0.5f</span>));<br><span class="hljs-comment">//转向渐变</span><br>Vector3 targetForward = Vector3.Slerp(model.transform.forward, pi.DVec, <span class="hljs-number">0.5f</span>);<span class="hljs-comment">//渐变</span><br>model.transform.forward = targetForward;<span class="hljs-comment">//利用slerp把current值转到目标值实现平滑的转身</span><br></code></pre></td></tr></table></figure>

<h1 id="11-椭圆映射法Elliptical-Grid-Mapping"><a href="#11-椭圆映射法Elliptical-Grid-Mapping" class="headerlink" title="11.椭圆映射法Elliptical Grid Mapping"></a>11.椭圆映射法Elliptical Grid Mapping</h1><p>论文地址：<a href="https://arxiv.org/ftp/arxiv/papers/1509/1509.06344.pdf">https://arxiv.org/ftp/arxiv/papers/1509/1509.06344.pdf</a></p>
<p>在游戏运行时我们会发现一个问题，玩家斜向移动速度会变快，为了修改这个我们用论文第五页公式。</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220725150716443.png" alt="image-20220725150716443"></p>
<p>代码如下：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">//PlayerInput</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SquareToCirclie</span>(<span class="hljs-params">Vector2 input</span>)</span><br>&#123;<br>    Vector2 output = Vector2.zero;<br>    output.x = input.x * Mathf.Sqrt(<span class="hljs-number">1</span> - (input.y * input.y)/<span class="hljs-number">2.0f</span>);<br>    output.y = input.y * Mathf.Sqrt(<span class="hljs-number">1</span> - (input.x * input.x)/<span class="hljs-number">2.0f</span>);<br>    <br>    returm output;<br>&#125;<br>Vector2 tempDAxis = SquareToCirclie (<span class="hljs-keyword">new</span> Vector2(Dright,Dup));<br><span class="hljs-built_in">float</span> Dright2 = tempDAxis.x;<br><span class="hljs-built_in">float</span> Dup2 = tempDAxis.y;<br></code></pre></td></tr></table></figure>

<h1 id="12-一次性触发控制（Trigger-Oonce-Signal）"><a href="#12-一次性触发控制（Trigger-Oonce-Signal）" class="headerlink" title="12.一次性触发控制（Trigger Oonce Signal）"></a>12.一次性触发控制（Trigger Oonce Signal）</h1><p>实现跳跃功能：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">//PlayerInput</span><br><span class="hljs-comment">// 2. trigger once signal</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> jump;<br><span class="hljs-keyword">private</span> <span class="hljs-built_in">bool</span> lastJump;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span> ()</span><br>&#123;<br>    <span class="hljs-built_in">bool</span> newJump = Input.GetKey (keyB);<br>    <span class="hljs-keyword">if</span> (newJump != lastJump &amp;&amp; newJump == <span class="hljs-literal">true</span>)<span class="hljs-comment">//newJump == true，解释如下图</span><br>    &#123;<br>        jump = <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <br>    &#123;<br>        jump = <span class="hljs-literal">false</span>;<br>    &#125;<br>    lastJump = newJump;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>这种触发器按下会触发两次信号，所以我们要触发前面的信号：</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220725154850238.png" alt="image-20220725154850238"></p>
<h1 id="13-新增跳跃动画Jump-Animation"><a href="#13-新增跳跃动画Jump-Animation" class="headerlink" title="13.新增跳跃动画Jump Animation"></a>13.新增跳跃动画Jump Animation</h1><p>animator窗口添加Jump动画，详细操作我就不写了毕竟做了我们做很多次，所以直接上代码：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">//ActorController</span><br><span class="hljs-keyword">if</span>(pi.jump)<br>&#123;<br>    anim.SetTrigger(<span class="hljs-string">&quot;jump&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>

<h1 id="14-巧妙地重置动画控制器触发Reset-Triggers"><a href="#14-巧妙地重置动画控制器触发Reset-Triggers" class="headerlink" title="14.巧妙地重置动画控制器触发Reset Triggers"></a>14.巧妙地重置动画控制器触发Reset Triggers</h1><p>我们会发现一个问题，跳跃键按两次会自动跳两次，所以我们在ground的Inspector窗口新建一个名为FSMClearSingnals的脚本：</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220725183729914.png" alt="image-20220725183729914"></p>
<p>新建脚本会出现以下预设：</p>
<blockquote>
<ul>
<li>OnStateEnter：当一个转换开始并且状态机开始评估这个状态时</li>
</ul>
</blockquote>
<ul>
<li>OnStateUpdate：OnStateUpdate 在 OnStateEnter 和 OnStateExit 回调之间的每个更新帧上调用</li>
<li>OnStateExit：当转换结束并且状态机完成评估此状态时</li>
<li>OnStateMove：OnStateMove 在 Animator.OnAnimatorMove () 之后被调用。处理和影响根运动的代码应该在这里实现</li>
<li>OnAnimatorIK：OnStateIK 在 Animator.OnAnimatorIK () 之后被调用。设置动画 IK（反向运动学）的代码应该在这里实现。</li>
</ul>
<p>代码如下：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span>[] clearAtEnter;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span>[] clearAtExit;<br><br><span class="hljs-function"><span class="hljs-keyword">override</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnStateEnter</span>(<span class="hljs-params">Animator animator, AnimatorStateInfo stateInfo, <span class="hljs-built_in">int</span> layerIndex</span>)</span><br>&#123;<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> signal <span class="hljs-keyword">in</span> clearAtEnter)<br>    &#123;<br>        animator.ResetTrigger(signal);<span class="hljs-comment">//清除信号</span><br>    &#125;<br><span class="hljs-function"><span class="hljs-keyword">override</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnStateExit</span>(<span class="hljs-params">Animator animator, AnimatorStateInfo stateInfo, <span class="hljs-built_in">int</span> layerIndex</span>)</span><br>&#123;<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> signal <span class="hljs-keyword">in</span> clearAtExit)<br>    &#123;<br>        animator.ResetTrigger(signal);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220725191601811.png" alt="image-20220725191601811"></p>
<h1 id="15-套出FSM-On-Enter-amp-Exit方法FSM-On-Enter-amp-Exit"><a href="#15-套出FSM-On-Enter-amp-Exit方法FSM-On-Enter-amp-Exit" class="headerlink" title="15.套出FSM On Enter&amp;Exit方法FSM On Enter&amp;Exit"></a>15.套出FSM On Enter&amp;Exit方法FSM On Enter&amp;Exit</h1><p>在jump的Inspector窗口新建一个名为FSMOnEnter和FSMOnExit的脚本：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span>[] onEnterMessages;<br><span class="hljs-function"><span class="hljs-keyword">override</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnStateEnter</span>(<span class="hljs-params">Animator animator, AnimatorStateInfo stateInfo, <span class="hljs-built_in">int</span> layerIndex</span>)</span><br>&#123;<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> msg <span class="hljs-keyword">in</span> onEnterMessages)<br>    &#123;<br>        <span class="hljs-comment">//animator.gameObject.SendMessage(msg);</span><br>        animator.gameObject.SendMessageUpwards(msg);<span class="hljs-comment">//向上发信息</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span>[] onExitMessages;<br><span class="hljs-function"><span class="hljs-keyword">override</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnStateExit</span>(<span class="hljs-params">Animator animator, AnimatorStateInfo stateInfo, <span class="hljs-built_in">int</span> layerIndex</span>)</span><br>&#123;<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> msg <span class="hljs-keyword">in</span> onEnterMessages)<br>    &#123;<br>        <span class="hljs-comment">//animator.gameObject.SendMessage(msg);</span><br>        animator.gameObject.SendMessageUpwards(msg);<span class="hljs-comment">//向上发信息</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220725195233722.png" alt="image-20220725195233722"></p>
<p>然后在ActorController脚本进行拦截：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">//ActorController</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnJumpEnter</span>()</span><br>&#123;<br>    print (<span class="hljs-string">&quot;On jump enter&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnJumpExit</span>()</span><br>&#123;<br>    print (<span class="hljs-string">&quot;On jump exit&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>

<h1 id="16-锁死平面移动Lock-Planar"><a href="#16-锁死平面移动Lock-Planar" class="headerlink" title="16.锁死平面移动Lock Planar"></a>16.锁死平面移动Lock Planar</h1><p>解决跳跃状态移动的bug</p>
<p>直接在上个脚本改：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">//ActorController</span><br><br><span class="hljs-keyword">private</span> <span class="hljs-built_in">bool</span> lockPlanar = <span class="hljs-literal">false</span>;<span class="hljs-comment">//锁死平面移动</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (lockPlanar == <span class="hljs-literal">false</span>)<br>    &#123;<br>         movingVec = pi.Dmag * model.transform.forward * walkSpeed;    <br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnJumpEnter</span>()</span><br>&#123;<br>    pi.inputEnabled = <span class="hljs-literal">false</span>;<br>    lockPlanar = <span class="hljs-literal">true</span>;<br>    <span class="hljs-comment">//print (&quot;On jump enter&quot;);</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnJumpExit</span>()</span><br>&#123;<br>    <span class="hljs-comment">//print (&quot;On jump exit&quot;);</span><br>    pi.inputEnablie = <span class="hljs-literal">true</span>;<br>    lockPlanar = <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<h1 id="17-跳跃向量Jump-Thrust"><a href="#17-跳跃向量Jump-Thrust" class="headerlink" title="17.跳跃向量Jump Thrust"></a>17.跳跃向量Jump Thrust</h1><figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">//ActorController</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> jumpVelocity = <span class="hljs-number">3.0f</span>;<span class="hljs-comment">//为了写活跳跃值</span><br><br><span class="hljs-keyword">private</span> Vector3 thrustVec;	<span class="hljs-comment">//新增跳跃冲量向量</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">FixedUpdate</span>()</span><br>&#123;<br>    rb.velocity = <span class="hljs-keyword">new</span> Vector3(movingVec.x, rb.velocity.y, movingVec.z) + thrustVec;<br>    thrustVec = Vector3.zero;	<span class="hljs-comment">//一帧触发然后变成0</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnJumpEnter</span>()</span><br>&#123;<br>    pi.inputEnabled = <span class="hljs-literal">false</span>;<br>    lockPlanar = <span class="hljs-literal">true</span>;<br>    thrustVec = <span class="hljs-keyword">new</span> Vector3 (<span class="hljs-number">0</span>, jumpVelocity, <span class="hljs-number">0</span>);<br>    <span class="hljs-comment">//print (&quot;On jump enter&quot;);</span><br>&#125;<br></code></pre></td></tr></table></figure>

<h1 id="18-新增降落状态Add-Fall-State"><a href="#18-新增降落状态Add-Fall-State" class="headerlink" title="18.新增降落状态Add Fall State"></a>18.新增降落状态Add Fall State</h1><p>在动画控制器里添加下落动画名字为fall，并调整好状态机，过程很简单就不详写了</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220726213250236.png" alt="image-20220726213250236"></p>
<h1 id="19-新增落地侦测器Add-On-Ground-Sensor"><a href="#19-新增落地侦测器Add-On-Ground-Sensor" class="headerlink" title="19.新增落地侦测器Add On Ground Sensor"></a>19.新增落地侦测器Add On Ground Sensor</h1><p>在这里傅老师用的是Physics.OverlapCapsule这个方法用来检测地面撞击,这个函数判定胶囊中有多少碰撞体：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-function">Collider[] <span class="hljs-title">OverlapCapsule</span>(<span class="hljs-params">Vector3 point0, Vector3 point1, <span class="hljs-built_in">float</span> radius, <span class="hljs-built_in">int</span> layerMask</span>)</span>;<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220726215000444.png" alt="image-20220726215000444"></p>
<p>在PlayerHandle新建一个空对象，名为sensor。在sensor新建名为OnGroundSensor的脚本，代码如下：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">//OnGroundSensor</span><br><span class="hljs-keyword">public</span> CapsuleCollider capcol;	<span class="hljs-comment">//把PlayerHandle拽进来</span><br><br><span class="hljs-keyword">private</span> Vector3 point1;<br><span class="hljs-keyword">private</span> Vector3 ponit2;<br><span class="hljs-keyword">private</span> <span class="hljs-built_in">float</span> radius;	<span class="hljs-comment">//定义半径值</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Awake</span> ()</span><br>&#123;<br>    radius = capcol.radius;	<span class="hljs-comment">//把PlayerHandle抓取半径值</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">FixedUpdate</span> ()</span><br>&#123;<br>    point1 = transform.position + transform.up * radius;<br>    point2 = transform.position + transform.up * capcol.height - transform.up * radius;<br>    Collider[] outputCols = Physics.OverlapCapsule(point1, ponit2, radius, LayerMask.GetMask(<span class="hljs-string">&quot;Ground&quot;</span>));<span class="hljs-comment">//给地板加个Ground Layer</span><br>    <span class="hljs-keyword">if</span> (outputCols.Length != <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> col <span class="hljs-keyword">in</span> outputCols)<br>        &#123;<br>            print (<span class="hljs-string">&quot;collision:&quot;</span> + col.name)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220726214321556.png" alt="image-20220726214321556"></p>
<h1 id="20-使用落地侦测器Use-On-Ground-Sensor"><a href="#20-使用落地侦测器Use-On-Ground-Sensor" class="headerlink" title="20.使用落地侦测器Use On Ground Sensor"></a>20.使用落地侦测器Use On Ground Sensor</h1><p>我们上节课已经写好了落地检测，现在我们来使用它们：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">//OnGroundSensor</span><br><span class="hljs-keyword">if</span> (outputCols.Length != <span class="hljs-number">0</span>)<br>&#123;<br>        <span class="hljs-comment">//foreach (var col in outputCols)</span><br>        <span class="hljs-comment">//&#123;</span><br>        <span class="hljs-comment">//    print (&quot;collision:&quot; + col.name)</span><br>        <span class="hljs-comment">//&#125;</span><br>    SendMessageUpwards(<span class="hljs-string">&quot;IsGround&quot;</span>);<span class="hljs-comment">//向上传递信号</span><br>&#125;<br><span class="hljs-keyword">else</span> <br>&#123;<br>    SendMessageUpwards(<span class="hljs-string">&quot;IsNotGround&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>

<p>我们在ActorController脚本进行拦截：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">//ActorController</span><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">IsGround</span>()</span><br>&#123;<br>    anim.SetBoll (<span class="hljs-string">&quot;isGround&quot;</span>, <span class="hljs-literal">true</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">IsNotGround</span>()</span><br>&#123;<br>    anim.SetBoll (<span class="hljs-string">&quot;isGround&quot;</span>, <span class="hljs-literal">false</span>);<br>&#125;<br></code></pre></td></tr></table></figure>

<p>添加一个布尔类型的isGround信号并在fall-&gt;ground添加这个信号：</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220726233145573.png" alt="image-20220726233145573"></p>
<p>调整动画优先级防止出现落地时优先播放fall动画,如果还是出现落地播放fall动画可以降低跳跃的高度;或者打开jump-&gt;fall动画的setting,启用interruption source下的current stage</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220726233658071.png" alt="image-20220726233658071"></p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220726233609110.png" alt="image-20220726233609110"></p>
<h1 id="21-重新修正降落状态Rearrange-Fall-State"><a href="#21-重新修正降落状态Rearrange-Fall-State" class="headerlink" title="21.重新修正降落状态Rearrange Fall State"></a>21.重新修正降落状态Rearrange Fall State</h1><p>这样更好的解决了下落的问题：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnGroundEnter</span>()<span class="hljs-comment">//OnJumpExit改成OnGroundEnter</span></span><br>&#123;<br>    pi.inputEnablid = <span class="hljs-literal">true</span>;<br>    lockPlanar = <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220727161019714.png" alt="image-20220727161019714"></p>
<h1 id="22-失足掉落-Fall-form-Ground-State"><a href="#22-失足掉落-Fall-form-Ground-State" class="headerlink" title="22.失足掉落 Fall form Ground State"></a>22.失足掉落 Fall form Ground State</h1><p>动画控制器ground-&gt;fall添加一个isGround&#x3D;false触发条件：</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220727161446484.png" alt="image-20220727161446484"></p>
<p>为了防止移动下落没有抛物线的这种情况，我们加一个OnFallEnter：</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220727161703370.png" alt="image-20220727161703370"></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnFallEnter</span>()</span><br>&#123;<br>    pi.inputEnablid = <span class="hljs-literal">false</span>;<br>    lockPlanar = <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>出现跳跃发生Fall动画原因：跳跃值太高会产生下落效果，但是下落动画播放之后才会返回所以有下落的僵持效果，我们把Interruption Spirce改为Curremt state打断它即可</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220727163134333.png" alt="image-20220727163134333"></p>
<h1 id="23-新增翻滚状态Add-Roll-State"><a href="#23-新增翻滚状态Add-Roll-State" class="headerlink" title="23.新增翻滚状态Add Roll State"></a>23.新增翻滚状态Add Roll State</h1><p>在动画控制器添加下落root的动画，然后加个roll的trigger信号来检测控制下落，动画控制roll优先</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220727170618485.png" alt="image-20220727170618485"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-comment">//ActorController</span><br><span class="hljs-keyword">if</span> (rb.velocity.magnitude &gt; <span class="hljs-number">5.0f</span>)<br>&#123;<br>    anim.SetTrigger(<span class="hljs-string">&quot;rool&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>

<p>烘焙roll动画添加翻滚效果：</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220727173530968.png" alt="image-20220727173530968"></p>
<h1 id="24-走路翻滚-跑步跳跃Walk-Roll-and-Sprint-Jump"><a href="#24-走路翻滚-跑步跳跃Walk-Roll-and-Sprint-Jump" class="headerlink" title="24.走路翻滚+跑步跳跃Walk Roll and Sprint Jump"></a>24.走路翻滚+跑步跳跃Walk Roll and Sprint Jump</h1><p>走路翻滚：我们要fall从ground进入roll，所以我们添加动画条件</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220727180731990.png" alt="image-20220727180731990"></p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220727181132099.png" alt="image-20220727181132099"></p>
<p>更改动画条件：</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220727180822021.png" alt="image-20220727180822021"></p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220727181223768.png" alt="image-20220727181223768"></p>
<p>由于翻滚没有高度很是不美观，所以我们添加一个向上冲量：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">//ActorController</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> rollVelocity = <span class="hljs-number">3.0f</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnRollEnter</span>()</span><br>&#123;<br>    thrustVec = <span class="hljs-keyword">new</span> Vector3 (<span class="hljs-number">0</span>, rollVelocity, <span class="hljs-number">0</span>);<br>    pi.inputEnable = <span class="hljs-literal">false</span>;<br>    lockPlanar = <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>rool动画添加OnRollEnter来触发</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220727181532909.png" alt="image-20220727181532909"></p>
<h1 id="25-新增后跳状态Add-Jab-State"><a href="#25-新增后跳状态Add-Jab-State" class="headerlink" title="25.新增后跳状态Add Jab State"></a>25.新增后跳状态Add Jab State</h1><p>forward速度在0-1.1之间为roll，1.1-2.1为jump，在0-0.1之间增加jab后跳动作</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220727182745398.png" alt="image-20220727182745398"></p>
<p>我们继续添加后跳Jab动画，添加条件，更改优先级，Has Exit Time 消勾，然后再拉回来驾轻就熟…</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220727183822225.png" alt="image-20220727183822225"></p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220727184126246.png" alt="image-20220727184126246"></p>
<p>接下来我们给jab添加向后的冲量，所以我们给jab加之前写好的FSM On Enter脚本，挂上OnJabEnter脚本</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220727190233093.png" alt="image-20220727190233093"></p>
<p>添加代码如下：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">//ActorController</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> jabVelocity = <span class="hljs-number">3.0f</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnJabEnter</span>()</span><br>&#123;<br>    <span class="hljs-comment">//thrustVec = new Vector3 (0, 0, -javaVelocity);//错误方法，一个是方向错误，瞬时冲量类似于瞬移</span><br>    thrustVec = model.transform.forward * -jabVelocity;<span class="hljs-comment">//添加一个负的向前向量的值</span><br>    pi.inputEnabled = <span class="hljs-literal">false</span>;<br>    lockPlanar = <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Unity/虚幻</category>
      </categories>
      <tags>
        <tag>unity</tag>
        <tag>黑魂复刻(傅老师)</tag>
      </tags>
  </entry>
  <entry>
    <title>MVC设计模式</title>
    <url>/2022/11/24/%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/MVC%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="MVC介绍"><a href="#MVC介绍" class="headerlink" title="MVC介绍"></a>MVC介绍</h2><p><strong>MVC(Model-View-Controller)<strong>是一种</strong>软件开发架构</strong>模式，包含：<strong>Observer(观察者模式)</strong>,<strong>Composite(组合模式)<strong>和</strong>Strategy(策略模式)</strong> </p>
<p>MVC 模式的基本思想是数据，显示和处理相分离。模型(Model)负责<strong>数据管理</strong>，视图(View)负责<strong>数据显示</strong>，控制器(Controller)负责<strong>业务逻辑</strong>和<strong>响应策略</strong>。</p>
<ul>
<li><strong>模型：</strong> 代表应用的业务层。   它是一个携带数据的对象，如果数据发生变化，它还可以包含更新控制器的逻辑。 </li>
<li><strong>视图：</strong> 它代表应用程序的表示层。   它用于可视化模型包含的数据。 </li>
<li><strong>控制器：</strong> 它适用于模型和视图。   它用于管理应用程序流，即模型对象中的数据流，并在数据更改时更新视图。</li>
</ul>
<p>在 Java 编程中，模型包含简单的 Java 类 ，用于显示数据的视图和包含 servlet的控制器。   由于这种分离，用户请求的处理如下： </p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221124122932487.png" alt="image-20221124122932487"></p>
<ol>
<li><p>客户端（浏览器）向服务器端的控制器发送页面请求。 </p>
</li>
<li><p>然后控制器调用模型。  它收集请求的数据。 </p>
</li>
<li><p>然后控制器将检索到的数据传输到视图层。 </p>
</li>
<li><p>现在结果由视图发送回浏览器（客户端）</p>
</li>
</ol>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221207111406179.png" alt="image-20221207111406179"></p>
<p>MVC架构把数据处理，程序输入输出控制及数据显示分离开来，并且描述了不同部件的对象间的通信方式。使得软件可维护性，可扩展性，灵活性以及封装性大大提高；</p>
<p>视图表示数据在屏幕上的显示。控制器提供处理过程控制，它在模型和视图之间起连接作用。控制器本身不输出任何信息和做任何处理，它只负责把用户的请求转成针对Model的操作，和调用相应的视图来显示Model处理后的数据。</p>
<h2 id="为什么要在Web应用中使用MVC架构"><a href="#为什么要在Web应用中使用MVC架构" class="headerlink" title="为什么要在Web应用中使用MVC架构"></a>为什么要在Web应用中使用MVC架构</h2><h3 id="提高代码重用率"><a href="#提高代码重用率" class="headerlink" title="提高代码重用率"></a><em>提高代码重用率</em></h3><h3 id="提高程序的可维护性"><a href="#提高程序的可维护性" class="headerlink" title="提高程序的可维护性"></a><em>提高程序的可维护性</em></h3><h3 id="有利于团队开发"><a href="#有利于团队开发" class="headerlink" title="有利于团队开发"></a><em>有利于团队开发</em></h3><h2 id="Java简单实现MVC"><a href="#Java简单实现MVC" class="headerlink" title="Java简单实现MVC"></a>Java简单实现MVC</h2><ul>
<li><strong>Employee Class</strong> —— model</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//表示模型的类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> &#123;<br>    <span class="hljs-comment">//声明变量</span><br>    <span class="hljs-keyword">private</span> String employeeName;<br>    <span class="hljs-keyword">private</span> String employeeId;<br>    <span class="hljs-keyword">private</span> String employeeDepartment;<br>    <br>    <span class="hljs-comment">//定义get和set方法</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getEmployeeName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> employeeName;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setEmployeeName</span><span class="hljs-params">(String employeeName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.employeeName = employeeName;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getEmployeeId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> employeeId;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setEmployeeId</span><span class="hljs-params">(String employeeId)</span> &#123;<br>        <span class="hljs-built_in">this</span>.employeeId = employeeId;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getEmployeeDepartment</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> employeeDepartment;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setEmployeeDepartment</span><span class="hljs-params">(String employeeDepartment)</span> &#123;<br>        <span class="hljs-built_in">this</span>.employeeDepartment = employeeDepartment;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<ul>
<li><strong>EmployeeView Class</strong> —— view</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//表示视图的类 </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmployeeView</span> &#123;<br>    <br>  <span class="hljs-comment">//显示员工详细信息的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printEmployeeDetails</span><span class="hljs-params">(String employeeName,String employeeId,String employeeDepartment)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Employee Details：&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;Name：&quot;</span> + employeeName);<br>        System.out.println(<span class="hljs-string">&quot;Employee ID：&quot;</span> + employeeId);<br>        System.out.println(<span class="hljs-string">&quot;Employee Department：&quot;</span> + employeeDepartment);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<ul>
<li><strong>EmployeeContoller Class</strong> —— controller</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//代表控制器的类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmployeeController</span> &#123;<br><br>    <span class="hljs-comment">// 声明变量模型和视图  </span><br>    <span class="hljs-keyword">private</span> Employee model;<br>    <span class="hljs-keyword">private</span> EmployeeView view;<br>    <br>    <span class="hljs-comment">// 要初始化的构造函数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">EmployeeController</span><span class="hljs-params">(Employee model,EmployeeView view)</span> &#123;<br>        <span class="hljs-built_in">this</span>.model = model;<br>        <span class="hljs-built_in">this</span>.view = view;<br>    &#125;<br>    <br>    <span class="hljs-comment">// getter 和 setter 方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setEmployeeName</span><span class="hljs-params">(String name)</span> &#123;<br>        model.setEmployeeName(name);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getEmployeeName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> model.getEmployeeName();<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setEmployeeId</span><span class="hljs-params">(String id)</span> &#123;<br>        model.setEmployeeId(id);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getEmployeeId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> model.getEmployeeId();<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setEmployeeDepartment</span><span class="hljs-params">(String department)</span> &#123;<br>        model.setEmployeeDepartment(department);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getEmployeeDepartment</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> model.getEmployeeDepartment();<br>    &#125;<br>    <br>    <span class="hljs-comment">// 更新视图的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateView</span><span class="hljs-params">()</span> &#123;<br>        view.printEmployeeDetails(getEmployeeName(), getEmployeeId(), getEmployeeDepartment());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<ul>
<li>Main方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MVCMain</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 根据 employee_id 从数据库中获取员工记录</span><br>        <span class="hljs-type">Employee</span> <span class="hljs-variable">model</span> <span class="hljs-operator">=</span> retriveEmployeeFromDatabase();<br>        <span class="hljs-comment">// 创建一个视图以在控制台上写入员工详细信息</span><br>        <span class="hljs-type">EmployeeView</span> <span class="hljs-variable">view</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EmployeeView</span>();<br>        <span class="hljs-type">EmployeeController</span> <span class="hljs-variable">controller</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EmployeeController</span>(model, view);<br>        controller.updateView();<br>        <br>        <span class="hljs-comment">//更新模型数据</span><br>        controller.setEmployeeName(<span class="hljs-string">&quot;XinYue&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;\n&quot;</span> + <span class="hljs-string">&quot;Employee Details after updating: &quot;</span>);<br>        controller.updateView();<br>    &#125;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Employee <span class="hljs-title function_">retriveEmployeeFromDatabase</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Employee</span> <span class="hljs-variable">employee</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>();<br>        employee.setEmployeeName(<span class="hljs-string">&quot;NaiYaZi&quot;</span>);<br>        employee.setEmployeeId(<span class="hljs-string">&quot;7&quot;</span>);<br>        employee.setEmployeeDepartment(<span class="hljs-string">&quot;Salesforce&quot;</span>);<br>        <span class="hljs-keyword">return</span> employee;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<ul>
<li>输出：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">Employee Details：<br>Name：NaiYaZi<br>Employee ID：7<br>Employee Department：Salesforce<br><br>Employee Details after updating: <br>Employee Details：<br>Name：XinYue<br>Employee ID：7<br>Employee Department：Salesforce<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>架构模式</tag>
      </tags>
  </entry>
  <entry>
    <title>从传统数据库到云数据库演进</title>
    <url>/2022/11/25/%E9%98%BF%E9%87%8C%E4%BA%91/ACA/%E4%BB%8E%E4%BC%A0%E7%BB%9F%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%B0%E4%BA%91%E6%95%B0%E6%8D%AE%E5%BA%93%E6%BC%94%E8%BF%9B/</url>
    <content><![CDATA[<h1 id="从传统数据库到云数据库演进"><a href="#从传统数据库到云数据库演进" class="headerlink" title="从传统数据库到云数据库演进"></a>从传统数据库到云数据库演进</h1><p>该章节课程目的：</p>
<ol>
<li>了解数据库发展历史</li>
<li>了解数据库的基本分类与应用场景</li>
<li>掌握云数据库基本特征</li>
<li>了解阿里云数据库整体概况</li>
</ol>
<h2 id="数据库简介"><a href="#数据库简介" class="headerlink" title="数据库简介"></a>数据库简介</h2><h3 id="数据库发展历史"><a href="#数据库发展历史" class="headerlink" title="数据库发展历史"></a>数据库发展历史</h3><table>
<thead>
<tr>
<th>时间</th>
<th>基础设施</th>
<th>应用场景</th>
<th>数据库类型</th>
<th>代表产品</th>
</tr>
</thead>
<tbody><tr>
<td>1950s</td>
<td><strong>大型机</strong> &lt; 100台</td>
<td>国防<br />科学研究</td>
<td>层次数据库<br />网状数据库</td>
<td>IBM IMS</td>
</tr>
<tr>
<td>1970s</td>
<td><strong>小型机</strong> &lt; 1万台</td>
<td>大型商业处理</td>
<td>关系型数据库</td>
<td>DB2<br />Oracle<br />Ingres</td>
</tr>
<tr>
<td>1990s</td>
<td><strong>PC机&#x2F;X86服务器&#x2F;局域网</strong> &lt; 1亿台</td>
<td>企业信息化：ERP&#x2F;CRM&#x2F;财务<br />个人办公<br />个人娱乐</td>
<td>关系型数据库<br />数据仓库<br />PC单机数据库</td>
<td>SQL Server<br />PostgreSQL<br />Teradata<br />dBase</td>
</tr>
<tr>
<td>2000s</td>
<td><strong>互联网</strong> &lt; 10亿台</td>
<td>媒体<br />搜索<br />社交<br />电子商务<br />娱乐</td>
<td>开源数据库</td>
<td>MySQL<br />Redis<br />MongoDB</td>
</tr>
<tr>
<td>2015</td>
<td><strong>云+端</strong>  &gt; 100亿台</td>
<td>新媒体<br />移动APP,OTO<br />云计算<br />物联网<br />在线办公&#x2F;教育&#x2F;娱乐</td>
<td>云数据库</td>
<td>AWS         阿里云<br />RDS          RDS<br />Aurora    PolarDB<br />Redshift   AnalyticDB</td>
</tr>
</tbody></table>
<h3 id="数据库分类"><a href="#数据库分类" class="headerlink" title="数据库分类"></a>数据库分类</h3><table>
<thead>
<tr>
<th></th>
<th>OLTP</th>
<th>OLAP</th>
<th>NoSQL</th>
</tr>
</thead>
<tbody><tr>
<td>描述</td>
<td>在线事物处理</td>
<td>数据分析</td>
<td>新数据模型</td>
</tr>
<tr>
<td>典型场景</td>
<td>银行交易、ERP、财务管理</td>
<td>报表统计分析数据挖掘</td>
<td>缓存数据管理<br />图数据管理<br />JSON文档数据管理</td>
</tr>
<tr>
<td>业务特点</td>
<td>高并发、低延迟数据请求处理</td>
<td>海量数据统计分析</td>
<td>通常是非关系数据模型</td>
</tr>
<tr>
<td>代表产品</td>
<td>Oracle<br />SQL Server<br />MySQL<br />阿里云RDS<br />阿里云PolarDB</td>
<td>Teradata<br />Snowflake<br />Clickhouse<br />AWS Redshift<br />阿里云AnalyticDB</td>
<td>Redis<br />Neo4j<br />MongoDB<br />HBase<br />阿里云Lindorm</td>
</tr>
</tbody></table>
<h2 id="传统数据库与云数据库对比"><a href="#传统数据库与云数据库对比" class="headerlink" title="传统数据库与云数据库对比"></a>传统数据库与云数据库对比</h2><ul>
<li><p><strong>云是数据库最重要的发展方向</strong></p>
</li>
<li><p>2022预计75%的数据库都在云上</p>
</li>
<li><p>2013年Leaders：Oracle、Microsoft、IBM、SAP</p>
</li>
<li><p>2022年Leaders：AWS、Microsoft、Google、阿里云</p>
<p>Oracle、SAP、IBM、Teradata</p>
</li>
</ul>
<p><strong>传统自建数据库管理的挑战：</strong></p>
<p>自建商业数据库：</p>
<ul>
<li>软件价格高</li>
<li>运维压力大</li>
<li>集中式设计，扩展性差</li>
<li>技术体系封闭，对新数据模型支持弱</li>
<li><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221125155911101.png" alt="image-20221125155911101"></li>
</ul>
<p>自建开源数据库：</p>
<ul>
<li>运维压力大</li>
<li>缺少商业服务保障</li>
<li>可靠性、安全性难保障</li>
<li><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221125155930394.png" alt="image-20221125155930394"></li>
</ul>
<p><strong>云数据库核心特征：</strong></p>
<ul>
<li>自助服务开箱即用</li>
<li>可快速弹性扩展</li>
<li>按需计费</li>
<li>服务保障安全稳定</li>
<li>面向云计算架构设计</li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th>传统数据库</th>
<th>云数据库</th>
</tr>
</thead>
<tbody><tr>
<td>安装配置<br />诊断优化</td>
<td>需专业数据库人员操作</td>
<td>可自助完成，开箱即用、简单高效</td>
</tr>
<tr>
<td>弹性扩展</td>
<td>弱，根据需求提前规划硬件网络投入，再加上数据迁移，通常需要数天</td>
<td>强，可根据业务需求快速扩展，通常在分钟级可以一键完成</td>
</tr>
<tr>
<td>计费模型</td>
<td>购买License+服务费</td>
<td>在线购买，可按需付费或包年包月</td>
</tr>
<tr>
<td>服务保障<br />安全保护</td>
<td>需单独购买服务与安全保障</td>
<td>内置服务保障，提供了更高的可用性SLA提供安全加密、备份恢复、操作审计等数据安全保障能力</td>
</tr>
</tbody></table>
<h2 id="阿里云数据库介绍"><a href="#阿里云数据库介绍" class="headerlink" title="阿里云数据库介绍"></a>阿里云数据库介绍</h2><p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221125162241769.png" alt="image-20221125162241769"></p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221125162321848.png" alt="image-20221125162321848"></p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221125162430901.png" alt="image-20221125162430901"></p>
]]></content>
      <categories>
        <category>阿里云ACA</category>
      </categories>
      <tags>
        <tag>DBMS</tag>
      </tags>
  </entry>
  <entry>
    <title>日语</title>
    <url>/2022/08/30/%E7%A7%91%E5%AD%A6/%E4%BA%BA%E6%96%87%E7%A4%BE%E4%BC%9A%E7%A7%91%E5%AD%A6/%E6%97%A5%E8%AF%AD/</url>
    <content><![CDATA[<h2 id="IT日语"><a href="#IT日语" class="headerlink" title="IT日语"></a>IT日语</h2><table>
<thead>
<tr>
<th></th>
<th>日本語</th>
<th>英語</th>
<th>中国語</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>ボタン</td>
<td>button</td>
<td>按钮</td>
<td></td>
</tr>
<tr>
<td>2</td>
<td>モバイル</td>
<td>mobile</td>
<td>移动通讯</td>
<td></td>
</tr>
<tr>
<td>3</td>
<td>インターネット</td>
<td>internet</td>
<td>因特网</td>
<td></td>
</tr>
<tr>
<td>4</td>
<td>アンインストール</td>
<td>uninstall</td>
<td>卸载</td>
<td></td>
</tr>
<tr>
<td>5</td>
<td>ダウンロード</td>
<td>download</td>
<td>下载</td>
<td></td>
</tr>
<tr>
<td>6</td>
<td>プラス</td>
<td>plus</td>
<td>加，正</td>
<td></td>
</tr>
<tr>
<td>7</td>
<td>ロック</td>
<td>lock</td>
<td>加锁</td>
<td></td>
</tr>
<tr>
<td>8</td>
<td>アンロック</td>
<td>unlock</td>
<td>解锁</td>
<td></td>
</tr>
<tr>
<td>9</td>
<td>リターン·キー</td>
<td>return key</td>
<td>回车键</td>
<td></td>
</tr>
<tr>
<td>10</td>
<td>フォーマット</td>
<td>format</td>
<td>格式</td>
<td></td>
</tr>
<tr>
<td>11</td>
<td>ベース</td>
<td>base</td>
<td>基极，库</td>
<td></td>
</tr>
<tr>
<td>12</td>
<td>スペース</td>
<td>space</td>
<td>空格</td>
<td></td>
</tr>
<tr>
<td>13</td>
<td>システム</td>
<td>system</td>
<td>系统</td>
<td></td>
</tr>
<tr>
<td>14</td>
<td>ツール</td>
<td>tool</td>
<td>工具</td>
<td></td>
</tr>
<tr>
<td>15</td>
<td>コントロール</td>
<td>control</td>
<td>控制</td>
<td></td>
</tr>
<tr>
<td>16</td>
<td>ドライブ</td>
<td>drive</td>
<td>驱动器</td>
<td></td>
</tr>
<tr>
<td>17</td>
<td>ハードウェア</td>
<td>hardware</td>
<td>硬件</td>
<td></td>
</tr>
<tr>
<td>18</td>
<td>リサイクル</td>
<td>recycle</td>
<td>再利用</td>
<td></td>
</tr>
<tr>
<td>19</td>
<td>メニュー</td>
<td>menu</td>
<td>菜单</td>
<td></td>
</tr>
<tr>
<td>20</td>
<td>オンライン</td>
<td>online</td>
<td>在线</td>
<td></td>
</tr>
<tr>
<td>21</td>
<td>パラメータ</td>
<td>parameter</td>
<td>参数</td>
<td></td>
</tr>
<tr>
<td>22</td>
<td>サポート</td>
<td>support</td>
<td>支持</td>
<td></td>
</tr>
<tr>
<td>23</td>
<td>フリーズ</td>
<td>freezes</td>
<td>死机</td>
<td></td>
</tr>
<tr>
<td>24</td>
<td>イベント</td>
<td>event</td>
<td>事件</td>
<td></td>
</tr>
<tr>
<td>25</td>
<td>トランザクション</td>
<td>transaction</td>
<td>事务处理</td>
<td></td>
</tr>
<tr>
<td>26</td>
<td>フィールド</td>
<td>field</td>
<td>字段</td>
<td></td>
</tr>
<tr>
<td>27</td>
<td>バイト</td>
<td>byte</td>
<td>字节</td>
<td></td>
</tr>
<tr>
<td>28</td>
<td>マスタ</td>
<td>master</td>
<td>主</td>
<td></td>
</tr>
<tr>
<td>29</td>
<td>キャンセル</td>
<td>cancel</td>
<td>取消</td>
<td></td>
</tr>
<tr>
<td>30</td>
<td>サイクル</td>
<td>Cycle</td>
<td>周期，循环</td>
<td></td>
</tr>
<tr>
<td>31</td>
<td>メッセージ</td>
<td>message</td>
<td>消息</td>
<td></td>
</tr>
<tr>
<td>32</td>
<td>フォーカス</td>
<td>focus</td>
<td>焦点</td>
<td></td>
</tr>
<tr>
<td>33</td>
<td>アップロード</td>
<td>upload</td>
<td>上传</td>
<td></td>
</tr>
<tr>
<td>34</td>
<td>ステータス·バー</td>
<td>status bar</td>
<td>状态栏</td>
<td></td>
</tr>
<tr>
<td>35</td>
<td>カンマ</td>
<td>comma</td>
<td>逗号</td>
<td></td>
</tr>
<tr>
<td>36</td>
<td>デジタル</td>
<td>digital</td>
<td>数字</td>
<td></td>
</tr>
<tr>
<td>37</td>
<td>データ</td>
<td>data</td>
<td>数据</td>
<td></td>
</tr>
<tr>
<td>38</td>
<td>データベース</td>
<td>database</td>
<td>数据库</td>
<td></td>
</tr>
<tr>
<td>39</td>
<td>クリア</td>
<td>clear</td>
<td>清除</td>
<td></td>
</tr>
<tr>
<td>40</td>
<td>サイズ</td>
<td>size</td>
<td>大小</td>
<td></td>
</tr>
<tr>
<td>41</td>
<td>ポート</td>
<td>port</td>
<td>端口</td>
<td></td>
</tr>
<tr>
<td>42</td>
<td>アドレス</td>
<td>address</td>
<td>地址</td>
<td></td>
</tr>
<tr>
<td>43</td>
<td>コメント</td>
<td>comment</td>
<td>注释</td>
<td></td>
</tr>
<tr>
<td>44</td>
<td>コミット</td>
<td>commit</td>
<td>提交</td>
<td></td>
</tr>
<tr>
<td>45</td>
<td>プログラム</td>
<td>program</td>
<td>程序</td>
<td></td>
</tr>
<tr>
<td>46</td>
<td>クリック</td>
<td>click</td>
<td>点击</td>
<td></td>
</tr>
<tr>
<td>47</td>
<td>ログイン</td>
<td>log in</td>
<td>登录</td>
<td></td>
</tr>
<tr>
<td>48</td>
<td>バッチ</td>
<td>batch</td>
<td>批处理</td>
<td></td>
</tr>
<tr>
<td>49</td>
<td>テーブル</td>
<td>table</td>
<td>表</td>
<td></td>
</tr>
<tr>
<td>50</td>
<td>ウィルス</td>
<td>virus</td>
<td>病毒</td>
<td></td>
</tr>
<tr>
<td>51</td>
<td>レイアウト</td>
<td>layout</td>
<td>布局格式</td>
<td></td>
</tr>
<tr>
<td>52</td>
<td>サーバー</td>
<td>server</td>
<td>服务器</td>
<td></td>
</tr>
<tr>
<td>53</td>
<td>ファイル</td>
<td>file</td>
<td>文件</td>
<td></td>
</tr>
<tr>
<td>54</td>
<td>フォルダ</td>
<td>folder</td>
<td>文件夹</td>
<td></td>
</tr>
<tr>
<td>55</td>
<td>テキスト</td>
<td>text</td>
<td>文本</td>
<td></td>
</tr>
<tr>
<td>56</td>
<td>ドキュメント</td>
<td>document</td>
<td>文档</td>
<td></td>
</tr>
<tr>
<td>57</td>
<td>パスワード</td>
<td>password</td>
<td>密码</td>
<td></td>
</tr>
<tr>
<td>58</td>
<td>テンプレート</td>
<td>Template</td>
<td>模板</td>
<td></td>
</tr>
<tr>
<td>59</td>
<td>モジュール</td>
<td>module</td>
<td>模块</td>
<td></td>
</tr>
<tr>
<td>60</td>
<td>ユーザー</td>
<td>user</td>
<td>用户</td>
<td></td>
</tr>
<tr>
<td>61</td>
<td>パス</td>
<td>pass</td>
<td>路径</td>
<td></td>
</tr>
<tr>
<td>62</td>
<td>パソコン</td>
<td>personal computer</td>
<td>个人电脑</td>
<td></td>
</tr>
<tr>
<td>63</td>
<td>デフォルト</td>
<td>default</td>
<td>默认</td>
<td></td>
</tr>
<tr>
<td>64</td>
<td>サイト</td>
<td>site</td>
<td>网站</td>
<td></td>
</tr>
<tr>
<td>65</td>
<td>ネットワーク</td>
<td>network</td>
<td>网络</td>
<td></td>
</tr>
<tr>
<td>66</td>
<td>テンポラリファイル</td>
<td>temporary</td>
<td>临时文件</td>
<td></td>
</tr>
<tr>
<td>67</td>
<td>キーワード</td>
<td>keyword</td>
<td>关键词</td>
<td></td>
</tr>
<tr>
<td>68</td>
<td>マイナス</td>
<td>minus</td>
<td>减、负</td>
<td></td>
</tr>
<tr>
<td>69</td>
<td>プロセス</td>
<td>process</td>
<td>处理</td>
<td></td>
</tr>
<tr>
<td>70</td>
<td>アプリケーション</td>
<td>application</td>
<td>应用程序</td>
<td></td>
</tr>
<tr>
<td>71</td>
<td>ディスプレィ</td>
<td>display</td>
<td>显示器</td>
<td></td>
</tr>
<tr>
<td>72</td>
<td>チェック</td>
<td>check</td>
<td>检查</td>
<td>チェック</td>
</tr>
<tr>
<td>73</td>
<td>テスト</td>
<td>test</td>
<td>测试</td>
<td></td>
</tr>
<tr>
<td>74</td>
<td>クラス</td>
<td>class</td>
<td>类</td>
<td></td>
</tr>
<tr>
<td>75</td>
<td>タイプ</td>
<td>Tape</td>
<td>类型</td>
<td></td>
</tr>
<tr>
<td>76</td>
<td>パターン</td>
<td>pattern</td>
<td>模式</td>
<td></td>
</tr>
<tr>
<td>77</td>
<td>グループ</td>
<td>group</td>
<td>组件</td>
<td>グループ</td>
</tr>
<tr>
<td>78</td>
<td>プログラミング</td>
<td>programming</td>
<td>编写程序</td>
<td></td>
</tr>
<tr>
<td>79</td>
<td>コード</td>
<td>code</td>
<td>编码，代码</td>
<td></td>
</tr>
<tr>
<td>80</td>
<td>レコード</td>
<td>record</td>
<td>记录</td>
<td></td>
</tr>
<tr>
<td>81</td>
<td>ログ</td>
<td>log</td>
<td>记录，日志</td>
<td></td>
</tr>
<tr>
<td>82</td>
<td>セット</td>
<td>set</td>
<td>设置</td>
<td></td>
</tr>
<tr>
<td>83</td>
<td>アクセス</td>
<td>access</td>
<td>访问</td>
<td></td>
</tr>
<tr>
<td>84</td>
<td>ロジック</td>
<td>logic</td>
<td>逻辑</td>
<td></td>
</tr>
<tr>
<td>85</td>
<td>リンク</td>
<td>link</td>
<td>链接</td>
<td></td>
</tr>
<tr>
<td>86</td>
<td>エラー</td>
<td>error</td>
<td>错误</td>
<td></td>
</tr>
<tr>
<td>87</td>
<td>キー</td>
<td>key</td>
<td>键</td>
<td></td>
</tr>
<tr>
<td>88</td>
<td>キーボード</td>
<td>keyboard</td>
<td>键盘</td>
<td></td>
</tr>
<tr>
<td>89</td>
<td>プロジェクト</td>
<td>project</td>
<td>项目，工程</td>
<td></td>
</tr>
<tr>
<td>90</td>
<td>レビュー</td>
<td>review</td>
<td>评论</td>
<td></td>
</tr>
<tr>
<td>91</td>
<td>スケジュール</td>
<td>schedule</td>
<td>日程表</td>
<td></td>
</tr>
<tr>
<td>92</td>
<td>プログラム</td>
<td>program</td>
<td>程序</td>
<td></td>
</tr>
<tr>
<td>93</td>
<td>ラベル</td>
<td>label</td>
<td>标签</td>
<td></td>
</tr>
<tr>
<td>94</td>
<td>リスト</td>
<td>list</td>
<td>目录</td>
<td></td>
</tr>
<tr>
<td>95</td>
<td>コピー</td>
<td>copy</td>
<td>拷贝</td>
<td></td>
</tr>
<tr>
<td>96</td>
<td>メイン</td>
<td>main</td>
<td>主要</td>
<td></td>
</tr>
<tr>
<td>97</td>
<td>テキストボックス</td>
<td>textbox</td>
<td>文本框</td>
<td></td>
</tr>
<tr>
<td>98</td>
<td>セッション</td>
<td>session</td>
<td>段，会话</td>
<td></td>
</tr>
<tr>
<td>99</td>
<td>メソッド</td>
<td>method</td>
<td>方法，方式</td>
<td></td>
</tr>
<tr>
<td>100</td>
<td>格納</td>
<td>かくのう</td>
<td>放置</td>
<td>格納</td>
</tr>
<tr>
<td>101</td>
<td>仕様書</td>
<td>しようしょ</td>
<td>说明书</td>
<td></td>
</tr>
<tr>
<td>102</td>
<td>日付</td>
<td>ひづけ</td>
<td>日期</td>
<td></td>
</tr>
<tr>
<td>103</td>
<td>新規</td>
<td>しんき</td>
<td>新的</td>
<td></td>
</tr>
<tr>
<td>104</td>
<td>情報</td>
<td>じょうほう</td>
<td>信息</td>
<td></td>
</tr>
<tr>
<td>105</td>
<td>目次</td>
<td>もくじ</td>
<td>目录</td>
<td></td>
</tr>
<tr>
<td>106</td>
<td>番号</td>
<td>ばんごう</td>
<td>号码</td>
<td></td>
</tr>
<tr>
<td>107</td>
<td>桁</td>
<td>けた</td>
<td>位数</td>
<td></td>
</tr>
<tr>
<td>108</td>
<td>納品</td>
<td>のうひん</td>
<td>交货，交付</td>
<td></td>
</tr>
<tr>
<td>109</td>
<td>納期</td>
<td>のうき</td>
<td>缴纳期</td>
<td></td>
</tr>
<tr>
<td>110</td>
<td>参考</td>
<td>さんこう</td>
<td>参考，借鉴</td>
<td></td>
</tr>
<tr>
<td>111</td>
<td>参照</td>
<td>さんしょう</td>
<td>参照</td>
<td></td>
</tr>
<tr>
<td>112</td>
<td>拡張</td>
<td>かくちょう</td>
<td>扩展名，后缀</td>
<td></td>
</tr>
<tr>
<td>113</td>
<td>試験</td>
<td>しけん</td>
<td>测验</td>
<td></td>
</tr>
<tr>
<td>114</td>
<td>不具合</td>
<td>ふぐあい</td>
<td>程序,文档的错误</td>
<td></td>
</tr>
<tr>
<td>115</td>
<td>進捗</td>
<td>しんちょく</td>
<td>进度</td>
<td></td>
</tr>
<tr>
<td>116</td>
<td>手順</td>
<td>てじゅん</td>
<td>操作顺序</td>
<td></td>
</tr>
<tr>
<td>117</td>
<td>弊社</td>
<td>へいしゃ</td>
<td>敝公司</td>
<td></td>
</tr>
<tr>
<td>118</td>
<td>御社</td>
<td>おんしゃ</td>
<td>贵公司</td>
<td></td>
</tr>
<tr>
<td>119</td>
<td>見積</td>
<td>みつもり</td>
<td>报价，估算</td>
<td></td>
</tr>
<tr>
<td>120</td>
<td>汎用</td>
<td>はんよう</td>
<td>通用</td>
<td></td>
</tr>
<tr>
<td>121</td>
<td>入力</td>
<td>にゅうりょく</td>
<td>输入</td>
<td></td>
</tr>
<tr>
<td>122</td>
<td>戻る</td>
<td>もどる</td>
<td>恢复，返回</td>
<td></td>
</tr>
<tr>
<td>123</td>
<td>一覧</td>
<td>いちらん</td>
<td>一览表</td>
<td></td>
</tr>
<tr>
<td>124</td>
<td>箇所</td>
<td>かしょ</td>
<td>地方，部分</td>
<td></td>
</tr>
<tr>
<td>125</td>
<td>遷移</td>
<td>せんい</td>
<td>跳转</td>
<td></td>
</tr>
<tr>
<td>126</td>
<td>基づく</td>
<td>もとづく</td>
<td>根据，基于</td>
<td></td>
</tr>
<tr>
<td>127</td>
<td>文字列</td>
<td>もじれつ</td>
<td>字符串</td>
<td></td>
</tr>
<tr>
<td>128</td>
<td>引数</td>
<td>ひきすう</td>
<td>自变量，参数</td>
<td></td>
</tr>
<tr>
<td>129</td>
<td>取り込む</td>
<td>とりこむ</td>
<td>取得</td>
<td></td>
</tr>
<tr>
<td>130</td>
<td>要件</td>
<td>ようけん</td>
<td>需求</td>
<td></td>
</tr>
<tr>
<td>131</td>
<td>繰り返す</td>
<td>くりかえす</td>
<td>重复</td>
<td></td>
</tr>
<tr>
<td>132</td>
<td>宣言</td>
<td>せんげん</td>
<td>声明</td>
<td></td>
</tr>
<tr>
<td>133</td>
<td>汎用</td>
<td>はんよう</td>
<td>通配符</td>
<td></td>
</tr>
<tr>
<td>134</td>
<td>並べる</td>
<td>ならべる</td>
<td>排列</td>
<td></td>
</tr>
<tr>
<td>135</td>
<td>関数</td>
<td>かんすう</td>
<td>函数</td>
<td></td>
</tr>
<tr>
<td>136</td>
<td>異なる</td>
<td>ことなる</td>
<td>不同</td>
<td></td>
</tr>
<tr>
<td>137</td>
<td>違う</td>
<td>ちがう</td>
<td>不同，不对</td>
<td></td>
</tr>
<tr>
<td>138</td>
<td>添付</td>
<td>てんぷ</td>
<td>附带</td>
<td></td>
</tr>
<tr>
<td>139</td>
<td>表紙</td>
<td>ひょうし</td>
<td>封面</td>
<td></td>
</tr>
<tr>
<td>140</td>
<td>分岐</td>
<td>ぶんき</td>
<td>分支</td>
<td></td>
</tr>
<tr>
<td>141</td>
<td>戻り値</td>
<td>もどりち</td>
<td>返回值</td>
<td></td>
</tr>
<tr>
<td>142</td>
<td>破棄</td>
<td>はき</td>
<td>放弃、取消</td>
<td></td>
</tr>
<tr>
<td>143</td>
<td>障害</td>
<td>しょうがい</td>
<td>问题、错误</td>
<td></td>
</tr>
<tr>
<td>144</td>
<td>洗い出す</td>
<td>あらいだす</td>
<td>找出、跳出</td>
<td></td>
</tr>
<tr>
<td>145</td>
<td>伝送</td>
<td>でんそう</td>
<td>传送</td>
<td></td>
</tr>
<tr>
<td>146</td>
<td>受け渡す</td>
<td>うけわたす</td>
<td>传递</td>
<td></td>
</tr>
<tr>
<td>147</td>
<td>送信</td>
<td>そうしん</td>
<td>发送</td>
<td></td>
</tr>
<tr>
<td>148</td>
<td>変数</td>
<td>へんすう</td>
<td>变量</td>
<td></td>
</tr>
<tr>
<td>149</td>
<td>取り扱う</td>
<td>とりあつかう</td>
<td>处理</td>
<td></td>
</tr>
<tr>
<td>150</td>
<td>適用</td>
<td>てきよう</td>
<td>应用</td>
<td></td>
</tr>
<tr>
<td>151</td>
<td>問い合わせ</td>
<td>といあわせ</td>
<td>查询</td>
<td></td>
</tr>
<tr>
<td>152</td>
<td>照会</td>
<td>しょうかい</td>
<td>查询，核对</td>
<td></td>
</tr>
<tr>
<td>153</td>
<td>満たす</td>
<td>みたす</td>
<td>满足</td>
<td></td>
</tr>
<tr>
<td>154</td>
<td>組み合わせる</td>
<td>くみあわせる</td>
<td>组合</td>
<td></td>
</tr>
<tr>
<td>155</td>
<td>構造</td>
<td>こうぞう</td>
<td>结构</td>
<td></td>
</tr>
<tr>
<td>156</td>
<td>仕組み</td>
<td>しくみ</td>
<td>结构，方法，计划</td>
<td></td>
</tr>
<tr>
<td>157</td>
<td>編集</td>
<td>へんしゅう</td>
<td>编辑</td>
<td></td>
</tr>
<tr>
<td>158</td>
<td>読み込む</td>
<td>よみこむ</td>
<td>读入</td>
<td></td>
</tr>
<tr>
<td>159</td>
<td>行う</td>
<td>おこなう</td>
<td>进行</td>
<td></td>
</tr>
<tr>
<td>160</td>
<td>選ぶ</td>
<td>えらぶ</td>
<td>选择</td>
<td></td>
</tr>
<tr>
<td>161</td>
<td>論理</td>
<td>ろんり</td>
<td>逻辑</td>
<td></td>
</tr>
<tr>
<td>162</td>
<td>やり取り</td>
<td>やりとり</td>
<td>交换，沟通</td>
<td></td>
</tr>
<tr>
<td>163</td>
<td>押す</td>
<td>おす</td>
<td>按下</td>
<td></td>
</tr>
<tr>
<td>164</td>
<td>依頼</td>
<td>いらい</td>
<td>委托要求请求</td>
<td></td>
</tr>
<tr>
<td>165</td>
<td>既に</td>
<td>すでに</td>
<td>已经</td>
<td></td>
</tr>
<tr>
<td>166</td>
<td>実行</td>
<td>じっこう</td>
<td>实行</td>
<td>じっこう</td>
</tr>
<tr>
<td>167</td>
<td>結果</td>
<td>けっか</td>
<td>结果</td>
<td>結果</td>
</tr>
<tr>
<td>168</td>
<td>書く</td>
<td>かく</td>
<td>写</td>
<td></td>
</tr>
<tr>
<td>169</td>
<td>同じ</td>
<td>おなじ</td>
<td>相同</td>
<td></td>
</tr>
<tr>
<td>170</td>
<td>通訳</td>
<td>つうやく</td>
<td>翻译</td>
<td></td>
</tr>
<tr>
<td>171</td>
<td>読み方</td>
<td>よみかた</td>
<td>读法</td>
<td></td>
</tr>
<tr>
<td>172</td>
<td>絞り込む</td>
<td>しぼりこむ</td>
<td>锁定，限定</td>
<td></td>
</tr>
<tr>
<td>173</td>
<td>本番</td>
<td>ほんばん</td>
<td>正式</td>
<td></td>
</tr>
<tr>
<td>174</td>
<td>出し分け</td>
<td>だしわけ</td>
<td>分头</td>
<td></td>
</tr>
<tr>
<td>175</td>
<td>帳票</td>
<td>ちょうひょう</td>
<td>账票，报表</td>
<td></td>
</tr>
<tr>
<td>176</td>
<td>従う</td>
<td>したがう</td>
<td>根据，基于</td>
<td></td>
</tr>
<tr>
<td>177</td>
<td>繰り返し</td>
<td>くりかえし</td>
<td>循环，反复</td>
<td></td>
</tr>
<tr>
<td>178</td>
<td>切り替え</td>
<td>きりかえ</td>
<td>替换</td>
<td></td>
</tr>
<tr>
<td>179</td>
<td>送付</td>
<td>そうふ</td>
<td>发送</td>
<td></td>
</tr>
<tr>
<td>180</td>
<td>要望</td>
<td>ようぼう</td>
<td>要求</td>
<td></td>
</tr>
<tr>
<td>181</td>
<td>上長</td>
<td>じょうちょう</td>
<td>上级</td>
<td></td>
</tr>
<tr>
<td>182</td>
<td>検討</td>
<td>けんとう</td>
<td>讨论</td>
<td></td>
</tr>
<tr>
<td>183</td>
<td>割り当て</td>
<td>わりあて</td>
<td>分配</td>
<td></td>
</tr>
<tr>
<td>184</td>
<td>先頭</td>
<td>せんとう</td>
<td>上头</td>
<td></td>
</tr>
<tr>
<td>185</td>
<td>読み取り</td>
<td>よみとり</td>
<td>读取</td>
<td></td>
</tr>
<tr>
<td>186</td>
<td>踏襲</td>
<td>とうしゅう</td>
<td>继承</td>
<td></td>
</tr>
<tr>
<td>187</td>
<td>排他</td>
<td>はいた</td>
<td>排斥</td>
<td></td>
</tr>
<tr>
<td>188</td>
<td>出荷</td>
<td>しゅっか</td>
<td>出厂，出库</td>
<td></td>
</tr>
<tr>
<td>189</td>
<td>太線</td>
<td>ふとせん</td>
<td>太粗</td>
<td></td>
</tr>
<tr>
<td>190</td>
<td>不正</td>
<td>ふせい</td>
<td>非法</td>
<td></td>
</tr>
<tr>
<td>191</td>
<td>保蔵</td>
<td>ほぞう</td>
<td>保持．维持</td>
<td></td>
</tr>
<tr>
<td>192</td>
<td>出力</td>
<td>しゅつりょく</td>
<td>输出</td>
<td></td>
</tr>
<tr>
<td>193</td>
<td>転送</td>
<td>てんそう</td>
<td>转发</td>
<td></td>
</tr>
<tr>
<td>194</td>
<td>稼動</td>
<td>かどう</td>
<td>运行</td>
<td></td>
</tr>
<tr>
<td>195</td>
<td>共有</td>
<td>きょうゆう</td>
<td>共有</td>
<td></td>
</tr>
<tr>
<td>196</td>
<td>振替</td>
<td>ふりかえ</td>
<td>转账</td>
<td></td>
</tr>
<tr>
<td>197</td>
<td>折り返し</td>
<td>おりかえし</td>
<td>返回</td>
<td></td>
</tr>
<tr>
<td></td>
<td>呼び出す</td>
<td>よびだす</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="第1课"><a href="#第1课" class="headerlink" title="第1课"></a>第1课</h2><p><strong>言葉</strong> <strong>ことば</strong></p>
<p>にほん　日本　　　　　　　　　　　　わたし　私                       いち　一</p>
<p>ちゅうごく　中国　　　　　　　　　　あなた　　　　　　　　　　　に　　二　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　</p>
<p>～じん　　～人　　　　　　　　かれ　彼　　かのじょ　彼女　　　　さん　三　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　</p>
<p>かいしゃ　会社　　　　　　　　　　　あのひと　あの人　　　　　　よん　四　し</p>
<p>かいしゃいん　会社員　　　  　　　せんもん　専門　　　　　　　ご　　五　　　　　　      　　　　　　　　　　　　　　　　　　　　　　　　　</p>
<p>しゃいん　社員　　　　　　　　　　　コンピューター　　　　　　　ろく　六　　　　　　　　　　　　　　　　　　　　　　　</p>
<p>きぎょう　企業　　　　　　　　　　　じどうしゃ　自動車　　　　　なな　七　しち　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　</p>
<p>かちょう　課長　　　　　　　　　　　なまえ　名前　　　　　　　　はち　八　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　</p>
<p>しゃちょう　社長　　　　　　　　　　ゼロ　　　　　　　　　　　　きゅう九      く                   　　</p>
<p>しりょう　　資料　　　　　　　　　　おきゃくさま　お客様　　　　じゅう十</p>
<p>さいしんばん　最新版　　　　　　　　かいはつぶ　開発部</p>
<p>プロジェクト　　　　　　　　　たんとう　担当　　　てんぷファイル　添付ファイル　</p>
<p>～さん　　劉さん　徐さん　高さん</p>
<p>判断句</p>
<p>陈述句</p>
<p>存在句</p>
<p>描写句</p>
<p><strong>文型</strong>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　</p>
<p>わたしは中国人です。　　　　　　　　　彼は　課長です。　</p>
<p>あなたは日本人ですか。　　　　　　　　劉さんは　開発部の人ですか。</p>
<p>あの人は会社員ではありません。　　田中さんは～～プロジェクトの担当ではありません。　</p>
<p>林さんはトヨタ自動車の社員です。　　　</p>
<p><strong>本文</strong></p>
<p>わたしは王です。中国人です。</p>
<p>李さんも中国人です</p>
<p>わたしの専門はコンピューターです。　</p>
<p>林さんは日本人ですか</p>
<p>はい　そうです</p>
<p>林さんは中国人ですか</p>
<p>いいえ　中国人ではありません　日本人です</p>
<p>林さんは何歳ですか</p>
<p>28（歳）です</p>
<p><strong>文法</strong></p>
<p>１～は～です 助詞は的用法</p>
<p> 相当于汉语的～是～　は是主语部分  です是谓语部分</p>
<p>例：</p>
<p>わたしは中国人です </p>
<p>あの人は　李さんです。</p>
<p>李さんは　会社員です。</p>
<p>李さんは　教師では　ありません</p>
<p>２～は～では　ありません</p>
<p>　 相当于汉语的 ～不是～</p>
<p>例　：</p>
<p>わたしは日本人ではありません</p>
<p>張さんは　エンジニアでは　ありません。</p>
<p>３～ですか</p>
<p>例：</p>
<p>李さんは　中国人ですか</p>
<p>はい　中国人です</p>
<p>いいえ　中国人ではありません。日本人です。　　　</p>
<p>あなたは日本人ですか</p>
<p>はい　そうです</p>
<p>いいえ　そうではありません　ちがいます　違います　中国人です </p>
<p>４助詞の的用法</p>
<p>连接两个名词 相当于汉语“的”</p>
<p>わたしの専門　　中国の自動車　　　                         </p>
<p>トヨタは　日本の車です。くるま</p>
<p>ベルリンは　ドイツの首都ですか。</p>
<p>李さんは　北京大学の　学生です。</p>
<p>　　</p>
<p>５助詞も的用法                                   </p>
<p>有条件的提示主语 具有强调作用 相当于汉语“也”</p>
<p>例　王さんは中国人です　李さんも中国人です</p>
<p>6日语 100以内的数法　</p>
<p>上海も　中国の町ですか</p>
<p>はい　そうです。</p>
<p>李さんの趣味は　魚釣です。</p>
<p>北京は　アメリカの町ではありません。</p>
<p>会社の名前はトヨタ自動車です。　</p>
<p>練習</p>
<p>1 小李是公司职员   李さんは　会社員です。</p>
<p>2公司的名字是丰田汽车　会社のなまえ（名前）はトヨタ自動車です。</p>
<p>3小李的专业是计算机吗？　李さんの専門は　コンピューターですか　はいそうです</p>
<p> 是 是的</p>
<p>4小王也是公司职员吗？　王さんも会社員ですか　いいえ、違います。学生です</p>
<p>北京ではありません。</p>
<p> 不 不是 是学生　</p>
<p> わたしは中国人です。　　　　　　　　　彼は　課長です。　</p>
<p>あなたは日本人ですか。　　　　　　　　劉さんは　開発部の人ですか。</p>
<p>あの人は会社員ではありません。　　田中さんは～～プロジェクトの担当ではありません。　</p>
<p>林さんはトヨタ自動車の社員です。　　　</p>
<h2 id="第2课"><a href="#第2课" class="headerlink" title="第2课"></a>第2课</h2><p><strong>言葉</strong>                                                               </p>
<p>これ　　　　　　　　　　　　　たばこ　煙草　　タバコ　　　　　だれ　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　</p>
<p>それ　　　　　　　　　　　　　いす　　椅子　　　　　　　　どなた　　　　　　　　　　　　　　　　　　　　</p>
<p>あれ　　　　　　　　　　　　　つくえ　机　　　　　　　　　なん　何　　　　　　　　　</p>
<p>この　　　　　　　　　　　　　まど　　窓　　　　　　　　　どの　　　　　　　　　　　　　　　　　　　　　　　　　</p>
<p>その　　　　　　　　　　　　　ドア　　　　　　　　　　　　どれ　　　　　　　　　　　　　　　　　　　　　　　　　　　</p>
<p>あの　　　　　　　　　　　　　テレビ　　　　　　　おねがいします　お願いします　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　</p>
<p>ほん　本　　　　　　　　　　　パソコン　　　　　　　　　　どうぞ　　　　　　　　　　　　　　　　　</p>
<p>でんわ　電話　　　　　　　　　ノート　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　</p>
<p>けいたい携帯　　　　　　　　　とけい　時計　　　　　　　　しゃしん　写真　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　</p>
<p>ライター　　　　　　　　　　　かみ　　紙　　　　　　　　　カメラ</p>
<p>つうやく　通訳　　　　　　　　えいぎょうぶ　営業部　　　　</p>
<p>にっていひょう　日程表　　　　じどうしゃ　自動車　　</p>
<p>人　ひと　　扉　とびら</p>
<p>先生の本は　どれですか</p>
<p>これです。</p>
<p>どの本　　李さんは　どの人ですか　</p>
<p><strong>文型</strong></p>
<p>これは本です</p>
<p>あの人はだれですか</p>
<p>この携帯はわたしのです</p>
<p><strong>本文</strong></p>
<p>これはテレビですか</p>
<p>いいえ　パソコンです</p>
<p>それは　何ですか</p>
<p>（これは）わたしの本です</p>
<p>そのライターは　だれのですか</p>
<p>わたしのです</p>
<p>この携帯はあなたのですか</p>
<p>いいえ　わたしのではありません</p>
<p><strong>文法</strong></p>
<p>１これ、それ、あれ、どれ</p>
<p>これ　指示离说话者近的东西时使用</p>
<p>それ 指示离听话者近的东西时使用</p>
<p>あれ 指示离说话者 听话者都远的东西时候使用</p>
<p>李さんのカメラは　どれですか</p>
<p>これです。</p>
<p>李さんの車はどれですか　　　あれです。</p>
<p>例：これは本です</p>
<p>それは　李さんの携帯ではありません。</p>
<p>これは　日本の新聞ですか。</p>
<p>はい、　それは日本の新聞です。</p>
<p>それは　北京の写真ですか。</p>
<p>先生の本はこれです。</p>
<p>これは　李さんの　パソコンです。</p>
<p>孫さんの携帯は　これです。　</p>
<p>２この　その　あの　　どの</p>
<p>指示<strong>连体词</strong> 远近关系与これ、それ、あれ相同 不同的是不能单独使用 一定后续名词</p>
<p>例：この本　その机　　あの人　　　</p>
<p>この携帯は　孫さんのです</p>
<p>その本は　日本の　小説ではありません</p>
<p>車の雑誌は　あの本ではありません。</p>
<p>このカメラは　日本産ではありません。</p>
<p>どの本　　どの車　　どのパソコン　どの国</p>
<p>どの人</p>
<p>　李さんは　どの人ですか。</p>
<p>　白夜行は　どの本ですか。</p>
<p>　この本は　日本の小説です。</p>
<p>　あの人は　李さんです。</p>
<p>この本はわたしのです</p>
<p>３疑问词的使用</p>
<p>句中有疑问词的句子回答是不用はい　いいえ</p>
<p>例：</p>
<p>　これは　何ですか</p>
<p>　それは　先生の本です。　</p>
<p>　　これは　だれの写真ですか。</p>
<p>　　李さんのです。</p>
<p>　　この方は　どなたですか。　　このかた　　この人はだれですか</p>
<p>これは何ですか</p>
<p>　　先生の本です</p>
<p>　これは　だれのパソコンですか。</p>
<p>　李さんのです。</p>
<p>このノートは　李さんのではありません。</p>
<p>４形式名词の的使用</p>
<p>表示所有的の后续名词省略时如不影响意思的表达时 则多省略</p>
<p>例：</p>
<p>これは　あなたの本ですか</p>
<p>はい　わたしのです。</p>
<p><strong>この本は　私のではありません</strong></p>
<p><strong>何歳　なんさい　　李さんは　何歳ですか　　　２０歳です。</strong></p>
<p><strong>何枚　　何階　　何曜日　　何本　　何時間</strong></p>
<p><strong>練習</strong></p>
<p>1这本书不是我的</p>
<p>2那是什么？ 这是我的电话</p>
<p>3那是谁的伞？是我的</p>
<p>4这是我的相片</p>
<p>1　これは　だれの写真ですか　</p>
<p>2　それは　何ですか　李さんの本です</p>
<p>3　この携帯は　李さんのですか　いいえ　王さんのです。</p>
<p>4　このパソコンは　だれのですか　　　李さんのです。</p>
<p>あたらしい</p>
<p>​      </p>
<p>データ　　コード　バグ　サイズ　コーディング　テスト　コメント　ツール　</p>
<p>ロジック　メール　データベース　テーブル　チェック　テンプレート　　タイトル</p>
<p>リクエスト</p>
<h2 id="第3课"><a href="#第3课" class="headerlink" title="第3课"></a>第3课</h2><p><strong>言葉</strong>　　　　</p>
<p>ここ　　　　　　　　　　　　うけつけ　受付　　　　　　　　にちようび　日曜日　　　　　　　　　　　　　　　　　　　　　　　　　</p>
<p>そこ　　　　　　　　　　　　トイレ　　　　　　　　　　　　げつようび　月曜日　　　　　　　　　　　　　　　</p>
<p>あそこ　　　　　　　　　　　コンビニ　　　　　　　　　　　かようび　　火曜日　　　　　　　　　　　　　</p>
<p>こちら　　　　　　　　　　　ぎんこう　銀行　　　　　　　　すいようび　水曜日　　　　　　　　　　　　　　　　　　　　　　　　　　</p>
<p>そちら　　　　　　　　　　　ゆうびんきょく　郵便局　　　　もくようび　木曜日　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　</p>
<p>あちら　　　　　　　　　　　びょういん　病院　　　　　　　きんようび　金曜日　　　　　　　　　　　　　　　　　　　　　　　　　</p>
<p>じむしょ　事務所　　　　　　スーパー　　　　　　　　　　　どようび　　土曜日　　　　　　　　　　　　　　　　　　　　　　　　　　　　　</p>
<p>しょくどう　食堂　　　　　　デパート　　　　　　　　　　　なんようび　何曜日　　　　　　　　　　　　　　　　　　　　　　　　</p>
<p>くに　国　　　　　　　　　　へや　部屋  の鍵 かぎ　　　　どこ　　　　いくら</p>
<p><strong>食事</strong></p>
<p><strong>文型</strong></p>
<p>ここはコンビニです  </p>
<p>トイレはどこですか</p>
<p>これは二万円ですか　三万円ですか</p>
<p><strong>本文</strong></p>
<p>トイレは　どこですか</p>
<p>あそこです</p>
<p>ここは郵便局ですか　銀行ですか</p>
<p>銀行です</p>
<p>あなたの会社は　どちらですか　　トヨタ自動車です</p>
<p>それはどこの時計ですか</p>
<p>日本の時計です                                                        </p>
<p>この時計はいくらですか                                 </p>
<p>28000円です                                                          </p>
<p><strong>文法</strong></p>
<p>1场所 地点指示代词ここ　そこ　あそこ的使用</p>
<p>与指示事物的これ　それ　あれ的远近关系一样</p>
<p>こちら　そちら　あちら是　ここ　そこ　あそこ的礼貌体</p>
<p>ここの味　どちら</p>
<p>こちらこそ</p>
<p>あそこは　デパートではありません。</p>
<p>コンビニは　ここです。</p>
<p>こちらは　教室です</p>
<p>あちらは　会社の食堂です。</p>
<p>トイレは　そこです。</p>
<p>​                                                                                             </p>
<p>2疑问词   どこ　どちら的使用　どれ</p>
<p>どこですか</p>
<p>例　会社はどこですか是问公司的地址　会社はどちらですか 一般是问公司的名字</p>
<p>食堂は　どこですか。　　教室の隣です。きょうしつ　となり</p>
<p>張さんは　どこですか　　　窓の所（ところ）です</p>
<p>于さんの本は　どこですか　　机の上（うえ）です。</p>
<p>李さんの傘（かさ）は　どこですか　　ここです　</p>
<p>トイレは　どちらですか</p>
<p>君（きみ）の国は　どちらですか。中国です</p>
<p>君の会社は　どちらですか。</p>
<p>3 疑问句的选择表述</p>
<p>ここはスーパーですか　デパートですか　　それとも</p>
<p>この本は　李さんのですか　王さんのですか。　　王さんのです。</p>
<p>この小説は　日本のですか　中国のですか　　日本のです。</p>
<p>このカメラは　いくらですか　　　３万円です。えん　元　げん</p>
<p>答案有多种可能 而询问一种时可以反复使用（～ですか）回答时选择一个就可以了这时不用はい或　いいえ来回答</p>
<p>4 100以上的数字</p>
<p> 100 ひゃく　200　にひゃく　300　<strong>さんびゃく</strong>　400　よんひゃく　500　ごひゃく</p>
<p>600　<strong>ろっぴゃく</strong>　700　ななひゃく　800　<strong>はっぴゃく</strong>　900　きゅうひゃく</p>
<p>1000　せん　2000　にせん　3000　<strong>さんぜん</strong>　4000　よんせん　5000　ごせん</p>
<p>6000　ろくせん　7000　ななせん　8000　<strong>はっせん</strong>　9000　きゅうせん</p>
<p>10000　いちまん　100000　じゅうまん　100000000　いちおく</p>
<p><strong>練習</strong></p>
<p>１小李在哪？在食堂</p>
<p>2这台电视多少钱？</p>
<p>3公司的名字是什么？</p>
<p>4卫生间在哪？ 在那里</p>
<p>5 这里是小李的房间</p>
<h2 id="第4课"><a href="#第4课" class="headerlink" title="第4课"></a>第4课</h2><p><strong>言葉</strong></p>
<p>おきる　　　　起きます　　　　　　あさ　朝　　　　　　　　　しごと　仕事　</p>
<p>ねる　　　　　寝ます　　　　　　　ひる　昼　　　　　　　　　ちこく　遅刻　　　　　　　　　　</p>
<p>はたらく　　　働きます　　　　　　よる　夜 　晩　ばん　　　　しゅっちょう　出張</p>
<p>やすむ　　　　休みます　　　　　　おととい　一昨日　　　　　りょこう　旅行</p>
<p>べんきょうする　勉強します　　　　　きのう　昨日　　　　　　　やすみ　休み　　　　　　　</p>
<p>いま　今　　　　　　　　　　　　　きょう　今日　　　　　　　いつも 副词　　　　　　</p>
<p>～じ　～時　　　　　　　　　　　　あした　明日　　　　　　　～から</p>
<p>～ふん～分　　　　　　　　　　　　あさって　明後日　　　　　～まで</p>
<p>はん　半　　　　　　　　　　　　　けさ　　今朝</p>
<p>なんじ　何時　　　　　　　　　　　こんばん　今晩</p>
<p>なんぷん　何分　　　　　　　　　　まいあさ　　毎朝　　　　　　</p>
<p>ごぜん　午前　　　　　　　　　　　まいばん　　毎晩　</p>
<p>ごご　　午後　　　　　　　　　　　まいにち　　毎日　　一時半</p>
<p>使う　　　　　　使い</p>
<p>明日は　休みです。</p>
<p>いつ　　　　何時</p>
<p>毎朝　いつ　　起きますか</p>
<p>会議は　いつ　始まりますか</p>
<p>いつも　わたしは　　六時に起きます。　　　　　　　　　　　　　　　　　　　　　　　　　</p>
<p><strong>一時半</strong></p>
<p><strong>今　何時ですか</strong></p>
<p><strong>いつもの所</strong></p>
<p><strong>文型</strong></p>
<p>今　一時十分です</p>
<p>わたしは　朝　六時に起きます</p>
<p>毎日　九時から　六時まで　働きます</p>
<p>わたしは　きのう　勉強しました</p>
<p><strong>本文</strong></p>
<p>今　何時ですか</p>
<p>４時五分です</p>
<p>朝　６時に起きます</p>
<p>毎日　九時から　六時まで　働きます</p>
<p>仕事は　何時からですか</p>
<p>八時半からです</p>
<p>あした　働きますか</p>
<p>はい　働きます</p>
<p>いいえ　働きません</p>
<p>昨日　勉強しましたか</p>
<p>はい　勉強しました</p>
<p>いいえ　勉強しませんでした</p>
<p><strong>文法</strong></p>
<p>１陈述句 动词做谓语</p>
<p><strong>动词的分类</strong></p>
<p><strong>以变化规律分4类</strong></p>
<p><strong>五段动词</strong> 　<strong>以<strong><strong>う、く、ぐ、す、つ、ぬ、ぶ、む、る</strong></strong>结尾</strong> <strong>词尾都在<strong><strong>う</strong></strong>段上</strong> <strong>以<strong><strong>る</strong></strong>结尾时</strong> <strong>る<strong><strong>前假名不能在</strong></strong>い<strong><strong>段或</strong></strong>え****段</strong>　　<strong>行く</strong></p>
<p><strong>一段动词</strong> 　<strong>以<strong><strong>る</strong></strong>结尾</strong> <strong>る<strong><strong>前假名在</strong></strong>い<strong><strong>段或</strong></strong>え****段</strong>　<strong>みる　見る　かける掛ける　　　食べる</strong></p>
<p><strong>サ变动词</strong> 　<strong>词尾是****する</strong> <strong>词干是具有动作倾向的名词</strong> <strong>する<strong><strong>是最简单的</strong></strong>サ****变动词</strong>  <strong>散歩する　　散歩</strong> 　　　<strong>魚釣する</strong></p>
<p><strong>カ变动词</strong> 　<strong>只有一个</strong>　<strong>くる（来る）</strong></p>
<p><strong>いく　行く　かう　買う　かす　貸す　読む　よむ　遊ぶ　あそぶ　泳ぐ</strong></p>
<p><strong>およぐ　まつ　待つ　しぬ　死ぬ　聞く　きく　はなす　話す</strong></p>
<p><strong>切る　きる　　着る</strong></p>
<p><strong>かかる　　始める　つくる　　くる　　勉強する　　　つける　はじまる　おわる　いれる　あげる　離れる　起きる　働く</strong>　</p>
<p><strong>帰る　かえる　へる　減る　はいる　入る　きる　切る　はしる　走る　　滑る　すべる　しる　知る　にぎる　握る　限る　かぎる　しげる　茂る</strong></p>
<p><strong>おおきい</strong></p>
<p><strong>コピー　する　　　キャンセルする</strong></p>
<p><strong>よむ　かう　かす　いそぐ　たつ</strong>　</p>
<p><strong>つくる　作る　　修理する　　起きる　あげる　始まる　倒れる　さぼる</strong></p>
<p><strong>へる　減る　きる　切る　帰る　かえる　はいる　入る　はしる　走る　しる　知る　すべる　滑る　要る　いる　にぎる　握る</strong></p>
<p><strong>書く　かく　いそぐ　急ぐ　いう　言う　かす　貸す　たつ立つ</strong>　</p>
<p><strong>はじまる　　始まる　かける　掛ける　かかる　掛かる　ゆずる</strong></p>
<p><strong>譲る　くる　来る　食べる　たべる　つくる　作る　しめる　　閉める　起きる　おきる　いく　行く　しかる　叱る　つもる　積もる　しげる　茂る</strong></p>
<p><strong>連用形１　　ます</strong></p>
<p><strong>くる　　きます</strong></p>
<p><strong>する　　します　　　勉強する　　勉強します</strong></p>
<p><strong>みる　　みます　　つける　つけます</strong></p>
<p><strong>あいうえお</strong></p>
<p><strong>かきくけこ</strong></p>
<p><strong>さしすせそ</strong></p>
<p><strong>買う　　買います　行く　行きます　いきます　　いきる　生きる　泳ぐ　泳ぎます　貸す　　貸します　　まつ　待ちます　　死ぬ　死にます　遊ぶ　遊びます　　飲む　飲みます　つくる　　作ります</strong> <strong>作る　つくります</strong></p>
<p><strong>すわる　座る　　はしる　走ります　はなす　話す</strong></p>
<p><strong>行く　　行きます</strong></p>
<p><strong>はなす　話す　　こわれる　壊れる　わかる　分かる　運動する</strong></p>
<p><strong>くる　　立つ　たつ　たちます　　はしる　走る</strong></p>
<p><strong>よむ　　かえす　　きく　さんかする　くる　たべる　はこぶ　かつ</strong></p>
<p><strong>勝つ　かつ　　よむ　読む　　書く　かく　　いそぐ　急ぐ</strong>　</p>
<p><strong>貸す　　かす　　買う　かう　　はこぶ　運ぶ　　見学する</strong>　</p>
<p><strong>のむ　すわる　座る　　たおす　　倒す</strong></p>
<p><strong>行く　　行きます　　いきます</strong></p>
<p>2 助词 <strong>に</strong>的用法 提示时间点 放到具有数字性的时间点</p>
<p>　　いつも　わたしは　今日　六時に　起きます。</p>
<p>　　　　　　　　　　　　　　　　　起きません</p>
<p>昨日　わたしは　　六時に　起きました</p>
<p>　　　　　　　　　　　起きませんでした</p>
<p>例 朝　６時に　起きます</p>
<p>李さんは　五月五日に結婚しました</p>
<p>李さんは　いつも　１０時に　寝ます。</p>
<p>　</p>
<p>3　助詞　<strong>から　まで</strong>的用法</p>
<p>から表示时间 地点的起点</p>
<p>まで表示时间 地点的终点</p>
<p>相当于汉语的“从～”“到～”  </p>
<p>例　わたしは　九時から　五時まで　勉強します。</p>
<p>これは　母さんからの手紙です。</p>
<p>　　</p>
<p>わたしは　九時から　勉強します</p>
<p>わたしは　五時まで　勉強しました　　勉強します</p>
<p>わたしの仕事は　九時から　五時までです　　　</p>
<p>わたしは　九時から　五時まで　働きます。</p>
<p>仕事は　五時までです　　仕事は　5時に　終わります。</p>
<p>ます的变化</p>
<p>4　日语的动词有时态上的变化</p>
<table>
<thead>
<tr>
<th></th>
<th>非过去</th>
<th>过去</th>
</tr>
</thead>
<tbody><tr>
<td>肯定</td>
<td>起きます</td>
<td>起きました</td>
</tr>
<tr>
<td>否定</td>
<td>起きません</td>
<td>起きませんでした</td>
</tr>
</tbody></table>
<p>例　毎朝　六時に　起きます</p>
<p>　　昨日　六時に　起きました</p>
<p>5 时间的表述</p>
<table>
<thead>
<tr>
<th>一時　　いちじ</th>
<th>四時　　<strong>よじ</strong></th>
<th>七時　　<strong>しちじ</strong></th>
<th>十時　　じゅうじ</th>
</tr>
</thead>
<tbody><tr>
<td>二時　　にじ</td>
<td>五時　　ごじ</td>
<td>八時　　はちじ</td>
<td>十一時じゅういちじ</td>
</tr>
<tr>
<td>三時　　さんじ</td>
<td>六時　　ろくじ</td>
<td>九時　　<strong>くじ</strong></td>
<td>十二時　じゅうにじ</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>一分　いっぷん</th>
<th>四分　よんふん</th>
<th>七分　ななふん</th>
<th>十分　じゅっぷん</th>
</tr>
</thead>
<tbody><tr>
<td>二分　にふん</td>
<td>五分　ごふん</td>
<td>八分　はっぷん</td>
<td>十一分じゅういっぷん</td>
</tr>
<tr>
<td>三分　さんぶん</td>
<td>六分　ろっぷん</td>
<td>九分　きゅうふん</td>
<td>二十五分にじゅうごふん</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td>三十分　さんじゅっぷん</td>
</tr>
</tbody></table>
<p>点</p>
<p>練習</p>
<p>１每天的工作是从9点到6点</p>
<p>2 每天早晨5点半起床</p>
<p>3 昨天干活到了8点</p>
<p>よむ　読む　はなせる　話せる　　換える　かえる　　</p>
<p>日本語の勉強は　いつも　１０時からです。</p>
<p>わたしは　昨日　１０時まで　残業しました。ざんぎょう</p>
<p>わたしは　毎日　９時から　働きます。</p>
<p>わたしは　今日から　働きます。</p>
<h2 id="第5课"><a href="#第5课" class="headerlink" title="第5课"></a>第5课</h2><p><strong>言葉</strong></p>
<p>いく　行きます　　　　　　　　　ひと　人　　　　　　　　　　らいげつ　来月　　　　　　　　　　　　　　　　　　　</p>
<p>くる　きます　　　　　　　　　　ともだち　友達　　　　　　　きょねん　去年　　　　　　　　　　　　　　　　　</p>
<p>かえる　帰ります　　　　　　　　こいびと　恋人　　　　　　　ことし　　今年　　　　　　　　　　　　　　　　　</p>
<p>こうじょう　工場　　　　　　　～ばんせん　～番線　　　　　　らいねん　来年　　　　　　　　　　　　　　　　　　　　</p>
<p>えき　駅　　　　　　　　　　　　たんじょうび　誕生日　　　　　　　　　　　　　　　　　　　　　　</p>
<p>ひこうき　飛行機　　　　　　　　うち　家　　　　　　　　　　～がつ　～月　　　　　　　　　　　　　　　　　　　　　　　　</p>
<p>ふね　船　　　　　　　　　　　　いえ　家　　　　　　　　　　～にち　～日　　　　　　　　　</p>
<p>でんしゃ　電車　　　　　　　　　せんしゅう　先週　　　　　　なんがつ　何月　　　　　　　　　　　　　　　　　</p>
<p>バス　　　　　　　　　　　　　　こんしゅう　今週　　　　　　なんにち　何日　　　　　　　　　</p>
<p>タクシー　　　　　　　　　　　　らいしゅう　来週　　　　いつ　だれ　どこ　なに　　　　　　　　　　　　　　　　　　　　　　　　　</p>
<p>ちかてつ　地下鉄　　　　　　　　せんげつ　　先月　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　</p>
<p>しんかんせん　新幹線　　　　　　こんげつ　　今月</p>
<p>いつも　　何時におきますか</p>
<p><strong>空港　くうこう</strong></p>
<p><strong>くるま　しゃ　車</strong></p>
<p><strong>君の誕生日は　いつ　ですか　　わたしの家　　家の車</strong></p>
<p><strong>文型</strong>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　</p>
<p>わたしは　スーパーへ　行きます</p>
<p>わたしは　地下鉄で　家へ　帰ります</p>
<p>わたしは　友達と　日本へ　来ました</p>
<p><strong>本文</strong></p>
<p>あした　どこへ　行きますか</p>
<p>東京へ　行きます</p>
<p>きのう　どこへ　行きましたか</p>
<p>どこ「へ」も　行きませんでした</p>
<p>毎日　バスで　会社へ　行きます</p>
<p>日曜日　友達と　デパートへ　行きました</p>
<p>いつ　日本へ　来ましたか</p>
<p>九月に　来ました</p>
<p><strong>文法</strong></p>
<p>１助词 へ　え的用法 放在表示地点的名词后表示方向 助词 へ后是表示移动的动词　　行く　来る　帰る</p>
<p>例　わたしは　家へ帰ります これは　母さんへの手紙です</p>
<p>李さんは　先月　大連へ　来ました。</p>
<p>李さんは　今日　会社へ　行きませんでした。</p>
<p>日曜日　どこへ　行きましたか。</p>
<p>火曜日　大連へ帰りますか</p>
<p>先週　飛行機で　大連へ来ました。</p>
<p>明日　映画館へ　行きませんか　　明日　映画館へ　行きますか。</p>
<p>はい　行きません</p>
<p>いいえ　いきます　　いいえ　行きません</p>
<p><strong>２助词で</strong> 的用法 表示使用的方法手段 放在交通工具的名词后 表示利用这个交通工具</p>
<p>例　飛行機で　日本へ行きます</p>
<p>昨日　タクシーで　会社へ行きました。</p>
<p>日曜日　バスで　大連へ帰りました。</p>
<p>5月５日に　船で　大阪へ来ました。</p>
<p>毎日　何で　学校へ　行きますか。</p>
<p>３<strong>助词も</strong> 的用法 放到疑问词后 后续否定 表示完全的否定</p>
<p>例　日曜日　どこ「へ」も行きませんでした。</p>
<p>　　日曜日　どこへ行きましたか。</p>
<p>　　図書館へ行きました。　　</p>
<p>　　　何も　食べませんでした。</p>
<p>４<strong>助词</strong> <strong>と</strong>的用法 表示人的名词后接 表示和（谁）一起做  </p>
<p>林檎りんごとバナナ　　　机といす　　</p>
<p>例　わたしは　李さんと　飛行機で　東京へ行きます</p>
<p>わたしは　王さんと　毎日　地下鉄で　会社へ行きます。</p>
<p>　　　と　　　　は　　　　　</p>
<p>いつも　王さんと　いっしょに　家へ帰ります</p>
<p><strong>から</strong>　　</p>
<p><strong>まで</strong></p>
<p>日曜日　日本から　中国まで　船で　行きます。</p>
<p>李さんは　五月５日に　中国から　来ました。</p>
<p>日本まで　何で　来ましたか</p>
<p><strong>ごろ</strong></p>
<p>わたしは　六時ごろ（に）　起きます。</p>
<p>今　5時ごろです。頃</p>
<p>５日语的日期</p>
<p>月份：</p>
<p>いちがつ 一月　　にがつ　二月　さんがつ　三月　しがつ　四月　</p>
<p>ごがつ　 五月  ろくがつ　六月　しちがつ　七月　はちがつ　八月　</p>
<p>くがつ　九月　 じゅうがつ　十月　じゅういちがつ　十一月　</p>
<p>じゅうにがつ　十二月</p>
<p>日期：</p>
<p>ついたち 一日　ふつか 二日　みっか　三日　よっか　四日　いつか　五日　むいか  六日　なのか　七日　ようか　八日　ここのか九日　とおか　十日 じゅういちにち　十一日　じゅうににち十二日　じゅうさんにち　十三日 じゅうよっか　  十四日　じゅうごにち　十五日　じゅうろくにち　十六日 じゅうしちにち　十七日　じゅうはちにち　十八日　じゅうくにち　十九日    はつか 二十日　 にじゅういちにち　二十一日　 にじゅうににち　二十二日</p>
<p>にじゅうさんにち  二十三日　   にじゅうよっか 二十四日</p>
<p>にじゅうごにち　二十五日   にじゅうろくにち　二十六日　</p>
<p>にじゅうしちにち　二十七日　  にじゅうはちにち　二十八日</p>
<p>にじゅうくにち　二十九日　    さんじゅうにち  三十日　</p>
<p>さんじゅういちにち　三十一日</p>
<p>６动词ます型　辞書型的活用　    </p>
<table>
<thead>
<tr>
<th>类别</th>
<th>辞書型</th>
<th></th>
<th>ます型</th>
</tr>
</thead>
<tbody><tr>
<td>一类动词  （五段动词）</td>
<td>かく  およぐ  だす  まつ  しぬ　  あそぶ  のむ  うる  かう</td>
<td>書く  泳ぐ  出す  待つ  死ぬ        遊ぶ  飲む  売る  買う</td>
<td>かきます  およぎます  だします  まちます  しにます  あそびます  のみます  うります  かいます</td>
</tr>
<tr>
<td>二类动词  （一段动词）</td>
<td>おきる  たべる</td>
<td>起きる  食べる</td>
<td>おきます  たべます</td>
</tr>
<tr>
<td>三类动词  (サ变动词)  (カ变动词)</td>
<td>する  べんきょうする  くる</td>
<td>勉強する  来る</td>
<td>します  べんきょうします  きます</td>
</tr>
</tbody></table>
<p><strong>阅读</strong></p>
<p> わたしは　中国の李です。先月15日に　日本へ　来ました。　専門は　コンピューターです。　きのう　わたしは　林さんと　東京へ行きました。　</p>
<p>東京まで　バスで　行きました。6時に　タクシーで　帰りました。</p>
<p><strong>練習</strong></p>
<p>１和恋人坐飞机去北京</p>
<p>２小李上个月从上海来的</p>
<p>３星期天 哪儿也不去</p>
<h2 id="第6课"><a href="#第6课" class="headerlink" title="第6课"></a>第6课</h2><p><strong>言葉</strong></p>
<p>たべる　食べます　　　　ごはん　ご飯　　　ジュース</p>
<p>のむ　　飲みます　　　　パン　　　　　　　ビール</p>
<p>すう　　吸います　　　　たまご　玉子　　　さけ　「お」酒</p>
<p>かく　　書きます　　　　にく　　肉　　　　みず　　水</p>
<p>よむ　　読みます　　　　さかな　魚　　　　くつ　　靴</p>
<p>きく　　聞きます　　　　やさい　野菜　　　えいが　映画</p>
<p>みる　　見ます　　　　　ミルク　　　　　　いっしょに</p>
<p>かう　　買います　　　　おちゃ　お茶　　　なに　　何　</p>
<p>する　　します　　　　　コーヒー 　　　　　それから　 </p>
<p>散歩する</p>
<p>玉子</p>
<p>今朝は　お粥を食べました</p>
<p><strong>文型</strong></p>
<p>わたしは　コーヒーを　飲みます。</p>
<p>わたしは　デパートで　靴を買いました</p>
<p>ここで　休みましょう　　　いいですよ　行きましょう。</p>
<p>よ　ね</p>
<p><strong>本文</strong></p>
<p>あなたは　たばこを吸いますか</p>
<p>いいえ　吸いません</p>
<p>毎朝　何を食べますか</p>
<p>パンと卵を食べます</p>
<p>昨日　日本語を勉強しました。それから　映画を見ました。</p>
<p>日曜日　大阪で　ご飯を食べました。</p>
<p><strong>文法</strong></p>
<p>1助词 <strong>を</strong>的用法　他动词 自动词</p>
<p>開ける　開く ドアを　開けます　　わるい</p>
<p>表示提示宾语 和动词一起组成动宾关系</p>
<p>例　ご飯を食べる　　ジュースを飲む　　テレビを見る</p>
<p>明日　李さんと　日本料理を食べます。</p>
<p>昨日　　日本語の小説を読みました。</p>
<p>日曜日　何をしましたか します</p>
<p>2助词<strong>で</strong>的用法</p>
<p>表示动作进行的场所 相当于汉语在哪里做什么</p>
<p>デパートで　靴を買いました</p>
<p>わたしは　いつも　会社の隣の店で　昼ご飯を食べます。ランチ</p>
<p>李さんは　毎朝　家で　新聞を　読みます。</p>
<p>李さんは　毎晩　７時から　テレビを見ます。</p>
<p>日曜日　家で　ご飯を食べませんでした。</p>
<p>土曜日　李さんと　公園で　写真を撮りました。</p>
<p>日曜日　何をしましたか。　　スーパーで　肉を買いました。</p>
<p>今朝　何を　食べましたか。　　何も　食べませんでした。</p>
<p>３　なん和なに的区别</p>
<p>何　　何</p>
<p>两者意思一样都是 什么的意思</p>
<p>（１）后续で　の　と时读なん　</p>
<p>（２）后续量词（事物的单位）时读なん</p>
<p>以上两种情况以外都读なに</p>
<p>何時　何歳　何曜日　何日　何回　何杯　何枚</p>
<p><strong>阅读</strong></p>
<p>わたしは　毎日　教室で日本語を勉強します　日本語の勉強は午後の2時から3時までです。　きのう　わたしは　友達と大連で映画を見ました。映画の名前は「～～」です。映画は6時までです。　それから　いっしょに　晩ご飯を食べました。</p>
<p><strong>練習</strong></p>
<p>1 我星期日吃了鱼</p>
<p>2 在哪里买的这双鞋？</p>
<p>3 我昨天看了日本电影</p>
<p>4小李不喝啤酒</p>
<h2 id="第7课"><a href="#第7课" class="headerlink" title="第7课"></a>第7课</h2><p><strong>言葉</strong> <strong>ことば</strong></p>
<p>きる　切ります　　　　　　　　　　　　おはし　お箸　　　　　　　　　　もう　　　　　　　　　　　　　　</p>
<p>しゅうりする　修理します　　　　　　　はな　花　　　　　　　　　　　　まだ　</p>
<p>かける　電話をかけます掛ける　　　　　おかね　お金</p>
<p>あげる　あげます　　　　　　　　　　　レポート</p>
<p>もらう　もらいます　　　　　　　　　　チケット　　きっぷ　切符</p>
<p>おしえる　教えます　　　　　　　　　　スケジュールひょう　スケジュール表</p>
<p>ならう　　習います　　　　　　　　　　ファックス</p>
<p>かす　　貸します　　　　　　　　　　　メール　</p>
<p>かりる　借ります　　　　　　　　　　　プレゼント</p>
<p>おくる　送ります　　　　　　　　　　　</p>
<p>手紙てがみを送ります　　にもつを送ります　荷物</p>
<p><strong>文型</strong></p>
<p>わたしは李さんに時計を　あげます</p>
<p>わたしは　林さんに　お金を　もらいました</p>
<p><strong>本文</strong></p>
<p>わたしは箸で　ご飯を食べます</p>
<p>李さんに電話をかけます</p>
<p>誕生日に　父から　プレゼントをもらいました</p>
<p>わたしは　母に　時計をあげます</p>
<p><strong>文法</strong></p>
<p>１助词で的用法</p>
<p>表示使用的方法手段 相当汉语的【使用~】</p>
<p>包丁（ほうちょう）で　肉を切ります。 鋏（はさみ）で　紙を切ります。</p>
<p>箸で　ご飯を食べる　　　パソコンで　レポートを書く</p>
<p>日本語で　手紙を書きます</p>
<p>アメリカ人は　ナイフと　フォークで　ご飯を食べます。</p>
<p>携帯で　写真を撮る　食堂で　ご飯を食べる</p>
<p>２助词に在<strong>授受关系</strong>的句子中使用</p>
<p>①  表示事物给予的对象</p>
<p>　　わたしは　　父さんに　ご飯を作ります</p>
<p>例　李さんは　王さんに　電話をかけました</p>
<p>　母さんは　父さんに　ご飯を作りました。</p>
<p>　わたしは　部屋で　李さんに　携帯で　写真を送ります、</p>
<p>　わたしは　公園で　李さんに　写真を撮ります。</p>
<p><strong>あげる</strong></p>
<p>王さんは　李さんに　誕生日に　プレゼントをあげました。</p>
<p>　　わたしは　父に　お金を　あげます</p>
<p>　　わたしは　母さんに　兄さんの写真をあげました。</p>
<p><strong>くれる</strong></p>
<p>　　<strong>日本は　我が国に　先進の技術をくれました。</strong></p>
<p>　　<strong>王さんは　わたしに　　自転車をくれました。じてんしゃ</strong></p>
<p>　　<strong>劉さんは　誕生日のプレゼントをくれませんでした。</strong></p>
<p><strong>ください　くださる　くださいます</strong></p>
<p><strong>これをください</strong></p>
<p><strong>すみません　最新の資料をくださいませんか</strong></p>
<p>教える</p>
<p>　　わたしは　于さんに　日本語を教えます</p>
<p>　　わたしは　李さんの住所を　張さんに　教えました。</p>
<p>貸す</p>
<p>　　自転車を　だれに　貸しましたか。</p>
<p>　　　わたしは　お金を　王さんに　貸しました。</p>
<p>②    表示事物的出处方</p>
<p><strong>もらう</strong></p>
<p>　わたしは　于さんから　李さんの写真を　もらいました。</p>
<p>　李さんは　張さんに　お金を　もらいました。</p>
<p>わたしは　李さんに　映画のチケットをもらいました。</p>
<p><strong>習う</strong> ならう</p>
<p>　わたしは　李先生に　日本語を習います</p>
<p>崔先生に日本語を習います。</p>
<p><strong>借りる</strong></p>
<p>　わたしは　李さんに　（じてんしゃ）自転車を借りました。</p>
<p>　李さんは　わたしに　自転車を　貸しました。</p>
<p>　　会社から　ボーナスをもらいました。</p>
<p>  于さんは　侯さんからお金を借りました。</p>
<p>　李さんは　王さんに　自転車を貸しました。</p>
<p>　</p>
<p>副詞もう相当汉语的【已经】　まだ相当汉语的【还没】</p>
<p>例　もう　昼ご飯を　食べましたか</p>
<p>　　はい　もう　食べました。</p>
<p>　　いいえ　まだ 食べません</p>
<p>　この小説を　もう　読みましたか。</p>
<p>　いいえ　まだです。</p>
<p><strong>阅读</strong></p>
<p>明日は　李さんの誕生日です。　昨日　わたしは　デパートで時計を　買いました。明日　李さんにあげます。</p>
<p>今日は　わたしの誕生日です。　わたしは　崔先生に　時計をもらいました。</p>
<p><strong>練習</strong></p>
<p>1我用日语写报告</p>
<p>2 我给公司发邮件（短信）。</p>
<p>3 我从公司接到传真了</p>
<p>4 小李已经回家了</p>
<p>5 美国人用刀叉吃饭</p>
<p>6 用传真发日程表给田中科长</p>
<p>7 给小李用日语发邮件</p>
<p>8从小李那得到了北京地图</p>
<p>9 向小李借了小张的字典</p>
<p>10把电影票给谁了？</p>
<p>11 要向谁借自行车</p>
<p>12 和小李学日语</p>
<h2 id="第8课"><a href="#第8课" class="headerlink" title="第8课"></a>第8课</h2><p><strong>言葉</strong></p>
<p>おおきい　　大きい　　　　たかい　　　高い　　　　　　はる　　春</p>
<p>ちいさい　　小さい　　　　ひくい　　　低い　　　　　　なつ　　夏　　</p>
<p>あたらしい　新しい　　　　やすい　　　安い　　　　　　あき　　秋</p>
<p>ふるい　　　古い　　　　　おいしい　　美味しい　　　　ふゆ　　冬　</p>
<p>いい（よい）　　　　　　　まずい　　　　　　　　　　　まち　　町</p>
<p>わるい　　　悪い　　　　　しろい　　　白い　　　　　　やま　　山</p>
<p>あつい　　　暑い　熱い　　くろい　　　黒い　　　　　　たべもの 食べ物</p>
<p>さむい　　　寒い　つめたい　あかい　　　赤い　　　　　　どう</p>
<p>むずかしい　難しい　　　　あおい　　　青い　　　　　　どんな</p>
<p>やさしい　　易しい　　　　おもしろい　面白い　　　　　そして</p>
<p>　　　　　　優しい</p>
<p><strong>文型</strong></p>
<p>大阪の夏は　暑いです</p>
<p>大連の冬は　寒くないです</p>
<p>中国は　大きい国です。</p>
<p><strong>本文</strong></p>
<p>天気は　よかったですか</p>
<p>いいえ　よくなっかたです。</p>
<p>大連は　どんな町ですか</p>
<p>大きい町です</p>
<p>日本の食べ物はどうですか</p>
<p>美味しいですが　高いです</p>
<p>美味しくないです　そして　高いです。</p>
<p><strong>文法</strong></p>
<p>１形容词修饰名词</p>
<p>わたしの本　　　　　あの　面白い本  あの悪い人</p>
<p>例　大連は　大きい町です</p>
<p>大きい町　　寒くない冬　　高い山　大きい海　　甘いみかん</p>
<p>甘くないりんご</p>
<p>今日は寒いです。　　今日は寒くないです。</p>
<p>昨日は寒かったです。　昨日は　寒くなかったです。</p>
<p>この　店の料理は　美味しいです。</p>
<p>日本の車は　安いです。</p>
<p>この梨は　甘くないです。</p>
<p>昨日のテストは　難しくなかったです。</p>
<p>2形容词的时态</p>
<table>
<thead>
<tr>
<th></th>
<th>一般</th>
<th>过去</th>
</tr>
</thead>
<tbody><tr>
<td>肯定</td>
<td>寒いです  いいです　よい</td>
<td>寒かったです　　　  よかったです</td>
</tr>
<tr>
<td>否定</td>
<td>寒くないです　　　  よくないです</td>
<td>寒くなかったです　  よくなかったです</td>
</tr>
</tbody></table>
<p>3 接续助词<strong>が</strong>　发在句尾 表示转折相当于汉语的【可是】</p>
<p>例　日本語の勉強は　難しいですが、　面白いです</p>
<p>　　日本の食べ物は　美味しいですが　高いです。</p>
<p>　　四川料理は　辛いですが　美味しいです。</p>
<p>　　李さんの部屋は　狭いですが　明るいです。 せまい　　あかるい</p>
<p>　　今回の旅行は　疲れましたが　楽しかったです</p>
<p>　　李さんは　中国人ですが　餃子ができません。</p>
<p>　　</p>
<p>4接续副词 <strong>そして</strong>放在两句之间 表示递进相当于汉语的【并且】</p>
<p>日本の食べ物は安いです。　そして　美味しいです。</p>
<p>中国製の商品は　安いです。　そして　デザインが　いいです。</p>
<p>侯さんは　優しいです。　そして　金持ちです。</p>
<p>李さんは　背が　高いです。　</p>
<p>中国は歴史が長いです。</p>
<p>中国の歴史は長いです。</p>
<p>中国の歴史が長いです。</p>
<p>中国も　日本も　歴史が長いです</p>
<p>5疑问词どう　どんな的用法　</p>
<p>どう相当汉语【怎么样】　　だれ　いつ　何　どこ　いくら</p>
<p>どうですか　　いかがですか</p>
<p>この　果物の味は　どうですか　　とても　甘いです。</p>
<p>この果物は　どう　食べますか。</p>
<p>例　日本の食べ物はどうですか　　高いですが　美味しいです。</p>
<p>　大連の天気はどうですか。　 冬は　寒いですが　夏は　暑くないです。</p>
<p>　コーヒーはどうですか。　ありがとう</p>
<p>　大連はどうですか</p>
<p>昨日のテストは　どうでしたか。　　難しかったです</p>
<p>今日は　日曜日です。　　今日は　日曜日ではありません。</p>
<p>昨日は　土曜日でした。　昨日は　土曜日ではありませんでした。</p>
<p>昨日　雨でした。</p>
<p>​                                                                           </p>
<p>どんな相当汉语【什么样的~】　どの　この　その　あの</p>
<p>李さんは　どんな人ですか　　</p>
<p>大連は　どんな町ですか</p>
<p>四川料理は　どんな料理ですか。</p>
<p>この本は　どんな本ですか</p>
<p><strong>阅读</strong></p>
<p>日曜日　わたしは　友達と大連へ　行きました。　大連は　大きい町です。デパートで黒い靴を買いました。それから　面白い映画を見ました。５時に　いっしょに　しせんりょうり（四川料理）を食べました。四川料理は美味しいですが　高いです。</p>
<p><strong>練習</strong></p>
<p>１这本书旧但是有趣</p>
<p>2 日本的汽车不贵</p>
<p>3 四川料理好吃 并且便宜</p>
<h2 id="第9课"><a href="#第9课" class="headerlink" title="第9课"></a>第9课</h2><p>言葉</p>
<p>きれい「な」　綺麗　　　　　　しけん　試験　　　　　おねえさん　お姉さん</p>
<p>ハンサム「な」　　　　　　　　さくら　桜　　　　　　ちち　父</p>
<p>しんせつ「な」　親切　　　　　ところ　所　　　　　　はは　母</p>
<p>ゆうめい「な」　有名　　　　　おかし　お菓子　　　　あに　兄　</p>
<p>げんき「な」　　元気　　　　　ネクタイ　　　　　　　あね　姉　</p>
<p>しずか「な」　　静か　　　　　シャツ　　　　　　　　おとうと　弟     </p>
<p>にぎやか「な」　賑やか　　　　かぞく　 ご家族　　　　いもうと　妹                 </p>
<p>べんり「な」　　便利　　　　　おとうさん　お父さん　とても　たいへん</p>
<p>ふべん「な」　　不便　　　　　おかあさん　お母さん　あまり</p>
<p>かんたん「な」　簡単　　　　　おにいさん　お兄さん　</p>
<p>窓の所</p>
<p>文型</p>
<p>桜は　有名な花です</p>
<p>李さんは　親切な人です</p>
<p>この食堂は静かではありません。</p>
<p>本文    </p>
<p>お父さんは　元気ですか</p>
<p>おかげさまで　元気です</p>
<p>大連は静かですか</p>
<p>いいえ　静かではありません　とても　にぎやかです　賑やか</p>
<p>今日の試験は　難しかったですか</p>
<p>いいえ　あまり　難しくなかったです。　ぜんぜん</p>
<p>文法</p>
<p>1形容动词修饰名词 后续假名「な」</p>
<p>例 静かな所　有名な映画　元気な人</p>
<p>李さんは　元気な人です</p>
<p>張さんはハンサムな人です。</p>
<p>昨日　彼女と　人気な映画を見ました。　かのじょ にんき</p>
<p>この小説は　有名です。　　この小説は　有名ではありません。</p>
<p>この小説は　有名でした。この小説は　有名ではありませんでした</p>
<p>今日は　水曜日です。　　　今日は　水曜日ではありません。</p>
<p>昨日は　火曜日でした。　　昨日は　水曜日ではありませんでした。</p>
<p>北京は　にぎやかではありません。</p>
<p>李さんの部屋は　大きいですが　静かではありません。</p>
<p>李さんの家は　綺麗ですが　　交通が　不便です。</p>
<p>わたしが　中国人です。</p>
<p>中国は　歴史が　長いです。</p>
<p>2形容动词的时态变化</p>
<table>
<thead>
<tr>
<th></th>
<th>一般</th>
<th>过去</th>
</tr>
</thead>
<tbody><tr>
<td>肯定</td>
<td>静かです</td>
<td>静かでした</td>
</tr>
<tr>
<td>否定</td>
<td>静かではありません</td>
<td>静かではありませんでした</td>
</tr>
</tbody></table>
<p>とても・たいへん＞すこし少し・ちょっと＞あまり＋否定＞ぜんぜん全然＋否定</p>
<p>この公園は　ぜんぜん　静かでは　ありません。　　大変な仕事</p>
<p>今日は　あまり　暑くないです。</p>
<p>3　副詞　とても　たいへん 表示程度高</p>
<p>相当汉语的【很】　</p>
<p>例今日は　ちょっと　暑いです　今日は　あまり　暑くないです</p>
<p>　今日は　全然　暑くないです。</p>
<p>　　この店の四川料理は　全然　辛くないです</p>
<p>　</p>
<p>4　副詞　あまり 表示程度低 后续否定</p>
<p>相当汉语的【不太】</p>
<p>例　今日は　あまり　寒くないです</p>
<p>阅读</p>
<p>大連はとても有名な町です。　大きいです。　そして　たいへん　にぎやかです。日曜日　わたしは　大連の有名な星海公園（せいかいこうえん）へ行きました。この公園はきれいですが　あまり　静かではありません。</p>
<p>練習</p>
<p>1 小李热心并且长得还帅</p>
<p>2 教室很干静但不太安静</p>
<p>3 这部电影很有名</p>
<h2 id="第10课"><a href="#第10课" class="headerlink" title="第10课"></a>第10课</h2><p>言葉</p>
<p>わかる　分かります　　　 スポーツ　　　　　　　　　ぶどう</p>
<p>ある　　あります　　　　 くだもの　　果物　　　　　りんご　</p>
<p>すき「な」　　好き　　　　やさい　　　野菜　　　　　なし　　　梨</p>
<p>きらい「な」　嫌い　　　　おんがく　　音楽　　　　　たくさん　</p>
<p>じょうず「な」上手　　　　サッカー　　　　　　　　　</p>
<p>へた「な」　　下手　　　　じかん　　　時間　　　　</p>
<p>りょうり　　料理　　　　　バナナ　　　　　　　　　　どうして</p>
<p>うた　　歌　　　　　　　　みかん　　　　　　　　　　～から</p>
<p>にく　　肉　　　　　　　　すいか</p>
<p>大きい国　甘いスイカ　　有名な小説　　静かな教室</p>
<p>嫌いな　食べ物は　何ですか　</p>
<p>大好き　　大嫌い</p>
<p>上手ではありません　下手です</p>
<p>とくい　得意　　にがて　苦手</p>
<p>今日は　寒いです　　今日は　寒くないです。　寒かったです。　寒くなかったです。</p>
<p>この小説は　有名です　　有名ではありません。有名でした　有名ではありませんでした</p>
<p>今日は　日曜日です　ではありません　でした　ではありませんでした。</p>
<p>文型</p>
<p>わたしは　日本語がわかります。</p>
<p>わたしは　りんごが好きです。</p>
<p>あなたは　歌が上手ですか。</p>
<p>日曜日　時間があります。</p>
<p>本文　</p>
<p>あなたは　英語が分かりますか。</p>
<p>いいえ　ぜんぜん　分かりません。</p>
<p>お金がありますか</p>
<p>はい　少し　あります。</p>
<p>李さんは　歌が　たいへん　上手です。</p>
<p>わたしは　肉が　好きです。</p>
<p>文法</p>
<p>助词<strong>が</strong>的用法</p>
<p>1表示提示个人的情感 喜好 欲望的对象</p>
<p>怖い こわい</p>
<p>わたしは　犬（いぬ）が怖いです。</p>
<p>わたしは　犬が怖くないです。</p>
<p>欲しい　ほしい</p>
<p>　お金が欲しいですか</p>
<p>わたしは　お金が欲しくないです。</p>
<p>彼女が欲しくないです</p>
<p>好き　嫌い　</p>
<p>わたしは　お酒が好きでは　ありません。</p>
<p>わたしは　豚肉が嫌いです。</p>
<p>わたしは　日本のアニメが　大好きです　だい　　</p>
<p>わたしは　鶏肉が　大嫌いです。</p>
<p>わたしは　君のことが大好きです。きみ</p>
<p>どの料理が　好きですか。</p>
<p>どこの　料理が好きですか</p>
<p>どんな料理が好きですか。</p>
<p>何の料理が好きですか</p>
<p>例　肉が嫌いです　　　お金が　欲しい</p>
<p>2表示个人能力的判定的对象</p>
<p><strong>上手　下手　　得意（とくい）　　苦手（にがて）</strong></p>
<p>李さんは　ギターが上手ではありません。</p>
<p>林さんは　ピアノが上手です。</p>
<p>李さんは　歌が　得意です。</p>
<p>李さんは　料理が　苦手です</p>
<p><strong>わかる　分かります　　　　できる　できます</strong></p>
<p>わたしは　パソコンの操作が　分かります。</p>
<p>私は　車の運転ができます。うんてん</p>
<p>わたしは　ピアノができません。</p>
<p>李さんは　バドミントンが　すこし　上手です。</p>
<p>例　日本語が分かる　　サッカーができる　　スポーツが上手です</p>
<p>3表示所有的对象</p>
<p><strong>ある　いる</strong></p>
<p>李さんは　お金が　ありません。</p>
<p>李さんは　犬が　います。</p>
<p>李さんは　綺麗な彼女がいます。</p>
<p>時間があります　お金が要ります　要る　要ります　いる　恋人がいます</p>
<p>李さんは　アメリカの映画が　大好きです。</p>
<p><strong>接续助词<strong><strong>から</strong></strong>的用法</strong> <strong>放在前一句的后面表示原因</strong> <strong>后一句表示结果相当汉语的【因为</strong>**<del><strong><strong>所以</strong></strong></del>**<strong>】</strong>　<strong>が</strong>　　　</p>
<p>5時から</p>
<p>頭が痛いですから、病院へ行きます。</p>
<p>李さんは中国人ですから、　餃子が好きです。</p>
<p>明日　暇ですから、デパートへ行きます。</p>
<p>疲れましたから、明日　どこも行きません。</p>
<p>お金がありませんから、　父さんに電話を掛けました。</p>
<p>忙しくないですから、　明日　友達の家へ行きます。</p>
<p>時間が　ありませんから　旅行ができません。</p>
<p>例　お酒が好きですから　毎日　飲みます</p>
<p><strong>疑问词どうして</strong> <strong>的用法</strong></p>
<p>相当汉语的【为什么】回答时结尾使用から 表示原因</p>
<p>　どうして　朝ご飯を食べませんか　　　食べませんでしたか</p>
<p>　ダイエット中ですから、 ちゅう　　恋愛中　　旅行中　</p>
<p>出張中　　仕事中</p>
<p>　日本中　　学校中　　一日中　　午前中　</p>
<p>どうしてですか</p>
<p>きのう　病院へ行きました。</p>
<p>どうしてですか</p>
<p>お腹が痛かったですから、</p>
<p>どうして　病院へ行きますか。</p>
<p><strong>どうして　　なんで　　なぜ</strong></p>
<p>なぜ　豚肉を食べませんか</p>
<p>あまり　好きではありませんから。</p>
<p>例　どうして日本語を勉強しますか</p>
<p>　　日本が好きですから</p>
<p><strong>たくさん</strong></p>
<p>最近　仕事が　たくさん　ありましたから　ちょっと　疲れました。</p>
<p>昨日　スーパーは　バーゲンが　ありましたから　肉を　たくさん　買いました。</p>
<p>たくさんの仕事</p>
<p>練習</p>
<p>1　因为不喜欢鱼 所以一点也不吃</p>
<p>2 我不擅长唱歌</p>
<p>3 你喜欢什么样的水果 喜欢西瓜</p>
<p>4 因为在学校学了 所以懂一点日语 </p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>SQL笔记</title>
    <url>/2022/09/14/WebBackend/Java/DBMS/SQL%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="SQL简介"><a href="#SQL简介" class="headerlink" title="SQL简介"></a>SQL简介</h1><ul>
<li>英文：Structured Query Language，简称SQL</li>
<li>结构化查询语言，一门操作关系型数据库的编程语言</li>
<li>定义操作所有关系型数据库的统一标准</li>
<li>对于同一个需求，每一种数据库操作的方式可能会存在一些不一样的地方，我们称为“方言”</li>
</ul>
<h1 id="SQL通用语法"><a href="#SQL通用语法" class="headerlink" title="SQL通用语法"></a>SQL通用语法</h1><ol>
<li>SQL语句可以单行或多行书写，以分号结尾。</li>
<li>MySQL数据库的SQL语句不区分大小写，关键字建议使用大写。</li>
<li>注释<ol>
<li>单行注释：– 注释内容 或 # 注释内容（MySQL 特有）</li>
<li>多行注释：&#x2F;* 注释 *&#x2F;</li>
</ol>
</li>
</ol>
<h1 id="SQL分类"><a href="#SQL分类" class="headerlink" title="SQL分类"></a>SQL分类</h1><ul>
<li>DDL(Data Definition Language)数据定义语言，用来定义数据库对象：数据库，表，列等</li>
<li>DML(Data Manipulation Language)数据操作语言，用来对数据库中表的数据进行增删改</li>
<li>DQL(Data Query Language)数据查询语言，用来查询数据库中表的记录（数据）</li>
<li>DCL(Data Control Language)数据控制语言，用来定义数据库的访问权限和安全级别，及创建用户</li>
</ul>
<h2 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h2><h3 id="操作数据库"><a href="#操作数据库" class="headerlink" title="操作数据库"></a>操作数据库</h3><ol>
<li><p>查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> DATABASES;<br></code></pre></td></tr></table></figure>
</li>
<li><p>创建</p>
<ul>
<li><p>创建数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE 数据库名称;<br></code></pre></td></tr></table></figure>
</li>
<li><p>创建数据库（判断，如果不存在则创建）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> 数据库名称;<br></code></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>删除</p>
<ul>
<li><p>删除数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> DATABASE 数据库名称;<br></code></pre></td></tr></table></figure>
</li>
<li><p>删除数据库（判断，如果存在则删除）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> DATABASE IF <span class="hljs-keyword">EXISTS</span> 数据库名称;<br></code></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>使用数据库</p>
<ul>
<li><p>查看当前使用的数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> DATABASE();<br></code></pre></td></tr></table></figure>
</li>
<li><p>使用数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">USE 数据库名称;<br></code></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="操作表"><a href="#操作表" class="headerlink" title="操作表"></a>操作表</h3><p><strong>创建表</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> 表名 (<br>    字段名<span class="hljs-number">1</span>	数据类型<span class="hljs-number">1</span>，<br>    字段名<span class="hljs-number">2</span>	数据类型<span class="hljs-number">2</span>，<br>    ...<br>    字段名n	数据类型n <br>);<br></code></pre></td></tr></table></figure>

<p>注意：最后一行末尾，不能加逗号</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220913010304876.png" alt="image-20220913010304876"></p>
<p><strong>数据类型</strong></p>
<ul>
<li><p>MySQL支持多种类型，可以分为三类：</p>
<ul>
<li>数值</li>
<li>日期</li>
<li>字符串</li>
</ul>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220913011509894.png" alt="image-20220913011509894"></p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220913012335633.png" alt="image-20220913012335633"></p>
</li>
</ul>
<p><strong>查询表</strong></p>
<ul>
<li><p>查询当前数据库下所有表名称</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> TABLES;<br></code></pre></td></tr></table></figure>
</li>
<li><p>查询表结构</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DESC</span> 表名称;<br></code></pre></td></tr></table></figure></li>
</ul>
<p><strong>修改表</strong></p>
<ol>
<li><p>修改表名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 RENAME <span class="hljs-keyword">TO</span> 新的表名;<br></code></pre></td></tr></table></figure>
</li>
<li><p>添加一列</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">ADD</span> 列名 数据类型;<br></code></pre></td></tr></table></figure>
</li>
<li><p>修改数据类型</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 MODIFY 列名 新数据类型;<br></code></pre></td></tr></table></figure>
</li>
<li><p>修改列名和数据类型</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 CHANGE 列名 新列名 新数据类型;<br></code></pre></td></tr></table></figure>
</li>
<li><p>删除列</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">DROP</span> 列名;<br></code></pre></td></tr></table></figure></li>
</ol>
<p><strong>删除表</strong></p>
<ol>
<li><p>删除表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> 表名;<br></code></pre></td></tr></table></figure>
</li>
<li><p>删除表时判断表是否存在</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> 表名;<br></code></pre></td></tr></table></figure></li>
</ol>
<h2 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h2><h3 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a><strong>添加数据</strong></h3><ol>
<li><p>给指定列添加数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> 表名(列名<span class="hljs-number">1</span>,列名<span class="hljs-number">2</span>,...) <span class="hljs-keyword">VALUES</span>(值<span class="hljs-number">1</span>，值<span class="hljs-number">2</span>，...);<br></code></pre></td></tr></table></figure>
</li>
<li><p>给全部列添加数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> 表名 <span class="hljs-keyword">VALUES</span>(值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>,...);<br></code></pre></td></tr></table></figure>
</li>
<li><p>批量添加数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> 表名(列名<span class="hljs-number">1</span>,列名<span class="hljs-number">2</span>,...) <span class="hljs-keyword">VALUES</span>(值 <span class="hljs-number">1</span>,值<span class="hljs-number">2</span>,...);<br></code></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> 表名 <span class="hljs-keyword">VALUES</span> (值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>,...),(值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>,...),(值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>,...)...;<br></code></pre></td></tr></table></figure></li>
</ol>
<h3 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a><strong>修改数据</strong></h3><ol>
<li><p>修改表数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> 表名 <span class="hljs-keyword">SET</span> 列名<span class="hljs-number">1</span><span class="hljs-operator">=</span>值<span class="hljs-number">1</span>,列名<span class="hljs-number">2</span><span class="hljs-operator">=</span>值<span class="hljs-number">2</span>,... [<span class="hljs-keyword">WHERE</span> 条件];<br></code></pre></td></tr></table></figure>

<p><strong>注意：修改语句中如果不加条件，则将所有数据都修改！</strong></p>
</li>
</ol>
<h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a><strong>删除数据</strong></h3><ol>
<li><p>删除数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> 表名 <span class="hljs-keyword">WHERE</span> 条件;<br></code></pre></td></tr></table></figure>

<p><strong>注意：删除语句中如果不加条件，则将所有数据都删除！</strong></p>
</li>
</ol>
<h2 id="DQL"><a href="#DQL" class="headerlink" title="DQL"></a>DQL</h2><h3 id="查询语法"><a href="#查询语法" class="headerlink" title="查询语法"></a>查询语法</h3><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>	字段列表<br><span class="hljs-keyword">FROM</span><br>	表名列表<br><span class="hljs-keyword">WHERE</span><br>	条件列表<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span><br>	分组字段<br><span class="hljs-keyword">HAVING</span><br>	分组后条件<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span><br>	排序字段<br>LIMIT<br>	分页限定<br></code></pre></td></tr></table></figure>

<h3 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h3><ol>
<li><p>查询多个字段</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> 字段列表 <span class="hljs-keyword">FROM</span> 表名;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> 表名; <span class="hljs-comment">-- 查询所有数据</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>去除重复记录</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> 字段列表 <span class="hljs-keyword">FROM</span> 表名;<br></code></pre></td></tr></table></figure>
</li>
<li><p>起别名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">AS</span>: <span class="hljs-keyword">AS</span> 也可以省略<br></code></pre></td></tr></table></figure></li>
</ol>
<h3 id="条件查询-WHERE"><a href="#条件查询-WHERE" class="headerlink" title="条件查询(WHERE)"></a>条件查询(WHERE)</h3><ol>
<li><p>条件查询语法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> 字段列表 <span class="hljs-keyword">FROM</span> 表名 <span class="hljs-keyword">WHERE</span> 条件列表;<br></code></pre></td></tr></table></figure></li>
</ol>
<h3 id="排序查询-ORDER-BY"><a href="#排序查询-ORDER-BY" class="headerlink" title="排序查询(ORDER BY)"></a>排序查询(ORDER BY)</h3><ol>
<li><p>排序查询语法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> 字段列表 <span class="hljs-keyword">FROM</span> 表名 <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> 排序字段名<span class="hljs-number">1</span> [排序方式<span class="hljs-number">1</span>],排序字段名<span class="hljs-number">2</span> [排序方式<span class="hljs-number">2</span>] ...;<br></code></pre></td></tr></table></figure>

<p>排序方式：</p>
<ul>
<li>ASC：升序排序（默认值）</li>
<li>DESC：降序排列</li>
</ul>
<p><strong>注意：如果有多个排序条件，当前边的条件值一样时，才会根据第二条件进行排序</strong></p>
</li>
</ol>
<h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><ol>
<li><p>概念：</p>
<p>将一列数据作为一个整体，进行纵向计算。</p>
</li>
<li><p>聚合函数分类</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220914011932454.png" alt="image-20220914011932454"></p>
</li>
<li><p>聚合函数语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> 聚合函数名(列名) <span class="hljs-keyword">FROM</span> 表;<br></code></pre></td></tr></table></figure>

<p><strong>注意：null值不参与所有聚合函数运算</strong></p>
</li>
</ol>
<h3 id="分组查询-GROUP-BY"><a href="#分组查询-GROUP-BY" class="headerlink" title="分组查询(GROUP BY)"></a>分组查询(GROUP BY)</h3><ol>
<li><p>分组查询语法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> 字段列表 <span class="hljs-keyword">FROM</span> 表名 [<span class="hljs-keyword">WHERE</span> 分组前条件限定] <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> 分组字段名 [<span class="hljs-keyword">HAVING</span> 分组后条件过滤];<br></code></pre></td></tr></table></figure>

<p><strong>注意：分组之后，查询的字段为聚合函数和分组字段，查询其他字段无任何意义</strong></p>
<p>where和having区别：</p>
<ul>
<li><p>执行时机不一样：where是分组之前进行限定，不满足where条件，则不参与分组，而having是分组之后对结果进行过滤</p>
</li>
<li><p>可判断的条件不一样：where不能对聚合函数进行判断，having可以</p>
<p>执行顺序：where&gt;聚合函数&gt;having</p>
</li>
</ul>
</li>
</ol>
<h3 id="分页查询-LIMIT"><a href="#分页查询-LIMIT" class="headerlink" title="分页查询(LIMIT)"></a>分页查询(LIMIT)</h3><ol>
<li><p>分页查询语法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> 字段列表 <span class="hljs-keyword">FROM</span> 表名 LIMIT 起始索引 , 查询条目;<br></code></pre></td></tr></table></figure></li>
</ol>
<ul>
<li><p>起始索引：从0开始</p>
<p><strong>计算公式：起始索引 &#x3D; (当前页码-1) * 每页显示的条数</strong></p>
<p>tips:</p>
<ul>
<li>分页查询limit是MySQL数据库的方言</li>
<li>Oracle分页查询使用rownumber</li>
<li>SQL Server分页查询使用top</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>WEBbackend</category>
      </categories>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>向量数据库</title>
    <url>/2023/04/18/WebBackend/Java/DBMS/%E5%90%91%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<p>向量数据库是一种专门用于存储和查询向量数据的数据库。它们可以处理高维度、大规模的向量数据，并提供高效的相似性搜索功能。在传统的关系型数据库中，数据通常以表格形式存储，而向量数据库则将数据表示为向量，这有助于更加准确地描述数据之间的相似性。</p>
<span id="more"></span>

<p>向量数据库可以应用于多个领域，如计算机视觉、自然语言处理、推荐系统等。例如，在图像搜索中，我们可以将每张图片表示为一个向量，然后使用向量数据库来快速找到与输入图片最相似的其他图片。在推荐系统中，我们也可以使用向量数据库来查找与用户喜好最相似的商品或内容。</p>
<h1 id="向量数据库检索"><a href="#向量数据库检索" class="headerlink" title="向量数据库检索"></a>向量数据库检索</h1><p>向量数据库检索指的是在向量数据库中针对特定查询向量进行相似性搜索的过程。在向量数据库中，每个向量数据都被表示为一个向量，并且每个向量都有一个唯一的ID。当执行向量检索时，首先将查询向量转换为向量形式，然后通过相似性函数计算每个向量与查询向量之间的相似度。最后，将所有向量按照相似度排序，以找到最相似的向量。</p>
<p>在执行向量检索时，需要选择相应的相似性函数来计算向量之间的相似度。常见的相似性函数包括余弦相似度、欧几里得距离、曼哈顿距离等。同时，还可以使用一些加速技术，如局部敏感哈希（LSH）和树型结构（如KD-Tree），来加快相似性搜索过程。</p>
<h1 id="关于ANN"><a href="#关于ANN" class="headerlink" title="关于ANN"></a>关于ANN</h1><p>ANN是Approximate Nearest Neighbor的缩写，中文翻译为“近似最近邻”。它是一种基于向量相似度的搜索技术，用于在大规模高维度数据集中进行高效的相似性搜索。ANN可以解决传统最近邻搜索（exact nearest neighbor）难以应对的高维问题，即使是亿级别的数据集也能够快速检索。</p>
<p>与传统精确最近邻搜索不同，ANN允许返回近似最近邻结果，这意味着虽然结果不是100%准确的，但其可能非常接近真实答案，并且差异可以被可控制和调整。通过牺牲一定的精确度，ANN可以显著提高查询速度和存储效率。</p>
<p>ANN通常使用一些加速技术来实现高效的相似性搜索。其中一些方法包括局部敏感哈希（LSH）、树型结构（如KD-Tree、Ball-Tree）、保序回归等。这些方法都旨在将数据划分为多个子空间，以便更快地查找最相似的向量。</p>
<h1 id="常见的向量数据库"><a href="#常见的向量数据库" class="headerlink" title="常见的向量数据库"></a>常见的向量数据库</h1><p>Faiss, Annoy<br>Milvus：世界上最快的向量数据库<br>Pinecone，这个提供 Google Cloud 或 AWS 的托管服务<br>Qdrant，开源版及商业版都有<br>pgvector，PostgreSQL 的扩展</p>
<h1 id="实现ChatGPT与向量数据库的集成"><a href="#实现ChatGPT与向量数据库的集成" class="headerlink" title="实现ChatGPT与向量数据库的集成"></a>实现ChatGPT与向量数据库的集成</h1><ol>
<li><p>选择一个向量数据库：首先选择一个向量数据库，如Faiss, Annoy, 或者Milvus。根据你的需求和场景，选择适合你项目的向量数据库。</p>
</li>
<li><p>使用OpenAI API：要使用ChatGPT，你需要访问OpenAI的API。在Java中，你可以使用Java的HTTP客户端（如Apache HttpClient或OkHttp）来与API进行交互。</p>
</li>
<li><p>将文本转换为向量：在将文本发送给ChatGPT之前，你需要将其转换为向量。这可以通过诸如Hugging Face的Transformers库实现。不过，Transformers库是Python的，因此你需要找到一个Java实现或使用类似于Jep的工具将Python代码嵌入到Java应用中。</p>
</li>
<li><p>存储向量：使用所选的向量数据库将生成的向量存储起来。这可能需要为Java编写或找到一个客户端库，以便与向量数据库进行交互。</p>
</li>
<li><p>查询向量数据库：根据需求，你可能需要查询向量数据库以找到与输入文本最相关的内容。这通常涉及计算输入文本向量与数据库中向量之间的相似度。向量数据库通常会提供查询功能来实现这一点。</p>
</li>
</ol>
<p>以下是一个简化的Java实现示例，展示了如何与OpenAI API进行交互以及与向量数据库的集成：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> okhttp3.*;<br><span class="hljs-keyword">import</span> org.json.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChatGPTIntegration</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">prompt</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;你好，我想了解Java编程。&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">apiKey</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;your_openai_api_key&quot;</span>;<br>        <br>        <span class="hljs-type">String</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> generateChatGPTResponse(prompt, apiKey);<br>        System.out.println(<span class="hljs-string">&quot;Generated response: &quot;</span> + response);<br><br>        <span class="hljs-comment">// 在此处将文本转换为向量，并将其存储到所选的向量数据库中</span><br>        <span class="hljs-comment">// 还可以在此处执行查询和其他向量数据库操作</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">generateChatGPTResponse</span><span class="hljs-params">(String prompt, String apiKey)</span> &#123;<br>        <span class="hljs-type">OkHttpClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OkHttpClient</span>();<br>        <span class="hljs-type">MediaType</span> <span class="hljs-variable">JSON</span> <span class="hljs-operator">=</span> MediaType.get(<span class="hljs-string">&quot;application/json; charset=utf-8&quot;</span>);<br>        <br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">requestBodyJson</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>()<br>            .put(<span class="hljs-string">&quot;prompt&quot;</span>, prompt)<br>            .put(<span class="hljs-string">&quot;max_tokens&quot;</span>, <span class="hljs-number">50</span>)<br>            .put(<span class="hljs-string">&quot;temperature&quot;</span>, <span class="hljs-number">0.5</span>);<br><br>        <span class="hljs-type">RequestBody</span> <span class="hljs-variable">requestBody</span> <span class="hljs-operator">=</span> RequestBody.create(requestBodyJson.toString(), JSON);<br>        <span class="hljs-type">Request</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Request</span>.Builder()<br>            .url(<span class="hljs-string">&quot;https://api.openai.com/v1/engines/davinci-codex/completions&quot;</span>)<br>            .addHeader(<span class="hljs-string">&quot;Authorization&quot;</span>, <span class="hljs-string">&quot;Bearer &quot;</span> + apiKey)<br>            .post(requestBody)<br>            .build();<br><br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">Response</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.newCall(request).execute()) &#123;<br>            <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonResponse</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>(response.body().string());<br>            <span class="hljs-keyword">return</span> jsonResponse.getJSONArray(<span class="hljs-string">&quot;choices&quot;</span>).getJSONObject(<span class="hljs-number">0</span>).getString(<span class="hljs-string">&quot;text&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>DBMS</category>
      </categories>
      <tags>
        <tag>ChatGpt</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库基本概念</title>
    <url>/2022/11/25/WebBackend/Java/DBMS/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<h1 id="数据库基本概念"><a href="#数据库基本概念" class="headerlink" title="数据库基本概念"></a>数据库基本概念</h1><p> (SQL，索引视图，事务，日志等)</p>
<h2 id="数据库是什么"><a href="#数据库是什么" class="headerlink" title="数据库是什么"></a>数据库是什么</h2><ul>
<li>信息、数据与数据处理</li>
<li>应用程序和操作系统承上启下的作用</li>
<li>数据库（DB，Data Base）</li>
<li>数据库管理系统（DBMS，Data Base Management System）</li>
<li>数据库系统（DBS，Data Base System）</li>
</ul>
<img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221125163819158.png" alt="image-20221125163819158" style="zoom:50%;" />

<h3 id="数据库与数据库实例的概念"><a href="#数据库与数据库实例的概念" class="headerlink" title="数据库与数据库实例的概念"></a>数据库与数据库实例的概念</h3><p><strong>数据库：</strong><br>物理操作系统或其他形式文件类型的集合。在Oracle数据库是dbf、日志文件、密码文件等文件构成；在MySQL下数据库文件可以是frm、myd、myi、ibd结尾的文件。</p>
<p><strong>数据库实例：</strong><br>由数据库后台进程&#x2F;线程以及一个共享内存区组成。Oracle是多进程程序；MySQL数据库是单进程多线程的程序，单进程多线程的特性决定MySQL是轻量级数据库（并发连接性能受限）。</p>
<h2 id="SQL基础概念"><a href="#SQL基础概念" class="headerlink" title="SQL基础概念"></a>SQL基础概念</h2><ul>
<li><p>Structured Query Language : 结构化查询语言,是一种特殊目的的编程语言,是<strong>一种数据库查</strong><br><strong>询和程序设计语言,用于存取数据以及查询、更新和管理关系数据库系统</strong>。</p>
</li>
<li><p>结构化查询语言是**高级的非过程化编程语言,**允许用户在高层数据结构上工作。它不要求用户指<br>定对数据的存放方法,也不需要用户了解具体的数据存放方式,所以具有完全不同底层结构的不<br>同数据库系统可以使用相同的结构化查询语言作为数据输入与管理的接口。结构化查询语言语句<br>可以嵌套,这使它具有极大的灵活性和强大的功能。</p>
</li>
<li><p>SQL语言1974年由Boyce和Chamberlin提出,并首先在IBM公司研制的关系数据库系统SystemR<br>上实现。由于它具有功能丰富、使用方便灵活、语言简洁易学等突出的优点,深受计算机工业界<br>和计算机用户的欢迎。1980年10月,经美国国家标准局(ANSI)的数据库委员会X3H2批准,将<br>SQL作为关系数据库语言的美国标准,同年公布了标准SQL,此后不久,国际标准化组织(ISO)也<br>作出了同样的决定。</p>
</li>
</ul>
<h3 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h3><p><strong>SQL 6大类：</strong></p>
<ul>
<li>数据查询语言( DQL: Data Query Language) : 其语句,也称为“数据检索语句”, 用以从表中获得数据,确<br>定数据怎样在应用程序给出。保留字SELECT是DQL (也是所有SQL )用得最多的动词,其他DQL常用的保留字<br>有WHERE , ORDER BY , GROUP BY和HAVING。 这些DQL保留字常与其它类型的SQL语句一起使用。</li>
<li>数据操作语言( DML : Data Manipulation Language ) : 其语句包括动词INSERT、UPDATE和DELETE。 它们<br>分别用于添加、修改和删除。</li>
<li>事务控制语言( TCL) : 它的语句能确保被DML语句影响的表的所有行及时得以更新。包括COMMIT (提交)命<br>令、SAVEPOINT (保存点)命令、ROLLBACK (回滚)命令。</li>
<li>数据控制语言( DCL ) :它的语句通过GRANT或REVOKE实现权限控制,确定单个用户和用户组对数据库对象的<br>访问。某些RDBMS可用GRANT或REVOKE控制对表单个列的访问。</li>
<li>数据定义语言(DDL) :其语句包括动词CREATE,ALTER和DROP。在数据库中创建新表或修改、删除表<br>( CREATE TABLE或DROP TABLE) ; 为表加入索引等。</li>
<li>指针控制语言( CCL) :它的语句,像DECLARE CURSOR , FETCH INTO和UPDATE WHERE CURRENT用于对<br>一个或多个表单独行的操作。</li>
</ul>
<p><strong>SQL的特点：</strong></p>
<ul>
<li><p>SQL风格统一<br>SQL可以独立完成数据库生命周期中的全部活动,包括定义关系模式、录入数据、建立数据库、查询、更新、维护、<br>数据库重构、数据库安全性控制等一系列操作 ,这就为数据库应用系统开发提供了良好的环境,在数据库投入运行<br>后,还可根据需要随时逐步修改模式,且不影响数据库的运行,从而使系统具有良好的可扩充性。</p>
</li>
<li><p>高度非过程化<br>非关系数据模型的数据操纵语言是面向过程的语言,用其完成用户请求时,必须指定存取路径。而用SQL进行数据<br>操作,用户只需提出“做什么”, 而不必指明”怎么做”, 因此用户无须了解存取路径,存取路径的选择以及SQL语句的操作过程由系统自动完成。这不但大大减轻了用户负担,而且有利于提高数据独立性。</p>
</li>
<li><p>面向集合的操作方式<br>SQL采用集合操作方式,不仅查找结果可以是元组的集合,而且一次插入、删除、更新操作的对象也可以是元组的集合</p>
</li>
<li><p>以同一种语法结构提供两种使用方式<br>SQL既是自含式语言,又是嵌入式语言。作为自含式语言,它能够独立地用于联机交互的使用方式,用户可以在终端键盘上直接输入SQL命令对数据库进行操作。作为嵌入式语言, SQL语句能够嵌入到高级语言(如C、C#、 JAVA)程序中,供程序员设计程序时使用。而在两种不同的使用方式下, SQL的语法结构基本上是一致的。这种以统一的语法结构提供两种不同的操作方式,为用户提供了极大的灵活性与方便性。</p>
</li>
<li><p>语言简洁,易学易用<br>SQL功能极强,但由于设计巧妙,语言十分简洁,完成数据定义、数据操纵、数据控制的核心功能只用了9个动词:<br>CREATE、ALTER、 DROP、SELECT、 INSERT、 UPDATE、 DELETE、 GRANT、REVOKE。 且SQL语言语法简<br>单，接近英语口语,因此容易学习,也容易使用。</p>
</li>
</ul>
<h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><ul>
<li>概念<br>索引是对数据库表中一列或多列的值进行排序的一种结构 ,使用索引可快速访问数据库表中的特定信息。<br><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221125171327836.png" alt="image-20221125171327836"></li>
<li>索弓|的创建和使用举例 :<br>如果在查询时常用类似以下的语句:<br><code>SELECT * FROM mytable WHERE category_id=1;</code><br>最直接的应对之道,是为category_ id建立一个简单的索引 :<br><code>CREATE INDEX mytable_categoryid ON mytable (category_id);</code></li>
</ul>
<p><strong>索引种类：</strong></p>
<ul>
<li>唯一索引:UNIQUE<br>例如在学生表中给学号字段创建唯一索引: <code>create unique index stusno on student (sno) ;</code><br>表明此索弓的每一个索引值只对应唯一的数据记录,对于单列唯一性索引,这保证单列不包含重复的值。<br>对于多了唯一-性索引,保证多列值得组合不重复</li>
<li>主键索引primary key即唯一 +非空<br>数据库关系图中在给表定义主键将自动创建主键索引,该索弓|要求主键中的每个值都唯一且非空。</li>
<li>聚集索引(又叫聚簇索引) : cluster<br>聚簇索引并不是一种单独的索引类型,而是一种<strong>数据存储方式</strong>。在InnoDB中,表数据文件本身就是按<br>B+Tree组织的一个索引结构,这棵树的叶节点data域保存了完整的数据记录。这个索引的key是数据表<br>的主键,因此InnoDB表数据文件本身就是主索引。</li>
</ul>
<h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><ul>
<li><p>视图是指计算机数据库中的视图,<strong>是一个虚拟表</strong>,其内容由查询定义。同真实的表一样,视图包含一系列带有名称的列和行数据。但是,视图并不在数据库中以存储的数据值集形式存在。行和列数据来自由定义视图的查询所引用的表,并且在引用视图时动态生成。</p>
</li>
<li><p>创建一个简单视图<code>V_ EMP_10</code> ,来显示部门10中的员工的编码、姓名和薪水: </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> v_emp_10<br><span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> emono,ename,sal,deptno<br><span class="hljs-keyword">FROM</span> emp<br><span class="hljs-keyword">WHERE</span> deptno <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure></li>
</ul>
<h3 id="事物"><a href="#事物" class="headerlink" title="事物"></a>事物</h3><p><strong>概念：</strong><br>在关系数据库中, 一个事务可以是一条SQL语句 , 一组SQL语句或整个程序。指访问并可能更新数据库中各的数据项的一个程序执行单元(unit)</p>
<p><strong>特性：</strong><br><em>事务是恢复和并发控制的基本单位</em>。事务应该具有4个属性:原子性、一致性、隔离性、持久性。这四个属性通常称为ACID特性。</p>
<ul>
<li>原子性( atomicity )。一个事务是一个不可分割的工作单位,事务中包括的操作要么都做,要么都不做。</li>
<li>一致性( consistency)。事务必须是使数据库从一个一致性状态变到另一个一致性状态。一致性与原子性是密切相关的。</li>
<li>隔离性( isolation)。一个事务的执行不能被其他事务干扰。即一个事务内部的操作及使用的数据对并发的其他事务是隔的,并发执行的各个事务之间不能互相干扰。</li>
<li>持久性( durability )。持久性也称永久性( permanence) , 指一个事务一旦提交 ,它对数据库中数据的改变就应该是永久性<br>的。接下来的其他操作或故障不应该对其有任何影响。</li>
</ul>
<h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><ul>
<li>现在的数据库系统( Oracel、DB2、 MS SQL、MySQL等)都支持多用户,所有的数据库系统(包括Exchange ) , 都是把数据先写到日志中,等某个时机(比如:确认commit )后再写到数据库记录中,日志是数据库最重要的数据之一</li>
<li>数据库都具有事务日志,用于记录所有事务以及每个事务对数据库所做的修改。事务日志是数据库的重要组件,如果系统出现故障,则可能需要使用事务日志将数据库恢复到一致状态。</li>
</ul>
<p><strong>MySQL中有六种日志文件,分别是:</strong></p>
<ul>
<li>重做日志(redolog)</li>
<li>回滚日志(undolog)</li>
<li>二进制日志( binlog )</li>
<li>错误日志( errorlog )</li>
<li>慢查询日志( slow query log )</li>
<li>一般查询日志( general log )</li>
<li>中继日志( relay log )</li>
</ul>
<p>其中重做日志和回滚日志与事务操作息息相关,二进制日志也与事务操作有一定的关系,这三种日志,对理解MySQL中的事务操作有着重要的意义。</p>
<p><strong>MySQL重做日志</strong></p>
<ul>
<li>作用:<br>确保事务的持久性。redo日志记录事务执行后的状态,用来恢复未写入data file的已成功事务更新的数据。防止在发生故障的时间点,尚有脏页未写入磁盘,在重启MySQL服务的时候,根据redo log进行重做,从而达到事务的持久性这一特性。</li>
<li>内容:<br>物理格式的日志,记录的是物理数据页面的修改的信息,其redo log是顺序写入redo log file的物理文件中去的。</li>
<li>什么时候产生:<br>事务开始之后就产生redo log , redo log的落盘并不是随着事务的提交才写入的,而是在事务的执行过程中,便开<br>始写入redo log文件中。</li>
<li>什么时候释放:<br>当对应事务的脏页写入到磁盘之后, redo log的使命也就完成了,重做日志占用的空间就可以重用(被覆盖)。</li>
</ul>
<p><strong>MySQL回滚日志</strong></p>
<ul>
<li>作用:<br>保证数据的原子性,保存了事务发生之前的数据的一个版本，可以用于回滚,同时可以提供多版本并发控制下的读( MVCC) , 也即非锁定读</li>
<li>内容:<br>逻辑格式的日志,在执行undo的时候,仅仅是将数据从逻辑上恢复至事务之前的状态,而不是从物理页面上操作实现的,这一点是不同于redo log的。</li>
<li>什么时候产生:<br>事务开始之前,将当前是的版本生成undo log , undo也会产生redo来保证undo log的可靠性</li>
<li>什么时候释放:<br>当事务提交之后, undo log并不能立马被删除,而是放入待清理的链表,由purge线程判断是否由其他事务在使用undo段中表的.上一个事务之前的版本信息,决定是否可以清理undo log的日志空间。</li>
</ul>
<p><strong>MySQL二进制日志</strong></p>
<ul>
<li>作用:<br>用于复制,在主从复制中,从库利用主库上的binlog进行重播,实现主从同步。用于数据库的基于时间点的还原。</li>
<li>内容:<br>逻辑格式的日志,可以简单认为就是执行过的事务中的sq|语句。不光SQL语句本身,而是包括了执行的SQL语句<br>(增删改)反向的信息,也就意味着delete对应着delete本身和其反向的insert ; update对应着update执行前后<br>的版本的信息; insert对应着delete和insert本身的信息。</li>
<li>什么时候产生:<br>事务提交的时候, 一次性将事务中的SQL语句( 一个事物可能对应多个sql语句)按照一定的格式记录到binlog中。<br>这里与redo log很明显的差异就是redo log并不一定是在事务提交的时候刷新到磁盘 , redo log是在事务开始之<br>后就开始逐步写入磁盘。<br>因此对于事务的提交,即便是较大的事务,提交( commit )都是很快的,但是在开启了binlog的情况下,对于较<br>大事务的提交,可能会变得比较慢一些。</li>
<li>什么时候释放:<br>binlog的默认是保持时间由参数expire_ logs_days配置,也就是说对于非活动的日志文件,在生成时间超过<br>expire_ logs_days配置的天数之后,会被自动删除。</li>
</ul>
]]></content>
      <categories>
        <category>阿里云ACA</category>
      </categories>
      <tags>
        <tag>DBMS</tag>
      </tags>
  </entry>
  <entry>
    <title>整理</title>
    <url>/2023/05/30/WebBackend/Python/LLMOps/LLMOps/</url>
    <content><![CDATA[<h2 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h2><ul>
<li><a href="https://zhuanlan.zhihu.com/p/631732317">LLMOps（Large Language Model Operations）简介</a></li>
<li><a href="https://github.com/tensorchord/Awesome-LLMOps">LLMOps开源工具总结</a></li>
</ul>
<p>LLMOps（Large Language Model Operations）是一个新兴领域，专注于管理大型语言模型的整个生命周期，包括数据管理、模型开发、部署和伦理等方面。Hugging Face、Humanloop和NVIDIA等公司正在引领这一领域的发展。</p>
<ol>
<li><p><a href="https://github.com/Arize-ai/phoenix">Arize-Phoenix</a>：用于 LLM、视觉、语言和表格模型的 ML 可观察性工具。</p>
</li>
<li><p><a href="https://github.com/activeloopai/deeplake">deeplake</a>：流式处理大型多模态数据集的工具，可实现接近 100% 的 GPU 利用率。支持查询、可视化和版本控制数据，无需重新计算模型微调的嵌入即可访问数据。</p>
</li>
<li><p><a href="https://github.com/zilliztech/GPTCache">GPTCache</a>：创建语义缓存以存储 LLM 查询的响应。</p>
</li>
<li><p><a href="https://github.com/deepset-ai/haystack">Haystack</a>：使用 LLM Agents、语义搜索、问答等功能快速组合应用程序的工具。</p>
</li>
<li><p><a href="https://github.com/hwchase17/langchain">langchain</a>：通过可组合性构建使用 LLM 的应用程序的工具。</p>
</li>
<li><p><a href="https://github.com/jerryjliu/llama_index">LlamaIndex</a>：提供连接 LLM 与外部数据的中央接口。</p>
</li>
<li><p><a href="https://wandb.ai/site">Weights &amp; Biases</a>（提示）：开发者优先的 W&amp;B MLOps 平台内的 LLMOps 工具套件。利用 W&amp;B Prompts 可视化和检查 LLM 执行流程，跟踪输入和输出，查看中间结果，安全地管理提示和 LLM 链配置。</p>
</li>
<li><p><a href="https://github.com/stochasticai/xturing">xTuring</a>：使用快速高效的微调构建和控制个人 LLMs 的工具。</p>
</li>
<li><p><a href="https://github.com/zenml-io/zenml">ZenML</a>：用于编排、实验和部署生产级 ML 解决方案的开源框架，具有内置的 langchain 和 llama_index 集成。</p>
</li>
<li><p><a href="https://github.com/langgenius/dify/blob/main/README_CN.md">Dify</a>：旨在使开发人员（甚至非开发人员）能够基于大型语言模型快速构建有用的应用程序的开源框架，确保它们可视化、可操作和可改进。</p>
</li>
</ol>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/629045988">【LLM】LangChain 资料大全</a></li>
</ul>
]]></content>
      <categories>
        <category>WebBackend/Python/gpt</category>
      </categories>
  </entry>
  <entry>
    <title>FAISS</title>
    <url>/2023/05/29/WebBackend/Python/LLMOps/FAISS/</url>
    <content><![CDATA[<p>为什么用到FAISS，假设你有一个向量数据需要查询，但是几百和几千个虽然没多大问题，如果是几万或者几百万个，那对性能浪费是非常可怕的了</p>
<p> FAISS（Facebook AI Similarity Search）是Facebook开源的一个用于高效相似性搜索和聚类的库。它主要是为了解决深度学习中大规模向量检索的问题，适用于向量索引和相似性搜索等场景。FAISS库提供了一系列高效的索引算法和检索方法，比如Inverted File、Product Quantization和PCA-IVF等，可以快速处理百万级别的向量数据，并支持多种相似性度量方式，如余弦相似度、欧几里得距离等。在Facebook内部，FAISS被广泛应用于图像和视频搜索、语义搜索、推荐系统等领域，在业界也得到了广泛的应用和认可。</p>
]]></content>
      <categories>
        <category>WebBackend/Python/gpt</category>
      </categories>
  </entry>
  <entry>
    <title>LangChain通过LLM实现QA</title>
    <url>/2023/06/08/WebBackend/Python/LLMOps/LangChain%E9%80%9A%E8%BF%87LLM%E5%AE%9E%E7%8E%B0QA/</url>
    <content><![CDATA[<h2 id="向量化-HuggingFaceEmbeddings"><a href="#向量化-HuggingFaceEmbeddings" class="headerlink" title="向量化: HuggingFaceEmbeddings"></a>向量化: HuggingFaceEmbeddings</h2><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Embedding running device</span><br>EMBEDDING_DEVICE = <span class="hljs-string">&#x27;cuda&#x27;</span> <span class="hljs-keyword">if</span> torch.cuda.is_available() <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;mps&#x27;</span> <span class="hljs-keyword">if</span> torch.backends.mps.is_available() <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;cpu&#x27;</span><br><br><span class="hljs-comment"># 加载本地向量编码器  </span><br>model_name = <span class="hljs-string">&quot;sentence-transformers/all-mpnet-base-v2&quot;</span>  <br>model_kwargs = &#123;<span class="hljs-string">&#x27;device&#x27;</span>: EMBEDDING_DEVICE&#125;  <br>embeddings = HuggingFaceEmbeddings(model_name=model_name, model_kwargs=model_kwargs)<br></code></pre></td></tr></table></figure>


<h2 id="向量化存储-FAISS"><a href="#向量化存储-FAISS" class="headerlink" title="向量化存储(FAISS)"></a>向量化存储(FAISS)</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><ul>
<li>创建词嵌入模型（embedding model）  </li>
<li>可以参考以下链接获取模型：<a href="https://huggingface.co/spaces/mteb/leaderboard">https://huggingface.co/spaces/mteb/leaderboard</a></li>
<li>你也可以使用以下链接中的模型：<a href="https://www.sbert.net/index.html">https://www.sbert.net/index.html</a> </li>
<li>docs 为传入文本</li>
</ul>
<p>会创建新表，并插入数据，表字段是除pk与vactor外，其他需要metadata字段设置好</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># vector_store = FAISS.from_documents(docs, embeddings)</span><br><span class="hljs-comment"># vector_store = FAISS.from_texts(docs, embeddings)</span><br><br>vector_store = Milvus.from_documents(  <br>	chunks,  <span class="hljs-comment"># 切片文本</span><br>	embeddings_decoder,  <br>	connection_args=DEFAULT_MILVUS_CONNECTION,  <br>	collection_name=<span class="hljs-string">&quot;zhltest1234&quot;</span>  <br>)<br></code></pre></td></tr></table></figure>

<h3 id="新增单个文档（add-document"><a href="#新增单个文档（add-document" class="headerlink" title="新增单个文档（add_document)"></a>新增单个文档（add_document)</h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># vector_store.add_documents(doc)</span><br><span class="hljs-comment"># vector_store.save_local(self.vector_store_path)</span><br><br>vector_store = Milvus(  <br>	connection_args=DEFAULT_MILVUS_CONNECTION,  <br>	embedding_function=embeddings,  <br>	collection_name=<span class="hljs-string">&quot;zhl3&quot;</span><br>)<br>vector_store.add_texts([<span class="hljs-string">&quot;你好&quot;</span>],metadatas=[&#123;<span class="hljs-string">&#x27;source&#x27;</span>: <span class="hljs-string">&#x27;./test.txt&#x27;</span>&#125;])<br></code></pre></td></tr></table></figure>

<h3 id="批量直接导入embedding（函数：load-vector-store）"><a href="#批量直接导入embedding（函数：load-vector-store）" class="headerlink" title="批量直接导入embedding（函数：load_vector_store）"></a>批量直接导入embedding（函数：load_vector_store）</h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># FAISS.load_local(self.vector_store_path, self.embeddings)</span><br></code></pre></td></tr></table></figure>

<h3 id="连接指定的表（collection-name）进行查询"><a href="#连接指定的表（collection-name）进行查询" class="headerlink" title="连接指定的表（collection_name）进行查询"></a>连接指定的表（collection_name）进行查询</h3><p>目前langchain封装的查询接口参数两类，字符串与编码后的向量<br>相似度查询两类 similarity_search与max_marginal_relevance_search</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">query = <span class="hljs-string">&quot;需要常驻于内存?&quot;</span>  <br>query_embedding = embeddings.embed_query(query)  <br>docs1 = vector_store.similarity_search(query)  <br>docs2 = vector_store.similarity_search_with_score(query)  <br>docs3 = vector_store.similarity_search_by_vector(query_embedding, k=<span class="hljs-number">2</span>)  <br>docs4 = vector_store.similarity_search_with_score_by_vector(query_embedding, k=<span class="hljs-number">2</span>)  <br>docs5 = vector_store.max_marginal_relevance_search(query, k=<span class="hljs-number">30</span>)  <br>docs6 = vector_store.max_marginal_relevance_search_by_vector(query_embedding, k=<span class="hljs-number">30</span>)<br></code></pre></td></tr></table></figure>


<h2 id="建立MILVUS数据库连接参数"><a href="#建立MILVUS数据库连接参数" class="headerlink" title="建立MILVUS数据库连接参数"></a>建立MILVUS数据库连接参数</h2><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">DEFAULT_MILVUS_CONNECTION = &#123;  <br>	<span class="hljs-string">&quot;host&quot;</span>: <span class="hljs-string">&quot;127.0.0.1&quot;</span>,  <br>	<span class="hljs-string">&quot;port&quot;</span>: <span class="hljs-number">19530</span>,  <br>	<span class="hljs-string">&quot;user&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,  <br>	<span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,  <br>	<span class="hljs-string">&quot;secure&quot;</span>: <span class="hljs-literal">False</span>,  <br>&#125;<br></code></pre></td></tr></table></figure>






<figure class="highlight md"><table><tr><td class="code"><pre><code class="hljs md"><span class="hljs-section"># 插入数据，参数要求是列表，metadatas要求与表中字段一致。  </span><br><span class="hljs-section"># pk是主键，vector FloatVector向量类型，维度要与编码器的输出维度一致，openai是1500多，目前本地是768维</span><br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>WebBackend/Python/LLMOps</category>
      </categories>
  </entry>
  <entry>
    <title>Langchain</title>
    <url>/2023/05/30/WebBackend/Python/LLMOps/Langchain/</url>
    <content><![CDATA[<h2 id="什么是Langchain"><a href="#什么是Langchain" class="headerlink" title="什么是Langchain"></a>什么是Langchain</h2><p><a href="https://github.com/hwchase17/langchain">Langchain</a> 是指在计算机程序中进行语言处理的工具或方法。在这里，langchain被当作中间件来处理查询。  </p>
<p>简单来说Langchain就是为了提升构建一个和大型语言模型相关软件的效率</p>
<p>在LLM大语言模型里面，我们会用到一个东西，我们之前也介绍过prompts，那么这个地方针对prompts就讲了，怎么对prompts进行管理，进行优化。然后怎么去设定一个通用性质的一个接口，然后怎样去利用一些操作，让这个prompts更有效率。</p>
<p>你可以把它看成一种指导意见，只不过这种知道意见是在做这个大型语言模型的时候，人们总结出来得到的一个东西，然后写成文章，你用了这套吗，就符合了Langchain所定义的这套规范。</p>
<p>那么在这方面不仅有prompts，还能看到其他的概念；比如说这个data generation，agents，memory这些东西。未来可能还会出现另外一些新的概念出来。</p>
<p>所以我们回过头过来看，这个Langchain其实做的一件事就是我把你在AI开发中会用到的相关的技术全部抽象成一个小元素，只要用到这些元素，就不必重复的去造轮子，不用去想从架构上我该怎么去管理这个关键词，我应该怎么样去管理这个节点，或者说这个agent。我们只需要把这些东西像积木一样给拼起来，比如说这个地方需要关键词管理，下面需要一个处理单元，最后还需要个评价单元，我把它们连起来，它就是一个AI。</p>
<p>所以，回顾之下，Langchain实际上所做的就是将AI开发中会用到的相关技术全部抽象成一个小元素。这样一来，我们不必重复造轮子，也不用去考虑如何在架构上管理关键词、节点或agent。我们只需要像拼积木一样将这些元素组合起来，例如需要关键词管理、处理单元和评价单元，将它们连接起来就形成了一个AI。</p>
<p>具体来说，无论是关键词处理单元、agent生成方式还是评价方法，Langchain都提供了各种可能用到的资源和选项。我们只需根据需求选择，比如生成时使用OpenAl服务，评价时使用另一个公司的服务，关键词管理的数据来源于AWS或微软语音等等，这些都已为我们准备好。</p>
<p>Langchain说白了就是可以理解成一种标准，或者说是一层协议。这个协议定义了你构建一个大型语言模型可能需要的哪些东西，然后对这些东西做一个标准化的定义。提升Al开发效率形成的一种约定俗成的架构</p>
<p>向量搜索是一种寻找相似度高的数据项的方法。在这里，它被用来实现数据库和表的中英文映射。</p>
<p>将数据库某个数据在页面上显示，并针对此页面进行搜索引擎优化（SEO）。这样一来，GPT便成为搜索引擎，直接为用户推荐相应页面。这个方法可以简化开发过程，并避免过度关注langchain和向量。  </p>
<p><a href="https://github.com/nftblackmagic/flask-langchain">https://github.com/nftblackmagic/flask-langchain</a>  </p>
<p>通过矢量数据库实现长期记忆<br>通过 langchain 实现网络浏览能力<br>与网站和人互动<br>通过 Document API 实现写作能力<br>保存代理的运行<br>用户和身份验证<br>通过 Stripe 提供较低限制的付费版本（降低我们的基础设施成本)</p>
]]></content>
      <categories>
        <category>WebBackend/Python/gpt</category>
      </categories>
  </entry>
  <entry>
    <title>OpenAi Embeddings</title>
    <url>/2023/05/30/WebBackend/Python/LLMOps/NLP/</url>
    <content><![CDATA[<h2 id="什么是NLP"><a href="#什么是NLP" class="headerlink" title="什么是NLP"></a>什么是NLP</h2><p>不完全是。NLP（自然语言处理）是一个广泛的领域，研究计算机如何理解、分析和生成人类语言。词嵌入和上下文化词表示模型只是 NLP 领域的一部分。</p>
<p>预训练词嵌入（如 Word2Vec、GloVe 和 FastText）将词汇转换为固定大小的数值向量，这些向量可以捕捉单词之间的语义和句法关系。它们通常是非语境化的，即每个单词都有一个固定的向量表示，而不考虑其在特定句子或上下文中的用法。</p>
<p>与此相反，上下文化词表示模型（如 BERT、GPT 等）可以根据给定的输入序列生成单词的向量表示。这意味着相同的单词在不同上下文中可能具有不同的向量表示。这些模型通常基于Transformer架构，并通过大量文本数据进行预训练，从而有效地学习到更丰富的语言特征。</p>
<p>所以，NLP 不仅限于预训练词嵌入和上下文化词表示模型。它还包括各种任务，如机器翻译、情感分析、实体识别、问答系统、文本摘要等。预训练词嵌入和上下文化词表示模型是 NLP 中的一种技术，用于学习有效的文本表示，以便计算机可以理解和处理自然语言数据。</p>
<p>OpenAI Embeddings 是一个词嵌入模型，用于将文本中的单词转换为数值向量表示。除此之外，还有其他流行的词嵌入模型可以作为替代方案。以下是一些广泛使用的替代方案：</p>
<ol>
<li><p>Word2Vec：由谷歌开发的一种流行的词嵌入模型，能够捕捉词汇间的语义和句法关系。它包括两种实现方法：CBOW（Continuous Bag of Words）和Skip-gram。</p>
</li>
<li><p>GloVe：全局向量（Global Vectors）是斯坦福大学开发的一种词嵌入方法，它结合了全局矩阵分解和局部上下文窗口。GloVe 旨在创建更紧凑的向量表示，同时保留上下文信息。</p>
</li>
<li><p>FastText：由 Facebook 开发的一种用于文本分类和词嵌入的库。FastText 不仅考虑单词本身，还考虑其字符级别的 n-gram。这使得其能够处理不在训练数据集中出现的词汇（即，未登录词）。</p>
</li>
<li><p>BERT、GPT 和其他 Transformer 模型：近年来，基于 Transformer 的预训练语言模型已经成为 NLP 领域的主流。这些模型（如 BERT、GPT-2、GPT-3 等）可以生成词嵌入，同时还可以用于各种自然语言处理任务。这些模型具有强大的表示学习能力，可以捕捉更复杂的文本特征。</p>
</li>
</ol>
<p>这些替代方案中有些可能需要进行额外的预处理和调整以适应您的需求，但它们都是在 NLP 领域广泛使用和验证过的词嵌入技术。</p>
<p>重新生成</p>
]]></content>
      <categories>
        <category>WebBackend/Python/LLMOps</category>
      </categories>
      <tags>
        <tag>NLP</tag>
      </tags>
  </entry>
  <entry>
    <title>Sentence Embeddings</title>
    <url>/2023/05/31/WebBackend/Python/LLMOps/Sentence%20Embeddings/</url>
    <content><![CDATA[<h2 id="关于Sentence-Embeddings"><a href="#关于Sentence-Embeddings" class="headerlink" title="关于Sentence Embeddings"></a>关于Sentence Embeddings</h2><p>句子嵌入（Sentence Embeddings）是将一个句子转换为向量表示的技术。这种向量表示捕捉了句子的语义信息和上下文，可以用于下游自然语言处理（NLP）任务，如分类、聚类、相似度计算等。<br>句子嵌入技术通常涉及将句子中的每个单词转换为向量，然后将这些向量汇总为代表整个句子的向量。有许多不同的方法可以生成句子向量，例如Word2Vec、GloVe、FastText模型以及最近的Transformer模型等。<br>将句子嵌入用作特征向量可以大大简化许多NLP任务，并提高模型的准确性和效率。</p>
<h2 id="OpenAI-Embeddings-API"><a href="#OpenAI-Embeddings-API" class="headerlink" title="OpenAI Embeddings API"></a>OpenAI Embeddings API</h2><p>OpenAI Embeddings API提供了一种方便、高效的方式来生成<a href="https://github.com/shibing624/nlp-tutorial/blob/main/01_word_embedding/01_%E6%96%87%E6%9C%AC%E8%A1%A8%E7%A4%BA.ipynb">文本表示</a></p>
<h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><ol>
<li><a href="https://zhuanlan.zhihu.com/p/622017658">LangChain - 打造自己的GPT（五）拥有本地高效、安全的Sentence Embeddings For Chinese &amp; English</a></li>
</ol>
]]></content>
      <categories>
        <category>WebBackend/Python/LLMOps</category>
      </categories>
      <tags>
        <tag>NLP</tag>
      </tags>
  </entry>
  <entry>
    <title>Vector database</title>
    <url>/2023/05/29/WebBackend/Python/LLMOps/Vector%20database/</url>
    <content><![CDATA[<h2 id="向量数据库是什么？-What-are-Vector-database"><a href="#向量数据库是什么？-What-are-Vector-database" class="headerlink" title="向量数据库是什么？ (What are Vector database?)"></a>向量数据库是什么？ (What are Vector database?)</h2><ol>
<li><p>向量定义：<br> 向量是一种数学概念，在二维或三维空间中表示方向和大小的物体。它通常用箭头表示，箭头指向表示方向，箭头的长度表示大小。两个向量可以相加或相减，也可以与一个数相乘。向量在计算机科学中被广泛应用，例如计算机图形学、机器学习和搜索引擎等领域。</p>
</li>
<li><p>向量数据库索引和存储方式：<br> 向量数据库是一种专门存储和检索向量的数据库。它可以高效地索引大量向量数据，并通过特定的算法来进行搜索。通常，向量数据库将数据分布在多维空间中，使用空间数据结构（例如KD树、R树等）进行索引，以提高搜索效率。</p>
</li>
<li><p>向量检索与优化方式：<br> 向量检索是指在向量数据库中根据给定向量查找最相似向量的过程。它使用一种度量方法（如欧氏距离或余弦相似性）来衡量不同向量之间的相似度，并返回相似度最高的向量。</p>
</li>
</ol>
<p>向量数据库用于存储和检索向量嵌入（embeddings），以便于高速查找和相似性搜索。一些常见的向量数据库有：</p>
<ul>
<li>Milvus（<a href="https://github.com/milvus-io/milvus%EF%BC%89">https://github.com/milvus-io/milvus）</a></li>
<li>Pinecone（<a href="https://www.pinecone.io/%EF%BC%89">https://www.pinecone.io/）</a></li>
<li>Qdrant（<a href="https://github.com/qdrant/qdrant%EF%BC%89">https://github.com/qdrant/qdrant）</a></li>
<li>Weaviate（<a href="https://github.com/weaviate/weaviate%EF%BC%89">https://github.com/weaviate/weaviate）</a></li>
<li>Chroma（<a href="https://github.com/chroma-core/chroma%EF%BC%89">https://github.com/chroma-core/chroma）</a><br>对比：<a href="https://mp.weixin.qq.com/s/8ptKCO7HHElGJCn5JFgScA">向量数据库大PK｜来自百万级数据的基准测试</a></li>
</ul>
<h3 id="向量检索和优化方式-Vector-Retrieval-and-Optimization"><a href="#向量检索和优化方式-Vector-Retrieval-and-Optimization" class="headerlink" title="向量检索和优化方式 (Vector Retrieval and Optimization)"></a>向量检索和优化方式 (Vector Retrieval and Optimization)</h3><p><strong>GPTCache</strong>（<a href="https://link.zhihu.com/?target=https://github.com/zilliztech/GPTCache">https://github.com/zilliztech/GPTCache</a>）。<br>它使用向量数据库技术为各种 LLM 应用提供一层语义缓存，能够存储 LLM 响应，从而显著减少检索数据所需的时间、降低 API 调用开销、提升应用可扩展性。<br><strong>有了 GPTCache，受制于性能优化与成本的 LLM 应用，可以挣脱这些束缚，真正做到省钱、省时、省力了</strong>。<br>GPTCache 项目由全球领先的向量数据库提供商 Zilliz 开发，该团队开源了首个向量数据库项目 Milvus，并推出了云端全托管的向量数据库服务 Zilliz Cloud。<br>GPTCache 的灵感源于解决开源项目知识库应用 OSSChat 的性能瓶颈和成本问题，通过添加语义缓存层，提升响应速度并节省成本。</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/202305292239230.png" alt="image.png"></p>
<p>GPTCache 的灵感起源于开发团队在回答开源项目 Milvus 社区用户的问题时遇到的重复性问题和非实时反馈的问题。为了解决这些问题，团队创建了OSSChat，一个基于ChatGPT的集成开源项目知识库。OSSChat旨在快速、有效地帮助用户解决在GitHub上开源项目中遇到的各种基础问题，如文档查找、安装指南等，提高用户的问题解决效率，并减轻开发团队的负担。</p>
<p>OSSChat 是一款旨在帮助开发者解决开源项目问题的应用，但随着用户数量的增加，团队意识到了基于 ChatGPT 的性能和成本限制。为了提升 OSSChat 的性能并降低使用成本，团队开始寻找解决方案。</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/202305300029372.png" alt="image.png"></p>
<p>在一次午饭闲聊中，团队讨论了计算机发展历程中缓存层的重要性。他们意识到通过添加一个缓存层来存储 LLM 生成的响应，可以显著提高 OSSChat 的响应速度并节省成本。这个想法最终演变成了 GPTCache 项目，它成功地解决了 OSSChat 面临的挑战。</p>
<p>因此，GPTCache 的起源与团队在开发 OSSChat 过程中遇到的性能和成本问题密切相关，其解决方向是引入缓存层以优化系统性能。</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/202305292242977.png" alt="image.png"></p>
<p>如果需要对存量的大规模文档进行vector存储的话，可能使用基于磁盘（disk-based）的数据库进行缓存可能是更好的选择。<br>GPTCache是基于此概念搭建的，而且也是面向LLM专门搭建的，功能性上可能是开箱即用的。(<a href="https://github.com/zilliztech/GPTCache">https://github.com/zilliztech/GPTCache</a>)</p>
<p>可以降低调用GPT token耗费、提高GPT响应速度的库。它使用语义缓存的方式将历史提问记录到本地，再下次提问相似问题时可直接返回而不走大语言模型。</p>
<h4 id="向量索引-Vector-Indexing"><a href="#向量索引-Vector-Indexing" class="headerlink" title="向量索引 (Vector Indexing)"></a>向量索引 (Vector Indexing)</h4><p>向量索引是一种查找和检索向量的方法，可以快速找到与给定向量最相似的向量。常见的向量索引方法有：</p>
<ul>
<li>树索引 (Tree Index)</li>
<li>量化索引 (Quantization Index)</li>
<li>图索引 (Graph Index)</li>
</ul>
<p>这些方法的目标是尽可能减少访问向量的次数或者使计算距离更快。详细对比可参考：<a href="https://github.com/erikbern/ann-benchmarks/">https://github.com/erikbern/ann-benchmarks/</a></p>
<h5 id="树索引-Tree-Index"><a href="#树索引-Tree-Index" class="headerlink" title="树索引 (Tree Index)"></a>树索引 (Tree Index)</h5><p>树索引通常不是一个好的选择，因为在高维空间中，它容易受到维数诅咒的影响。<br><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/202305292245966.png" alt="image.png"></p>
<h5 id="量化索引-Quantization-Index"><a href="#量化索引-Quantization-Index" class="headerlink" title="量化索引 (Quantization Index)"></a>量化索引 (Quantization Index)</h5><p>量化索引通过降维来加速距离计算，从而提高搜索速度。</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/202305292250008.png" alt="image.png"></p>
<h5 id="图索引-Graph-Index"><a href="#图索引-Graph-Index" class="headerlink" title="图索引 (Graph Index)"></a>图索引 (Graph Index)</h5><p>图索引是一种利用图数据结构来进行搜索的方法，如 HNSW（Hierarchical Navigable Small World）<br><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/202305292257890.png" alt="image.png"></p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/202305292259290.png" alt="image.png"><br><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/202305292301015.png" alt="image.png"></p>
<h3 id="HNSW"><a href="#HNSW" class="headerlink" title="HNSW"></a>HNSW</h3><p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/202305292302891.png" alt="image.png"></p>
<h3 id="向量搜索的高级功能-Advanced-Features-of-Vector-Search"><a href="#向量搜索的高级功能-Advanced-Features-of-Vector-Search" class="headerlink" title="向量搜索的高级功能 (Advanced Features of Vector Search)"></a>向量搜索的高级功能 (Advanced Features of Vector Search)</h3><p>向量搜索不仅限于最近邻查找（ANN），还可以实现一些高级功能：</p>
<ul>
<li>带过滤条件的向量搜索 (Vector search with filter)</li>
<li>带关键字的向量搜索 (Vector search with keyword)</li>
<li>多向量搜索 (Multi-vector search)</li>
</ul>
<p>此外，还可以使用联合嵌入（Joint embedding）和多流检索（Multi-streamed retrieval）等技术，以提高大规模检索的效果。<br><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/202305292304972.png" alt="image.png"></p>
<p>Vector search with keyword<br><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/202305292309571.png" alt="image.png"></p>
<h3 id="Multi-vector-search"><a href="#Multi-vector-search" class="headerlink" title="Multi-vector search"></a>Multi-vector search</h3><p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/202305292312079.png" alt="image.png"></p>
<p>Illustration of splitting or chunking of Wikipedia articles into multiple paragraphs to overcome model length<br>limitations.There are several strategies for chunking longer text,from simple splitting to more advanced methods<br>using sliding windows,so the generated chunks have overlapping wordpieces</p>
<p>Joint embedding<br>Multi-streamed retrieval</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/202305292314569.png" alt="image.png"></p>
]]></content>
      <categories>
        <category>WebBackend/Python/gpt</category>
      </categories>
      <tags>
        <tag>LLM</tag>
      </tags>
  </entry>
  <entry>
    <title>距离计算公式</title>
    <url>/2023/06/06/WebBackend/Python/LLMOps/%E8%B7%9D%E7%A6%BB%E8%AE%A1%E7%AE%97%E5%85%AC%E5%BC%8F/</url>
    <content><![CDATA[<p>当处理向量数据时，距离计算是一种常见的操作，用于衡量向量之间的相似度或差异程度。不同的距离计算公式适用于不同类型的向量数据。</p>
<ol>
<li><p>欧氏距离（L2距离）： 欧氏距离是最常见的距离度量方法之一，用于计算浮点型向量之间的距离。它计算的是向量之间的直线距离，即两个向量在每个维度上差值的平方和的平方根。欧氏距离主要应用于计算机视觉领域，例如图像相似性比较和目标检测。</p>
</li>
<li><p>内积（IP）： 内积是另一种常见的距离度量方法，主要应用于处理浮点型向量的自然语言处理（NLP）领域。内积计算的是两个向量之间的点积，即对应维度上的元素相乘后求和。内积越大，表示两个向量越相似。</p>
</li>
</ol>
<p>对于二值型向量，常见的距离计算公式包括：</p>
<ol start="3">
<li><p>汉明距离（Hamming距离）： 汉明距离用于比较两个等长的二进制向量，计算的是在相同位置上不同的位数。汉明距离越小，表示两个二进制向量越相似。在自然语言处理中，汉明距离常用于比较文本字符串的相似性。</p>
</li>
<li><p>杰卡德距离（Jaccard距离）： 杰卡德距离衡量的是两个集合之间的不相交部分与总部分的比例。对于二值型向量，可以将其看作是包含的元素与整个元素集之间的相似度度量。杰卡德距离越小，表示两个向量越相似。在化学分子式检索领域常被应用。</p>
</li>
<li><p>谷本距离（Tanimoto距离）： 谷本距离是一种二值型向量之间的相似度度量方法，类似于杰卡德距离。谷本距离通过计算两个向量的交集与并集之间的比例来衡量相似性。</p>
</li>
<li><p>超结构（Superstructure）： 超结构是指化学分子的一种抽象表示形式，它关注的是分子中的整体结构和连接方式，而不考虑具体的原子或它们之间的细节。超结构表示的是分子的整体形状和拓扑结构。在相似性比较中，可以通过比较分子的超结构来评估它们之间的相似程度。常用的超结构比较方法包括图论算法和拓扑描述符。</p>
</li>
<li><p>子结构（Substructure）： 子结构是指化学分子中的一个特定的部分或子图，它关注的是分子中的局部结构和功能基团。通过比较分子的子结构，可以识别和比较分子中的特定功能或基团。子结构比较常用于分子搜索和药物设计领域，用于查找包含特定功能的分子或比较分子之间的相似性。子结构比较可以基于化学键、原子类型、立体化学等属性进行。</p>
</li>
</ol>
<p>在化学领域，超结构和子结构的比较和匹配可以帮助识别相似的分子或化合物，从而在药物研发、分子数据库搜索和化学信息检索等应用中发挥重要作用。这些方法和技术能够量化化学分子之间的相似性，为化学领域的研究和应用提供支持。</p>
]]></content>
      <categories>
        <category>WebBackend/Python/LLMOps</category>
      </categories>
  </entry>
  <entry>
    <title>索引类型</title>
    <url>/2023/06/06/WebBackend/Python/LLMOps/%E7%B4%A2%E5%BC%95%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<p>索引类型：</p>
<ul>
<li>HNSW（Hierarchical Navigable Small World）：性能高、精确度高、内存消耗大。适用于需要同时追求性能和精确度，且有充足资金支持的大规模数据集。</li>
<li>FLAT：不压缩向量，保证精确搜索结果，性能稍低但精确度最高，内存消耗次于HNSW。适用于对精确度要求高、对性能要求不高且数据集相对较小的情况（不建议在大规模数据集中使用，因为它会将所有数据一一比对）。</li>
<li>IVF_FLAT：类似调表的索引，将向量数据划分为多个组，通过比较目标输入向量与每个聚类中心的距离来查询数据。查询时可以设置nprobe参数，选择最接近搜索向量的几个组进行逐个比对。相对节省资源，对精确度有一定损失。</li>
<li>推荐参数设置：<ul>
<li>nlist：建议设为4 × sqrt(n)，其中n表示数据集中的实体数量。</li>
<li>nprobe：根据实际情况调节。</li>
</ul>
</li>
</ul>
<p>其他索引类型：</p>
<ul>
<li>IVF_SQ8：具有数据压缩功能（内存节省70-75%），适用于资源受限的情况下代替IVF_FLAT，但精确度会降低。</li>
<li>IVF_PQ：将高维数据转化为多个低维数据，进一步节省资源，但精确度更低。</li>
<li>ANNOY：树形索引，适用于低维度向量。关于其适用范围和特点没有具体介绍。</li>
<li>DISKANN：磁盘索引，内存消耗最小，但需要高性能的SSD，并需要自行编译。实际上还是需要部分内存，大约是全部数据的1&#x2F;6。</li>
</ul>
]]></content>
      <categories>
        <category>WebBackend/Python/LLMOps</category>
      </categories>
  </entry>
  <entry>
    <title>MySQL笔记(office)</title>
    <url>/2022/09/25/WebBackend/Java/DBMS/MySql/MySQL%E7%AC%94%E8%AE%B0(office)/</url>
    <content><![CDATA[<h1 id="数据库基本知识"><a href="#数据库基本知识" class="headerlink" title="数据库基本知识"></a>数据库基本知识</h1><h2 id="数据库介绍"><a href="#数据库介绍" class="headerlink" title="数据库介绍"></a>数据库介绍</h2><h3 id="数据库概念"><a href="#数据库概念" class="headerlink" title="数据库概念"></a>数据库概念</h3><ul>
<li>数据库（Database）是按照数据结构来组织、存储和管理数据的仓库</li>
</ul>
<h3 id="数据库的发展史"><a href="#数据库的发展史" class="headerlink" title="数据库的发展史"></a>数据库的发展史</h3><ul>
<li>最早期以穿孔卡片的方式，按照一定的排列方式记录数据</li>
</ul>
<h3 id="数据库管理系统DBMS"><a href="#数据库管理系统DBMS" class="headerlink" title="数据库管理系统DBMS"></a>数据库管理系统DBMS</h3><ul>
<li>是一种操作和管理数据库的大型软件，用于建立，使用和维护数据库，简称DBSN</li>
<li>它对数据库进行统一的管理和控制，以保证数据库的安全性和完整性</li>
<li>数据库管理系统是数据库的核心，是管理数据库的软件</li>
<li>我们一般说的数据库，就是DBMS，数据库管理系统</li>
</ul>
<p>常见的数据库</p>
<ul>
<li>Oracle ：运行稳定，可移植性高，功能齐全，性能超群，适用于大型企业领域</li>
<li>DB2：速度快，可靠性好，适用于海量数据，恢复性极强，适用于大中型企业领域</li>
<li>Mysql：开源，体积小，速度快，适用于中小型企业领域</li>
<li>SQL Server：全面，效率高，界面友好，操作容易，但是不跨平台，适用于中小型企业领域</li>
</ul>
<h2 id="专业术语"><a href="#专业术语" class="headerlink" title="专业术语"></a>专业术语</h2><p>表：具有固定的列数和任意的行数</p>
<table>
<thead>
<tr>
<th>Sno</th>
<th>SNAME</th>
<th>Sgender</th>
<th>Sheight</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>小红</td>
<td>18</td>
<td>165</td>
</tr>
<tr>
<td>2</td>
<td>小兰</td>
<td>19</td>
<td>170</td>
</tr>
<tr>
<td>3</td>
<td>刘德华</td>
<td>25</td>
<td>179</td>
</tr>
<tr>
<td>4</td>
<td>刘能</td>
<td>20</td>
<td>173</td>
</tr>
<tr>
<td>5</td>
<td>赵四</td>
<td>30</td>
<td>166</td>
</tr>
<tr>
<td>6</td>
<td>谢大脚</td>
<td>27</td>
<td>171</td>
</tr>
<tr>
<td>7</td>
<td>王祖贤</td>
<td>22</td>
<td>169</td>
</tr>
<tr>
<td>8</td>
<td>郭靖</td>
<td>24</td>
<td>181</td>
</tr>
<tr>
<td>9</td>
<td>黄蓉</td>
<td>23</td>
<td>161</td>
</tr>
<tr>
<td>10</td>
<td>黄老师</td>
<td>43</td>
<td>175</td>
</tr>
</tbody></table>
<ul>
<li>列<ul>
<li>一个数据项Field字段</li>
</ul>
</li>
<li>行<ul>
<li>一条记录row</li>
</ul>
</li>
<li>数据库<ul>
<li>数据库是一些关联表的集合</li>
</ul>
</li>
<li>主键<ul>
<li>主键是唯一的，一个数据表只能包含一个主键，可以使用主键来查询数据</li>
</ul>
</li>
<li>外键<ul>
<li>外键用于关联两个表</li>
</ul>
</li>
<li>索引<ul>
<li>使用索引可快速访问数据库表中的特定信息，索引是对数据库表中的一列或多列的值进行排序的一种结构，类似于书籍的目录。</li>
</ul>
</li>
</ul>
<h2 id="MySql数据库2022"><a href="#MySql数据库2022" class="headerlink" title="MySql数据库2022"></a>MySql数据库2022</h2><h3 id="9-22"><a href="#9-22" class="headerlink" title="9.22"></a>9.22</h3><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">#查询班级中所有学生<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> students;<br><br>#查询班级中所有男生<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> students <span class="hljs-keyword">WHERE</span> stu_sex<span class="hljs-operator">=</span><span class="hljs-string">&#x27;男&#x27;</span>;<br><br>#建表的语句<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> teachers(<br>	t_id <span class="hljs-type">INT</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">PRIMARY</span> KEY,<br>	t_name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>	t_age <span class="hljs-type">INT</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>	t_sex <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>	t_height <span class="hljs-keyword">DOUBLE</span>(<span class="hljs-number">255</span>,<span class="hljs-number">2</span>)<br>);<br><br>#添加一条教师信息<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> teachers(t_id,t_name,t_sex,t_age,t_height)<br><span class="hljs-keyword">VALUE</span>(<span class="hljs-number">202201</span>,&quot;孔子&quot;,&quot;男&quot;,<span class="hljs-number">80</span>,<span class="hljs-number">1.88</span>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> teachers(t_id,t_name,t_sex,t_age)<br><span class="hljs-keyword">VALUE</span>(<span class="hljs-number">202202</span>,&quot;墨子&quot;,&quot;男&quot;,<span class="hljs-number">70</span>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> teachers(t_id,t_name,t_sex,t_age,t_height)<br><span class="hljs-keyword">VALUE</span>(<span class="hljs-number">202203</span>,&quot;孟子&quot;,&quot;男&quot;,<span class="hljs-number">60</span>,<span class="hljs-keyword">NULL</span>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> teachers <span class="hljs-keyword">VALUE</span>(<span class="hljs-number">202204</span>,&quot;韩非子&quot;,<span class="hljs-number">77</span>,&quot;男&quot;,<span class="hljs-keyword">NULL</span>);<br><br>#插入一条老师信息，姓名诸葛亮，男，<span class="hljs-number">34</span>岁,<span class="hljs-number">1.89</span>,教师编号<span class="hljs-number">202201</span> <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> teachers(t_name,t_sex,t_age,t_height,t_id)<br><span class="hljs-keyword">VALUE</span>(&quot;诸葛亮&quot;,&quot;男&quot;,<span class="hljs-number">34</span>,<span class="hljs-number">1.89</span>,<span class="hljs-number">202205</span>);<br><br>#插入一条老师信息，教师编号<span class="hljs-number">202202</span>，庞统，男，<span class="hljs-number">33</span>岁，身高不详 <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> teachers(t_id,t_name,t_sex,t_age)<br><span class="hljs-keyword">VALUE</span>(<span class="hljs-number">202206</span>,&quot;庞统&quot;,&quot;男&quot;,<span class="hljs-number">33</span>);<br><br>#添加三条学生记录 刘备，<span class="hljs-number">35</span>，男，身高<span class="hljs-number">1.78</span>，体重不详，编号<span class="hljs-number">202211</span><br>#编号<span class="hljs-number">202212</span>，关羽，<span class="hljs-number">34</span>，男，身高<span class="hljs-number">2.1</span>，体重<span class="hljs-number">100</span>kg<br>#编号<span class="hljs-number">202213</span>，张飞，<span class="hljs-number">33</span>，男，身高<span class="hljs-number">1.8</span>，体重<span class="hljs-number">90</span>kg<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> students <span class="hljs-keyword">VALUES</span><br>(<span class="hljs-number">202211</span>,&quot;刘备&quot;,<span class="hljs-number">35</span>,&quot;男&quot;,<span class="hljs-number">1.78</span>,<span class="hljs-keyword">NULL</span>),<br>(<span class="hljs-number">202212</span>,&quot;关羽&quot;,<span class="hljs-number">34</span>,&quot;男&quot;,<span class="hljs-number">2.1</span>,<span class="hljs-number">100</span>),<br>(<span class="hljs-number">202213</span>,&quot;张飞&quot;,<span class="hljs-number">33</span>,&quot;男&quot;,<span class="hljs-number">1.8</span>,<span class="hljs-number">90</span>);<br></code></pre></td></tr></table></figure>

<h3 id="9-23"><a href="#9-23" class="headerlink" title="9.23"></a>9.23</h3><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> staff(<br>	sta_id <span class="hljs-type">INT</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">PRIMARY</span> KEY,<br>	sta_name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>	sta_department <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>),<br>	sta_sex <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>	sta_age <span class="hljs-type">INT</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>	sta_salary <span class="hljs-keyword">DOUBLE</span>(<span class="hljs-number">255</span>,<span class="hljs-number">2</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>	sta_phone <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>	sta_marital <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>)<br>);<br><br>#一次性录入三条员工信息：<br>#开发部的王建国，男，<span class="hljs-number">29</span>岁，员工号<span class="hljs-number">201904</span>，工资<span class="hljs-number">10</span>k，<span class="hljs-number">18866667777</span>，已婚；<br>#人事部的魏淑芬，女，<span class="hljs-number">29</span>岁，至今未婚，员工号<span class="hljs-number">201702</span>，<span class="hljs-number">13366669999</span>，工资<span class="hljs-number">7.5</span>k；<br>#测试部的夏雨荷，女，<span class="hljs-number">23</span>岁，员工号<span class="hljs-number">202207</span>，工资<span class="hljs-number">4</span>k，<span class="hljs-number">15922223333</span>，婚姻状况未知；<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> staff(sta_name,sta_sex,sta_age,sta_id,sta_salary,sta_phone,sta_marital,sta_department) <span class="hljs-keyword">VALUES</span><br>(&quot;王建国&quot;,&quot;男&quot;,<span class="hljs-number">29</span>,<span class="hljs-number">201904</span>,<span class="hljs-number">10000</span>,&quot;18866667777&quot;,&quot;已婚&quot;,&quot;开发部&quot;),<br>(&quot;魏淑芬&quot;,&quot;女&quot;,<span class="hljs-number">29</span>,<span class="hljs-number">201702</span>,<span class="hljs-number">7500</span>,&quot;13366669999&quot;,&quot;至今未婚&quot;,&quot;人事部&quot;),<br>(&quot;夏雨荷&quot;,&quot;女&quot;,<span class="hljs-number">23</span>,<span class="hljs-number">202207</span>,<span class="hljs-number">4000</span>,&quot;13366669999&quot;,&quot;未知&quot;,&quot;测试部&quot;);<br><br>#录入一条员工信息：<br>#开发部吴邪，年龄<span class="hljs-number">22</span>岁，男，员工号<span class="hljs-number">202220</span>，工资<span class="hljs-number">2</span>k，联系方式<span class="hljs-number">13155551111</span>，未婚；<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> staff(sta_name,sta_sex,sta_age,sta_id,sta_salary,sta_phone,sta_marital,sta_department) <span class="hljs-keyword">VALUE</span><br>(&quot;吴邪&quot;,&quot;男&quot;,<span class="hljs-number">22</span>,<span class="hljs-number">202220</span>,<span class="hljs-number">2000</span>,&quot;13155551111&quot;,&quot;未婚&quot;,&quot;开发部&quot;);<br><br>#把李四的身高更新为<span class="hljs-number">1.75</span><br><span class="hljs-keyword">UPDATE</span> students <span class="hljs-keyword">SET</span> stu_height <span class="hljs-operator">=</span> <span class="hljs-number">1.75</span> <span class="hljs-keyword">WHERE</span> stu_name <span class="hljs-operator">=</span> &quot;李四&quot;;<br><br>#把班级中所有学生的年龄加<span class="hljs-number">1</span>岁<br><span class="hljs-keyword">UPDATE</span> students<br><span class="hljs-keyword">SET</span> stu_age <span class="hljs-operator">=</span> stu_age <span class="hljs-operator">+</span> <span class="hljs-number">1</span>;<br><br>#把李四年龄改为<span class="hljs-number">20</span>，身高加<span class="hljs-number">2</span>里面<br><span class="hljs-keyword">UPDATE</span> students <span class="hljs-keyword">SET</span> stu_age <span class="hljs-operator">=</span> &quot;20&quot;,stu_height <span class="hljs-operator">=</span> stu_height <span class="hljs-operator">+</span> <span class="hljs-number">0.02</span> <span class="hljs-keyword">WHERE</span> stu_name <span class="hljs-operator">=</span> &quot;李四&quot;;<br><br>#删除小红的全部信息<br><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> students <span class="hljs-keyword">WHERE</span> stu_name <span class="hljs-operator">=</span> &quot;小红&quot;;<br><br>#查询出班级中年龄<span class="hljs-number">20</span>岁以下，身高<span class="hljs-number">1.65</span>以上的女生姓名，年龄，身高<br><span class="hljs-keyword">SELECT</span> stu_name,stu_age,stu_height <br><span class="hljs-keyword">FROM</span> students <br><span class="hljs-keyword">WHERE</span> stu_age<span class="hljs-operator">&lt;</span><span class="hljs-number">20</span> <span class="hljs-keyword">AND</span> stu_height<span class="hljs-operator">&gt;</span><span class="hljs-number">1.65</span>;<br>#查询出班级中身高不低于<span class="hljs-number">1.7</span>，体重不大于<span class="hljs-number">65</span>kg的所有男生信息<br><span class="hljs-keyword">SELECT</span> stu_name,stu_age,stu_height <br><span class="hljs-keyword">FROM</span> students <br><span class="hljs-keyword">WHERE</span> stu_height<span class="hljs-operator">&gt;</span><span class="hljs-number">1.7</span> <span class="hljs-keyword">AND</span> stu_weight<span class="hljs-operator">&lt;</span><span class="hljs-number">65</span>;<br>#把学号<span class="hljs-number">202204</span>,<span class="hljs-number">202206</span>,<span class="hljs-number">202208</span>三名学生的年龄加一岁<br><span class="hljs-keyword">UPDATE</span> students <br><span class="hljs-keyword">SET</span> stu_age <span class="hljs-operator">=</span> stu_age <span class="hljs-operator">+</span> <span class="hljs-number">1</span> <br><span class="hljs-keyword">WHERE</span> stu_id <span class="hljs-operator">=</span> <span class="hljs-number">202204</span> <span class="hljs-keyword">OR</span> stu_id <span class="hljs-operator">=</span> <span class="hljs-number">202206</span> <span class="hljs-keyword">OR</span> stu_id <span class="hljs-operator">=</span> <span class="hljs-number">202208</span>;<br>#找出班级中<span class="hljs-number">1.6</span>以下和<span class="hljs-number">1.8</span>以上的所有男生<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <br><span class="hljs-keyword">FROM</span> students<br><span class="hljs-keyword">WHERE</span> stu_height <span class="hljs-operator">&lt;</span> <span class="hljs-number">1.6</span> <span class="hljs-keyword">OR</span> stu_height <span class="hljs-operator">&gt;</span> <span class="hljs-number">1.8</span>;<br>#找出班级中身高<span class="hljs-number">1.62</span>以上的女生和<span class="hljs-number">1.75</span>以上的男生全部信息 <br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> students<br><span class="hljs-keyword">WHERE</span> stu_height <span class="hljs-operator">&gt;</span> <span class="hljs-number">1.62</span> <span class="hljs-keyword">AND</span> stu_sex <span class="hljs-operator">=</span> &quot;女&quot; <span class="hljs-keyword">OR</span> stu_height <span class="hljs-operator">&gt;</span> <span class="hljs-number">1.75</span> <span class="hljs-keyword">AND</span> stu_sex <span class="hljs-operator">=</span> &quot;男&quot;;<br></code></pre></td></tr></table></figure>

<h3 id="9-26"><a href="#9-26" class="headerlink" title="9.26"></a>9.26</h3><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"># 查询出班级中所有姓张的学生信息<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> students <span class="hljs-keyword">WHERE</span> stu_name <span class="hljs-keyword">LIKE</span> &quot;张%&quot;;<br><br>#查询出班级中名字由三个字组成的学生信息<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> students <span class="hljs-keyword">WHERE</span> stu_name <span class="hljs-keyword">LIKE</span> &quot;___&quot;;<br><br>#查询出班级中第二个字为&quot;杰&quot;的学生<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> students <span class="hljs-keyword">WHERE</span> stu_name <span class="hljs-keyword">LIKE</span> &quot;_杰%&quot;;<br><br>#查询出班级中名字带有&quot;杰&quot;的学生信息<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> students <span class="hljs-keyword">WHERE</span> stu_name <span class="hljs-keyword">LIKE</span> &quot;%杰%&quot;;<br><br>#查询出班级中<span class="hljs-number">1.6</span>以上的女生全部信息，按照身高升排序<br><span class="hljs-keyword">SELECT</span><br> <span class="hljs-operator">*</span> <br><span class="hljs-keyword">FROM</span><br> students <br><span class="hljs-keyword">WHERE</span><br> stu_height <span class="hljs-operator">&gt;</span> <span class="hljs-number">1.6</span> <br><span class="hljs-keyword">AND</span><br> stu_sex <span class="hljs-operator">=</span> &quot;女&quot; <br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span><br> stu_height <br><span class="hljs-keyword">ASC</span>;<br><br>#查询出班级中的年龄不大于<span class="hljs-number">22</span>的男生姓名，性别和年龄，按照年龄降序<br><span class="hljs-keyword">SELECT</span><br> stu_name <span class="hljs-keyword">AS</span> 学生姓名,<br> stu_sex <span class="hljs-keyword">AS</span> 学生性别,<br> stu_age <span class="hljs-keyword">AS</span> 学生年龄<br><span class="hljs-keyword">FROM</span><br>	students<br><span class="hljs-keyword">WHERE</span><br>	stu_age <span class="hljs-operator">&lt;</span> <span class="hljs-number">22</span><br><span class="hljs-keyword">AND</span><br>	stu_sex <span class="hljs-operator">=</span> &quot;男&quot;<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span><br>	stu_age <br><span class="hljs-keyword">DESC</span>;<br><br>#查询出班级中男生的数量<br><span class="hljs-keyword">SELECT</span><br> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">AS</span> 男生数量<br><span class="hljs-keyword">FROM</span><br>	students<br><span class="hljs-keyword">WHERE</span><br>	stu_sex <span class="hljs-operator">=</span> &quot;男&quot;;<br>	<br>#查询出班级中最大年龄和最小年龄<br><span class="hljs-keyword">SELECT</span><br>	<span class="hljs-built_in">MAX</span>(stu_age) <span class="hljs-keyword">AS</span> 最大年龄,<br>	<span class="hljs-built_in">MIN</span>(stu_age) <span class="hljs-keyword">AS</span> 最小年龄<br><span class="hljs-keyword">FROM</span><br>	students;<br>	<br>#查询班级总年龄，平均年龄<br><span class="hljs-keyword">SELECT</span><br>	<span class="hljs-built_in">SUM</span>(stu_age) <span class="hljs-keyword">AS</span> 总年龄,<br>	<span class="hljs-built_in">AVG</span>(stu_age) <span class="hljs-keyword">AS</span> 平均年龄<br><span class="hljs-keyword">FROM</span><br>	students;<br>	<br>#查询出身高不低于<span class="hljs-number">1.63</span>的名字两个字的学生学号，姓名，身高。按照身高降序排序<br><span class="hljs-keyword">SELECT</span><br> stu_id <span class="hljs-keyword">AS</span> 学号,<br> stu_name <span class="hljs-keyword">AS</span> 姓名,<br> stu_height <span class="hljs-keyword">AS</span> 身高<br><span class="hljs-keyword">FROM</span><br>	students<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span><br>	stu_height<br><span class="hljs-keyword">DESC</span>;<br><br>#查询出周姓学生的平均年龄，平均身高，平均体重;<br><span class="hljs-keyword">SELECT</span><br> <span class="hljs-built_in">AVG</span>(stu_age) <span class="hljs-keyword">AS</span> 平均年龄,<br> <span class="hljs-built_in">AVG</span>(stu_height) <span class="hljs-keyword">AS</span> 平均身高,<br> <span class="hljs-built_in">AVG</span>(stu_weight) <span class="hljs-keyword">AS</span> 平均体重<br><span class="hljs-keyword">FROM</span><br>	students<br><span class="hljs-keyword">WHERE</span><br>	stu_name <span class="hljs-keyword">LIKE</span> &quot;周%&quot;;<br><br>#查询出班级中姓张，姓王，姓李且年龄不小于<span class="hljs-number">21</span>的学生信息，按照年龄升序显示，同龄者按照身高降序；<br><span class="hljs-keyword">SELECT</span> <br> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span><br>	students<br><span class="hljs-keyword">WHERE</span><br>	stu_name <span class="hljs-keyword">LIKE</span> &quot;张%&quot; <span class="hljs-keyword">OR</span><br>	stu_name <span class="hljs-keyword">LIKE</span> &quot;王%&quot; <span class="hljs-keyword">OR</span><br>	stu_name <span class="hljs-keyword">LIKE</span> &quot;李%&quot; <span class="hljs-keyword">AND</span><br>	stu_age <span class="hljs-operator">&gt;</span> <span class="hljs-number">21</span><br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span><br>	stu_age,<br>	stu_height <span class="hljs-keyword">DESC</span>;<br>	<br># 查询出班级中低于男生平均身高的男生数量<br><span class="hljs-keyword">SELECT</span><br>	<span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">AS</span> 低于平均身高男生数量<br><span class="hljs-keyword">FROM</span><br>	students<br><span class="hljs-keyword">WHERE</span><br>	stu_height <span class="hljs-operator">&lt;</span> (<br>		<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(stu_height)<br>		<span class="hljs-keyword">FROM</span> students<br>		<span class="hljs-keyword">WHERE</span> stu_sex <span class="hljs-operator">=</span> &quot;男&quot;<br>	);<br>	<br>#查询出班级中年龄最小的学生全部信息<br><span class="hljs-keyword">SELECT</span><br>	<span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span><br>	students<br><span class="hljs-keyword">WHERE</span><br>	stu_age <span class="hljs-operator">=</span> (<br>		<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MIN</span>(stu_age)<br>		<span class="hljs-keyword">FROM</span> students<br>	);<br>	<br>#查询出班级中年龄低于班级平均年龄，身高不低于<span class="hljs-number">1.62</span>的女生姓名，年龄和身高。按照年龄升序<br><span class="hljs-keyword">SELECT</span><br>	stu_name <span class="hljs-keyword">AS</span> 姓名,<br>	stu_age <span class="hljs-keyword">AS</span> 年龄,<br>	stu_height <span class="hljs-keyword">AS</span> 身高<br><span class="hljs-keyword">FROM</span><br>	students<br><span class="hljs-keyword">WHERE</span><br>	stu_age <span class="hljs-operator">&lt;</span> (<br>		<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(stu_age)<br>		<span class="hljs-keyword">FROM</span> students<br>		<span class="hljs-keyword">WHERE</span> stu_height <span class="hljs-operator">&gt;</span> <span class="hljs-number">1.62</span> <span class="hljs-keyword">AND</span> stu_sex <span class="hljs-operator">=</span> &quot;女&quot;<br>	)<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> stu_age <span class="hljs-keyword">DESC</span>;<br><br>#查询出班级中姓张和姓刘的学生中年龄最大者的全部信息<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> students <span class="hljs-keyword">WHERE</span> stu_age<span class="hljs-operator">=</span>(<br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MAX</span>(stu_age) <span class="hljs-keyword">FROM</span> students <span class="hljs-keyword">WHERE</span> stu_name <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;张%&#x27;</span> <span class="hljs-keyword">OR</span>  stu_name <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;刘%&#x27;</span><br>)<span class="hljs-keyword">AND</span> (stu_name <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;张%&#x27;</span> <span class="hljs-keyword">OR</span>  stu_name <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;刘%&#x27;</span>);<br>	<br>#统计出班级中体重信息缺失的学生个数<br><span class="hljs-keyword">SELECT</span><br>	<span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>)<br><span class="hljs-keyword">FROM</span><br>	students<br><span class="hljs-keyword">WHERE</span><br>	stu_weight <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span>;<br>	<br>#查询出比<span class="hljs-number">202203</span>这个学生高的全部男学生信息<br><span class="hljs-keyword">SELECT</span><br>	<span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span><br>	students<br><span class="hljs-keyword">WHERE</span><br>	stu_height <span class="hljs-operator">&gt;</span> (<br>		<span class="hljs-keyword">SELECT</span> stu_height<br>		<span class="hljs-keyword">FROM</span> students<br>		<span class="hljs-keyword">WHERE</span> stu_id <span class="hljs-operator">=</span> <span class="hljs-number">202203</span><br>	)<br>	<span class="hljs-keyword">AND</span> stu_sex <span class="hljs-operator">=</span> &quot;男&quot;<br>	;<br></code></pre></td></tr></table></figure>

<h3 id="9-27"><a href="#9-27" class="headerlink" title="9.27"></a>9.27</h3><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">#查询出班级中比李四年龄大的学生姓名和年龄，按照年龄降序显示<br><span class="hljs-keyword">SELECT</span> stu_name,stu_age <span class="hljs-keyword">FROM</span> students <span class="hljs-keyword">WHERE</span> stu_age<span class="hljs-operator">&gt;</span>(<br><span class="hljs-keyword">SELECT</span> stu_age <span class="hljs-keyword">FROM</span> students <span class="hljs-keyword">WHERE</span> stu_name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;李四&#x27;</span><br>) <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> stu_age <span class="hljs-keyword">DESC</span>;<br><br>#查询出班级中有多少名女生的身高高于女生平均身高；<br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">FROM</span> students <span class="hljs-keyword">WHERE</span> stu_sex<span class="hljs-operator">=</span><span class="hljs-string">&#x27;女&#x27;</span> <span class="hljs-keyword">AND</span> stu_height<span class="hljs-operator">&gt;</span><br>(<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(stu_height) <span class="hljs-keyword">FROM</span> students <span class="hljs-keyword">WHERE</span> stu_sex<span class="hljs-operator">=</span><span class="hljs-string">&#x27;女&#x27;</span>)<br><br>#查询出最小年龄的男生全部信息<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> students <span class="hljs-keyword">WHERE</span> stu_sex<span class="hljs-operator">=</span><span class="hljs-string">&#x27;男&#x27;</span> <span class="hljs-keyword">AND</span> stu_age<span class="hljs-operator">=</span><br>(<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MIN</span>(stu_age) <span class="hljs-keyword">FROM</span> students <span class="hljs-keyword">WHERE</span> stu_sex<span class="hljs-operator">=</span><span class="hljs-string">&#x27;男&#x27;</span>); <br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> scores <span class="hljs-keyword">VALUES</span><br>(<span class="hljs-number">202215</span>,<span class="hljs-string">&#x27;语文&#x27;</span>,<span class="hljs-number">100</span>),<br>(<span class="hljs-number">202215</span>,<span class="hljs-string">&#x27;数学&#x27;</span>,<span class="hljs-keyword">NULL</span>),<br>(<span class="hljs-number">202215</span>,<span class="hljs-string">&#x27;英语&#x27;</span>,<span class="hljs-number">77</span>);<br><br>#查询出缺考和挂科的学生学号和姓名；<br><span class="hljs-keyword">SELECT</span> stu_id,stu_name <span class="hljs-keyword">FROM</span> students<br><span class="hljs-keyword">WHERE</span> stu_id <span class="hljs-keyword">in</span><br>(<span class="hljs-keyword">SELECT</span> sc_id <span class="hljs-keyword">FROM</span> scores <span class="hljs-keyword">WHERE</span> IFNULL(sc_score,<span class="hljs-number">0</span>)<span class="hljs-operator">&lt;</span><span class="hljs-number">60</span>);<br><br>#查询出学号<span class="hljs-number">202205</span>这个学生的总成绩；<br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">SUM</span>(sc_score) <span class="hljs-keyword">FROM</span> scores <span class="hljs-keyword">WHERE</span> sc_id<span class="hljs-operator">=</span><span class="hljs-number">202205</span><br><br>#查询出语文成绩大于<span class="hljs-number">85</span>分的男生学号，姓名和性别；<br><span class="hljs-keyword">SELECT</span> stu_id,stu_name,stu_sex <span class="hljs-keyword">FROM</span> students <span class="hljs-keyword">WHERE</span> <br>stu_id <span class="hljs-keyword">in</span> <br>(<span class="hljs-keyword">SELECT</span> sc_id <span class="hljs-keyword">FROM</span> scores <span class="hljs-keyword">WHERE</span> sc_sub<span class="hljs-operator">=</span><span class="hljs-string">&#x27;语文&#x27;</span> <span class="hljs-keyword">AND</span> sc_score<span class="hljs-operator">&gt;</span><span class="hljs-number">85</span>) <span class="hljs-keyword">AND</span> stu_sex<span class="hljs-operator">=</span><span class="hljs-string">&#x27;男&#x27;</span>;<br><br><br>#查询英语最高分的学生学号，姓名，性别，年龄；<br><span class="hljs-keyword">SELECT</span> stu_id,stu_name,stu_sex,stu_age <span class="hljs-keyword">FROM</span> students <span class="hljs-keyword">WHERE</span><br>stu_id <span class="hljs-keyword">in</span> (<span class="hljs-keyword">SELECT</span> sc_id <span class="hljs-keyword">FROM</span> scores <span class="hljs-keyword">WHERE</span> sc_sub<span class="hljs-operator">=</span><span class="hljs-string">&#x27;英语&#x27;</span> <span class="hljs-keyword">and</span> sc_score<span class="hljs-operator">=</span>(<br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MAX</span>(sc_score) <span class="hljs-keyword">FROM</span> scores <span class="hljs-keyword">WHERE</span> sc_sub<span class="hljs-operator">=</span><span class="hljs-string">&#x27;英语&#x27;</span><br>));<br><br>#查询出数学及格的学生数量；<br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">FROM</span> scores <span class="hljs-keyword">WHERE</span> sc_sub<span class="hljs-operator">=</span><span class="hljs-string">&#x27;数学&#x27;</span> <span class="hljs-keyword">AND</span> sc_score<span class="hljs-operator">&gt;=</span><span class="hljs-number">60</span>;<br><br><br>#查询出班级中男生女生分别多少人<br><span class="hljs-keyword">SELECT</span> stu_sex <span class="hljs-keyword">AS</span> 性别,<span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">AS</span> 人数 <span class="hljs-keyword">FROM</span> students <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> stu_sex;<br>#查询班级中分组后男女的名字<br><span class="hljs-keyword">SELECT</span>  stu_sex,GROUP_CONCAT(stu_name) <span class="hljs-keyword">FROM</span> students <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> stu_sex;<br>#查询出每个人的学号和总成绩<br><span class="hljs-keyword">SELECT</span> sc_id,<span class="hljs-built_in">SUM</span>(sc_score) <span class="hljs-keyword">FROM</span> scores <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> sc_id<br><br>#查询出张三，李四，王五分别的总成绩，按照总成绩降序显示<br><br><span class="hljs-keyword">SELECT</span> sc_id,<span class="hljs-built_in">SUM</span>(sc_score) <span class="hljs-keyword">FROM</span> scores <span class="hljs-keyword">WHERE</span> sc_id <span class="hljs-keyword">in</span> (<br><span class="hljs-keyword">SELECT</span> stu_id <span class="hljs-keyword">FROM</span> students <span class="hljs-keyword">WHERE</span> stu_name <span class="hljs-keyword">in</span> (<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-string">&#x27;王五&#x27;</span>)<br>) <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> sc_id <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> <span class="hljs-built_in">SUM</span>(sc_score) <span class="hljs-keyword">DESC</span>;<br><br>#查询出班级中平均分大于<span class="hljs-number">75</span>的学生学号和姓名<br><span class="hljs-keyword">SELECT</span> stu_id,stu_name <span class="hljs-keyword">FROM</span> students <span class="hljs-keyword">WHERE</span> stu_id <span class="hljs-keyword">in</span> <br>(<span class="hljs-keyword">SELECT</span> sc_id <span class="hljs-keyword">FROM</span> scores <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> sc_id <span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">AVG</span>(IFNULL(sc_score,<span class="hljs-number">0</span>))<span class="hljs-operator">&gt;</span><span class="hljs-number">75</span>);<br></code></pre></td></tr></table></figure>

<h3 id="9-28"><a href="#9-28" class="headerlink" title="9.28"></a>9.28</h3><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">#查询出班级中每名女生的学号，姓名，性别，总成绩及平均分<br>#查询出本轮考试中各科挂科及缺考的总人数<br>#查询出低于班级整体平均分的学生全部信息<br>#查询出比<span class="hljs-number">202205</span>总成绩高的学生学号，姓名及总成绩<br>#查询各科成绩的第一名的学生学号，姓名和对应科目及成绩<br></code></pre></td></tr></table></figure>

<h3 id="9-29"><a href="#9-29" class="headerlink" title="9.29"></a>9.29</h3><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">#查询出班级中每名女生的学号，姓名，性别，总成绩及平均分<br><span class="hljs-keyword">SELECT</span> stu_id,stu_name,stu_sex,<span class="hljs-built_in">SUM</span>(sc_score),<span class="hljs-built_in">AVG</span>(IFNULL(sc_score,<span class="hljs-number">0</span>))<br><span class="hljs-keyword">FROM</span> students,scores<br><span class="hljs-keyword">WHERE</span> stu_id<span class="hljs-operator">=</span>sc_id <span class="hljs-keyword">AND</span> stu_sex<span class="hljs-operator">=</span><span class="hljs-string">&#x27;女&#x27;</span><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> sc_id;<br><br>#查询出本轮考试中各科挂科及缺考的总人数<br><span class="hljs-keyword">SELECT</span> sc_sub,<span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <br><span class="hljs-keyword">FROM</span> scores<br><span class="hljs-keyword">WHERE</span> IFNULL(sc_score,<span class="hljs-number">0</span>)<span class="hljs-operator">&lt;</span><span class="hljs-number">60</span> <br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> sc_sub;<br><br>#查询出低于班级整体平均分的学生全部信息<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> students,scores<br><span class="hljs-keyword">WHERE</span> stu_id<span class="hljs-operator">=</span>sc_id <span class="hljs-keyword">AND</span> stu_id <span class="hljs-keyword">in</span> (<br><span class="hljs-keyword">SELECT</span> sc_id <span class="hljs-keyword">FROM</span> scores <br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> sc_id<br><span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">AVG</span>(IFNULL(sc_score,<span class="hljs-number">0</span>))<span class="hljs-operator">&lt;</span>(<br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(IFNULL(sc_score,<span class="hljs-number">0</span>)) <span class="hljs-keyword">FROM</span> scores<br>));<br><br>#查询出比<span class="hljs-number">202205</span>总成绩高的学生学号，姓名及总成绩<br><span class="hljs-keyword">SELECT</span> stu_id,stu_name,<span class="hljs-built_in">SUM</span>(sc_score) <span class="hljs-keyword">FROM</span> students,scores<br><span class="hljs-keyword">WHERE</span> stu_id<span class="hljs-operator">=</span>sc_id <br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> sc_id<br><span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">SUM</span>(sc_score)<span class="hljs-operator">&gt;</span>(<br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">SUM</span>(sc_score) <span class="hljs-keyword">FROM</span> scores <span class="hljs-keyword">WHERE</span> sc_id<span class="hljs-operator">=</span><span class="hljs-number">202205</span><br>);<br><br>#查询各科成绩的第一名的学生学号，姓名和对应科目及成绩<br><br><span class="hljs-keyword">SELECT</span> stu_id,stu_name,sc_sub,sc_score<br><span class="hljs-keyword">FROM</span> students,scores,(<span class="hljs-keyword">SELECT</span> sc_sub <span class="hljs-keyword">AS</span> sc_subject,<span class="hljs-built_in">MAX</span>(sc_score) <span class="hljs-keyword">as</span> sc_max <span class="hljs-keyword">FROM</span> scores <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> sc_sub<br>) <span class="hljs-keyword">AS</span> a<br><span class="hljs-keyword">WHERE</span> stu_id<span class="hljs-operator">=</span>sc_id <span class="hljs-keyword">AND</span> scores.sc_sub<span class="hljs-operator">=</span>a.sc_subject <span class="hljs-keyword">AND</span> scores.sc_score<span class="hljs-operator">=</span>a.sc_max;<br></code></pre></td></tr></table></figure>

<h3 id="9-30"><a href="#9-30" class="headerlink" title="9.30"></a>9.30</h3><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> stu_id <span class="hljs-keyword">AS</span> 学号,stu_name <span class="hljs-keyword">AS</span> 姓名,stu_sex <span class="hljs-keyword">AS</span> 性别,sc_sub <span class="hljs-keyword">AS</span> 科目,sc_score <span class="hljs-keyword">AS</span> 分数,sc_idsc.score <span class="hljs-keyword">AS</span> 总成绩<br><span class="hljs-keyword">FROM</span> students,scores,<br>(<span class="hljs-keyword">SELECT</span> sc_id <span class="hljs-keyword">AS</span> id,<span class="hljs-built_in">sum</span>(sc_score) <span class="hljs-keyword">AS</span> score <span class="hljs-keyword">FROM</span> scores <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> sc_id) <span class="hljs-keyword">AS</span> sc_idsc,<br>(<span class="hljs-keyword">SELECT</span> stu_sex <span class="hljs-keyword">AS</span> gender,<span class="hljs-built_in">MAX</span>(sum1.sc_sum) <span class="hljs-keyword">AS</span> num_max <span class="hljs-keyword">FROM</span> students,(<span class="hljs-keyword">SELECT</span> sc_id <span class="hljs-keyword">AS</span> sum_id,<span class="hljs-built_in">SUM</span>(sc_score) <span class="hljs-keyword">AS</span> sc_sum <span class="hljs-keyword">FROM</span> scores,students <span class="hljs-keyword">WHERE</span> stu_id<span class="hljs-operator">=</span>sc_id <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> sc_id) <span class="hljs-keyword">AS</span> sum1 <br><span class="hljs-keyword">WHERE</span> stu_id<span class="hljs-operator">=</span>sum1.sum_id<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> stu_sex) <span class="hljs-keyword">AS</span> gender_max<br><span class="hljs-keyword">WHERE</span> stu_id<span class="hljs-operator">=</span>sc_id <span class="hljs-keyword">AND</span> sc_id<span class="hljs-operator">=</span>sc_idsc.id <span class="hljs-keyword">AND</span> stu_sex<span class="hljs-operator">=</span>gender <span class="hljs-keyword">AND</span> num_max<span class="hljs-operator">=</span>sc_idsc.score; <br></code></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> stu_id,stu_name,stu_sex,GROUP_CONCAT(sc_score),<span class="hljs-built_in">SUM</span>(sc_score) <span class="hljs-keyword">FROM</span> students,scores, <br>(<span class="hljs-keyword">SELECT</span> sc_id <span class="hljs-keyword">AS</span> sc_ida <span class="hljs-keyword">FROM</span> scores,students <span class="hljs-keyword">WHERE</span><br>stu_id<span class="hljs-operator">=</span>sc_id <span class="hljs-keyword">AND</span> stu_sex<span class="hljs-operator">=</span><span class="hljs-string">&#x27;男&#x27;</span> <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> sc_id <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> <span class="hljs-built_in">SUM</span>(sc_score) <span class="hljs-keyword">DESC</span> LIMIT <span class="hljs-number">0</span>,<span class="hljs-number">1</span>) <span class="hljs-keyword">AS</span> a,<br>(<span class="hljs-keyword">SELECT</span> sc_id <span class="hljs-keyword">AS</span> sc_idb <span class="hljs-keyword">FROM</span> scores,students <span class="hljs-keyword">WHERE</span><br>stu_id<span class="hljs-operator">=</span>sc_id <span class="hljs-keyword">AND</span> stu_sex<span class="hljs-operator">=</span><span class="hljs-string">&#x27;女&#x27;</span> <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> sc_id <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> <span class="hljs-built_in">SUM</span>(sc_score) <span class="hljs-keyword">DESC</span> LIMIT <span class="hljs-number">0</span>,<span class="hljs-number">1</span>) <span class="hljs-keyword">AS</span> b<br><span class="hljs-keyword">WHERE</span> sc_id<span class="hljs-operator">=</span>stu_id <span class="hljs-keyword">AND</span> (scores.sc_id<span class="hljs-operator">=</span>a.sc_ida <span class="hljs-keyword">OR</span> scores.sc_id<span class="hljs-operator">=</span>b.sc_idb) <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> sc_id <br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> <span class="hljs-built_in">SUM</span>(sc_score) <span class="hljs-keyword">DESC</span>;<br></code></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs Sql"><span class="hljs-keyword">SELECT</span> stu_id,stu_name,students.stu_sex,sc_sub,sc_score,b.fen <br><span class="hljs-keyword">FROM</span> students,scores,(<br><span class="hljs-keyword">SELECT</span> stu_sex,stu_id <span class="hljs-keyword">AS</span> stuid,a.sumscore <span class="hljs-keyword">as</span> fen <span class="hljs-keyword">FROM</span> <br>(<span class="hljs-keyword">SELECT</span> sc_id <span class="hljs-keyword">AS</span> scid,<span class="hljs-built_in">SUM</span>(sc_score) <span class="hljs-keyword">AS</span> sumscore <span class="hljs-keyword">FROM</span> scores <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> sc_id <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> sumscore <span class="hljs-keyword">DESC</span>) <span class="hljs-keyword">AS</span> a,<br>students<br><span class="hljs-keyword">WHERE</span> a.scid<span class="hljs-operator">=</span>stu_id <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> stu_sex<br>) <span class="hljs-keyword">AS</span> b<br><span class="hljs-keyword">WHERE</span> stu_id<span class="hljs-operator">=</span>sc_id <span class="hljs-keyword">AND</span> students.stu_id<span class="hljs-operator">=</span>b.stuid<br></code></pre></td></tr></table></figure>

<h3 id="10-8"><a href="#10-8" class="headerlink" title="10.8"></a>10.8</h3><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">#建表students<br>#学号主键，姓名（不为空），性别（不为空），生日（<span class="hljs-type">date</span>类型），班级<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> students(<br>stu_id <span class="hljs-type">INT</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">PRIMARY</span> KEY,<br>stu_name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>stu_sex <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>stu_birth <span class="hljs-type">date</span>,<br>stu_class <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>)<br>);<br><br>#删除指定列<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> students <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">COLUMN</span> stu_birth;<br>#添加一列<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> students <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">COLUMN</span> stu_birth <span class="hljs-type">date</span> AFTER stu_sex;<br><br>#插入<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> students <span class="hljs-keyword">values</span>(<span class="hljs-number">105</span>,<span class="hljs-string">&#x27;匡明&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;1975-10-02&#x27;</span>,<span class="hljs-string">&#x27;95031&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> students <span class="hljs-keyword">values</span>(<span class="hljs-number">107</span>,<span class="hljs-string">&#x27;王丽&#x27;</span>,<span class="hljs-string">&#x27;女&#x27;</span>,<span class="hljs-string">&#x27;1976-01-23&#x27;</span>,<span class="hljs-string">&#x27;95033&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> students <span class="hljs-keyword">values</span>(<span class="hljs-number">101</span>,<span class="hljs-string">&#x27;李军&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;1976-02-20&#x27;</span>,<span class="hljs-string">&#x27;95033&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> students <span class="hljs-keyword">values</span>(<span class="hljs-number">109</span>,<span class="hljs-string">&#x27;王芳&#x27;</span>,<span class="hljs-string">&#x27;女&#x27;</span>,<span class="hljs-string">&#x27;1975-02-10&#x27;</span>,<span class="hljs-string">&#x27;95031&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> students <span class="hljs-keyword">values</span>(<span class="hljs-number">108</span>,<span class="hljs-string">&#x27;曾华&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;1977-09-01&#x27;</span>,<span class="hljs-string">&#x27;95033&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> students <span class="hljs-keyword">values</span>(<span class="hljs-number">103</span>,<span class="hljs-string">&#x27;陆君&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;1974-06-03&#x27;</span>,<span class="hljs-string">&#x27;95031&#x27;</span>);<br><br>#把曾华性别改为女<br><span class="hljs-keyword">UPDATE</span> students <span class="hljs-keyword">SET</span> stu_sex<span class="hljs-operator">=</span><span class="hljs-string">&#x27;女&#x27;</span> <span class="hljs-keyword">WHERE</span> stu_name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;曾华&#x27;</span>;<br><br>#建表teachers<br>#教师编号（主键），姓名（不为空），性别（不为空），<br>#生日（t_birth），职称(t_prof)，系别(t_depart)<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> teachers(<br>t_id <span class="hljs-type">INT</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">PRIMARY</span> KEY,<br>t_name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>t_sex <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>t_birth <span class="hljs-type">date</span>,<br>t_prof <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>),<br>t_depart <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>)<br>);<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> teachers <span class="hljs-keyword">values</span>(<span class="hljs-number">804</span>,<span class="hljs-string">&#x27;李诚&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;1985-12-02&#x27;</span>,<span class="hljs-string">&#x27;副教授&#x27;</span>,<span class="hljs-string">&#x27;计算机系&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> teachers <span class="hljs-keyword">values</span>(<span class="hljs-number">856</span>,<span class="hljs-string">&#x27;张旭&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;1969-03-12&#x27;</span>,<span class="hljs-string">&#x27;讲师&#x27;</span>,<span class="hljs-string">&#x27;电子工程系&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> teachers <span class="hljs-keyword">values</span>(<span class="hljs-number">825</span>,<span class="hljs-string">&#x27;王萍&#x27;</span>,<span class="hljs-string">&#x27;女&#x27;</span>,<span class="hljs-string">&#x27;1972-05-05&#x27;</span>,<span class="hljs-string">&#x27;助教&#x27;</span>,<span class="hljs-string">&#x27;计算机系&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> teachers <span class="hljs-keyword">values</span>(<span class="hljs-number">831</span>,<span class="hljs-string">&#x27;刘冰&#x27;</span>,<span class="hljs-string">&#x27;女&#x27;</span>,<span class="hljs-string">&#x27;1977-08-14&#x27;</span>,<span class="hljs-string">&#x27;助教&#x27;</span>,<span class="hljs-string">&#x27;电子工程系&#x27;</span>);<br><br>#建表course<br>#课程号（c_id，主键，vachar类型） 课程名（c_name <span class="hljs-type">varchar</span>）,任课教师（c_tid  <span class="hljs-type">int</span>）<br>#任课教师字段设置外键，参考教师表的t_id字段<br><br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> course <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;3-105&#x27;</span>,<span class="hljs-string">&#x27;计算机导论&#x27;</span>,<span class="hljs-number">825</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> course <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;3-245&#x27;</span>,<span class="hljs-string">&#x27;操作系统&#x27;</span>,<span class="hljs-number">856</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> course <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;6-166&#x27;</span>,<span class="hljs-string">&#x27;数字电路&#x27;</span>,<span class="hljs-number">856</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> course <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;9-888&#x27;</span>,<span class="hljs-string">&#x27;高等数学&#x27;</span>,<span class="hljs-number">831</span>);<br><br>#建表scores<br>#sc_stuid(外键，参考学生id，不为空)<br>#sc_cid(外键，参考课程号，不为空)<br>#sc_score(可以为空，分数保留<span class="hljs-number">1</span>位小数)<br><br>#sc_stuid和sc_cid联合主键<br><br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> scores <span class="hljs-keyword">values</span>(<span class="hljs-number">103</span>,<span class="hljs-string">&#x27;3-245&#x27;</span>,<span class="hljs-number">86</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> scores <span class="hljs-keyword">values</span>(<span class="hljs-number">105</span>,<span class="hljs-string">&#x27;3-245&#x27;</span>,<span class="hljs-number">75</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> scores <span class="hljs-keyword">values</span>(<span class="hljs-number">109</span>,<span class="hljs-string">&#x27;3-245&#x27;</span>,<span class="hljs-number">68</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> scores <span class="hljs-keyword">values</span>(<span class="hljs-number">103</span>,<span class="hljs-string">&#x27;3-105&#x27;</span>,<span class="hljs-number">92</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> scores <span class="hljs-keyword">values</span>(<span class="hljs-number">105</span>,<span class="hljs-string">&#x27;3-105&#x27;</span>,<span class="hljs-number">88</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> scores <span class="hljs-keyword">values</span>(<span class="hljs-number">101</span>,<span class="hljs-string">&#x27;3-105&#x27;</span>,<span class="hljs-number">64</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> scores <span class="hljs-keyword">values</span>(<span class="hljs-number">107</span>,<span class="hljs-string">&#x27;3-105&#x27;</span>,<span class="hljs-number">91</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> scores <span class="hljs-keyword">values</span>(<span class="hljs-number">108</span>,<span class="hljs-string">&#x27;3-105&#x27;</span>,<span class="hljs-number">78</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> scores <span class="hljs-keyword">values</span>(<span class="hljs-number">101</span>,<span class="hljs-string">&#x27;6-166&#x27;</span>,<span class="hljs-number">85</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> scores <span class="hljs-keyword">values</span>(<span class="hljs-number">107</span>,<span class="hljs-string">&#x27;6-166&#x27;</span>,<span class="hljs-number">79</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> scores <span class="hljs-keyword">values</span>(<span class="hljs-number">108</span>,<span class="hljs-string">&#x27;6-166&#x27;</span>,<span class="hljs-number">81</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> scores <span class="hljs-keyword">values</span>(<span class="hljs-number">109</span>,<span class="hljs-string">&#x27;3-105&#x27;</span>,<span class="hljs-number">50</span>);<br><br><br>#<span class="hljs-number">1.</span>查询老师名和该老师带的课程名<br><span class="hljs-keyword">SELECT</span> t_name,c_name <span class="hljs-keyword">FROM</span> teachers,course <span class="hljs-keyword">WHERE</span> t_id<span class="hljs-operator">=</span>c_tid;<br><br>#<span class="hljs-number">2.</span>查询修了“计算机导论”的所有学生的信息<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> students,course,scores <span class="hljs-keyword">WHERE</span> stu_id<span class="hljs-operator">=</span>sc_stuid<br><span class="hljs-keyword">AND</span> sc_cid<span class="hljs-operator">=</span>c_id <span class="hljs-keyword">AND</span> c_name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;计算机导论&#x27;</span>;<br><br>#<span class="hljs-number">3.</span>查询<span class="hljs-number">95033</span>班级的学生所选课程的平均分<br><span class="hljs-keyword">SELECT</span> c_name,<span class="hljs-built_in">AVG</span>(sc_score) <span class="hljs-keyword">FROM</span> students,course,scores <span class="hljs-keyword">WHERE</span> sc_stuid<span class="hljs-operator">=</span>stu_id <span class="hljs-keyword">AND</span> c_id<span class="hljs-operator">=</span>sc_cid<br><span class="hljs-keyword">AND</span> stu_class<span class="hljs-operator">=</span><span class="hljs-string">&#x27;95033&#x27;</span> <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> c_name;<br><br>#<span class="hljs-number">4.</span>查询男生和女生分别的平均分<br><span class="hljs-keyword">SELECT</span> stu_sex,<span class="hljs-built_in">AVG</span>(IFNULL(sc_score,<span class="hljs-number">0</span>)) <span class="hljs-keyword">FROM</span> students,scores<br><span class="hljs-keyword">WHERE</span> stu_id<span class="hljs-operator">=</span>sc_stuid <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> stu_sex;<br><br>#<span class="hljs-number">5.</span>求出总成绩最高的学生姓名<br><span class="hljs-keyword">SELECT</span> stu_name,<span class="hljs-built_in">SUM</span>(sc_score) <span class="hljs-keyword">FROM</span> students,scores <span class="hljs-keyword">WHERE</span> stu_id<span class="hljs-operator">=</span>sc_stuid<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> stu_id <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> <span class="hljs-built_in">SUM</span>(sc_score) <span class="hljs-keyword">DESC</span> LIMIT <span class="hljs-number">0</span>,<span class="hljs-number">1</span>;<br><br>#<span class="hljs-number">6.</span>查询每个老师带了多少个学生 <br><span class="hljs-keyword">SELECT</span> t_name,<span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">FROM</span> course,teachers,scores <span class="hljs-keyword">WHERE</span> c_tid<span class="hljs-operator">=</span>t_id<br><span class="hljs-keyword">AND</span> sc_cid<span class="hljs-operator">=</span>c_id <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> t_name;<br><br>#<span class="hljs-number">7.</span>查询“曾华”选修的所有课程名<br><span class="hljs-keyword">SELECT</span> c_name <span class="hljs-keyword">FROM</span> students,scores,course <span class="hljs-keyword">WHERE</span> stu_id<span class="hljs-operator">=</span>sc_stuid<br><span class="hljs-keyword">AND</span> c_id<span class="hljs-operator">=</span>sc_cid <span class="hljs-keyword">AND</span> stu_name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;曾华&#x27;</span>;<br><br>#<span class="hljs-number">8.</span>查询李军有哪些课程没有选<br><span class="hljs-keyword">SELECT</span> c_name <span class="hljs-keyword">FROM</span> course <span class="hljs-keyword">WHERE</span> c_name <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">in</span> (<br><span class="hljs-keyword">SELECT</span> c_name <span class="hljs-keyword">FROM</span> students,course,scores <span class="hljs-keyword">WHERE</span> sc_stuid<span class="hljs-operator">=</span>stu_id<br><span class="hljs-keyword">AND</span> sc_cid<span class="hljs-operator">=</span>c_id <span class="hljs-keyword">AND</span> stu_name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;李军&#x27;</span><br>);<br><br>#<span class="hljs-number">9.</span>查询每个科目成绩最高的学生学号和姓名<br><span class="hljs-keyword">SELECT</span> stu_id,stu_name,c_name <span class="hljs-keyword">FROM</span> scores,students,course,(<br><span class="hljs-keyword">SELECT</span> sc_cid <span class="hljs-keyword">AS</span> sc_sub,<span class="hljs-built_in">MAX</span>(sc_score) <span class="hljs-keyword">AS</span> sc_max <span class="hljs-keyword">FROM</span> scores<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> sc_cid<br>) <span class="hljs-keyword">AS</span> a<br><span class="hljs-keyword">WHERE</span> stu_id<span class="hljs-operator">=</span>sc_stuid <span class="hljs-keyword">AND</span> scores.sc_cid<span class="hljs-operator">=</span>a.sc_sub <span class="hljs-keyword">AND</span> scores.sc_score<span class="hljs-operator">=</span>a.sc_max<br><span class="hljs-keyword">AND</span> sc_cid<span class="hljs-operator">=</span>c_id;<br><br><br>#<span class="hljs-number">10.</span>查询哪个学科最受女生喜欢<br><span class="hljs-keyword">SELECT</span> c_name <span class="hljs-keyword">from</span> students,scores,course <span class="hljs-keyword">WHERE</span><br>c_id<span class="hljs-operator">=</span>sc_cid <span class="hljs-keyword">AND</span> sc_stuid<span class="hljs-operator">=</span>stu_id <span class="hljs-keyword">AND</span> stu_sex<span class="hljs-operator">=</span><span class="hljs-string">&#x27;女&#x27;</span> <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> c_name<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> <span class="hljs-built_in">COUNT</span>(stu_id) <span class="hljs-keyword">DESC</span> LIMIT <span class="hljs-number">0</span>,<span class="hljs-number">1</span>;<br><br>#<span class="hljs-number">11.</span>查询讲师代课班级里成绩最低的是哪个班级<br><span class="hljs-keyword">SELECT</span> stu_class <span class="hljs-keyword">FROM</span> students,course,scores <span class="hljs-keyword">WHERE</span> stu_id<span class="hljs-operator">=</span>sc_stuid<br><span class="hljs-keyword">AND</span> c_id<span class="hljs-operator">=</span>sc_cid <span class="hljs-keyword">AND</span> c_tid <span class="hljs-keyword">in</span> (<br><span class="hljs-keyword">SELECT</span> t_id <span class="hljs-keyword">FROM</span> teachers <span class="hljs-keyword">WHERE</span> t_prof<span class="hljs-operator">=</span><span class="hljs-string">&#x27;讲师&#x27;</span><br>) <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> stu_class <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> <span class="hljs-built_in">SUM</span>(sc_score) LIMIT <span class="hljs-number">0</span>,<span class="hljs-number">1</span>;<br><br>#<span class="hljs-number">12.</span>查询“<span class="hljs-number">1975</span>年以后”出生的学生都选修的课程号和课程名<br><span class="hljs-keyword">SELECT</span> c_id,c_name <span class="hljs-keyword">FROM</span> course,students,scores<br><span class="hljs-keyword">WHERE</span> c_id<span class="hljs-operator">=</span>sc_cid <span class="hljs-keyword">AND</span> stu_id<span class="hljs-operator">=</span>sc_stuid <span class="hljs-keyword">AND</span> <span class="hljs-keyword">YEAR</span>(stu_birth)<span class="hljs-operator">&gt;</span><span class="hljs-number">1975</span><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> c_id;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>WEBbackend</category>
      </categories>
      <tags>
        <tag>office</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql OF CodeWithMosh</title>
    <url>/2022/12/01/WebBackend/Java/DBMS/MySql/Mysql%20OF%20CodeWithMosh/</url>
    <content><![CDATA[<h1 id="Ⅱ"><a href="#Ⅱ" class="headerlink" title="Ⅱ"></a>Ⅱ</h1><h2 id="The-SELECT-Clause"><a href="#The-SELECT-Clause" class="headerlink" title="The SELECT Clause"></a>The SELECT Clause</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">SELECT 	<br>	first_name, <br>	last_name, <br>	points, <br>	(points + 10) * 100 AS &#x27;discount factor&#x27;<br>FROM customers<br>-- WHERE customer_id = 1<br>-- ORDER BY first_name<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221130145315129.png" alt="image-20221130145315129"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">SELECT DISTINCT state FROM customers;<br></code></pre></td></tr></table></figure>

<p><em>DISTINCT</em> - 用于返回唯一不同的值</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221130145229628.png" alt="image-20221130145229628"></p>
<h2 id="The-WHERE-Clause"><a href="#The-WHERE-Clause" class="headerlink" title="The WHERE Clause"></a>The WHERE Clause</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">SELECT *<br>FROM Customers<br>WHERE points &gt; 3000;<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221130150958390.png" alt="image-20221130150958390"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">SELECT *<br>FROM Customers<br>-- WHERE state != &#x27;va&#x27;<br>WHERE state &lt;&gt; &#x27;va&#x27;;<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221130151118887.png" alt="image-20221130151118887"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">SELECT *<br>FROM Customers<br>WHERE birth_date &gt; &#x27;1990-01-01&#x27;;<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221130151157095.png" alt="image-20221130151157095"></p>
<h2 id="The-AND-OR-and-NOT-Operators"><a href="#The-AND-OR-and-NOT-Operators" class="headerlink" title="The AND,OR and NOT Operators"></a>The AND,OR and NOT Operators</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">SELECT *<br>FROM Customers<br>-- WHERE birth_date &gt; &#x27;1990-01-01&#x27; &amp;&amp; points &gt; 1000 || state = &quot;VA&quot;<br>WHERE birth_date &gt; &#x27;1990-01-01&#x27; AND points &gt; 1000 OR state = &#x27;VA&#x27;;<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221130155206238.png" alt="image-20221130155206238"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">SELECT *<br>FROM Customers<br>WHERE NOT (birth_date &gt; &#x27;1990-01-01&#x27; OR points &gt; 1000);<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221130155309656.png" alt="image-20221130155309656"></p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221130155452610.png" alt="image-20221130155452610"></p>
<h2 id="The-IN-Operator"><a href="#The-IN-Operator" class="headerlink" title="The IN Operator"></a>The IN Operator</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">SELECT *<br>FROM Customers<br>-- WHERE state = &#x27;VA&#x27; OR state = &#x27;GA&#x27; OR state = &#x27;FL&#x27;<br>WHERE state IN (&#x27;VA&#x27;,&#x27;FL&#x27;,&#x27;GA&#x27;);<br>-- WHERE state NOT IN (&#x27;VA&#x27;,&#x27;FL&#x27;,&#x27;GA&#x27;)<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221130202320809.png" alt="image-20221130202320809"></p>
<h2 id="The-BETWEEN-Operator"><a href="#The-BETWEEN-Operator" class="headerlink" title="The BETWEEN Operator"></a>The BETWEEN Operator</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">SELECT *<br>FROM customers<br>-- WHERE points &gt;= 1000 AND points &lt;= 3000<br>WHERE points BETWEEN 1000 AND 3000;<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221130203222460.png" alt="image-20221130203222460"></p>
<h2 id="The-LIKE-Operator"><a href="#The-LIKE-Operator" class="headerlink" title="The LIKE Operator"></a>The LIKE Operator</h2><ul>
<li><code>%</code> any number of characters</li>
<li><code>_</code> single character</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">SELECT *<br>FROM customers<br>WHERE last_name LIKE &#x27;%b%&#x27;;<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221130204201974.png" alt="image-20221130204201974"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">SELECT *<br>FROM customers<br>WHERE last_name LIKE &#x27;b____y&#x27;;<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221130204234121.png" alt="image-20221130204234121"></p>
<h2 id="The-REGEXP-Operator"><a href="#The-REGEXP-Operator" class="headerlink" title="The REGEXP Operator"></a>The REGEXP Operator</h2><ul>
<li><code>^</code>   beginning</li>
<li><code>$</code>   end</li>
<li><code>|</code>   logical or</li>
<li><code>[abcd]</code></li>
<li><code>[a-f]</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">SELECT *<br>FROM customers<br>-- WHERE last_name LIKE &#x27;%field&#x27; OR last_name LIKE &#x27;mac%&#x27; OR last_name LIKE &#x27;%rose%&#x27;<br>WHERE last_name REGEXP &#x27;field$|^mac|rose&#x27;;<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221130210217163.png" alt="image-20221130210217163"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">SELECT *<br>FROM customers<br>WHERE last_name REGEXP &#x27;[a-h]e&#x27;;<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221130210238524.png" alt="image-20221130210238524"></p>
<h2 id="The-IS-NULL-Operator"><a href="#The-IS-NULL-Operator" class="headerlink" title="The IS NULL Operator"></a>The IS NULL Operator</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">SELECT *<br>FROM customers<br>-- WHERE phone NOT IS NULL<br>WHERE phone IS NULL;<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221130210848544.png" alt="image-20221130210848544"></p>
<h2 id="The-ORDER-BY-Clause"><a href="#The-ORDER-BY-Clause" class="headerlink" title="The ORDER BY Clause"></a>The ORDER BY Clause</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">SELECT *<br>FROM customers<br>ORDER BY points DESC;<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221130212536832.png" alt="image-20221130212536832"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">SELECT birth_date, first_name, last_name, 10 AS points<br>FROM customers<br>ORDER BY 1, 2;<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221130212522151.png" alt="image-20221130212522151"></p>
<h2 id="The-LIMIT-Clause"><a href="#The-LIMIT-Clause" class="headerlink" title="The LIMIT Clause"></a>The LIMIT Clause</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">SELECT *<br>FROM customers<br>LIMIT 6, 3;<br>-- page 1: 1 - 3<br>-- page 2: 4 - 6<br>-- page 3: 7 - 9<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221130213146262.png" alt="image-20221130213146262"></p>
<h1 id="Ⅲ"><a href="#Ⅲ" class="headerlink" title="Ⅲ"></a>Ⅲ</h1><h2 id="Inner-Joins"><a href="#Inner-Joins" class="headerlink" title="Inner Joins"></a>Inner Joins</h2><p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221201100403520.png" alt="image-20221201100403520"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">SELECT order_id, orders.customer_id, first_name, last_name<br>FROM orders<br>INNER JOIN customers<br>	ON orders.customer_id = customers.customer_id;<br></code></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">SELECT order_id, o.customer_id, first_name, last_name<br>FROM orders o<br>JOIN customers c<br>	ON o.customer_id = c.customer_id;<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221130214455720.png" alt="image-20221130214455720"></p>
<h2 id="Joining-Across-Databases"><a href="#Joining-Across-Databases" class="headerlink" title="Joining Across Databases"></a>Joining Across Databases</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">USE sql_store;<br><br>SELECT *<br>FROM order_items oi<br>JOIN sql_inventory.products p<br>	ON oi.product_id = p.product_id;<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221130215210224.png" alt="image-20221130215210224"></p>
<h2 id="Self-Joins"><a href="#Self-Joins" class="headerlink" title="Self Joins"></a>Self Joins</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">USE sql_hr;<br><br>SELECT<br>	e.employee_id,<br>	e.first_name,<br>	m.first_name AS manager<br>FROM employees e<br>JOIN employees m<br>	ON e.reports_to = m.employee_id;<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221130220416319.png" alt="image-20221130220416319"></p>
<h2 id="Joining-Multiple-Tables"><a href="#Joining-Multiple-Tables" class="headerlink" title="Joining Multiple Tables"></a>Joining Multiple Tables</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">USE sql_store;<br><br>SELECT<br>	o.order_id,<br>	o.order_date,<br>	c.first_name,<br>	c.last_name,<br>	os.name AS status<br>FROM orders o<br>JOIN customers c<br>	ON o.customer_id = c.customer_id<br>JOIN order_statuses os<br>	ON o.status = os.order_status_id<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221201092822387.png" alt="image-20221201092822387"></p>
<h2 id="Compound-Join-Conditions"><a href="#Compound-Join-Conditions" class="headerlink" title="Compound Join Conditions"></a>Compound Join Conditions</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">SELECT *<br>FROM order_items oi<br>JOIN order_item_notes oin<br>	ON oi.order_id = oin.order_id<br>	AND oi.product_id = oin.product_id<br></code></pre></td></tr></table></figure>



<h2 id="Implicit-Join-Syntax"><a href="#Implicit-Join-Syntax" class="headerlink" title="Implicit Join Syntax"></a>Implicit Join Syntax</h2><p>不建议使用隐式连接，WHERE不能省略 否则造成笛卡尔积 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">SELECT *<br>FROM orders o<br>JOIN customers c<br>	ON o.customer_id = c.customer_id;<br></code></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">-- Implpicit Join Syntax<br>SELECT *<br>FROM orders o, customers c<br>WHERE o.customer_id = c.customer_id;<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221201094922845.png" alt="image-20221201094922845"></p>
<h2 id="Outer-Joins"><a href="#Outer-Joins" class="headerlink" title="Outer Joins"></a>Outer Joins</h2><p>左连接就是以FROM后面的表为主，右连接就是以JOIN 后面的表为主</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221201100518304.png" alt="image-20221201100518304"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">-- LEFT JOIN<br>SELECT<br>	c.customer_id,<br>	c.first_name,<br>	o.order_id<br>FROM customers c<br>-- LEFT OUTER JOIN orders o<br>LEFT JOIN orders o<br>	ON c.customer_id = o.customer_id<br>ORDER BY c.customer_id;<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221201095918049.png" alt="image-20221201095918049"></p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221201100546806.png" alt="image-20221201100546806"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">-- RIGHT JOIN<br>SELECT<br>	c.customer_id,<br>    c.first_name,<br>    o.order_id<br>FROM customers c<br>-- RIGHT OUTER JOIN orders o<br>RIGHT JOIN orders o<br>	ON c.customer_id = o.customer_id<br>ORDER BY c.customer_id;<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221201095953308.png" alt="image-20221201095953308"></p>
<h2 id="Outer-Joins-Between-Multiple-Tables"><a href="#Outer-Joins-Between-Multiple-Tables" class="headerlink" title="Outer Joins Between Multiple Tables"></a>Outer Joins Between Multiple Tables</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">SELECT *<br>FROM customers c<br>LEFT JOIN orders o<br>	ON c.customer_id = o.customer_id<br>LEFT JOIN shippers sh<br>	ON o.shipper_id = sh.shipper_id<br>ORDER BY c.customer_id;<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221201102129055.png" alt="image-20221201102129055"></p>
<h2 id="Self-Outer-Joins"><a href="#Self-Outer-Joins" class="headerlink" title="Self Outer Joins"></a>Self Outer Joins</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">SELECT<br>	e.employee_id,<br>	e.first_name,<br>	m.first_name AS manager<br>FROM employees e<br>LEFT JOIN employees m<br>	ON e.reports_to = m.employee_id<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221201112329462.png" alt="image-20221201112329462"></p>
<h2 id="The-USING-Clause"><a href="#The-USING-Clause" class="headerlink" title="The USING Clause"></a>The USING Clause</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">SELECT<br>	o.order_id,<br>    c.first_name,<br>    sh.name AS shipper<br>FROM orders o<br>JOIN customers c<br>	-- ON o.customer_id = c.customer_id<br>    USING (customer_id)<br>LEFT JOIN shippers sh<br>	USING (shipper_id);<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221201113617556.png" alt="image-20221201113617556"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">SELECT *<br>FROM order_items oi<br>JOIN order_item_notes oin<br>	-- ON oi.order_id = oin.order_id AND<br>		-- oi.product_id = oin.product_id<br>	USING(order_id, product_id);<br></code></pre></td></tr></table></figure>



<h2 id="Natural-Joins"><a href="#Natural-Joins" class="headerlink" title="Natural Joins"></a>Natural Joins</h2><p><em>不建议使用随缘大法</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">SELECT<br>	o.order_id,<br>    c.first_name<br>FROM orders o<br>NATURAL JOIN customers c<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221201114156839.png" alt="image-20221201114156839"></p>
<h2 id="Cross-Joins"><a href="#Cross-Joins" class="headerlink" title="Cross Joins"></a>Cross Joins</h2><p><em>笛卡尔积</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">SELECT<br>	c.first_name AS customer,<br>	p.name AS product<br>-- FROM customers c, products p<br>FROM customers c<br>CROSS JOIN products p<br>ORDER BY c.first_name<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221201115028098.png" alt="image-20221201115028098"></p>
<h2 id="Unions"><a href="#Unions" class="headerlink" title="Unions"></a>Unions</h2><p><em>没啥用,但是并和列数必须相等</em></p>
<p><code>UNION</code> &#x2F; <code>UNION ALL</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">SELECT<br>	order_id,<br>	order_date,<br>	&#x27;Active&#x27; AS status<br>FROM orders<br>WHERE order_date &gt;= &#x27;2019-01-01&#x27;<br>UNION<br>SELECT<br>	order_id,<br>	order_date,<br>	&#x27;Archived&#x27; AS status<br>FROM orders<br>WHERE order_date &lt; &#x27;2019-01-01&#x27;<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221201124209848.png" alt="image-20221201124209848"></p>
<h1 id="Ⅳ"><a href="#Ⅳ" class="headerlink" title="Ⅳ"></a>Ⅳ</h1><h2 id="Column-Attributes"><a href="#Column-Attributes" class="headerlink" title="Column Attributes"></a>Column Attributes</h2><p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221201124936727.png" alt="image-20221201124936727"></p>
<ul>
<li>PK – 主键</li>
<li>NN – 非空值</li>
<li>AI – 自动递增</li>
<li>Default&#x2F;Expression – 默认值</li>
</ul>
<h2 id="Inserting-a-Single-Row"><a href="#Inserting-a-Single-Row" class="headerlink" title="Inserting a Single Row"></a>Inserting a Single Row</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">INSERT INTO customers<br>VALUES (<br>	DEFAULT,<br>    &#x27;John&#x27;,<br>    &#x27;Smith&#x27;,<br>    &#x27;1990-01-01&#x27;,<br>    NULL,<br>    &#x27;address&#x27;,<br>    &#x27;city&#x27;,<br>    &#x27;CA&#x27;,<br>    DEFAULT<br>);<br></code></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">INSERT INTO customers (<br>	first_name,<br>    last_name,<br>    birth_date,<br>    address,<br>    city,<br>    state)<br>VALUES (<br>    &#x27;John&#x27;,<br>    &#x27;Smith&#x27;,<br>    &#x27;1990-01-01&#x27;,<br>    &#x27;address&#x27;,<br>    &#x27;city&#x27;,<br>    &#x27;CA&#x27;<br>);<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221201140340682.png" alt="image-20221201140340682"></p>
<h2 id="Inserting-Multiple-Rows"><a href="#Inserting-Multiple-Rows" class="headerlink" title="Inserting Multiple Rows"></a>Inserting Multiple Rows</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">INSERT INTO shippers (name)<br>VALUES (&#x27;Shipper1&#x27;),<br>	(&#x27;Shipper2&#x27;),<br>	(&#x27;Shipper3&#x27;);<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221201141627554.png" alt="image-20221201141627554"></p>
<h2 id="Inserting-Hierarchical-Rows"><a href="#Inserting-Hierarchical-Rows" class="headerlink" title="Inserting Hierarchical Rows"></a>Inserting Hierarchical Rows</h2><ul>
<li><code>LAST_INSERT_ID()</code> –  最近插入ID</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">INSERT INTO orders (customer_id, order_date, status)<br>VALUES (1, &#x27;2019-01-02&#x27;, 1);<br><br>INSERT INTO order_items<br>VALUES<br>	(LAST_INSERT_ID(), 1, 1, 2.95),<br>	(LAST_INSERT_ID(), 2, 1, 3.95)<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221201143711374.png" alt="image-20221201143711374"></p>
<h2 id="Creating-a-Copy-of-a-Table"><a href="#Creating-a-Copy-of-a-Table" class="headerlink" title="Creating a Copy of a Table"></a>Creating a Copy of a Table</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">CREATE TABLE orders_archived AS<br>SELECT * FROM orders;<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221201151613569.png" alt="image-20221201151613569"></p>
<p>Truncate Table</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221201151723929.png" alt="image-20221201151723929"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">INSERT INTO orders_archived<br>SELECT *<br>FROM orders<br>WHERE order_date &lt; &#x27;2019-01-01&#x27;;<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221201151817025.png" alt="image-20221201151817025"></p>
<h2 id="Updating-a-Single-Row"><a href="#Updating-a-Single-Row" class="headerlink" title="Updating a Single Row"></a>Updating a Single Row</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">UPDATE invoices<br>SET payment_total = 10, payment_date = &#x27;2019-03-01&#x27;<br>WHERE invoice_id = 1<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/GIF%2012-1-2022%203-26-54%20PM.gif" alt="GIF 12-1-2022 3-26-54 PM"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">UPDATE invoices<br>SET<br>	payment_total = invoice_total * 0.5,<br>	payment_date = due_date<br>WHERE invoice_id = 3<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/GIF%2012-1-2022%203-34-42%20PM.gif" alt="GIF 12-1-2022 3-34-42 PM"></p>
<h2 id="Updating-Multiple-Rows"><a href="#Updating-Multiple-Rows" class="headerlink" title="Updating Multiple Rows"></a>Updating Multiple Rows</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">UPDATE invoices<br>SET<br>	payment_total = invoice_total * 0.5,<br>	payment_date = due_date<br>WHERE invoice_id IN (3, 4)<br></code></pre></td></tr></table></figure>



<h2 id="Using-Subqueries-in-Updates"><a href="#Using-Subqueries-in-Updates" class="headerlink" title="Using Subqueries in Updates"></a>Using Subqueries in Updates</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">UPDATE invoices<br>SET<br>	payment_total = invoice_total * 0.5,<br>	payment_date = due_date<br>WHERE client_id IN<br>	(SELECT client_id<br>     FROM clients<br>     WHERE state IN (&#x27;CA&#x27;,&#x27;NY&#x27;))<br></code></pre></td></tr></table></figure>



<h2 id="Deleting-Rows"><a href="#Deleting-Rows" class="headerlink" title="Deleting Rows"></a>Deleting Rows</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">DELETE FROM invoices<br>WHERE client_id = (<br>	SELECT client_id<br>    FROM clients<br>    WHERE name = &#x27;Myworks&#x27;<br>)<br></code></pre></td></tr></table></figure>



<h1 id="Ⅴ"><a href="#Ⅴ" class="headerlink" title="Ⅴ"></a>Ⅴ</h1><h2 id="Aggregate-Functions"><a href="#Aggregate-Functions" class="headerlink" title="Aggregate Functions"></a>Aggregate Functions</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">SELECT<br>	MAX(invoice_total) AS highest,<br>	MIN(invoice_total) AS lowest,<br>	AVG(invoice_total) AS average,<br>	SUM(invoice_total * 1.1) AS total,<br>	COUNT(DISTINCT client_id) AS total_records<br>FROM invoices<br>WHERE invoice_date &gt; &#x27;2019-07-01&#x27;<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221201164656552.png" alt="image-20221201164656552"></p>
<h2 id="The-GROUP-BY-Clause"><a href="#The-GROUP-BY-Clause" class="headerlink" title="The GROUP BY Clause"></a>The GROUP BY Clause</h2><p>FROM-&gt;WHERE-&gt;GROUP BY-&gt;SELECT-&gt;ORDER BY</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">SELECT<br>	client_id,<br>	SUM(invoice_total) AS total_sales<br>FROM invoices<br>WHERE invoice_date &gt;= &#x27;2019-07-01&#x27;<br>GROUP BY client_id<br>ORDER BY total_sales DESC;<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221201170410046.png" alt="image-20221201170410046"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">SELECT<br>	state,<br>	city,<br>	SUM(invoice_total) AS total_sales<br>FROM invoices<br>JOIN clients USING (client_id)<br>GROUP BY state, city<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221201170432659.png" alt="image-20221201170432659"></p>
<h2 id="The-HAVING-Clause"><a href="#The-HAVING-Clause" class="headerlink" title="The HAVING Clause"></a>The HAVING Clause</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">SELECT<br>	client_id,<br>	SUM(invoice_total) AS total_sales,<br>	COUNT(*) AS number_of_invoices<br>FROM invoices<br>GROUP BY client_id<br>HAVING total_sales &gt; 500 AND number_of_invoices &gt; 5<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221201171533375.png" alt="image-20221201171533375"></p>
<h2 id="The-ROLLUP-Operator"><a href="#The-ROLLUP-Operator" class="headerlink" title="The ROLLUP Operator"></a>The ROLLUP Operator</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">SELECT<br>	state,<br>	city,<br>	SUM(invoice_total) AS total_sales<br>FROM invoices<br>JOIN clients c USING (client_id)<br>GROUP BY state, city WITH ROLLUP<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221201173117428.png" alt="image-20221201173117428"></p>
<h1 id="Ⅵ"><a href="#Ⅵ" class="headerlink" title="Ⅵ"></a>Ⅵ</h1><h2 id="Subqueries"><a href="#Subqueries" class="headerlink" title="Subqueries"></a>Subqueries</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">SELECT *<br>FROM products<br>WHERE unit_price &gt; (<br>    SELECT unit_price<br>    FROM products<br>    WHERE product_id = 3<br>)<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221201174024448.png" alt="image-20221201174024448"></p>
<h2 id="The-IN-Operator-1"><a href="#The-IN-Operator-1" class="headerlink" title="The IN Operator"></a>The IN Operator</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">SELECT *<br>FROM products<br>WHERE product_id NOT IN (<br>    SELECT DISTINCT product_id<br>    FROM order_items<br>)<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221201174701644.png" alt="image-20221201174701644"></p>
<h2 id="Subqueries-vs-Joins"><a href="#Subqueries-vs-Joins" class="headerlink" title="Subqueries vs Joins"></a>Subqueries vs Joins</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">-- Find clients without invoices<br>SELECT *<br>FROM clients<br>WHERE client_id NOT IN (<br>    SELECT DISTINCT client_id<br>    FROM invoices<br>)<br></code></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">SELECT *<br>FROM clients<br>LEFT JOIN invoices USING (client_id)<br>WHERE invoice_id IS NULL<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221201175621092.png" alt="image-20221201175621092"></p>
<h2 id="The-ALL-Keyword"><a href="#The-ALL-Keyword" class="headerlink" title="The ALL Keyword"></a>The ALL Keyword</h2><p><code>NOT IN</code> &#x3D; <code>&lt;&gt;all</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">SELECT *<br>FROM invoices<br>WHERE invoice_total &gt; (<br>    SELECT MAX(invoice_total)<br>    FROM invoices<br>    WHERE client_id = 3<br>)<br></code></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">SELECT *<br>FROM invoices<br>WHERE invoice_total &gt; ALL (<br>    SELECT invoice_total<br>    FROM invoices<br>    WHERE client_id = 3<br>)<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221201180631709.png" alt="image-20221201180631709"></p>
<h2 id="The-ANY-Keyword"><a href="#The-ANY-Keyword" class="headerlink" title="The ANY Keyword"></a>The ANY Keyword</h2><p><code>IN</code> &#x3D; <code>=ANY</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">-- Select clients with at least two invoices<br>SELECT *<br>FROM clients<br>-- WHERE client_id IN (<br>WHERE client_id = ANY (<br>    SELECT client_id<br>    FROM invoices<br>    GROUP BY client_id<br>    HAVING COUNT(*) &gt;= 2<br>)<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221201181604228.png" alt="image-20221201181604228"></p>
<h2 id="Correlated-Subqueries"><a href="#Correlated-Subqueries" class="headerlink" title="Correlated Subqueries"></a>Correlated Subqueries</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">-- Select employees whose salary is above the average in their office<br>SELECT *<br>FROM employees e<br>WHERE salary &gt; (<br>    SELECT AVG(salary)<br>    FROM employees<br>    WHERE office_id = e.office_id<br>)<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221201183245679.png" alt="image-20221201183245679"></p>
<h2 id="The-EXISTS-Operator"><a href="#The-EXISTS-Operator" class="headerlink" title="The EXISTS Operator"></a>The EXISTS Operator</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">-- Select clients that have an invoice<br>SELECT *<br>FROM clients<br>WHERE client_id IN (<br>    SELECT DISTINCT client_id<br>    FROM invoices<br>)<br></code></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">SELECT *<br>FROM clients c<br>WHERE EXISTS (<br>    SELECT client_id<br>    FROM invoices<br>    WHERE client_id = c.client_id<br>)<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221201193806982.png" alt="image-20221201193806982"></p>
<p><em>NOT EXISTS 比 NOT IN 效率高</em></p>
<h2 id="Subqueries-in-the-SELECT-Clause"><a href="#Subqueries-in-the-SELECT-Clause" class="headerlink" title="Subqueries in the SELECT Clause"></a>Subqueries in the SELECT Clause</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">SELECT<br>	invoice_id,<br>    invoice_total,<br>    (SELECT AVG(invoice_total)<br>		FROM invoices) AS invoice_average,<br>	invoice_total - (SELECT invoice_average) AS difference<br>FROM invoices<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221202085642576.png" alt="image-20221202085642576"></p>
<h2 id="Subqueries-in-the-FROM-Clause"><a href="#Subqueries-in-the-FROM-Clause" class="headerlink" title="Subqueries in the FROM Clause"></a>Subqueries in the FROM Clause</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">USE sql_invoicing;<br><br>SELECT *<br>FROM (<br>	SELECT<br>		client_id,<br>		name,<br>		(SELECT SUM(invoice_total)<br>			FROM invoices<br>			WHERE client_id = c.client_id) AS total_sales,<br>		(SELECT AVG(invoice_total) FROM invoices) AS average,<br>		(SELECT total_sales - average) AS difference<br>	FROM clients c<br>) AS sales_summary<br>WHERE total_sales IS NOT NULL<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221201200134326.png" alt="image-20221201200134326"></p>
<h1 id="Ⅶ"><a href="#Ⅶ" class="headerlink" title="Ⅶ"></a>Ⅶ</h1><h2 id="Numeric-Functions"><a href="#Numeric-Functions" class="headerlink" title="Numeric Functions"></a>Numeric Functions</h2><table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html#function_abs"><code>ABS()</code></a></td>
<td>返回绝对值</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html#function_acos"><code>ACOS()</code></a></td>
<td>返回反余弦</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html#function_asin"><code>ASIN()</code></a></td>
<td>返回反正弦</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html#function_atan"><code>ATAN()</code></a></td>
<td>返回反正切</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html#function_atan2"><code>ATAN2()</code>,  <code>ATAN()</code></a></td>
<td>返回两个参数的反正切值</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html#function_ceil"><code>CEIL()</code></a></td>
<td>返回不小于参数的最小整数值</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html#function_ceiling"><code>CEILING()</code></a></td>
<td>返回不小于参数的最小整数值</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html#function_conv"><code>CONV()</code></a></td>
<td>在不同数基之间转换数字</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html#function_cos"><code>COS()</code></a></td>
<td>返回余弦</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html#function_cot"><code>COT()</code></a></td>
<td>返回余切</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html#function_crc32"><code>CRC32()</code></a></td>
<td>计算循环冗余校验值</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html#function_degrees"><code>DEGREES()</code></a></td>
<td>将弧度转换为度数</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html#function_exp"><code>EXP()</code></a></td>
<td>提升到的力量</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html#function_floor"><code>FLOOR()</code></a></td>
<td>返回不大于参数的最大整数值</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html#function_ln"><code>LN()</code></a></td>
<td>返回参数的自然对数</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html#function_log"><code>LOG()</code></a></td>
<td>返回第一个参数的自然对数</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html#function_log10"><code>LOG10()</code></a></td>
<td>返回参数的以 10 为底的对数</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html#function_log2"><code>LOG2()</code></a></td>
<td>返回参数的以 2 为底的对数</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html#function_mod"><code>MOD()</code></a></td>
<td>退还余数</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html#function_pi"><code>PI()</code></a></td>
<td>返回 pi 的值</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html#function_pow"><code>POW()</code></a></td>
<td>返回参数的指定幂</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html#function_power"><code>POWER()</code></a></td>
<td>返回参数的指定幂</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html#function_radians"><code>RADIANS()</code></a></td>
<td>返回参数转换为弧度</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html#function_rand"><code>RAND()</code></a></td>
<td>返回一个随机浮点值</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html#function_round"><code>ROUND()</code></a></td>
<td>绕过论点</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html#function_sign"><code>SIGN()</code></a></td>
<td>返回参数的符号</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html#function_sin"><code>SIN()</code></a></td>
<td>返回参数的正弦</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html#function_sqrt"><code>SQRT()</code></a></td>
<td>返回参数的平方根</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html#function_tan"><code>TAN()</code></a></td>
<td>返回参数的正切</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html#function_truncate"><code>TRUNCATE()</code></a></td>
<td>截断到指定的小数位数</td>
</tr>
</tbody></table>
<h2 id="String-Functions"><a href="#String-Functions" class="headerlink" title="String Functions"></a>String Functions</h2><table>
<thead>
<tr>
<th>姓名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_ascii"><code>ASCII()</code></a></td>
<td>返回最左边字符的数值</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_bin"><code>BIN()</code></a></td>
<td>返回包含数字二进制表示的字符串</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_bit-length"><code>BIT_LENGTH()</code></a></td>
<td>以位为单位返回参数的长度</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_char"><code>CHAR()</code></a></td>
<td>返回传递的每个整数的字符</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_char-length"><code>CHAR_LENGTH()</code></a></td>
<td>返回参数中的字符数</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_character-length"><code>CHARACTER_LENGTH()</code></a></td>
<td>CHAR_LENGTH() 的同义词</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_concat"><code>CONCAT()</code></a></td>
<td>返回连接的字符串</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_concat-ws"><code>CONCAT_WS()</code></a></td>
<td>返回带分隔符的连接</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_elt"><code>ELT()</code></a></td>
<td>返回索引号处的字符串</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_export-set"><code>EXPORT_SET()</code></a></td>
<td>返回一个字符串，这样对于值位中设置的每个位，您       得到一个 on string，对于每个未设置的位，你得到一个 off string</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_field"><code>FIELD()</code></a></td>
<td>后续参数中第一个参数的索引（位置）</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_find-in-set"><code>FIND_IN_SET()</code></a></td>
<td>第二个参数中第一个参数的索引（位置）</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_format"><code>FORMAT()</code></a></td>
<td>返回格式化为指定小数位数的数字</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_from-base64"><code>FROM_BASE64()</code></a></td>
<td>解码base64编码的字符串并返回结果</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_hex"><code>HEX()</code></a></td>
<td>十进制或字符串值的十六进制表示</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_insert"><code>INSERT()</code></a></td>
<td>在指定位置插入子串，最多指定个数       人物</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_instr"><code>INSTR()</code></a></td>
<td>返回第一次出现的子字符串的索引</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_lcase"><code>LCASE()</code></a></td>
<td>LOWER() 的同义词</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_left"><code>LEFT()</code></a></td>
<td>返回指定的最左边的字符数</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_length"><code>LENGTH()</code></a></td>
<td>以字节为单位返回字符串的长度</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/string-comparison-functions.html#operator_like"><code>LIKE</code></a></td>
<td>简单模式匹配</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_load-file"><code>LOAD_FILE()</code></a></td>
<td>加载命名文件</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_locate"><code>LOCATE()</code></a></td>
<td>返回子串第一次出现的位置</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_lower"><code>LOWER()</code></a></td>
<td>以小写形式返回参数</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_lpad"><code>LPAD()</code></a></td>
<td>返回字符串参数，左填充指定的字符串</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_ltrim"><code>LTRIM()</code></a></td>
<td>删除前导空格</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_make-set"><code>MAKE_SET()</code></a></td>
<td>返回一组以逗号分隔的字符串，这些字符串具有       位集中的相应位</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/fulltext-search.html#function_match"><code>MATCH()</code></a></td>
<td>执行全文搜索</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_mid"><code>MID()</code></a></td>
<td>返回从指定位置开始的子串</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/string-comparison-functions.html#operator_not-like"><code>NOT LIKE</code></a></td>
<td>简单模式匹配的否定</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/regexp.html#operator_not-regexp"><code>NOT REGEXP</code></a></td>
<td>REGEXP 的否定</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_oct"><code>OCT()</code></a></td>
<td>返回包含数字的八进制表示的字符串</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_octet-length"><code>OCTET_LENGTH()</code></a></td>
<td>LENGTH() 的同义词</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_ord"><code>ORD()</code></a></td>
<td>返回参数最左边字符的字符代码</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_position"><code>POSITION()</code></a></td>
<td>LOCATE() 的同义词</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_quote"><code>QUOTE()</code></a></td>
<td>转义参数以在 SQL 语句中使用</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/regexp.html#operator_regexp"><code>REGEXP</code></a></td>
<td>字符串是否匹配正则表达式</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/regexp.html#function_regexp-instr"><code>REGEXP_INSTR()</code></a></td>
<td>子串匹配正则表达式的起始索引</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/regexp.html#function_regexp-like"><code>REGEXP_LIKE()</code></a></td>
<td>字符串是否匹配正则表达式</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/regexp.html#function_regexp-replace"><code>REGEXP_REPLACE()</code></a></td>
<td>替换匹配正则表达式的子串</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/regexp.html#function_regexp-substr"><code>REGEXP_SUBSTR()</code></a></td>
<td>返回匹配正则表达式的子串</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_repeat"><code>REPEAT()</code></a></td>
<td>重复一个字符串指定的次数</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_replace"><code>REPLACE()</code></a></td>
<td>替换指定字符串的出现</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_reverse"><code>REVERSE()</code></a></td>
<td>反转字符串中的字符</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_right"><code>RIGHT()</code></a></td>
<td>返回指定的最右边的字符数</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/regexp.html#operator_regexp"><code>RLIKE</code></a></td>
<td>字符串是否匹配正则表达式</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_rpad"><code>RPAD()</code></a></td>
<td>追加字符串指定的次数</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_rtrim"><code>RTRIM()</code></a></td>
<td>删除尾随空格</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_soundex"><code>SOUNDEX()</code></a></td>
<td>返回一个 soundex 字符串</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#operator_sounds-like"><code>SOUNDS LIKE</code></a></td>
<td>比较声音</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_space"><code>SPACE()</code></a></td>
<td>返回指定空格数的字符串</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/string-comparison-functions.html#function_strcmp"><code>STRCMP()</code></a></td>
<td>比较两个字符串</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_substr"><code>SUBSTR()</code></a></td>
<td>返回指定的子字符串</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_substring"><code>SUBSTRING()</code></a></td>
<td>返回指定的子字符串</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_substring-index"><code>SUBSTRING_INDEX()</code></a></td>
<td>返回字符串中指定数目之前的子串       分隔符的出现</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_to-base64"><code>TO_BASE64()</code></a></td>
<td>返回转换为 base-64 字符串的参数</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_trim"><code>TRIM()</code></a></td>
<td>删除前导和尾随空格</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_ucase"><code>UCASE()</code></a></td>
<td>UPPER() 的同义词</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_unhex"><code>UNHEX()</code></a></td>
<td>返回包含数字的十六进制表示的字符串</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_upper"><code>UPPER()</code></a></td>
<td>转换为大写</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_weight-string"><code>WEIGHT_STRING()</code></a></td>
<td>返回字符串的权重字符串</td>
</tr>
</tbody></table>
<h2 id="Date-Functions"><a href="#Date-Functions" class="headerlink" title="Date Functions"></a>Date Functions</h2><table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_adddate"><code>ADDDATE()</code></a></td>
<td>将时间值（间隔）添加到日期值</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_addtime"><code>ADDTIME()</code></a></td>
<td>添加时间</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_convert-tz"><code>CONVERT_TZ()</code></a></td>
<td>从一个时区转换为另一个时区</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_curdate"><code>CURDATE()</code></a></td>
<td>返回当前日期</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_current-date"><code>CURRENT_DATE()</code>,  <code>CURRENT_DATE</code></a></td>
<td>CURDATE() 的同义词</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_current-time"><code>CURRENT_TIME()</code>,  <code>CURRENT_TIME</code></a></td>
<td>CURTIME() 的同义词</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_current-timestamp"><code>CURRENT_TIMESTAMP()</code>,  <code>CURRENT_TIMESTAMP</code></a></td>
<td>NOW() 的同义词</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_curtime"><code>CURTIME()</code></a></td>
<td>返回当前时间</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_date"><code>DATE()</code></a></td>
<td>提取日期或日期时间表达式的日期部分</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_date-add"><code>DATE_ADD()</code></a></td>
<td>将时间值（间隔）添加到日期值</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_date-format"><code>DATE_FORMAT()</code></a></td>
<td>按指定格式设置日期</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_date-sub"><code>DATE_SUB()</code></a></td>
<td>从日期中减去时间值（间隔）</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_datediff"><code>DATEDIFF()</code></a></td>
<td>减去两个日期</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_day"><code>DAY()</code></a></td>
<td>DAYOFMONTH() 的同义词</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_dayname"><code>DAYNAME()</code></a></td>
<td>返回工作日的名称</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_dayofmonth"><code>DAYOFMONTH()</code></a></td>
<td>返回月份中的第几天 (0-31)</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_dayofweek"><code>DAYOFWEEK()</code></a></td>
<td>返回参数的工作日索引</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_dayofyear"><code>DAYOFYEAR()</code></a></td>
<td>返回一年中的第几天 (1-366)</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_extract"><code>EXTRACT()</code></a></td>
<td>提取日期的一部分</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_from-days"><code>FROM_DAYS()</code></a></td>
<td>将天数转换为日期</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_from-unixtime"><code>FROM_UNIXTIME()</code></a></td>
<td>将 Unix 时间戳格式化为日期</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_get-format"><code>GET_FORMAT()</code></a></td>
<td>返回日期格式字符串</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_hour"><code>HOUR()</code></a></td>
<td>提取小时</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_last-day"><code>LAST_DAY</code></a></td>
<td>返回参数月份的最后一天</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_localtime"><code>LOCALTIME()</code>,  <code>LOCALTIME</code></a></td>
<td>NOW() 的同义词</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_localtimestamp"><code>LOCALTIMESTAMP</code>,  <code>LOCALTIMESTAMP()</code></a></td>
<td>NOW() 的同义词</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_makedate"><code>MAKEDATE()</code></a></td>
<td>从年份和年份创建日期</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_maketime"><code>MAKETIME()</code></a></td>
<td>从小时、分钟、秒创建时间</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_microsecond"><code>MICROSECOND()</code></a></td>
<td>从参数返回微秒</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_minute"><code>MINUTE()</code></a></td>
<td>从参数中返回分钟</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_month"><code>MONTH()</code></a></td>
<td>从传递的日期返回月份</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_monthname"><code>MONTHNAME()</code></a></td>
<td>返回月份名称</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_now"><code>NOW()</code></a></td>
<td>返回当前日期和时间</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_period-add"><code>PERIOD_ADD()</code></a></td>
<td>在年月中添加句点</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_period-diff"><code>PERIOD_DIFF()</code></a></td>
<td>返回期间之间的月数</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_quarter"><code>QUARTER()</code></a></td>
<td>从日期参数返回季度</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_sec-to-time"><code>SEC_TO_TIME()</code></a></td>
<td>将秒数转换为 ‘hh:mm:ss’ 格式</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_second"><code>SECOND()</code></a></td>
<td>返回第二个 (0-59)</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_str-to-date"><code>STR_TO_DATE()</code></a></td>
<td>将字符串转换为日期</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_subdate"><code>SUBDATE()</code></a></td>
<td>使用三个参数调用时 DATE_SUB() 的同义词</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_subtime"><code>SUBTIME()</code></a></td>
<td>减去次数</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_sysdate"><code>SYSDATE()</code></a></td>
<td>返回函数执行的时间</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_time"><code>TIME()</code></a></td>
<td>提取传递的表达式的时间部分</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_time-format"><code>TIME_FORMAT()</code></a></td>
<td>格式化为时间</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_time-to-sec"><code>TIME_TO_SEC()</code></a></td>
<td>返回转换为秒的参数</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_timediff"><code>TIMEDIFF()</code></a></td>
<td>减去时间</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_timestamp"><code>TIMESTAMP()</code></a></td>
<td>使用单个参数，此函数返回日期或日期时间       表达;  有两个参数，参数之和</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_timestampadd"><code>TIMESTAMPADD()</code></a></td>
<td>向日期时间表达式添加间隔</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_timestampdiff"><code>TIMESTAMPDIFF()</code></a></td>
<td>从日期时间表达式中减去一个间隔</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_to-days"><code>TO_DAYS()</code></a></td>
<td>返回转换为天数的日期参数</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_to-seconds"><code>TO_SECONDS()</code></a></td>
<td>返回转换为秒数的日期或日期时间参数       0年</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_unix-timestamp"><code>UNIX_TIMESTAMP()</code></a></td>
<td>返回一个 Unix 时间戳</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_utc-date"><code>UTC_DATE()</code></a></td>
<td>返回当前 UTC 日期</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_utc-time"><code>UTC_TIME()</code></a></td>
<td>返回当前 UTC 时间</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_utc-timestamp"><code>UTC_TIMESTAMP()</code></a></td>
<td>返回当前 UTC 日期和时间</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_week"><code>WEEK()</code></a></td>
<td>返回周数</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_weekday"><code>WEEKDAY()</code></a></td>
<td>返回工作日索引</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_weekofyear"><code>WEEKOFYEAR()</code></a></td>
<td>返回日期的日历周 (1-53)</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_year"><code>YEAR()</code></a></td>
<td>返回年份</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_yearweek"><code>YEARWEEK()</code></a></td>
<td>返回年份和星期</td>
</tr>
</tbody></table>
<h2 id="Formatting-Dates-and-Times"><a href="#Formatting-Dates-and-Times" class="headerlink" title="Formatting Dates and Times"></a>Formatting Dates and Times</h2><table>
<thead>
<tr>
<th>说明符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>%a</code></td>
<td>缩写的工作日名称                 ( <code>Sun</code>.. <code>Sat</code>)</td>
</tr>
<tr>
<td><code>%b</code></td>
<td>缩写月份名称 ( <code>Jan</code>.. <code>Dec</code>)</td>
</tr>
<tr>
<td><code>%c</code></td>
<td>月份，数字 ( <code>0</code>.. <code>12</code>)</td>
</tr>
<tr>
<td><code>%D</code></td>
<td>带有英文后缀的月份中的第几天 ( <code>0th</code>,                 <code>1st</code>,  <code>2nd</code>,                 <code>3rd</code>, …)</td>
</tr>
<tr>
<td><code>%d</code></td>
<td>一个月中的第几天，数字 ( <code>00</code>.. <code>31</code>)</td>
</tr>
<tr>
<td><code>%e</code></td>
<td>一个月中的第几天，数字 ( <code>0</code>.. <code>31</code>)</td>
</tr>
<tr>
<td><code>%f</code></td>
<td>微秒 ( <code>000000</code>.. <code>999999</code>)</td>
</tr>
<tr>
<td><code>%H</code></td>
<td>小时 （ <code>00</code>.. <code>23</code>)</td>
</tr>
<tr>
<td><code>%h</code></td>
<td>小时 （ <code>01</code>.. <code>12</code>)</td>
</tr>
<tr>
<td><code>%I</code></td>
<td>小时 （ <code>01</code>.. <code>12</code>)</td>
</tr>
<tr>
<td><code>%i</code></td>
<td>分钟，数字 ( <code>00</code>.. <code>59</code>)</td>
</tr>
<tr>
<td><code>%j</code></td>
<td>一年中的第几天 ( <code>001</code>.. <code>366</code>)</td>
</tr>
<tr>
<td><code>%k</code></td>
<td>小时 （ <code>0</code>.. <code>23</code>)</td>
</tr>
<tr>
<td><code>%l</code></td>
<td>小时 （ <code>1</code>.. <code>12</code>)</td>
</tr>
<tr>
<td><code>%M</code></td>
<td>月名 ( <code>January</code>.. <code>December</code>)</td>
</tr>
<tr>
<td><code>%m</code></td>
<td>月份，数字 ( <code>00</code>.. <code>12</code>)</td>
</tr>
<tr>
<td><code>%p</code></td>
<td><code>AM</code>或者 <code>PM</code></td>
</tr>
<tr>
<td><code>%r</code></td>
<td>时间，12 小时（ *<code>hh:mm:ss</code>*其次是                 <code>AM</code>或者 <code>PM</code>)</td>
</tr>
<tr>
<td><code>%S</code></td>
<td>秒 ( <code>00</code>.. <code>59</code>)</td>
</tr>
<tr>
<td><code>%s</code></td>
<td>秒 ( <code>00</code>.. <code>59</code>)</td>
</tr>
<tr>
<td><code>%T</code></td>
<td>时间，24 小时制（ <em><code>hh:mm:ss</code></em>)</td>
</tr>
<tr>
<td><code>%U</code></td>
<td>星期 （ <code>00</code>.. <code>53</code>), 其中周日是                 一周的第一天；                 <a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_week"><code>WEEK()</code></a>模式 0</td>
</tr>
<tr>
<td><code>%u</code></td>
<td>星期 （ <code>00</code>.. <code>53</code>), 其中星期一是                 一周的第一天；                 <a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_week"><code>WEEK()</code></a>方式一</td>
</tr>
<tr>
<td><code>%V</code></td>
<td>星期 （ <code>01</code>.. <code>53</code>), 其中周日是                 一周的第一天；                 <a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_week"><code>WEEK()</code></a>方式二；  与                 <code>%X</code></td>
</tr>
<tr>
<td><code>%v</code></td>
<td>星期 （ <code>01</code>.. <code>53</code>), 其中星期一是                 一周的第一天；                 <a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_week"><code>WEEK()</code></a>模式 3；  与                 <code>%x</code></td>
</tr>
<tr>
<td><code>%W</code></td>
<td>工作日名称 ( <code>Sunday</code>.. <code>Saturday</code>)</td>
</tr>
<tr>
<td><code>%w</code></td>
<td>一周中的天                 ( <code>0</code>&#x3D;星期天.. <code>6</code>&#x3D;星期六）</td>
</tr>
<tr>
<td><code>%X</code></td>
<td>星期日是一周的第一天的那一周的年份，数字，                 四位数;  与 <code>%V</code></td>
</tr>
<tr>
<td><code>%x</code></td>
<td>一周的年份，其中星期一是一周的第一天，数字，                 四位数;  与 <code>%v</code></td>
</tr>
<tr>
<td><code>%Y</code></td>
<td>年份，数字，四位数字</td>
</tr>
<tr>
<td><code>%y</code></td>
<td>年份，数字（两位数）</td>
</tr>
<tr>
<td><code>%%</code></td>
<td>文字 <code>%</code>特点</td>
</tr>
<tr>
<td><code>%*</code>x<code>*</code></td>
<td><em><code>x</code></em>, 对于任何                   “ *<code>x</code>*” 未列出                   以上</td>
</tr>
</tbody></table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">SELECT TIME_FORMAT(NOW(), &#x27;%H:%i %p&#x27;)<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221202102153269.png" alt="image-20221202102153269"></p>
<h2 id="Calculating-Dates-and-Times"><a href="#Calculating-Dates-and-Times" class="headerlink" title="Calculating Dates and Times"></a>Calculating Dates and Times</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">SELECT DATE_ADD(NOW(), INTERVAL 1 YEAR)<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221202102647449.png" alt="image-20221202102647449"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">-- SELECT DATE_ADD(NOW(), INTERVAL -1 YEAR)<br>SELECT DATE_SUB(NOW(), INTERVAL 1 YEAR)<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221202102714372.png" alt="image-20221202102714372"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">SELECT DATEDIFF(&#x27;2019-01-05&#x27;, &#x27;2019-01-01&#x27;)<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221202102942396.png" alt="image-20221202102942396"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">SELECT TIME_TO_SEC(&#x27;09:00&#x27;)<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221202103123832.png" alt="image-20221202103123832"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">SELECT TIME_TO_SEC(&#x27;09:00&#x27;) - TIME_TO_SEC(&#x27;09:02&#x27;)<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221202103257559.png" alt="image-20221202103257559"></p>
<h2 id="The-IFNULL-and-COALESCE-Functions"><a href="#The-IFNULL-and-COALESCE-Functions" class="headerlink" title="The IFNULL and COALESCE Functions"></a>The IFNULL and COALESCE Functions</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">SELECT<br>	order_id,<br>	IFNULL(shipper_id, &#x27;Not assigned&#x27;) AS shipper<br>FROM orders<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221202103730389.png" alt="image-20221202103730389"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">SELECT<br>	order_id,<br>	COALESCE(shipper_id, comments, &#x27;Not assigned&#x27;) AS shipper<br>FROM orders<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221202103933229.png" alt="image-20221202103933229"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">SELECT<br>	order_id,<br>	IFNULL(shipper_id, &#x27;...&#x27;),<br>    COALESCE(shipper_id, comments, &#x27;Not assigned&#x27;) AS shipper<br>FROM orders<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221202104109668.png" alt="image-20221202104109668"></p>
<h2 id="The-IF-Function"><a href="#The-IF-Function" class="headerlink" title="The IF Function"></a>The IF Function</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">SELECT<br>	order_id,<br>	order_date,<br>    IF(<br>		YEAR(order_date) = YEAR(NOW()),<br>        &#x27;Active&#x27;,<br>        &#x27;Archived&#x27;) AS category<br>FROM orders<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221202104820370.png" alt="image-20221202104820370"></p>
<h2 id="The-CASE-Operator"><a href="#The-CASE-Operator" class="headerlink" title="The CASE Operator"></a>The CASE Operator</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">SELECT<br>	order_id,<br>    CASE<br>		WHEN YEAR(order_date) = YEAR(NOW()) THEN &#x27;Active&#x27;<br>        WHEN YEAR(order_date) = YEAR(NOW()) - 1 THEN &#x27;Last Year&#x27;<br>        WHEN YEAR(order_date) &lt; YEAR(NOW()) - 1 THEN &#x27;Archived&#x27;<br>        ELSE &#x27;Future&#x27;<br>	END AS category<br>FROM orders<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20221202105738795.png" alt="image-20221202105738795"></p>
]]></content>
      <categories>
        <category>WEBbackend</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows本地MySQL安装</title>
    <url>/2022/09/11/WebBackend/Java/DBMS/MySql/Windows%E6%9C%AC%E5%9C%B0MySQL%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="Windows本地MySQL安装"><a href="#Windows本地MySQL安装" class="headerlink" title="Windows本地MySQL安装"></a>Windows本地MySQL安装</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><a href="https://downloads.mysql.com/archives/community/">下载地址</a></p>
<p>选择MySQL版本，以及计算机系统</p>
<p>这里选择5.7.24，比较稳定</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220911200302681.png" alt="image-20220911200302681"></p>
<h2 id="安装-解压"><a href="#安装-解压" class="headerlink" title="安装(解压)"></a>安装(解压)</h2><p>解压到安装目录</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220911200540524.png" alt="image-20220911200540524"></p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="添加环境配置"><a href="#添加环境配置" class="headerlink" title="添加环境配置"></a>添加环境配置</h3><p>复制你MySQL的路径，变量名填MYSQL_HOME</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220911194052552.png" alt="image-20220911194052552"></p>
<p>在系统变量，Path里添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">%MYSQL_HOME%\bin<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220911194115687.png" alt="image-20220911194115687"></p>
<h3 id="新建配置文件"><a href="#新建配置文件" class="headerlink" title="新建配置文件"></a>新建配置文件</h3><p>在\mysql-5.7.24-winx64\bin 目录下新建my.ini文本文件</p>
<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220911193825969.png" alt="image-20220911193825969"></p>
<p>右键记事本打开，内容如下：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[mysqld]</span><br><span class="hljs-attr">default-character-set</span>=utf8<br><br><span class="hljs-section">[mysqld]</span><br><span class="hljs-attr">character-set-server</span>=utf8<br><span class="hljs-attr">default-storage-engine</span>=INNODB<br><span class="hljs-attr">sql_mode</span>=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220911193927177.png" alt="image-20220911193927177"></p>
<h3 id="初始化MySQl"><a href="#初始化MySQl" class="headerlink" title="初始化MySQl"></a>初始化MySQl</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">mysqld --initialize-insecure<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220911193621195.png" alt="image-20220911193621195"></p>
<h3 id="注册MySQL服务"><a href="#注册MySQL服务" class="headerlink" title="注册MySQL服务"></a>注册MySQL服务</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">mysqld -install<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220911193635151.png" alt="image-20220911193635151"></p>
<h3 id="启动MySQL服务"><a href="#启动MySQL服务" class="headerlink" title="启动MySQL服务"></a>启动MySQL服务</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">net start mysql<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220911193646805.png" alt="image-20220911193646805"></p>
<p>停止mysql服务：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">net stop mysql<br></code></pre></td></tr></table></figure>

<h3 id="修改账户默认密码"><a href="#修改账户默认密码" class="headerlink" title="修改账户默认密码"></a>修改账户默认密码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">mysqladmin -u root password 1234<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220911194932794.png" alt="image-20220911194932794"></p>
<h3 id="登录MySQL"><a href="#登录MySQL" class="headerlink" title="登录MySQL"></a>登录MySQL</h3><p>出现下午左下角为<code>mysql&gt;</code>，则登录成功。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">mysql -uroot -p1234<br></code></pre></td></tr></table></figure>

<p><img src="https://wrxinyue.oss-cn-hongkong.aliyuncs.com/img/image-20220911195448641.png" alt="image-20220911195448641"></p>
<p><strong>到这里你就可以开始你的MySQL之旅了！</strong></p>
<p>退出mysql：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">exit<br>quit<br></code></pre></td></tr></table></figure>

<p>登录参数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">mysql -u用户名 -p密码 -h要连接的mysql服务器的ip地址(默认127.0.0.1) -P端口号(默认3306)<br></code></pre></td></tr></table></figure>

<h2 id="卸载MySQL"><a href="#卸载MySQL" class="headerlink" title="卸载MySQL"></a>卸载MySQL</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">net stop mysql<br></code></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">mysqld -remove mysql<br></code></pre></td></tr></table></figure>

<p>最后删除MySQL目录以及相关的环境变量</p>
]]></content>
      <categories>
        <category>WEBbackend</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
</search>
